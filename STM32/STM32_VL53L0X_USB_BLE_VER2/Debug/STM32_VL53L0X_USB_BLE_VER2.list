
STM32_VL53L0X_USB_BLE_VER2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014560  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000884  080146a0  080146a0  000246a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014f24  08014f24  00024f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014f2c  08014f2c  00024f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014f30  08014f30  00024f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000004bc  20000004  08014f34  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200004c0  080153f0  000304c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003c  2000055c  08015489  0003055c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000598  080154c5  00030598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000084  200005ac  080154d6  000305ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001d2c  20000630  0801555a  00030630  2**2
                  ALLOC
 12 ._user_heap_stack 00001004  2000235c  0801555a  0003235c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030630  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 15 MB_MEM1       000001bb  20030028  20030028  00040000  2**2
                  ALLOC
 16 MB_MEM2       00000883  200301e4  200301e4  00040000  2**2
                  ALLOC
 17 .debug_info   000410eb  00000000  00000000  00030660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00007eeb  00000000  00000000  0007174b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003450  00000000  00000000  00079638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000030c8  00000000  00000000  0007ca88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00031c64  00000000  00000000  0007fb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0003c4ab  00000000  00000000  000b17b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00104ecd  00000000  00000000  000edc5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  001f2b2c  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000e044  00000000  00000000  001f2b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000630 	.word	0x20000630
 800015c:	00000000 	.word	0x00000000
 8000160:	08014688 	.word	0x08014688

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000634 	.word	0x20000634
 800017c:	08014688 	.word	0x08014688

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <APPD_EnableCPU2+0x34>)
 800053c:	1d3c      	adds	r4, r7, #4
 800053e:	461d      	mov	r5, r3
 8000540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000544:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000548:	c403      	stmia	r4!, {r0, r1}
 800054a:	8022      	strh	r2, [r4, #0]
 800054c:	3402      	adds	r4, #2
 800054e:	0c13      	lsrs	r3, r2, #16
 8000550:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000552:	f011 fc85 	bl	8011e60 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	4618      	mov	r0, r3
 800055a:	f010 ff20 	bl	801139e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800055e:	bf00      	nop
}
 8000560:	3720      	adds	r7, #32
 8000562:	46bd      	mov	sp, r7
 8000564:	bdb0      	pop	{r4, r5, r7, pc}
 8000566:	bf00      	nop
 8000568:	080146a0 	.word	0x080146a0

0800056c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <LL_C2_PWR_SetPowerMode+0x28>)
 8000576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800057a:	f023 0207 	bic.w	r2, r3, #7
 800057e:	4905      	ldr	r1, [pc, #20]	; (8000594 <LL_C2_PWR_SetPowerMode+0x28>)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4313      	orrs	r3, r2
 8000584:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	58000400 	.word	0x58000400

08000598 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <LL_EXTI_EnableIT_32_63+0x24>)
 80005a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80005a6:	4905      	ldr	r1, [pc, #20]	; (80005bc <LL_EXTI_EnableIT_32_63+0x24>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	58000800 	.word	0x58000800

080005c0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80005c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005cc:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80005ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80005d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80005da:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	021b      	lsls	r3, r3, #8
 80005e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005e6:	4313      	orrs	r3, r2
 80005e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	cafecafe 	.word	0xcafecafe

080005fc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800060e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4313      	orrs	r3, r2
 8000616:	608b      	str	r3, [r1, #8]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800062c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000630:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800064a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800064e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000652:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800065a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800066c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000674:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800067c:	d101      	bne.n	8000682 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800067e:	2301      	movs	r3, #1
 8000680:	e000      	b.n	8000684 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000682:	2300      	movs	r3, #0
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800069a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80006a2:	d101      	bne.n	80006a8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80006a4:	2301      	movs	r3, #1
 80006a6:	e000      	b.n	80006aa <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80006bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80006cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4013      	ands	r3, r2
 80006d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006d8:	68fb      	ldr	r3, [r7, #12]
}
 80006da:	bf00      	nop
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
	...

080006e8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <LL_DBGMCU_GetRevisionID+0x18>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	0c1b      	lsrs	r3, r3, #16
 80006f2:	b29b      	uxth	r3, r3
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e0042000 	.word	0xe0042000

08000704 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	685a      	ldr	r2, [r3, #4]
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	041b      	lsls	r3, r3, #16
 8000716:	431a      	orrs	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	605a      	str	r2, [r3, #4]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	685a      	ldr	r2, [r3, #4]
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	431a      	orrs	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	605a      	str	r2, [r3, #4]
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr

0800074a <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800074a:	b480      	push	{r7}
 800074c:	b083      	sub	sp, #12
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
 8000752:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	695a      	ldr	r2, [r3, #20]
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	041b      	lsls	r3, r3, #16
 800075c:	431a      	orrs	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	615a      	str	r2, [r3, #20]
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800076e:	b480      	push	{r7}
 8000770:	b083      	sub	sp, #12
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	695a      	ldr	r2, [r3, #20]
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	431a      	orrs	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	615a      	str	r2, [r3, #20]
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	609a      	str	r2, [r3, #8]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	683a      	ldr	r2, [r7, #0]
 80007ba:	619a      	str	r2, [r3, #24]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	22ff      	movs	r2, #255	; 0xff
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	22ca      	movs	r2, #202	; 0xca
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2253      	movs	r2, #83	; 0x53
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000802:	b480      	push	{r7}
 8000804:	b083      	sub	sp, #12
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
 800080a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	f023 0207 	bic.w	r2, r3, #7
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	431a      	orrs	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	609a      	str	r2, [r3, #8]
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <MX_APPE_Config+0x18>)
 800082e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000832:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000834:	f000 f824 	bl	8000880 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000838:	f000 f864 	bl	8000904 <Config_HSE>

  return;
 800083c:	bf00      	nop
}
 800083e:	bd80      	pop	{r7, pc}
 8000840:	58004000 	.word	0x58004000

08000844 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000848:	f000 f870 	bl	800092c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800084c:	f000 f888 	bl	8000960 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000850:	4903      	ldr	r1, [pc, #12]	; (8000860 <MX_APPE_Init+0x1c>)
 8000852:	2000      	movs	r0, #0
 8000854:	f000 f9ba 	bl	8000bcc <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000858:	f000 f890 	bl	800097c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 800085c:	bf00      	nop
}
 800085e:	bd80      	pop	{r7, pc}
 8000860:	200006e8 	.word	0x200006e8

08000864 <Init_Smps>:

void Init_Smps(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000868:	bf00      	nop
}
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <Init_Exti>:

void Init_Exti(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000876:	2050      	movs	r0, #80	; 0x50
 8000878:	f7ff fe8e 	bl	8000598 <LL_EXTI_EnableIT_32_63>

  return;
 800087c:	bf00      	nop
}
 800087e:	bd80      	pop	{r7, pc}

08000880 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000884:	f000 f804 	bl	8000890 <Reset_BackupDomain>

  Reset_IPCC();
 8000888:	f000 f81a 	bl	80008c0 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800088c:	bf00      	nop
}
 800088e:	bd80      	pop	{r7, pc}

08000890 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000894:	f7ff fee8 	bl	8000668 <LL_RCC_IsActiveFlag_PINRST>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d00d      	beq.n	80008ba <Reset_BackupDomain+0x2a>
 800089e:	f7ff fef6 	bl	800068e <LL_RCC_IsActiveFlag_SFTRST>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d108      	bne.n	80008ba <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80008a8:	f003 ffd0 	bl	800484c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80008ac:	f003 ffce 	bl	800484c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80008b0:	f7ff feb8 	bl	8000624 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80008b4:	f7ff fec7 	bl	8000646 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
}
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80008c4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c8:	f7ff fef4 	bl	80006b4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80008cc:	213f      	movs	r1, #63	; 0x3f
 80008ce:	480c      	ldr	r0, [pc, #48]	; (8000900 <Reset_IPCC+0x40>)
 80008d0:	f7ff ff5e 	bl	8000790 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80008d4:	213f      	movs	r1, #63	; 0x3f
 80008d6:	480a      	ldr	r0, [pc, #40]	; (8000900 <Reset_IPCC+0x40>)
 80008d8:	f7ff ff68 	bl	80007ac <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80008dc:	213f      	movs	r1, #63	; 0x3f
 80008de:	4808      	ldr	r0, [pc, #32]	; (8000900 <Reset_IPCC+0x40>)
 80008e0:	f7ff ff10 	bl	8000704 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80008e4:	213f      	movs	r1, #63	; 0x3f
 80008e6:	4806      	ldr	r0, [pc, #24]	; (8000900 <Reset_IPCC+0x40>)
 80008e8:	f7ff ff2f 	bl	800074a <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80008ec:	213f      	movs	r1, #63	; 0x3f
 80008ee:	4804      	ldr	r0, [pc, #16]	; (8000900 <Reset_IPCC+0x40>)
 80008f0:	f7ff ff1a 	bl	8000728 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80008f4:	213f      	movs	r1, #63	; 0x3f
 80008f6:	4802      	ldr	r0, [pc, #8]	; (8000900 <Reset_IPCC+0x40>)
 80008f8:	f7ff ff39 	bl	800076e <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80008fc:	bf00      	nop
}
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	58000c00 	.word	0x58000c00

08000904 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800090a:	2000      	movs	r0, #0
 800090c:	f011 fb34 	bl	8011f78 <OTP_Read>
 8000910:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d005      	beq.n	8000924 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	799b      	ldrb	r3, [r3, #6]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fe4f 	bl	80005c0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000922:	bf00      	nop
 8000924:	bf00      	nop
}
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <System_Init>:

static void System_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  Init_Smps();
 8000930:	f7ff ff98 	bl	8000864 <Init_Smps>

  Init_Exti();
 8000934:	f7ff ff9d 	bl	8000872 <Init_Exti>

  Init_Rtc();
 8000938:	f000 f802 	bl	8000940 <Init_Rtc>

  return;
 800093c:	bf00      	nop
}
 800093e:	bd80      	pop	{r7, pc}

08000940 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <Init_Rtc+0x1c>)
 8000946:	f7ff ff4c 	bl	80007e2 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800094a:	2100      	movs	r1, #0
 800094c:	4803      	ldr	r0, [pc, #12]	; (800095c <Init_Rtc+0x1c>)
 800094e:	f7ff ff58 	bl	8000802 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000952:	4802      	ldr	r0, [pc, #8]	; (800095c <Init_Rtc+0x1c>)
 8000954:	f7ff ff38 	bl	80007c8 <LL_RTC_EnableWriteProtection>

  return;
 8000958:	bf00      	nop
}
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40002800 	.word	0x40002800

08000960 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000964:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000968:	f7ff fe48 	bl	80005fc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800096c:	f012 ff66 	bl	801383c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000970:	2004      	movs	r0, #4
 8000972:	f7ff fdfb 	bl	800056c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000976:	bf00      	nop
}
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000982:	f011 f8b7 	bl	8011af4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000986:	4a11      	ldr	r2, [pc, #68]	; (80009cc <appe_Tl_Init+0x50>)
 8000988:	2100      	movs	r1, #0
 800098a:	2004      	movs	r0, #4
 800098c:	f013 f894 	bl	8013ab8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <appe_Tl_Init+0x54>)
 8000992:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <appe_Tl_Init+0x58>)
 8000996:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000998:	463b      	mov	r3, r7
 800099a:	4619      	mov	r1, r3
 800099c:	480e      	ldr	r0, [pc, #56]	; (80009d8 <appe_Tl_Init+0x5c>)
 800099e:	f010 ff6f 	bl	8011880 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <appe_Tl_Init+0x60>)
 80009a4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <appe_Tl_Init+0x64>)
 80009a8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <appe_Tl_Init+0x68>)
 80009ac:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80009ae:	f240 533c 	movw	r3, #1340	; 0x53c
 80009b2:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80009b4:	f107 0308 	add.w	r3, r7, #8
 80009b8:	4618      	mov	r0, r3
 80009ba:	f011 f9dd 	bl	8011d78 <TL_MM_Init>

  TL_Enable();
 80009be:	f011 f893 	bl	8011ae8 <TL_Enable>

  return;
 80009c2:	bf00      	nop
}
 80009c4:	3720      	adds	r7, #32
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	080118b9 	.word	0x080118b9
 80009d0:	20030734 	.word	0x20030734
 80009d4:	080009e9 	.word	0x080009e9
 80009d8:	08000a01 	.word	0x08000a01
 80009dc:	2003094c 	.word	0x2003094c
 80009e0:	20030840 	.word	0x20030840
 80009e4:	200301f8 	.word	0x200301f8

080009e8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80009f2:	bf00      	nop
}
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
	...

08000a00 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	330b      	adds	r3, #11
 8000a0e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000a1a:	2b07      	cmp	r3, #7
 8000a1c:	d81f      	bhi.n	8000a5e <APPE_SysUserEvtRx+0x5e>
 8000a1e:	a201      	add	r2, pc, #4	; (adr r2, 8000a24 <APPE_SysUserEvtRx+0x24>)
 8000a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a24:	08000a45 	.word	0x08000a45
 8000a28:	08000a57 	.word	0x08000a57
 8000a2c:	08000a5f 	.word	0x08000a5f
 8000a30:	08000a5f 	.word	0x08000a5f
 8000a34:	08000a5f 	.word	0x08000a5f
 8000a38:	08000a5f 	.word	0x08000a5f
 8000a3c:	08000a5f 	.word	0x08000a5f
 8000a40:	08000a5f 	.word	0x08000a5f
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f010 fcd5 	bl	80113f8 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f000 f81b 	bl	8000a8a <APPE_SysEvtReadyProcessing>
    break;
 8000a54:	e004      	b.n	8000a60 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f000 f806 	bl	8000a68 <APPE_SysEvtError>
    break;
 8000a5c:	e000      	b.n	8000a60 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000a5e:	bf00      	nop
  }

  return;
 8000a60:	bf00      	nop
}
 8000a62:	3720      	adds	r7, #32
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	330b      	adds	r3, #11
 8000a76:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	3302      	adds	r3, #2
 8000a7c:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000a7e:	bf00      	nop
}
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b08a      	sub	sp, #40	; 0x28
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	330b      	adds	r3, #11
 8000aaa:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000aac:	6a3b      	ldr	r3, [r7, #32]
 8000aae:	3302      	adds	r3, #2
 8000ab0:	61fb      	str	r3, [r7, #28]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d117      	bne.n	8000aea <APPE_SysEvtReadyProcessing+0x60>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000aba:	f7ff fd3b 	bl	8000534 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000abe:	230d      	movs	r3, #13
 8000ac0:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000ac2:	237f      	movs	r3, #127	; 0x7f
 8000ac4:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000ac6:	f7ff fe0f 	bl	80006e8 <LL_DBGMCU_GetRevisionID>
 8000aca:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = RevisionID;
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f010 fc78 	bl	80113cc <SHCI_C2_Config>

    APP_BLE_Init();
 8000adc:	f011 fb56 	bl	801218c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f012 febc 	bl	8013860 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000ae8:	e007      	b.n	8000afa <APPE_SysEvtReadyProcessing+0x70>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d103      	bne.n	8000afa <APPE_SysEvtReadyProcessing+0x70>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]
  return;
 8000af8:	bf00      	nop
 8000afa:	bf00      	nop
}
 8000afc:	3728      	adds	r7, #40	; 0x28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000b06:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0a:	f012 fed9 	bl	80138c0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000b16:	bf00      	nop
}
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2e:	f012 fec7 	bl	80138c0 <UTIL_SEQ_Run>

  return;
 8000b32:	bf00      	nop
}
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000b42:	2100      	movs	r1, #0
 8000b44:	2004      	movs	r0, #4
 8000b46:	f012 ffd9 	bl	8013afc <UTIL_SEQ_SetTask>
  return;
 8000b4a:	bf00      	nop
}
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000b5a:	2002      	movs	r0, #2
 8000b5c:	f013 f83a 	bl	8013bd4 <UTIL_SEQ_SetEvt>
  return;
 8000b60:	bf00      	nop
}
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000b70:	2002      	movs	r0, #2
 8000b72:	f013 f84f 	bl	8013c14 <UTIL_SEQ_WaitEvt>
  return;
 8000b76:	bf00      	nop
}
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <LL_EXTI_EnableIT_0_31>:
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <LL_EXTI_EnableIT_0_31+0x24>)
 8000b8a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000b8e:	4905      	ldr	r1, [pc, #20]	; (8000ba4 <LL_EXTI_EnableIT_0_31+0x24>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	58000800 	.word	0x58000800

08000ba8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4904      	ldr	r1, [pc, #16]	; (8000bc8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	600b      	str	r3, [r1, #0]

}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	58000800 	.word	0x58000800

08000bcc <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000bd8:	4a64      	ldr	r2, [pc, #400]	; (8000d6c <HW_TS_Init+0x1a0>)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000bde:	4b63      	ldr	r3, [pc, #396]	; (8000d6c <HW_TS_Init+0x1a0>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	22ca      	movs	r2, #202	; 0xca
 8000be6:	625a      	str	r2, [r3, #36]	; 0x24
 8000be8:	4b60      	ldr	r3, [pc, #384]	; (8000d6c <HW_TS_Init+0x1a0>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2253      	movs	r2, #83	; 0x53
 8000bf0:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000bf2:	4b5f      	ldr	r3, [pc, #380]	; (8000d70 <HW_TS_Init+0x1a4>)
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	4a5e      	ldr	r2, [pc, #376]	; (8000d70 <HW_TS_Init+0x1a4>)
 8000bf8:	f043 0320 	orr.w	r3, r3, #32
 8000bfc:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000bfe:	4b5c      	ldr	r3, [pc, #368]	; (8000d70 <HW_TS_Init+0x1a4>)
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	f003 0307 	and.w	r3, r3, #7
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	f1c3 0304 	rsb	r3, r3, #4
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	4b58      	ldr	r3, [pc, #352]	; (8000d74 <HW_TS_Init+0x1a8>)
 8000c12:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000c14:	4b56      	ldr	r3, [pc, #344]	; (8000d70 <HW_TS_Init+0x1a4>)
 8000c16:	691b      	ldr	r3, [r3, #16]
 8000c18:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000c1c:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000c20:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	fa92 f2a2 	rbit	r2, r2
 8000c28:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	d101      	bne.n	8000c38 <HW_TS_Init+0x6c>
  {
    return 32U;
 8000c34:	2220      	movs	r2, #32
 8000c36:	e003      	b.n	8000c40 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8000c38:	697a      	ldr	r2, [r7, #20]
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	40d3      	lsrs	r3, r2
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	3301      	adds	r3, #1
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	4b4b      	ldr	r3, [pc, #300]	; (8000d78 <HW_TS_Init+0x1ac>)
 8000c4a:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000c4c:	4b48      	ldr	r3, [pc, #288]	; (8000d70 <HW_TS_Init+0x1a4>)
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	3301      	adds	r3, #1
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	4b47      	ldr	r3, [pc, #284]	; (8000d7c <HW_TS_Init+0x1b0>)
 8000c5e:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000c60:	4b46      	ldr	r3, [pc, #280]	; (8000d7c <HW_TS_Init+0x1b0>)
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	3b01      	subs	r3, #1
 8000c66:	4a44      	ldr	r2, [pc, #272]	; (8000d78 <HW_TS_Init+0x1ac>)
 8000c68:	7812      	ldrb	r2, [r2, #0]
 8000c6a:	fb02 f303 	mul.w	r3, r2, r3
 8000c6e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000c72:	4a40      	ldr	r2, [pc, #256]	; (8000d74 <HW_TS_Init+0x1a8>)
 8000c74:	7812      	ldrb	r2, [r2, #0]
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d904      	bls.n	8000c8e <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000c84:	4b3e      	ldr	r3, [pc, #248]	; (8000d80 <HW_TS_Init+0x1b4>)
 8000c86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c8a:	801a      	strh	r2, [r3, #0]
 8000c8c:	e003      	b.n	8000c96 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	4b3b      	ldr	r3, [pc, #236]	; (8000d80 <HW_TS_Init+0x1b4>)
 8000c94:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000c96:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000c9a:	f7ff ff85 	bl	8000ba8 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000c9e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000ca2:	f7ff ff6d 	bl	8000b80 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d143      	bne.n	8000d34 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000cac:	4b35      	ldr	r3, [pc, #212]	; (8000d84 <HW_TS_Init+0x1b8>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000cb2:	4b35      	ldr	r3, [pc, #212]	; (8000d88 <HW_TS_Init+0x1bc>)
 8000cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb8:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	77fb      	strb	r3, [r7, #31]
 8000cbe:	e00c      	b.n	8000cda <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000cc0:	7ffa      	ldrb	r2, [r7, #31]
 8000cc2:	4932      	ldr	r1, [pc, #200]	; (8000d8c <HW_TS_Init+0x1c0>)
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4413      	add	r3, r2
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	440b      	add	r3, r1
 8000cce:	330c      	adds	r3, #12
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000cd4:	7ffb      	ldrb	r3, [r7, #31]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	77fb      	strb	r3, [r7, #31]
 8000cda:	7ffb      	ldrb	r3, [r7, #31]
 8000cdc:	2b05      	cmp	r3, #5
 8000cde:	d9ef      	bls.n	8000cc0 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000ce0:	4b2b      	ldr	r3, [pc, #172]	; (8000d90 <HW_TS_Init+0x1c4>)
 8000ce2:	2206      	movs	r2, #6
 8000ce4:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000ce6:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <HW_TS_Init+0x1a0>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <HW_TS_Init+0x1a0>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cf8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <HW_TS_Init+0x1a0>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <HW_TS_Init+0x1a0>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000d0e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000d10:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <HW_TS_Init+0x1c8>)
 8000d12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d16:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f001 f87c 	bl	8001e16 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000d1e:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <HW_TS_Init+0x1a0>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	689a      	ldr	r2, [r3, #8]
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <HW_TS_Init+0x1a0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	e00a      	b.n	8000d4a <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000d34:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <HW_TS_Init+0x1a0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d002      	beq.n	8000d4a <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f001 f858 	bl	8001dfa <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HW_TS_Init+0x1a0>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	22ff      	movs	r2, #255	; 0xff
 8000d52:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000d54:	2200      	movs	r2, #0
 8000d56:	2103      	movs	r1, #3
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f001 f81a 	bl	8001d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000d5e:	2003      	movs	r0, #3
 8000d60:	f001 f831 	bl	8001dc6 <HAL_NVIC_EnableIRQ>

  return;
 8000d64:	bf00      	nop
}
 8000d66:	3720      	adds	r7, #32
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	2000064c 	.word	0x2000064c
 8000d70:	40002800 	.word	0x40002800
 8000d74:	20000650 	.word	0x20000650
 8000d78:	20000651 	.word	0x20000651
 8000d7c:	20000652 	.word	0x20000652
 8000d80:	20000654 	.word	0x20000654
 8000d84:	20000558 	.word	0x20000558
 8000d88:	20000554 	.word	0x20000554
 8000d8c:	200004c0 	.word	0x200004c0
 8000d90:	20000550 	.word	0x20000550
 8000d94:	58000800 	.word	0x58000800

08000d98 <LL_RCC_LSE_SetDriveCapability>:
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000da8:	f023 0218 	bic.w	r2, r3, #24
 8000dac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <LL_AHB2_GRP1_EnableClock>:
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000de0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4013      	ands	r3, r2
 8000de6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000de8:	68fb      	ldr	r3, [r7, #12]
}
 8000dea:	bf00      	nop
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	683a      	ldr	r2, [r7, #0]
 8000e06:	3220      	adds	r2, #32
 8000e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0c:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <LL_HSEM_1StepLock+0x2c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d001      	beq.n	8000e16 <LL_HSEM_1StepLock+0x1e>
 8000e12:	2301      	movs	r3, #1
 8000e14:	e000      	b.n	8000e18 <LL_HSEM_1StepLock+0x20>
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	80000400 	.word	0x80000400

08000e28 <print_pal_error>:
VL53L0X_Dev_t		dev;
VL53L0X_DEV			Dev = &dev;
char ary[50];
int sensor = 0;
uint16_t stop = 10000;
void print_pal_error(VL53L0X_Error Status){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
    char buf[VL53L0X_MAX_STRING_LENGTH];
    VL53L0X_GetPalErrorString(Status, buf);
 8000e32:	f107 0208 	add.w	r2, r7, #8
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f008 fcc1 	bl	80097c4 <VL53L0X_GetPalErrorString>
//    sprintf(ary,"API Status: %i : %s\n", Status, buf);
//    HAL_UART_Transmit(&huart1, ary, strlen((char*)ary), 0xFFFF);
}
 8000e42:	bf00      	nop
 8000e44:	3728      	adds	r7, #40	; 0x28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <rangingTest>:

VL53L0X_Error rangingTest(VL53L0X_Dev_t *pMyDevice)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08e      	sub	sp, #56	; 0x38
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint32_t refSpadCount;
    uint8_t isApertureSpads;
    uint8_t VhvSettings;
    uint8_t PhaseCal;

    if(Status == VL53L0X_ERROR_NONE)
 8000e5a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10a      	bne.n	8000e78 <rangingTest+0x2c>
    {
//        sprintf (ary,"Call of VL53L0X_StaticInit\n");
//        HAL_UART_Transmit(&huart1, ary, strlen((char*)ary), 0xFFFF);
        Status = VL53L0X_StaticInit(pMyDevice); // Device Initialization
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f008 fcd8 	bl	8009818 <VL53L0X_StaticInit>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        print_pal_error(Status);
 8000e6e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ffd8 	bl	8000e28 <print_pal_error>
    }

    if(Status == VL53L0X_ERROR_NONE)
 8000e78:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d10f      	bne.n	8000ea0 <rangingTest+0x54>
    {
//        sprintf (ary,"Call of VL53L0X_PerformRefCalibration\n");
//        HAL_UART_Transmit(&huart1, ary, strlen((char*)ary), 0xFFFF);
        Status = VL53L0X_PerformRefCalibration(pMyDevice,
 8000e80:	f107 020d 	add.w	r2, r7, #13
 8000e84:	f107 030e 	add.w	r3, r7, #14
 8000e88:	4619      	mov	r1, r3
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f009 fbb6 	bl	800a5fc <VL53L0X_PerformRefCalibration>
 8000e90:	4603      	mov	r3, r0
 8000e92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        		&VhvSettings, &PhaseCal); // Device Initialization
        print_pal_error(Status);
 8000e96:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ffc4 	bl	8000e28 <print_pal_error>
    }

    if(Status == VL53L0X_ERROR_NONE)
 8000ea0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10f      	bne.n	8000ec8 <rangingTest+0x7c>
    {
//        printf ("Call of VL53L0X_PerformRefSpadManagement\n");
        Status = VL53L0X_PerformRefSpadManagement(pMyDevice,
 8000ea8:	f107 020f 	add.w	r2, r7, #15
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f00a f834 	bl	800af20 <VL53L0X_PerformRefSpadManagement>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        		&refSpadCount, &isApertureSpads); // Device Initialization
//        printf ("refSpadCount = %d, isApertureSpads = %d\n", refSpadCount, isApertureSpads);
        print_pal_error(Status);
 8000ebe:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ffb0 	bl	8000e28 <print_pal_error>
    }

    if(Status == VL53L0X_ERROR_NONE)
 8000ec8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d10b      	bne.n	8000ee8 <rangingTest+0x9c>
    {

        // no need to do this when we use VL53L0X_PerformSingleRangingMeasurement
//        printf ("Call of VL53L0X_SetDeviceMode\n");
        Status = VL53L0X_SetDeviceMode(pMyDevice, VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f008 feb2 	bl	8009c3c <VL53L0X_SetDeviceMode>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        print_pal_error(Status);
 8000ede:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ffa0 	bl	8000e28 <print_pal_error>
    }

    // Enable/Disable Sigma and Signal check
    if (Status == VL53L0X_ERROR_NONE) {
 8000ee8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d107      	bne.n	8000f00 <rangingTest+0xb4>
        Status = VL53L0X_SetLimitCheckEnable(pMyDevice,
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f009 f905 	bl	800a104 <VL53L0X_SetLimitCheckEnable>
 8000efa:	4603      	mov	r3, r0
 8000efc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        		VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
    }
    if (Status == VL53L0X_ERROR_NONE) {
 8000f00:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d107      	bne.n	8000f18 <rangingTest+0xcc>
        Status = VL53L0X_SetLimitCheckEnable(pMyDevice,
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f009 f8f9 	bl	800a104 <VL53L0X_SetLimitCheckEnable>
 8000f12:	4603      	mov	r3, r0
 8000f14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        		VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8000f18:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d107      	bne.n	8000f30 <rangingTest+0xe4>
        Status = VL53L0X_SetLimitCheckEnable(pMyDevice,
 8000f20:	2201      	movs	r2, #1
 8000f22:	2103      	movs	r1, #3
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f009 f8ed 	bl	800a104 <VL53L0X_SetLimitCheckEnable>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        		VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 1);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8000f30:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d108      	bne.n	8000f4a <rangingTest+0xfe>
        Status = VL53L0X_SetLimitCheckValue(pMyDevice,
 8000f38:	f640 02d4 	movw	r2, #2260	; 0x8d4
 8000f3c:	2103      	movs	r1, #3
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f009 f990 	bl	800a264 <VL53L0X_SetLimitCheckValue>
 8000f44:	4603      	mov	r3, r0
 8000f46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    /*
     *  Step  4 : Test ranging mode
     */

    if(Status == VL53L0X_ERROR_NONE)
 8000f4a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d136      	bne.n	8000fc0 <rangingTest+0x174>
    {
//        for(i=0;i<10;i++){
//            printf ("Call of VL53L0X_PerformSingleRangingMeasurement\n");
            Status = VL53L0X_PerformSingleRangingMeasurement(pMyDevice,
 8000f52:	f107 0318 	add.w	r3, r7, #24
 8000f56:	4619      	mov	r1, r3
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f009 fdf1 	bl	800ab40 <VL53L0X_PerformSingleRangingMeasurement>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            		&RangingMeasurementData);

            print_pal_error(Status);
 8000f64:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff5d 	bl	8000e28 <print_pal_error>
            print_range_status(&RangingMeasurementData);
 8000f6e:	f107 0318 	add.w	r3, r7, #24
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f836 	bl	8000fe4 <print_range_status>

            VL53L0X_GetLimitCheckCurrent(pMyDevice,
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	2103      	movs	r1, #3
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f009 fa5f 	bl	800a444 <VL53L0X_GetLimitCheckCurrent>
//            sprintf(ary,"RANGE IGNORE THRESHOLD: %f\n\n", (float)LimitCheckCurrent/65536.0);
//            HAL_UART_Transmit(&huart1, ary, strlen((char*)ary), 0xFFFF);

//            if (Status != VL53L0X_ERROR_NONE) break;

            sprintf(ary,"distance: %icm\n\r",RangingMeasurementData.RangeMilliMeter/1000);
 8000f86:	8c3b      	ldrh	r3, [r7, #32]
 8000f88:	4a10      	ldr	r2, [pc, #64]	; (8000fcc <rangingTest+0x180>)
 8000f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8e:	099b      	lsrs	r3, r3, #6
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	461a      	mov	r2, r3
 8000f94:	490e      	ldr	r1, [pc, #56]	; (8000fd0 <rangingTest+0x184>)
 8000f96:	480f      	ldr	r0, [pc, #60]	; (8000fd4 <rangingTest+0x188>)
 8000f98:	f013 f996 	bl	80142c8 <siprintf>
            HAL_UART_Transmit(&huart1, ary, strlen((char*)ary), 10);
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <rangingTest+0x188>)
 8000f9e:	f7ff f8ef 	bl	8000180 <strlen>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	230a      	movs	r3, #10
 8000fa8:	490a      	ldr	r1, [pc, #40]	; (8000fd4 <rangingTest+0x188>)
 8000faa:	480b      	ldr	r0, [pc, #44]	; (8000fd8 <rangingTest+0x18c>)
 8000fac:	f005 fb88 	bl	80066c0 <HAL_UART_Transmit>
                        	if(RangingMeasurementData.RangeMilliMeter < stop){
 8000fb0:	8c3a      	ldrh	r2, [r7, #32]
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <rangingTest+0x190>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d202      	bcs.n	8000fc0 <rangingTest+0x174>
                        		sensor = 1;
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <rangingTest+0x194>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	601a      	str	r2, [r3, #0]
                        }
    }
    return Status;
 8000fc0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3738      	adds	r7, #56	; 0x38
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	10624dd3 	.word	0x10624dd3
 8000fd0:	080146bc 	.word	0x080146bc
 8000fd4:	2000079c 	.word	0x2000079c
 8000fd8:	2000070c 	.word	0x2000070c
 8000fdc:	20000004 	.word	0x20000004
 8000fe0:	200007d0 	.word	0x200007d0

08000fe4 <print_range_status>:
void print_range_status(VL53L0X_RangingMeasurementData_t* pRangingMeasurementData){ //범위 ?��?�� 문자?�� ?��출함?��
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08c      	sub	sp, #48	; 0x30
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

    /*
     * New Range Status: data is valid when pRangingMeasurementData->RangeStatus = 0
     */

    RangeStatus = pRangingMeasurementData->RangeStatus;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	7e1b      	ldrb	r3, [r3, #24]
 8000ff0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    VL53L0X_GetRangeStatusString(RangeStatus, buf);
 8000ff4:	f107 020c 	add.w	r2, r7, #12
 8000ff8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f008 fbcb 	bl	800979a <VL53L0X_GetRangeStatusString>
//    sprintf(ary,"Range Status: %i : %s\n", RangeStatus, buf);
//    HAL_UART_Transmit(&huart1, ary, strlen((char*)ary), 0xFFFF);

}
 8001004:	bf00      	nop
 8001006:	3730      	adds	r7, #48	; 0x30
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b0de      	sub	sp, #376	; 0x178
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t emergency[] = "p";
 8001012:	2370      	movs	r3, #112	; 0x70
 8001014:	f8a7 3168 	strh.w	r3, [r7, #360]	; 0x168
	uint8_t safy[] = "y";
 8001018:	2379      	movs	r3, #121	; 0x79
 800101a:	f8a7 3164 	strh.w	r3, [r7, #356]	; 0x164
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800101e:	2300      	movs	r3, #0
 8001020:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
			VL53L0X_Dev_t MyDevice;
			VL53L0X_Dev_t *pMyDevice = &MyDevice;
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
			int32_t init_done = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001030:	f000 fd12 	bl	8001a58 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001034:	f7ff fbf8 	bl	8000828 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001038:	f000 f8d8 	bl	80011ec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800103c:	f000 f94a 	bl	80012d4 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8001040:	f000 f9ae 	bl	80013a0 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001044:	f000 fa3e 	bl	80014c4 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8001048:	f011 fea6 	bl	8012d98 <MX_USB_Device_Init>
  MX_USART1_UART_Init();
 800104c:	f000 f9ee 	bl	800142c <MX_USART1_UART_Init>
  MX_RF_Init();
 8001050:	f000 f9ba 	bl	80013c8 <MX_RF_Init>
  MX_RTC_Init();
 8001054:	f000 f9c0 	bl	80013d8 <MX_RTC_Init>
  MX_I2C1_Init();
 8001058:	f000 f962 	bl	8001320 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  pMyDevice->I2cDevAddr      = 0x52;
 800105c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001060:	2252      	movs	r2, #82	; 0x52
 8001062:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
     pMyDevice->comms_type      =  1;
 8001066:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800106a:	2201      	movs	r2, #1
 800106c:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
     pMyDevice->comms_speed_khz =  400;
 8001070:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001074:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001078:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e
         if (Status != VL53L0X_ERROR_NONE) {
 800107c:	f997 3177 	ldrsb.w	r3, [r7, #375]	; 0x177
 8001080:	2b00      	cmp	r3, #0
 8001082:	d005      	beq.n	8001090 <main+0x84>
             Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001084:	23ec      	movs	r3, #236	; 0xec
 8001086:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
             init_done = 1;
 800108a:	2301      	movs	r3, #1
 800108c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
//         HAL_UART_Transmit(&huart1, ary, strlen((char*)ary), 0xFFFF);
         }
   #ifdef VL53L0X_LOG_ENABLE
       VL53L0X_trace_config("test.log", TRACE_MODULE_ALL, TRACE_LEVEL_ALL, TRACE_FUNCTION_ALL);
   #endif
       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001090:	2200      	movs	r2, #0
 8001092:	2120      	movs	r1, #32
 8001094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001098:	f001 f83c 	bl	8002114 <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	2140      	movs	r1, #64	; 0x40
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a4:	f001 f836 	bl	8002114 <HAL_GPIO_WritePin>
//       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80010a8:	f7ff fbcc 	bl	8000844 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80010ac:	f7ff fd29 	bl	8000b02 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    if(Status == VL53L0X_ERROR_NONE)
 80010b0:	f997 3177 	ldrsb.w	r3, [r7, #375]	; 0x177
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1f9      	bne.n	80010ac <main+0xa0>
   	  	      {
   	  		  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80010b8:	2201      	movs	r2, #1
 80010ba:	2120      	movs	r1, #32
 80010bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c0:	f001 f828 	bl	8002114 <HAL_GPIO_WritePin>
   	  		  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2140      	movs	r1, #64	; 0x40
 80010c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010cc:	f001 f822 	bl	8002114 <HAL_GPIO_WritePin>
   	  		  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2180      	movs	r1, #128	; 0x80
 80010d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d8:	f001 f81c 	bl	8002114 <HAL_GPIO_WritePin>
   	  		  	  sprintf(ary,"left sensor ");
 80010dc:	493d      	ldr	r1, [pc, #244]	; (80011d4 <main+0x1c8>)
 80010de:	483e      	ldr	r0, [pc, #248]	; (80011d8 <main+0x1cc>)
 80010e0:	f013 f8f2 	bl	80142c8 <siprintf>
   	  		  	  HAL_UART_Transmit(&huart1, ary, strlen((char *)ary), 10);
 80010e4:	483c      	ldr	r0, [pc, #240]	; (80011d8 <main+0x1cc>)
 80010e6:	f7ff f84b 	bl	8000180 <strlen>
 80010ea:	4603      	mov	r3, r0
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	230a      	movs	r3, #10
 80010f0:	4939      	ldr	r1, [pc, #228]	; (80011d8 <main+0x1cc>)
 80010f2:	483a      	ldr	r0, [pc, #232]	; (80011dc <main+0x1d0>)
 80010f4:	f005 fae4 	bl	80066c0 <HAL_UART_Transmit>
   	  	          Status = rangingTest(pMyDevice);
 80010f8:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 80010fc:	f7ff fea6 	bl	8000e4c <rangingTest>
 8001100:	4603      	mov	r3, r0
 8001102:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177

   	  	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2120      	movs	r1, #32
 800110a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110e:	f001 f801 	bl	8002114 <HAL_GPIO_WritePin>
   	  	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8001112:	2201      	movs	r2, #1
 8001114:	2140      	movs	r1, #64	; 0x40
 8001116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111a:	f000 fffb 	bl	8002114 <HAL_GPIO_WritePin>
   	  	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2180      	movs	r1, #128	; 0x80
 8001122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001126:	f000 fff5 	bl	8002114 <HAL_GPIO_WritePin>
   	  	          sprintf(ary,"center sensor ");
 800112a:	492d      	ldr	r1, [pc, #180]	; (80011e0 <main+0x1d4>)
 800112c:	482a      	ldr	r0, [pc, #168]	; (80011d8 <main+0x1cc>)
 800112e:	f013 f8cb 	bl	80142c8 <siprintf>
   	  	          HAL_UART_Transmit(&huart1, ary, strlen((char *)ary), 10);
 8001132:	4829      	ldr	r0, [pc, #164]	; (80011d8 <main+0x1cc>)
 8001134:	f7ff f824 	bl	8000180 <strlen>
 8001138:	4603      	mov	r3, r0
 800113a:	b29a      	uxth	r2, r3
 800113c:	230a      	movs	r3, #10
 800113e:	4926      	ldr	r1, [pc, #152]	; (80011d8 <main+0x1cc>)
 8001140:	4826      	ldr	r0, [pc, #152]	; (80011dc <main+0x1d0>)
 8001142:	f005 fabd 	bl	80066c0 <HAL_UART_Transmit>
   	  	          Status = rangingTest(pMyDevice);
 8001146:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 800114a:	f7ff fe7f 	bl	8000e4c <rangingTest>
 800114e:	4603      	mov	r3, r0
 8001150:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177

   	  	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	2120      	movs	r1, #32
 8001158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115c:	f000 ffda 	bl	8002114 <HAL_GPIO_WritePin>
   	  	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001160:	2200      	movs	r2, #0
 8001162:	2140      	movs	r1, #64	; 0x40
 8001164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001168:	f000 ffd4 	bl	8002114 <HAL_GPIO_WritePin>
   	  	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 800116c:	2201      	movs	r2, #1
 800116e:	2180      	movs	r1, #128	; 0x80
 8001170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001174:	f000 ffce 	bl	8002114 <HAL_GPIO_WritePin>
   	  			  sprintf(ary,"right sensor ");
 8001178:	491a      	ldr	r1, [pc, #104]	; (80011e4 <main+0x1d8>)
 800117a:	4817      	ldr	r0, [pc, #92]	; (80011d8 <main+0x1cc>)
 800117c:	f013 f8a4 	bl	80142c8 <siprintf>
   	  			  HAL_UART_Transmit(&huart1, ary, strlen((char *)ary), 10);
 8001180:	4815      	ldr	r0, [pc, #84]	; (80011d8 <main+0x1cc>)
 8001182:	f7fe fffd 	bl	8000180 <strlen>
 8001186:	4603      	mov	r3, r0
 8001188:	b29a      	uxth	r2, r3
 800118a:	230a      	movs	r3, #10
 800118c:	4912      	ldr	r1, [pc, #72]	; (80011d8 <main+0x1cc>)
 800118e:	4813      	ldr	r0, [pc, #76]	; (80011dc <main+0x1d0>)
 8001190:	f005 fa96 	bl	80066c0 <HAL_UART_Transmit>
   	  			  Status = rangingTest(pMyDevice);
 8001194:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8001198:	f7ff fe58 	bl	8000e4c <rangingTest>
 800119c:	4603      	mov	r3, r0
 800119e:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177

   	  			  if(sensor == 1){
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <main+0x1dc>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d106      	bne.n	80011b8 <main+0x1ac>
   	  				CDC_Transmit_FS(emergency, sizeof(emergency));
 80011aa:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80011ae:	2102      	movs	r1, #2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f011 feaf 	bl	8012f14 <CDC_Transmit_FS>
 80011b6:	e009      	b.n	80011cc <main+0x1c0>
   	  			  }
   	  			  else if(sensor == 0){
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <main+0x1dc>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d105      	bne.n	80011cc <main+0x1c0>
   	  				CDC_Transmit_FS(safy, sizeof(safy));
 80011c0:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80011c4:	2102      	movs	r1, #2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f011 fea4 	bl	8012f14 <CDC_Transmit_FS>
   	  			  }
   	  			  sensor = 0;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <main+0x1dc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
    MX_APPE_Process();
 80011d2:	e76b      	b.n	80010ac <main+0xa0>
 80011d4:	080146d0 	.word	0x080146d0
 80011d8:	2000079c 	.word	0x2000079c
 80011dc:	2000070c 	.word	0x2000070c
 80011e0:	080146e0 	.word	0x080146e0
 80011e4:	080146f0 	.word	0x080146f0
 80011e8:	200007d0 	.word	0x200007d0

080011ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b09a      	sub	sp, #104	; 0x68
 80011f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f2:	f107 0320 	add.w	r3, r7, #32
 80011f6:	2248      	movs	r2, #72	; 0x48
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f012 fdd8 	bl	8013db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]
 800120e:	615a      	str	r2, [r3, #20]
 8001210:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001212:	f003 fb1b 	bl	800484c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001216:	2000      	movs	r0, #0
 8001218:	f7ff fdbe 	bl	8000d98 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800121c:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <SystemClock_Config+0xe4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001224:	4a2a      	ldr	r2, [pc, #168]	; (80012d0 <SystemClock_Config+0xe4>)
 8001226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b28      	ldr	r3, [pc, #160]	; (80012d0 <SystemClock_Config+0xe4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001238:	2367      	movs	r3, #103	; 0x67
 800123a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800123c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001242:	2301      	movs	r3, #1
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001246:	f44f 7380 	mov.w	r3, #256	; 0x100
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800124c:	2301      	movs	r3, #1
 800124e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001250:	2301      	movs	r3, #1
 8001252:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001254:	2340      	movs	r3, #64	; 0x40
 8001256:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001258:	2300      	movs	r3, #0
 800125a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800125c:	2360      	movs	r3, #96	; 0x60
 800125e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001260:	2302      	movs	r3, #2
 8001262:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001264:	2301      	movs	r3, #1
 8001266:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 800126c:	2318      	movs	r3, #24
 800126e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001270:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001274:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8001276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800127a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800127c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001280:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	4618      	mov	r0, r3
 8001288:	f003 fe84 	bl	8004f94 <HAL_RCC_OscConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001292:	f000 f973 	bl	800157c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001296:	236f      	movs	r3, #111	; 0x6f
 8001298:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129a:	2303      	movs	r3, #3
 800129c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2101      	movs	r1, #1
 80012b6:	4618      	mov	r0, r3
 80012b8:	f004 f9e0 	bl	800567c <HAL_RCC_ClockConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80012c2:	f000 f95b 	bl	800157c <Error_Handler>
  }
}
 80012c6:	bf00      	nop
 80012c8:	3768      	adds	r7, #104	; 0x68
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	58000400 	.word	0x58000400

080012d4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b094      	sub	sp, #80	; 0x50
 80012d8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012da:	463b      	mov	r3, r7
 80012dc:	2250      	movs	r2, #80	; 0x50
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f012 fd65 	bl	8013db0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80012e6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80012ea:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80012ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012f0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80012f2:	2300      	movs	r3, #0
 80012f4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012fa:	463b      	mov	r3, r7
 80012fc:	4618      	mov	r0, r3
 80012fe:	f004 fdfa 	bl	8005ef6 <HAL_RCCEx_PeriphCLKConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001308:	f000 f938 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  LL_HSEM_1StepLock( HSEM, 5 );
 800130c:	2105      	movs	r1, #5
 800130e:	4803      	ldr	r0, [pc, #12]	; (800131c <PeriphCommonClock_Config+0x48>)
 8001310:	f7ff fd72 	bl	8000df8 <LL_HSEM_1StepLock>
  /* USER CODE END Smps */
}
 8001314:	bf00      	nop
 8001316:	3750      	adds	r7, #80	; 0x50
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	58001400 	.word	0x58001400

08001320 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <MX_I2C1_Init+0x74>)
 8001326:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <MX_I2C1_Init+0x78>)
 8001328:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MX_I2C1_Init+0x74>)
 800132c:	4a1b      	ldr	r2, [pc, #108]	; (800139c <MX_I2C1_Init+0x7c>)
 800132e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001330:	4b18      	ldr	r3, [pc, #96]	; (8001394 <MX_I2C1_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <MX_I2C1_Init+0x74>)
 8001338:	2201      	movs	r2, #1
 800133a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MX_I2C1_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_I2C1_Init+0x74>)
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <MX_I2C1_Init+0x74>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_I2C1_Init+0x74>)
 8001350:	2200      	movs	r2, #0
 8001352:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_I2C1_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800135a:	480e      	ldr	r0, [pc, #56]	; (8001394 <MX_I2C1_Init+0x74>)
 800135c:	f000 ff16 	bl	800218c <HAL_I2C_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001366:	f000 f909 	bl	800157c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800136a:	2100      	movs	r1, #0
 800136c:	4809      	ldr	r0, [pc, #36]	; (8001394 <MX_I2C1_Init+0x74>)
 800136e:	f001 fbfd 	bl	8002b6c <HAL_I2CEx_ConfigAnalogFilter>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001378:	f000 f900 	bl	800157c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800137c:	2100      	movs	r1, #0
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_I2C1_Init+0x74>)
 8001380:	f001 fc3f 	bl	8002c02 <HAL_I2CEx_ConfigDigitalFilter>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800138a:	f000 f8f7 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000658 	.word	0x20000658
 8001398:	40005400 	.word	0x40005400
 800139c:	00300f38 	.word	0x00300f38

080013a0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <MX_IPCC_Init+0x20>)
 80013a6:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <MX_IPCC_Init+0x24>)
 80013a8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_IPCC_Init+0x20>)
 80013ac:	f001 fc76 	bl	8002c9c <HAL_IPCC_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80013b6:	f000 f8e1 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200006ac 	.word	0x200006ac
 80013c4:	58000c00 	.word	0x58000c00

080013c8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_RTC_Init+0x4c>)
 80013de:	4a12      	ldr	r2, [pc, #72]	; (8001428 <MX_RTC_Init+0x50>)
 80013e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <MX_RTC_Init+0x4c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80013e8:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_RTC_Init+0x4c>)
 80013ea:	220f      	movs	r2, #15
 80013ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <MX_RTC_Init+0x4c>)
 80013f0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80013f4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <MX_RTC_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_RTC_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <MX_RTC_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <MX_RTC_Init+0x4c>)
 800140a:	2200      	movs	r2, #0
 800140c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_RTC_Init+0x4c>)
 8001410:	f004 fff8 	bl	8006404 <HAL_RTC_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800141a:	f000 f8af 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200006e8 	.word	0x200006e8
 8001428:	40002800 	.word	0x40002800

0800142c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001430:	4b22      	ldr	r3, [pc, #136]	; (80014bc <MX_USART1_UART_Init+0x90>)
 8001432:	4a23      	ldr	r2, [pc, #140]	; (80014c0 <MX_USART1_UART_Init+0x94>)
 8001434:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001436:	4b21      	ldr	r3, [pc, #132]	; (80014bc <MX_USART1_UART_Init+0x90>)
 8001438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800143c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <MX_USART1_UART_Init+0x90>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <MX_USART1_UART_Init+0x90>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800144a:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <MX_USART1_UART_Init+0x90>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <MX_USART1_UART_Init+0x90>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b19      	ldr	r3, [pc, #100]	; (80014bc <MX_USART1_UART_Init+0x90>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b17      	ldr	r3, [pc, #92]	; (80014bc <MX_USART1_UART_Init+0x90>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001462:	4b16      	ldr	r3, [pc, #88]	; (80014bc <MX_USART1_UART_Init+0x90>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <MX_USART1_UART_Init+0x90>)
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800146e:	4b13      	ldr	r3, [pc, #76]	; (80014bc <MX_USART1_UART_Init+0x90>)
 8001470:	2200      	movs	r2, #0
 8001472:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001474:	4811      	ldr	r0, [pc, #68]	; (80014bc <MX_USART1_UART_Init+0x90>)
 8001476:	f005 f8d3 	bl	8006620 <HAL_UART_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001480:	f000 f87c 	bl	800157c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001484:	2100      	movs	r1, #0
 8001486:	480d      	ldr	r0, [pc, #52]	; (80014bc <MX_USART1_UART_Init+0x90>)
 8001488:	f005 fdc4 	bl	8007014 <HAL_UARTEx_SetTxFifoThreshold>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001492:	f000 f873 	bl	800157c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001496:	2100      	movs	r1, #0
 8001498:	4808      	ldr	r0, [pc, #32]	; (80014bc <MX_USART1_UART_Init+0x90>)
 800149a:	f005 fdf9 	bl	8007090 <HAL_UARTEx_SetRxFifoThreshold>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80014a4:	f000 f86a 	bl	800157c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80014a8:	4804      	ldr	r0, [pc, #16]	; (80014bc <MX_USART1_UART_Init+0x90>)
 80014aa:	f005 fd7a 	bl	8006fa2 <HAL_UARTEx_DisableFifoMode>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80014b4:	f000 f862 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	2000070c 	.word	0x2000070c
 80014c0:	40013800 	.word	0x40013800

080014c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d8:	2004      	movs	r0, #4
 80014da:	f7ff fc73 	bl	8000dc4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	2002      	movs	r0, #2
 80014e0:	f7ff fc70 	bl	8000dc4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e4:	2001      	movs	r0, #1
 80014e6:	f7ff fc6d 	bl	8000dc4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ea:	2008      	movs	r0, #8
 80014ec:	f7ff fc6a 	bl	8000dc4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	21e0      	movs	r1, #224	; 0xe0
 80014f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f8:	f000 fe0c 	bl	8002114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2123      	movs	r1, #35	; 0x23
 8001500:	481b      	ldr	r0, [pc, #108]	; (8001570 <MX_GPIO_Init+0xac>)
 8001502:	f000 fe07 	bl	8002114 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001506:	23e0      	movs	r3, #224	; 0xe0
 8001508:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	4619      	mov	r1, r3
 800151a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151e:	f000 fc89 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001522:	2310      	movs	r3, #16
 8001524:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800152a:	2301      	movs	r3, #1
 800152c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	4619      	mov	r1, r3
 8001532:	4810      	ldr	r0, [pc, #64]	; (8001574 <MX_GPIO_Init+0xb0>)
 8001534:	f000 fc7e 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001538:	2323      	movs	r3, #35	; 0x23
 800153a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2300      	movs	r3, #0
 8001546:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	4619      	mov	r1, r3
 800154c:	4808      	ldr	r0, [pc, #32]	; (8001570 <MX_GPIO_Init+0xac>)
 800154e:	f000 fc71 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001552:	2303      	movs	r3, #3
 8001554:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	4619      	mov	r1, r3
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_GPIO_Init+0xb4>)
 8001564:	f000 fc66 	bl	8001e34 <HAL_GPIO_Init>

}
 8001568:	bf00      	nop
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	48000400 	.word	0x48000400
 8001574:	48000800 	.word	0x48000800
 8001578:	48000c00 	.word	0x48000c00

0800157c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001580:	b672      	cpsid	i
}
 8001582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001584:	e7fe      	b.n	8001584 <Error_Handler+0x8>

08001586 <LL_RCC_EnableRTC>:
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800158a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001592:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800159a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <LL_AHB2_GRP1_EnableClock>:
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4313      	orrs	r3, r2
 80015be:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4013      	ands	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015cc:	68fb      	ldr	r3, [r7, #12]
}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <LL_AHB3_GRP1_EnableClock>:
{
 80015da:	b480      	push	{r7}
 80015dc:	b085      	sub	sp, #20
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80015e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80015f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4013      	ands	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015fe:	68fb      	ldr	r3, [r7, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001618:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800161a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4313      	orrs	r3, r2
 8001622:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001628:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4013      	ands	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001630:	68fb      	ldr	r3, [r7, #12]
}
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800163e:	b480      	push	{r7}
 8001640:	b085      	sub	sp, #20
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800164a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800164c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4313      	orrs	r3, r2
 8001654:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800165a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4013      	ands	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001662:	68fb      	ldr	r3, [r7, #12]
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001674:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001678:	f7ff ffaf 	bl	80015da <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	2100      	movs	r1, #0
 8001680:	202e      	movs	r0, #46	; 0x2e
 8001682:	f000 fb86 	bl	8001d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001686:	202e      	movs	r0, #46	; 0x2e
 8001688:	f000 fb9d 	bl	8001dc6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b09c      	sub	sp, #112	; 0x70
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	2250      	movs	r2, #80	; 0x50
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f012 fb7d 	bl	8013db0 <memset>
  if(hi2c->Instance==I2C1)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a17      	ldr	r2, [pc, #92]	; (8001718 <HAL_I2C_MspInit+0x88>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d126      	bne.n	800170e <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016c0:	2304      	movs	r3, #4
 80016c2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016c4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	4618      	mov	r0, r3
 80016d0:	f004 fc11 	bl	8005ef6 <HAL_RCCEx_PeriphCLKConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80016da:	f7ff ff4f 	bl	800157c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016de:	2002      	movs	r0, #2
 80016e0:	f7ff ff62 	bl	80015a8 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016e8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ea:	2312      	movs	r3, #18
 80016ec:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016f6:	2304      	movs	r3, #4
 80016f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016fe:	4619      	mov	r1, r3
 8001700:	4806      	ldr	r0, [pc, #24]	; (800171c <HAL_I2C_MspInit+0x8c>)
 8001702:	f000 fb97 	bl	8001e34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001706:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800170a:	f7ff ff7f 	bl	800160c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800170e:	bf00      	nop
 8001710:	3770      	adds	r7, #112	; 0x70
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40005400 	.word	0x40005400
 800171c:	48000400 	.word	0x48000400

08001720 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0d      	ldr	r2, [pc, #52]	; (8001764 <HAL_IPCC_MspInit+0x44>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d113      	bne.n	800175a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001732:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001736:	f7ff ff50 	bl	80015da <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	202c      	movs	r0, #44	; 0x2c
 8001740:	f000 fb27 	bl	8001d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001744:	202c      	movs	r0, #44	; 0x2c
 8001746:	f000 fb3e 	bl	8001dc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	202d      	movs	r0, #45	; 0x2d
 8001750:	f000 fb1f 	bl	8001d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001754:	202d      	movs	r0, #45	; 0x2d
 8001756:	f000 fb36 	bl	8001dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	58000c00 	.word	0x58000c00

08001768 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b096      	sub	sp, #88	; 0x58
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001770:	f107 0308 	add.w	r3, r7, #8
 8001774:	2250      	movs	r2, #80	; 0x50
 8001776:	2100      	movs	r1, #0
 8001778:	4618      	mov	r0, r3
 800177a:	f012 fb19 	bl	8013db0 <memset>
  if(hrtc->Instance==RTC)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a0e      	ldr	r2, [pc, #56]	; (80017bc <HAL_RTC_MspInit+0x54>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d115      	bne.n	80017b4 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001788:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800178c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800178e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001792:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001794:	f107 0308 	add.w	r3, r7, #8
 8001798:	4618      	mov	r0, r3
 800179a:	f004 fbac 	bl	8005ef6 <HAL_RCCEx_PeriphCLKConfig>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80017a4:	f7ff feea 	bl	800157c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017a8:	f7ff feed 	bl	8001586 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80017ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80017b0:	f7ff ff2c 	bl	800160c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80017b4:	bf00      	nop
 80017b6:	3758      	adds	r7, #88	; 0x58
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40002800 	.word	0x40002800

080017c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b09c      	sub	sp, #112	; 0x70
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	2250      	movs	r2, #80	; 0x50
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f012 fae5 	bl	8013db0 <memset>
  if(huart->Instance==USART1)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a16      	ldr	r2, [pc, #88]	; (8001844 <HAL_UART_MspInit+0x84>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d124      	bne.n	800183a <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017f0:	2301      	movs	r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017f4:	2300      	movs	r3, #0
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	4618      	mov	r0, r3
 80017fe:	f004 fb7a 	bl	8005ef6 <HAL_RCCEx_PeriphCLKConfig>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001808:	f7ff feb8 	bl	800157c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800180c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001810:	f7ff ff15 	bl	800163e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001814:	2002      	movs	r0, #2
 8001816:	f7ff fec7 	bl	80015a8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800181a:	23c0      	movs	r3, #192	; 0xc0
 800181c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001822:	2301      	movs	r3, #1
 8001824:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800182a:	2307      	movs	r3, #7
 800182c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001832:	4619      	mov	r1, r3
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <HAL_UART_MspInit+0x88>)
 8001836:	f000 fafd 	bl	8001e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800183a:	bf00      	nop
 800183c:	3770      	adds	r7, #112	; 0x70
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40013800 	.word	0x40013800
 8001848:	48000400 	.word	0x48000400

0800184c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <NMI_Handler+0x4>

08001852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <HardFault_Handler+0x4>

08001858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <MemManage_Handler+0x4>

0800185e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001862:	e7fe      	b.n	8001862 <BusFault_Handler+0x4>

08001864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <UsageFault_Handler+0x4>

0800186a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001898:	f000 f938 	bl	8001b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <USB_LP_IRQHandler+0x10>)
 80018a6:	f001 fb8c 	bl	8002fc2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20001d8c 	.word	0x20001d8c

080018b4 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80018b8:	f011 f92a 	bl	8012b10 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}

080018c0 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80018c4:	f011 f95c 	bl	8012b80 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}

080018cc <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80018d0:	f000 fc38 	bl	8002144 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e0:	4a14      	ldr	r2, [pc, #80]	; (8001934 <_sbrk+0x5c>)
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <_sbrk+0x60>)
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ec:	4b13      	ldr	r3, [pc, #76]	; (800193c <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d102      	bne.n	80018fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <_sbrk+0x64>)
 80018f6:	4a12      	ldr	r2, [pc, #72]	; (8001940 <_sbrk+0x68>)
 80018f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	429a      	cmp	r2, r3
 8001906:	d207      	bcs.n	8001918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001908:	f012 fa18 	bl	8013d3c <__errno>
 800190c:	4603      	mov	r3, r0
 800190e:	220c      	movs	r2, #12
 8001910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	e009      	b.n	800192c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191e:	4b07      	ldr	r3, [pc, #28]	; (800193c <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	4a05      	ldr	r2, [pc, #20]	; (800193c <_sbrk+0x64>)
 8001928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800192a:	68fb      	ldr	r3, [r7, #12]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20030000 	.word	0x20030000
 8001938:	00000800 	.word	0x00000800
 800193c:	200007d4 	.word	0x200007d4
 8001940:	20002360 	.word	0x20002360

08001944 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001948:	4b24      	ldr	r3, [pc, #144]	; (80019dc <SystemInit+0x98>)
 800194a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800194e:	4a23      	ldr	r2, [pc, #140]	; (80019dc <SystemInit+0x98>)
 8001950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001970:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800197c:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <SystemInit+0x9c>)
 800197e:	4013      	ands	r3, r2
 8001980:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800198e:	f023 0305 	bic.w	r3, r3, #5
 8001992:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800199a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800199e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019a2:	f023 0301 	bic.w	r3, r3, #1
 80019a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80019aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ae:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <SystemInit+0xa0>)
 80019b0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80019b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b6:	4a0b      	ldr	r2, [pc, #44]	; (80019e4 <SystemInit+0xa0>)
 80019b8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ce:	2200      	movs	r2, #0
 80019d0:	619a      	str	r2, [r3, #24]
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00
 80019e0:	faf6fefb 	.word	0xfaf6fefb
 80019e4:	22041000 	.word	0x22041000

080019e8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80019e8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ea:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ec:	3304      	adds	r3, #4

080019ee <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ee:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80019f2:	d3f9      	bcc.n	80019e8 <CopyDataInit>
  bx lr
 80019f4:	4770      	bx	lr

080019f6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80019f6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80019f8:	3004      	adds	r0, #4

080019fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80019fa:	4288      	cmp	r0, r1
  bcc FillZerobss
 80019fc:	d3fb      	bcc.n	80019f6 <FillZerobss>
  bx lr
 80019fe:	4770      	bx	lr

08001a00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a00:	480c      	ldr	r0, [pc, #48]	; (8001a34 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001a02:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a04:	f7ff ff9e 	bl	8001944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001a08:	480b      	ldr	r0, [pc, #44]	; (8001a38 <LoopForever+0x8>)
 8001a0a:	490c      	ldr	r1, [pc, #48]	; (8001a3c <LoopForever+0xc>)
 8001a0c:	4a0c      	ldr	r2, [pc, #48]	; (8001a40 <LoopForever+0x10>)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f7ff ffed 	bl	80019ee <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001a14:	480b      	ldr	r0, [pc, #44]	; (8001a44 <LoopForever+0x14>)
 8001a16:	490c      	ldr	r1, [pc, #48]	; (8001a48 <LoopForever+0x18>)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f7ff ffee 	bl	80019fa <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001a1e:	480b      	ldr	r0, [pc, #44]	; (8001a4c <LoopForever+0x1c>)
 8001a20:	490b      	ldr	r1, [pc, #44]	; (8001a50 <LoopForever+0x20>)
 8001a22:	2300      	movs	r3, #0
 8001a24:	f7ff ffe9 	bl	80019fa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a28:	f012 f98e 	bl	8013d48 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001a2c:	f7ff faee 	bl	800100c <main>

08001a30 <LoopForever>:

LoopForever:
  b LoopForever
 8001a30:	e7fe      	b.n	8001a30 <LoopForever>
 8001a32:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001a34:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001a38:	20000004 	.word	0x20000004
 8001a3c:	200004c0 	.word	0x200004c0
 8001a40:	08014f34 	.word	0x08014f34
  INIT_BSS _sbss, _ebss
 8001a44:	20000630 	.word	0x20000630
 8001a48:	2000235c 	.word	0x2000235c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001a4c:	200301e4 	.word	0x200301e4
 8001a50:	20030a67 	.word	0x20030a67

08001a54 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a54:	e7fe      	b.n	8001a54 <ADC1_IRQHandler>
	...

08001a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <HAL_Init+0x3c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a0b      	ldr	r2, [pc, #44]	; (8001a94 <HAL_Init+0x3c>)
 8001a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a6e:	2003      	movs	r0, #3
 8001a70:	f000 f984 	bl	8001d7c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a74:	2000      	movs	r0, #0
 8001a76:	f000 f80f 	bl	8001a98 <HAL_InitTick>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d002      	beq.n	8001a86 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	71fb      	strb	r3, [r7, #7]
 8001a84:	e001      	b.n	8001a8a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a86:	f7ff fdf3 	bl	8001670 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	58004000 	.word	0x58004000

08001a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001aa4:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <HAL_InitTick+0x6c>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d024      	beq.n	8001af6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001aac:	f003 ff92 	bl	80059d4 <HAL_RCC_GetHCLKFreq>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <HAL_InitTick+0x6c>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001abc:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f000 f98c 	bl	8001de2 <HAL_SYSTICK_Config>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10f      	bne.n	8001af0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b0f      	cmp	r3, #15
 8001ad4:	d809      	bhi.n	8001aea <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	f04f 30ff 	mov.w	r0, #4294967295
 8001ade:	f000 f958 	bl	8001d92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ae2:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <HAL_InitTick+0x70>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	e007      	b.n	8001afa <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	73fb      	strb	r3, [r7, #15]
 8001aee:	e004      	b.n	8001afa <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
 8001af4:	e001      	b.n	8001afa <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000010 	.word	0x20000010
 8001b08:	2000000c 	.word	0x2000000c

08001b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_IncTick+0x20>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_IncTick+0x24>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <HAL_IncTick+0x24>)
 8001b1e:	6013      	str	r3, [r2, #0]
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000010 	.word	0x20000010
 8001b30:	200007d8 	.word	0x200007d8

08001b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return uwTick;
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <HAL_GetTick+0x14>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	200007d8 	.word	0x200007d8

08001b4c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <HAL_GetTickPrio+0x14>)
 8001b52:	681b      	ldr	r3, [r3, #0]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	2000000c 	.word	0x2000000c

08001b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b80:	4013      	ands	r3, r2
 8001b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b96:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	60d3      	str	r3, [r2, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	f003 0307 	and.w	r3, r3, #7
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	db0b      	blt.n	8001bf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	f003 021f 	and.w	r2, r3, #31
 8001be0:	4907      	ldr	r1, [pc, #28]	; (8001c00 <__NVIC_EnableIRQ+0x38>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	095b      	lsrs	r3, r3, #5
 8001be8:	2001      	movs	r0, #1
 8001bea:	fa00 f202 	lsl.w	r2, r0, r2
 8001bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000e100 	.word	0xe000e100

08001c04 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	db0c      	blt.n	8001c30 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	f003 021f 	and.w	r2, r3, #31
 8001c1c:	4907      	ldr	r1, [pc, #28]	; (8001c3c <__NVIC_SetPendingIRQ+0x38>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	2001      	movs	r0, #1
 8001c26:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2a:	3340      	adds	r3, #64	; 0x40
 8001c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000e100 	.word	0xe000e100

08001c40 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	db0c      	blt.n	8001c6c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	f003 021f 	and.w	r2, r3, #31
 8001c58:	4907      	ldr	r1, [pc, #28]	; (8001c78 <__NVIC_ClearPendingIRQ+0x38>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	095b      	lsrs	r3, r3, #5
 8001c60:	2001      	movs	r0, #1
 8001c62:	fa00 f202 	lsl.w	r2, r0, r2
 8001c66:	3360      	adds	r3, #96	; 0x60
 8001c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000e100 	.word	0xe000e100

08001c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	6039      	str	r1, [r7, #0]
 8001c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	db0a      	blt.n	8001ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	490c      	ldr	r1, [pc, #48]	; (8001cc8 <__NVIC_SetPriority+0x4c>)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	0112      	lsls	r2, r2, #4
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca4:	e00a      	b.n	8001cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4908      	ldr	r1, [pc, #32]	; (8001ccc <__NVIC_SetPriority+0x50>)
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	3b04      	subs	r3, #4
 8001cb4:	0112      	lsls	r2, r2, #4
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	440b      	add	r3, r1
 8001cba:	761a      	strb	r2, [r3, #24]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000e100 	.word	0xe000e100
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b089      	sub	sp, #36	; 0x24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f1c3 0307 	rsb	r3, r3, #7
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	bf28      	it	cs
 8001cee:	2304      	movcs	r3, #4
 8001cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	2b06      	cmp	r3, #6
 8001cf8:	d902      	bls.n	8001d00 <NVIC_EncodePriority+0x30>
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3b03      	subs	r3, #3
 8001cfe:	e000      	b.n	8001d02 <NVIC_EncodePriority+0x32>
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	f04f 32ff 	mov.w	r2, #4294967295
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	401a      	ands	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d18:	f04f 31ff 	mov.w	r1, #4294967295
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d22:	43d9      	mvns	r1, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d28:	4313      	orrs	r3, r2
         );
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3724      	adds	r7, #36	; 0x24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d48:	d301      	bcc.n	8001d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e00f      	b.n	8001d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <SysTick_Config+0x40>)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d56:	210f      	movs	r1, #15
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	f7ff ff8e 	bl	8001c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <SysTick_Config+0x40>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <SysTick_Config+0x40>)
 8001d68:	2207      	movs	r2, #7
 8001d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	e000e010 	.word	0xe000e010

08001d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff feed 	bl	8001b64 <__NVIC_SetPriorityGrouping>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001da0:	f7ff ff04 	bl	8001bac <__NVIC_GetPriorityGrouping>
 8001da4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	6978      	ldr	r0, [r7, #20]
 8001dac:	f7ff ff90 	bl	8001cd0 <NVIC_EncodePriority>
 8001db0:	4602      	mov	r2, r0
 8001db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff5f 	bl	8001c7c <__NVIC_SetPriority>
}
 8001dbe:	bf00      	nop
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	4603      	mov	r3, r0
 8001dce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fef7 	bl	8001bc8 <__NVIC_EnableIRQ>
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff ffa4 	bl	8001d38 <SysTick_Config>
 8001df0:	4603      	mov	r3, r0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fefb 	bl	8001c04 <__NVIC_SetPendingIRQ>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff0b 	bl	8001c40 <__NVIC_ClearPendingIRQ>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b087      	sub	sp, #28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e42:	e14c      	b.n	80020de <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	2101      	movs	r1, #1
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e50:	4013      	ands	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 813e 	beq.w	80020d8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d005      	beq.n	8001e74 <HAL_GPIO_Init+0x40>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d130      	bne.n	8001ed6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	2203      	movs	r2, #3
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eaa:	2201      	movs	r2, #1
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	091b      	lsrs	r3, r3, #4
 8001ec0:	f003 0201 	and.w	r2, r3, #1
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d017      	beq.n	8001f12 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	2203      	movs	r2, #3
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d123      	bne.n	8001f66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	08da      	lsrs	r2, r3, #3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3208      	adds	r2, #8
 8001f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	220f      	movs	r2, #15
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	691a      	ldr	r2, [r3, #16]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	08da      	lsrs	r2, r3, #3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3208      	adds	r2, #8
 8001f60:	6939      	ldr	r1, [r7, #16]
 8001f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	2203      	movs	r2, #3
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 0203 	and.w	r2, r3, #3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 8098 	beq.w	80020d8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001fa8:	4a54      	ldr	r2, [pc, #336]	; (80020fc <HAL_GPIO_Init+0x2c8>)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	089b      	lsrs	r3, r3, #2
 8001fae:	3302      	adds	r3, #2
 8001fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fd2:	d019      	beq.n	8002008 <HAL_GPIO_Init+0x1d4>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a4a      	ldr	r2, [pc, #296]	; (8002100 <HAL_GPIO_Init+0x2cc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d013      	beq.n	8002004 <HAL_GPIO_Init+0x1d0>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a49      	ldr	r2, [pc, #292]	; (8002104 <HAL_GPIO_Init+0x2d0>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d00d      	beq.n	8002000 <HAL_GPIO_Init+0x1cc>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a48      	ldr	r2, [pc, #288]	; (8002108 <HAL_GPIO_Init+0x2d4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d007      	beq.n	8001ffc <HAL_GPIO_Init+0x1c8>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a47      	ldr	r2, [pc, #284]	; (800210c <HAL_GPIO_Init+0x2d8>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d101      	bne.n	8001ff8 <HAL_GPIO_Init+0x1c4>
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	e008      	b.n	800200a <HAL_GPIO_Init+0x1d6>
 8001ff8:	2307      	movs	r3, #7
 8001ffa:	e006      	b.n	800200a <HAL_GPIO_Init+0x1d6>
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e004      	b.n	800200a <HAL_GPIO_Init+0x1d6>
 8002000:	2302      	movs	r3, #2
 8002002:	e002      	b.n	800200a <HAL_GPIO_Init+0x1d6>
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <HAL_GPIO_Init+0x1d6>
 8002008:	2300      	movs	r3, #0
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	f002 0203 	and.w	r2, r2, #3
 8002010:	0092      	lsls	r2, r2, #2
 8002012:	4093      	lsls	r3, r2
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800201a:	4938      	ldr	r1, [pc, #224]	; (80020fc <HAL_GPIO_Init+0x2c8>)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	3302      	adds	r3, #2
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002028:	4b39      	ldr	r3, [pc, #228]	; (8002110 <HAL_GPIO_Init+0x2dc>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	43db      	mvns	r3, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800204c:	4a30      	ldr	r2, [pc, #192]	; (8002110 <HAL_GPIO_Init+0x2dc>)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002052:	4b2f      	ldr	r3, [pc, #188]	; (8002110 <HAL_GPIO_Init+0x2dc>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	43db      	mvns	r3, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002076:	4a26      	ldr	r2, [pc, #152]	; (8002110 <HAL_GPIO_Init+0x2dc>)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800207c:	4b24      	ldr	r3, [pc, #144]	; (8002110 <HAL_GPIO_Init+0x2dc>)
 800207e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	43db      	mvns	r3, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4313      	orrs	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020a2:	4a1b      	ldr	r2, [pc, #108]	; (8002110 <HAL_GPIO_Init+0x2dc>)
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80020aa:	4b19      	ldr	r3, [pc, #100]	; (8002110 <HAL_GPIO_Init+0x2dc>)
 80020ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020d0:	4a0f      	ldr	r2, [pc, #60]	; (8002110 <HAL_GPIO_Init+0x2dc>)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	3301      	adds	r3, #1
 80020dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	fa22 f303 	lsr.w	r3, r2, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f47f aeab 	bne.w	8001e44 <HAL_GPIO_Init+0x10>
  }
}
 80020ee:	bf00      	nop
 80020f0:	bf00      	nop
 80020f2:	371c      	adds	r7, #28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	40010000 	.word	0x40010000
 8002100:	48000400 	.word	0x48000400
 8002104:	48000800 	.word	0x48000800
 8002108:	48000c00 	.word	0x48000c00
 800210c:	48001000 	.word	0x48001000
 8002110:	58000800 	.word	0x58000800

08002114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	807b      	strh	r3, [r7, #2]
 8002120:	4613      	mov	r3, r2
 8002122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002124:	787b      	ldrb	r3, [r7, #1]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800212a:	887a      	ldrh	r2, [r7, #2]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002130:	e002      	b.n	8002138 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002132:	887a      	ldrh	r2, [r7, #2]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_HSEM_IRQHandler+0x30>)
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002150:	4b08      	ldr	r3, [pc, #32]	; (8002174 <HAL_HSEM_IRQHandler+0x30>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	43db      	mvns	r3, r3
 8002158:	4906      	ldr	r1, [pc, #24]	; (8002174 <HAL_HSEM_IRQHandler+0x30>)
 800215a:	4013      	ands	r3, r2
 800215c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800215e:	4a05      	ldr	r2, [pc, #20]	; (8002174 <HAL_HSEM_IRQHandler+0x30>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f807 	bl	8002178 <HAL_HSEM_FreeCallback>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	58001500 	.word	0x58001500

08002178 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e081      	b.n	80022a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d106      	bne.n	80021b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff fa6c 	bl	8001690 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2224      	movs	r2, #36	; 0x24
 80021bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0201 	bic.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d107      	bne.n	8002206 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	e006      	b.n	8002214 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002212:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d104      	bne.n	8002226 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002224:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002238:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002248:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691a      	ldr	r2, [r3, #16]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69d9      	ldr	r1, [r3, #28]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1a      	ldr	r2, [r3, #32]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2220      	movs	r2, #32
 800228e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	607a      	str	r2, [r7, #4]
 80022b6:	461a      	mov	r2, r3
 80022b8:	460b      	mov	r3, r1
 80022ba:	817b      	strh	r3, [r7, #10]
 80022bc:	4613      	mov	r3, r2
 80022be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b20      	cmp	r3, #32
 80022ca:	f040 80da 	bne.w	8002482 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_I2C_Master_Transmit+0x30>
 80022d8:	2302      	movs	r3, #2
 80022da:	e0d3      	b.n	8002484 <HAL_I2C_Master_Transmit+0x1d8>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022e4:	f7ff fc26 	bl	8001b34 <HAL_GetTick>
 80022e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	2319      	movs	r3, #25
 80022f0:	2201      	movs	r2, #1
 80022f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 fa5e 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e0be      	b.n	8002484 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2221      	movs	r2, #33	; 0x21
 800230a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2210      	movs	r2, #16
 8002312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	893a      	ldrh	r2, [r7, #8]
 8002326:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002332:	b29b      	uxth	r3, r3
 8002334:	2bff      	cmp	r3, #255	; 0xff
 8002336:	d90e      	bls.n	8002356 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	22ff      	movs	r2, #255	; 0xff
 800233c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002342:	b2da      	uxtb	r2, r3
 8002344:	8979      	ldrh	r1, [r7, #10]
 8002346:	4b51      	ldr	r3, [pc, #324]	; (800248c <HAL_I2C_Master_Transmit+0x1e0>)
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 fbda 	bl	8002b08 <I2C_TransferConfig>
 8002354:	e06c      	b.n	8002430 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002364:	b2da      	uxtb	r2, r3
 8002366:	8979      	ldrh	r1, [r7, #10]
 8002368:	4b48      	ldr	r3, [pc, #288]	; (800248c <HAL_I2C_Master_Transmit+0x1e0>)
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 fbc9 	bl	8002b08 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002376:	e05b      	b.n	8002430 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	6a39      	ldr	r1, [r7, #32]
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 fa5b 	bl	8002838 <I2C_WaitOnTXISFlagUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e07b      	b.n	8002484 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	781a      	ldrb	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d034      	beq.n	8002430 <HAL_I2C_Master_Transmit+0x184>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d130      	bne.n	8002430 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	2200      	movs	r2, #0
 80023d6:	2180      	movs	r1, #128	; 0x80
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 f9ed 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e04d      	b.n	8002484 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	2bff      	cmp	r3, #255	; 0xff
 80023f0:	d90e      	bls.n	8002410 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	22ff      	movs	r2, #255	; 0xff
 80023f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	8979      	ldrh	r1, [r7, #10]
 8002400:	2300      	movs	r3, #0
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 fb7d 	bl	8002b08 <I2C_TransferConfig>
 800240e:	e00f      	b.n	8002430 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241e:	b2da      	uxtb	r2, r3
 8002420:	8979      	ldrh	r1, [r7, #10]
 8002422:	2300      	movs	r3, #0
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 fb6c 	bl	8002b08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002434:	b29b      	uxth	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d19e      	bne.n	8002378 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	6a39      	ldr	r1, [r7, #32]
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 fa3a 	bl	80028b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e01a      	b.n	8002484 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2220      	movs	r2, #32
 8002454:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6859      	ldr	r1, [r3, #4]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_I2C_Master_Transmit+0x1e4>)
 8002462:	400b      	ands	r3, r1
 8002464:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2220      	movs	r2, #32
 800246a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	e000      	b.n	8002484 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002482:	2302      	movs	r3, #2
  }
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	80002000 	.word	0x80002000
 8002490:	fe00e800 	.word	0xfe00e800

08002494 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	4608      	mov	r0, r1
 800249e:	4611      	mov	r1, r2
 80024a0:	461a      	mov	r2, r3
 80024a2:	4603      	mov	r3, r0
 80024a4:	817b      	strh	r3, [r7, #10]
 80024a6:	460b      	mov	r3, r1
 80024a8:	813b      	strh	r3, [r7, #8]
 80024aa:	4613      	mov	r3, r2
 80024ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b20      	cmp	r3, #32
 80024b8:	f040 80fd 	bne.w	80026b6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <HAL_I2C_Mem_Read+0x34>
 80024c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d105      	bne.n	80024d4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0f1      	b.n	80026b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_I2C_Mem_Read+0x4e>
 80024de:	2302      	movs	r3, #2
 80024e0:	e0ea      	b.n	80026b8 <HAL_I2C_Mem_Read+0x224>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024ea:	f7ff fb23 	bl	8001b34 <HAL_GetTick>
 80024ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	2319      	movs	r3, #25
 80024f6:	2201      	movs	r2, #1
 80024f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 f95b 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0d5      	b.n	80026b8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2222      	movs	r2, #34	; 0x22
 8002510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2240      	movs	r2, #64	; 0x40
 8002518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a3a      	ldr	r2, [r7, #32]
 8002526:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800252c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002534:	88f8      	ldrh	r0, [r7, #6]
 8002536:	893a      	ldrh	r2, [r7, #8]
 8002538:	8979      	ldrh	r1, [r7, #10]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	4603      	mov	r3, r0
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 f8bf 	bl	80026c8 <I2C_RequestMemoryRead>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0ad      	b.n	80026b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002560:	b29b      	uxth	r3, r3
 8002562:	2bff      	cmp	r3, #255	; 0xff
 8002564:	d90e      	bls.n	8002584 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	22ff      	movs	r2, #255	; 0xff
 800256a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002570:	b2da      	uxtb	r2, r3
 8002572:	8979      	ldrh	r1, [r7, #10]
 8002574:	4b52      	ldr	r3, [pc, #328]	; (80026c0 <HAL_I2C_Mem_Read+0x22c>)
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 fac3 	bl	8002b08 <I2C_TransferConfig>
 8002582:	e00f      	b.n	80025a4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002592:	b2da      	uxtb	r2, r3
 8002594:	8979      	ldrh	r1, [r7, #10]
 8002596:	4b4a      	ldr	r3, [pc, #296]	; (80026c0 <HAL_I2C_Mem_Read+0x22c>)
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 fab2 	bl	8002b08 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025aa:	2200      	movs	r2, #0
 80025ac:	2104      	movs	r1, #4
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f902 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e07c      	b.n	80026b8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d034      	beq.n	8002664 <HAL_I2C_Mem_Read+0x1d0>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d130      	bne.n	8002664 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002608:	2200      	movs	r2, #0
 800260a:	2180      	movs	r1, #128	; 0x80
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 f8d3 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e04d      	b.n	80026b8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002620:	b29b      	uxth	r3, r3
 8002622:	2bff      	cmp	r3, #255	; 0xff
 8002624:	d90e      	bls.n	8002644 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	22ff      	movs	r2, #255	; 0xff
 800262a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002630:	b2da      	uxtb	r2, r3
 8002632:	8979      	ldrh	r1, [r7, #10]
 8002634:	2300      	movs	r3, #0
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 fa63 	bl	8002b08 <I2C_TransferConfig>
 8002642:	e00f      	b.n	8002664 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002652:	b2da      	uxtb	r2, r3
 8002654:	8979      	ldrh	r1, [r7, #10]
 8002656:	2300      	movs	r3, #0
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 fa52 	bl	8002b08 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002668:	b29b      	uxth	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d19a      	bne.n	80025a4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 f920 	bl	80028b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e01a      	b.n	80026b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2220      	movs	r2, #32
 8002688:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6859      	ldr	r1, [r3, #4]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_I2C_Mem_Read+0x230>)
 8002696:	400b      	ands	r3, r1
 8002698:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2220      	movs	r2, #32
 800269e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	e000      	b.n	80026b8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80026b6:	2302      	movs	r3, #2
  }
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	80002400 	.word	0x80002400
 80026c4:	fe00e800 	.word	0xfe00e800

080026c8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af02      	add	r7, sp, #8
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	4608      	mov	r0, r1
 80026d2:	4611      	mov	r1, r2
 80026d4:	461a      	mov	r2, r3
 80026d6:	4603      	mov	r3, r0
 80026d8:	817b      	strh	r3, [r7, #10]
 80026da:	460b      	mov	r3, r1
 80026dc:	813b      	strh	r3, [r7, #8]
 80026de:	4613      	mov	r3, r2
 80026e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80026e2:	88fb      	ldrh	r3, [r7, #6]
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	8979      	ldrh	r1, [r7, #10]
 80026e8:	4b20      	ldr	r3, [pc, #128]	; (800276c <I2C_RequestMemoryRead+0xa4>)
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	2300      	movs	r3, #0
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fa0a 	bl	8002b08 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026f4:	69fa      	ldr	r2, [r7, #28]
 80026f6:	69b9      	ldr	r1, [r7, #24]
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f89d 	bl	8002838 <I2C_WaitOnTXISFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e02c      	b.n	8002762 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002708:	88fb      	ldrh	r3, [r7, #6]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d105      	bne.n	800271a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800270e:	893b      	ldrh	r3, [r7, #8]
 8002710:	b2da      	uxtb	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	629a      	str	r2, [r3, #40]	; 0x28
 8002718:	e015      	b.n	8002746 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800271a:	893b      	ldrh	r3, [r7, #8]
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	b29b      	uxth	r3, r3
 8002720:	b2da      	uxtb	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	69b9      	ldr	r1, [r7, #24]
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 f883 	bl	8002838 <I2C_WaitOnTXISFlagUntilTimeout>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e012      	b.n	8002762 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800273c:	893b      	ldrh	r3, [r7, #8]
 800273e:	b2da      	uxtb	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	2200      	movs	r2, #0
 800274e:	2140      	movs	r1, #64	; 0x40
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 f831 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	80002000 	.word	0x80002000

08002770 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b02      	cmp	r3, #2
 8002784:	d103      	bne.n	800278e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2200      	movs	r2, #0
 800278c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b01      	cmp	r3, #1
 800279a:	d007      	beq.n	80027ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699a      	ldr	r2, [r3, #24]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	619a      	str	r2, [r3, #24]
  }
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	603b      	str	r3, [r7, #0]
 80027c4:	4613      	mov	r3, r2
 80027c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027c8:	e022      	b.n	8002810 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d0:	d01e      	beq.n	8002810 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d2:	f7ff f9af 	bl	8001b34 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d302      	bcc.n	80027e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d113      	bne.n	8002810 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e00f      	b.n	8002830 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699a      	ldr	r2, [r3, #24]
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	4013      	ands	r3, r2
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	429a      	cmp	r2, r3
 800281e:	bf0c      	ite	eq
 8002820:	2301      	moveq	r3, #1
 8002822:	2300      	movne	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	429a      	cmp	r2, r3
 800282c:	d0cd      	beq.n	80027ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002844:	e02c      	b.n	80028a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	68b9      	ldr	r1, [r7, #8]
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 f870 	bl	8002930 <I2C_IsErrorOccurred>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e02a      	b.n	80028b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002860:	d01e      	beq.n	80028a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002862:	f7ff f967 	bl	8001b34 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	429a      	cmp	r2, r3
 8002870:	d302      	bcc.n	8002878 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d113      	bne.n	80028a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287c:	f043 0220 	orr.w	r2, r3, #32
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e007      	b.n	80028b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d1cb      	bne.n	8002846 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028c4:	e028      	b.n	8002918 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 f830 	bl	8002930 <I2C_IsErrorOccurred>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e026      	b.n	8002928 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028da:	f7ff f92b 	bl	8001b34 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d302      	bcc.n	80028f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d113      	bne.n	8002918 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f4:	f043 0220 	orr.w	r2, r3, #32
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e007      	b.n	8002928 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b20      	cmp	r3, #32
 8002924:	d1cf      	bne.n	80028c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08a      	sub	sp, #40	; 0x28
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	2b00      	cmp	r3, #0
 800295a:	d075      	beq.n	8002a48 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2210      	movs	r2, #16
 8002962:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002964:	e056      	b.n	8002a14 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296c:	d052      	beq.n	8002a14 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800296e:	f7ff f8e1 	bl	8001b34 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	429a      	cmp	r2, r3
 800297c:	d302      	bcc.n	8002984 <I2C_IsErrorOccurred+0x54>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d147      	bne.n	8002a14 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800298e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002996:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029a6:	d12e      	bne.n	8002a06 <I2C_IsErrorOccurred+0xd6>
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029ae:	d02a      	beq.n	8002a06 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80029b0:	7cfb      	ldrb	r3, [r7, #19]
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	d027      	beq.n	8002a06 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80029c6:	f7ff f8b5 	bl	8001b34 <HAL_GetTick>
 80029ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029cc:	e01b      	b.n	8002a06 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80029ce:	f7ff f8b1 	bl	8001b34 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b19      	cmp	r3, #25
 80029da:	d914      	bls.n	8002a06 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e0:	f043 0220 	orr.w	r2, r3, #32
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b20      	cmp	r3, #32
 8002a12:	d1dc      	bne.n	80029ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	2b20      	cmp	r3, #32
 8002a20:	d003      	beq.n	8002a2a <I2C_IsErrorOccurred+0xfa>
 8002a22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d09d      	beq.n	8002966 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002a2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d103      	bne.n	8002a3a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2220      	movs	r2, #32
 8002a38:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	f043 0304 	orr.w	r3, r3, #4
 8002a40:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00b      	beq.n	8002a72 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00b      	beq.n	8002a94 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	f043 0308 	orr.w	r3, r3, #8
 8002a82:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00b      	beq.n	8002ab6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	f043 0302 	orr.w	r3, r3, #2
 8002aa4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002ab6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d01c      	beq.n	8002af8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f7ff fe56 	bl	8002770 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6859      	ldr	r1, [r3, #4]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <I2C_IsErrorOccurred+0x1d4>)
 8002ad0:	400b      	ands	r3, r1
 8002ad2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3728      	adds	r7, #40	; 0x28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	fe00e800 	.word	0xfe00e800

08002b08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	607b      	str	r3, [r7, #4]
 8002b12:	460b      	mov	r3, r1
 8002b14:	817b      	strh	r3, [r7, #10]
 8002b16:	4613      	mov	r3, r2
 8002b18:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b1a:	897b      	ldrh	r3, [r7, #10]
 8002b1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b20:	7a7b      	ldrb	r3, [r7, #9]
 8002b22:	041b      	lsls	r3, r3, #16
 8002b24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b28:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b36:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	0d5b      	lsrs	r3, r3, #21
 8002b42:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002b46:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <I2C_TransferConfig+0x60>)
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	ea02 0103 	and.w	r1, r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b5a:	bf00      	nop
 8002b5c:	371c      	adds	r7, #28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	03ff63ff 	.word	0x03ff63ff

08002b6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	d138      	bne.n	8002bf4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e032      	b.n	8002bf6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2224      	movs	r2, #36	; 0x24
 8002b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0201 	bic.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bbe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6819      	ldr	r1, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0201 	orr.w	r2, r2, #1
 8002bde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	e000      	b.n	8002bf6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bf4:	2302      	movs	r3, #2
  }
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b085      	sub	sp, #20
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d139      	bne.n	8002c8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e033      	b.n	8002c8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2224      	movs	r2, #36	; 0x24
 8002c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0201 	bic.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0201 	orr.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	e000      	b.n	8002c8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c8c:	2302      	movs	r3, #2
  }
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
	...

08002c9c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d01e      	beq.n	8002cec <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002cae:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <HAL_IPCC_Init+0x60>)
 8002cb0:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d102      	bne.n	8002cc4 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7fe fd2e 	bl	8001720 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002cc4:	68b8      	ldr	r0, [r7, #8]
 8002cc6:	f000 f85b 	bl	8002d80 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f82c 	bl	8002d34 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002cea:	e001      	b.n	8002cf0 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	58000c00 	.word	0x58000c00

08002d00 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b085      	sub	sp, #20
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	4613      	mov	r3, r2
 8002d26:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	e00f      	b.n	8002d62 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	4a0b      	ldr	r2, [pc, #44]	; (8002d78 <IPCC_SetDefaultCallbacks+0x44>)
 8002d4c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	3306      	adds	r3, #6
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	4a08      	ldr	r2, [pc, #32]	; (8002d7c <IPCC_SetDefaultCallbacks+0x48>)
 8002d5a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2b05      	cmp	r3, #5
 8002d66:	d9ec      	bls.n	8002d42 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	08002d01 	.word	0x08002d01
 8002d7c:	08002d1b 	.word	0x08002d1b

08002d80 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8002d94:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	223f      	movs	r2, #63	; 0x3f
 8002d9a:	609a      	str	r2, [r3, #8]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002daa:	b08b      	sub	sp, #44	; 0x2c
 8002dac:	af06      	add	r7, sp, #24
 8002dae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e0dd      	b.n	8002f76 <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d106      	bne.n	8002dd4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f010 fa1a 	bl	8013208 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f004 f9f5 	bl	80071d6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dec:	2300      	movs	r3, #0
 8002dee:	73fb      	strb	r3, [r7, #15]
 8002df0:	e04d      	b.n	8002e8e <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	440b      	add	r3, r1
 8002e02:	3305      	adds	r3, #5
 8002e04:	2201      	movs	r2, #1
 8002e06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	440b      	add	r3, r1
 8002e18:	3304      	adds	r3, #4
 8002e1a:	7bfa      	ldrb	r2, [r7, #15]
 8002e1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e1e:	7bfa      	ldrb	r2, [r7, #15]
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	b298      	uxth	r0, r3
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	440b      	add	r3, r1
 8002e30:	333a      	adds	r3, #58	; 0x3a
 8002e32:	4602      	mov	r2, r0
 8002e34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	440b      	add	r3, r1
 8002e46:	3307      	adds	r3, #7
 8002e48:	2200      	movs	r2, #0
 8002e4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e4c:	7bfa      	ldrb	r2, [r7, #15]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	440b      	add	r3, r1
 8002e5a:	333c      	adds	r3, #60	; 0x3c
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e60:	7bfa      	ldrb	r2, [r7, #15]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	440b      	add	r3, r1
 8002e6e:	3340      	adds	r3, #64	; 0x40
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e74:	7bfa      	ldrb	r2, [r7, #15]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	440b      	add	r3, r1
 8002e82:	3344      	adds	r3, #68	; 0x44
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
 8002e8e:	7bfa      	ldrb	r2, [r7, #15]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d3ac      	bcc.n	8002df2 <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e98:	2300      	movs	r3, #0
 8002e9a:	73fb      	strb	r3, [r7, #15]
 8002e9c:	e044      	b.n	8002f28 <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	440b      	add	r3, r1
 8002eac:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002eb4:	7bfa      	ldrb	r2, [r7, #15]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	440b      	add	r3, r1
 8002ec2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8002ec6:	7bfa      	ldrb	r2, [r7, #15]
 8002ec8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002eca:	7bfa      	ldrb	r2, [r7, #15]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	440b      	add	r3, r1
 8002ed8:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ee0:	7bfa      	ldrb	r2, [r7, #15]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	440b      	add	r3, r1
 8002eee:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ef6:	7bfa      	ldrb	r2, [r7, #15]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	440b      	add	r3, r1
 8002f04:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	440b      	add	r3, r1
 8002f1a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	3301      	adds	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
 8002f28:	7bfa      	ldrb	r2, [r7, #15]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d3b5      	bcc.n	8002e9e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	687e      	ldr	r6, [r7, #4]
 8002f3a:	466d      	mov	r5, sp
 8002f3c:	f106 0410 	add.w	r4, r6, #16
 8002f40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f48:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f4c:	1d33      	adds	r3, r6, #4
 8002f4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f50:	6838      	ldr	r0, [r7, #0]
 8002f52:	f004 f95b 	bl	800720c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d102      	bne.n	8002f74 <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f001 fc42 	bl	80047f8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f7e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_PCD_Start+0x16>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e012      	b.n	8002fba <HAL_PCD_Start+0x3c>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  __HAL_PCD_ENABLE(hpcd);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f004 f901 	bl	80071a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f006 fb40 	bl	8009630 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b084      	sub	sp, #16
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f006 fb45 	bl	800965e <USB_ReadInterrupts>
 8002fd4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 fb30 	bl	8003646 <PCD_EP_ISR_Handler>

    return;
 8002fe6:	e110      	b.n	800320a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d013      	beq.n	800301a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003004:	b292      	uxth	r2, r2
 8003006:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f010 f99f 	bl	801334e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003010:	2100      	movs	r1, #0
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f8fc 	bl	8003210 <HAL_PCD_SetAddress>

    return;
 8003018:	e0f7      	b.n	800320a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00c      	beq.n	800303e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800302c:	b29a      	uxth	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003036:	b292      	uxth	r2, r2
 8003038:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800303c:	e0e5      	b.n	800320a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00c      	beq.n	8003062 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003050:	b29a      	uxth	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800305a:	b292      	uxth	r2, r2
 800305c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003060:	e0d3      	b.n	800320a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d034      	beq.n	80030d6 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003074:	b29a      	uxth	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0204 	bic.w	r2, r2, #4
 800307e:	b292      	uxth	r2, r2
 8003080:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800308c:	b29a      	uxth	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0208 	bic.w	r2, r2, #8
 8003096:	b292      	uxth	r2, r2
 8003098:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d107      	bne.n	80030b6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80030ae:	2100      	movs	r1, #0
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f010 fb43 	bl	801373c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f010 f982 	bl	80133c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030ce:	b292      	uxth	r2, r2
 80030d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80030d4:	e099      	b.n	800320a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d027      	beq.n	8003130 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0208 	orr.w	r2, r2, #8
 80030f2:	b292      	uxth	r2, r2
 80030f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003100:	b29a      	uxth	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800310a:	b292      	uxth	r2, r2
 800310c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003118:	b29a      	uxth	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0204 	orr.w	r2, r2, #4
 8003122:	b292      	uxth	r2, r2
 8003124:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f010 f92f 	bl	801338c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800312e:	e06c      	b.n	800320a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003136:	2b00      	cmp	r3, #0
 8003138:	d040      	beq.n	80031bc <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003142:	b29a      	uxth	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800314c:	b292      	uxth	r2, r2
 800314e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d12b      	bne.n	80031b4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003164:	b29a      	uxth	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0204 	orr.w	r2, r2, #4
 800316e:	b292      	uxth	r2, r2
 8003170:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800317c:	b29a      	uxth	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0208 	orr.w	r2, r2, #8
 8003186:	b292      	uxth	r2, r2
 8003188:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800319c:	b29b      	uxth	r3, r3
 800319e:	089b      	lsrs	r3, r3, #2
 80031a0:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80031aa:	2101      	movs	r1, #1
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f010 fac5 	bl	801373c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80031b2:	e02a      	b.n	800320a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f010 f8e9 	bl	801338c <HAL_PCD_SuspendCallback>
    return;
 80031ba:	e026      	b.n	800320a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00f      	beq.n	80031e6 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031d8:	b292      	uxth	r2, r2
 80031da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f010 f8a7 	bl	8013332 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80031e4:	e011      	b.n	800320a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00c      	beq.n	800320a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003202:	b292      	uxth	r2, r2
 8003204:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003208:	bf00      	nop
  }
}
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <HAL_PCD_SetAddress+0x1a>
 8003226:	2302      	movs	r3, #2
 8003228:	e013      	b.n	8003252 <HAL_PCD_SetAddress+0x42>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	4611      	mov	r1, r2
 8003242:	4618      	mov	r0, r3
 8003244:	f006 f9e0 	bl	8009608 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	4608      	mov	r0, r1
 8003264:	4611      	mov	r1, r2
 8003266:	461a      	mov	r2, r3
 8003268:	4603      	mov	r3, r0
 800326a:	70fb      	strb	r3, [r7, #3]
 800326c:	460b      	mov	r3, r1
 800326e:	803b      	strh	r3, [r7, #0]
 8003270:	4613      	mov	r3, r2
 8003272:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003278:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800327c:	2b00      	cmp	r3, #0
 800327e:	da0f      	bge.n	80032a0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	4413      	add	r3, r2
 8003294:	3304      	adds	r3, #4
 8003296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	705a      	strb	r2, [r3, #1]
 800329e:	e00f      	b.n	80032c0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	f003 0207 	and.w	r2, r3, #7
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4413      	add	r3, r2
 80032b6:	3304      	adds	r3, #4
 80032b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80032cc:	883a      	ldrh	r2, [r7, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	78ba      	ldrb	r2, [r7, #2]
 80032d6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	785b      	ldrb	r3, [r3, #1]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d004      	beq.n	80032ea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032ea:	78bb      	ldrb	r3, [r7, #2]
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d102      	bne.n	80032f6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_PCD_EP_Open+0xaa>
 8003300:	2302      	movs	r3, #2
 8003302:	e00e      	b.n	8003322 <HAL_PCD_EP_Open+0xc8>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68f9      	ldr	r1, [r7, #12]
 8003312:	4618      	mov	r0, r3
 8003314:	f003 ff9c 	bl	8007250 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8003320:	7afb      	ldrb	r3, [r7, #11]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	460b      	mov	r3, r1
 8003334:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003336:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800333a:	2b00      	cmp	r3, #0
 800333c:	da0f      	bge.n	800335e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800333e:	78fb      	ldrb	r3, [r7, #3]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	3304      	adds	r3, #4
 8003354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2201      	movs	r2, #1
 800335a:	705a      	strb	r2, [r3, #1]
 800335c:	e00f      	b.n	800337e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	f003 0207 	and.w	r2, r3, #7
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	4413      	add	r3, r2
 8003374:	3304      	adds	r3, #4
 8003376:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800337e:	78fb      	ldrb	r3, [r7, #3]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	b2da      	uxtb	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <HAL_PCD_EP_Close+0x6e>
 8003394:	2302      	movs	r3, #2
 8003396:	e00e      	b.n	80033b6 <HAL_PCD_EP_Close+0x8c>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68f9      	ldr	r1, [r7, #12]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f004 fb0c 	bl	80079c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b086      	sub	sp, #24
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	607a      	str	r2, [r7, #4]
 80033c8:	603b      	str	r3, [r7, #0]
 80033ca:	460b      	mov	r3, r1
 80033cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033ce:	7afb      	ldrb	r3, [r7, #11]
 80033d0:	f003 0207 	and.w	r2, r3, #7
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	4413      	add	r3, r2
 80033e4:	3304      	adds	r3, #4
 80033e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2200      	movs	r2, #0
 80033f8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2200      	movs	r2, #0
 80033fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003400:	7afb      	ldrb	r3, [r7, #11]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	b2da      	uxtb	r2, r3
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800340c:	7afb      	ldrb	r3, [r7, #11]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6979      	ldr	r1, [r7, #20]
 800341c:	4618      	mov	r0, r3
 800341e:	f004 fcbe 	bl	8007d9e <USB_EPStartXfer>
 8003422:	e005      	b.n	8003430 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6979      	ldr	r1, [r7, #20]
 800342a:	4618      	mov	r0, r3
 800342c:	f004 fcb7 	bl	8007d9e <USB_EPStartXfer>
  }

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
 8003442:	460b      	mov	r3, r1
 8003444:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	f003 0207 	and.w	r2, r3, #7
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	440b      	add	r3, r1
 8003458:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800345c:	681b      	ldr	r3, [r3, #0]
}
 800345e:	4618      	mov	r0, r3
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b086      	sub	sp, #24
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
 8003476:	460b      	mov	r3, r1
 8003478:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800347a:	7afb      	ldrb	r3, [r7, #11]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4413      	add	r3, r2
 800348e:	3304      	adds	r3, #4
 8003490:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2200      	movs	r2, #0
 80034b0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2201      	movs	r2, #1
 80034b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034b8:	7afb      	ldrb	r3, [r7, #11]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034c4:	7afb      	ldrb	r3, [r7, #11]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6979      	ldr	r1, [r7, #20]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f004 fc62 	bl	8007d9e <USB_EPStartXfer>
 80034da:	e005      	b.n	80034e8 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6979      	ldr	r1, [r7, #20]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f004 fc5b 	bl	8007d9e <USB_EPStartXfer>
  }

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	460b      	mov	r3, r1
 80034fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034fe:	78fb      	ldrb	r3, [r7, #3]
 8003500:	f003 0207 	and.w	r2, r3, #7
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	429a      	cmp	r2, r3
 800350a:	d901      	bls.n	8003510 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e040      	b.n	8003592 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003510:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003514:	2b00      	cmp	r3, #0
 8003516:	da0f      	bge.n	8003538 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	4413      	add	r3, r2
 800352c:	3304      	adds	r3, #4
 800352e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	705a      	strb	r2, [r3, #1]
 8003536:	e00d      	b.n	8003554 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	4413      	add	r3, r2
 800354a:	3304      	adds	r3, #4
 800354c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	b2da      	uxtb	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_PCD_EP_SetStall+0x82>
 8003570:	2302      	movs	r3, #2
 8003572:	e00e      	b.n	8003592 <HAL_PCD_EP_SetStall+0xa0>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68f9      	ldr	r1, [r7, #12]
 8003582:	4618      	mov	r0, r3
 8003584:	f005 ff41 	bl	800940a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	460b      	mov	r3, r1
 80035a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	f003 020f 	and.w	r2, r3, #15
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d901      	bls.n	80035b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e042      	b.n	800363e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	da0f      	bge.n	80035e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	4413      	add	r3, r2
 80035d4:	3304      	adds	r3, #4
 80035d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2201      	movs	r2, #1
 80035dc:	705a      	strb	r2, [r3, #1]
 80035de:	e00f      	b.n	8003600 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035e0:	78fb      	ldrb	r3, [r7, #3]
 80035e2:	f003 0207 	and.w	r2, r3, #7
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	4413      	add	r3, r2
 80035f6:	3304      	adds	r3, #4
 80035f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003606:	78fb      	ldrb	r3, [r7, #3]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	b2da      	uxtb	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_PCD_EP_ClrStall+0x86>
 800361c:	2302      	movs	r3, #2
 800361e:	e00e      	b.n	800363e <HAL_PCD_EP_ClrStall+0xa4>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68f9      	ldr	r1, [r7, #12]
 800362e:	4618      	mov	r0, r3
 8003630:	f005 ff3c 	bl	80094ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b096      	sub	sp, #88	; 0x58
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800364e:	e3a9      	b.n	8003da4 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003658:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800365c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003660:	b2db      	uxtb	r3, r3
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800366a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800366e:	2b00      	cmp	r3, #0
 8003670:	f040 8169 	bne.w	8003946 <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003674:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003678:	f003 0310 	and.w	r3, r3, #16
 800367c:	2b00      	cmp	r3, #0
 800367e:	d150      	bne.n	8003722 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	b29b      	uxth	r3, r3
 8003688:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800368c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003690:	81fb      	strh	r3, [r7, #14]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	89fb      	ldrh	r3, [r7, #14]
 8003698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800369c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	332c      	adds	r3, #44	; 0x2c
 80036a8:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	461a      	mov	r2, r3
 80036b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4413      	add	r3, r2
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6812      	ldr	r2, [r2, #0]
 80036c2:	4413      	add	r3, r2
 80036c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80036ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80036d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d4:	695a      	ldr	r2, [r3, #20]
 80036d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	441a      	add	r2, r3
 80036dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036de:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80036e0:	2100      	movs	r1, #0
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f00f fe0b 	bl	80132fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 8357 	beq.w	8003da4 <PCD_EP_ISR_Handler+0x75e>
 80036f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f040 8352 	bne.w	8003da4 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003706:	b2db      	uxtb	r3, r3
 8003708:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800370c:	b2da      	uxtb	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	b292      	uxth	r2, r2
 8003714:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003720:	e340      	b.n	8003da4 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003728:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003734:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800373c:	2b00      	cmp	r3, #0
 800373e:	d032      	beq.n	80037a6 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003748:	b29b      	uxth	r3, r3
 800374a:	461a      	mov	r2, r3
 800374c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4413      	add	r3, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	4413      	add	r3, r2
 800375a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003766:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 8003772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003774:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003778:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800377a:	b29b      	uxth	r3, r3
 800377c:	f005 ffc1 	bl	8009702 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	b29a      	uxth	r2, r3
 8003788:	f640 738f 	movw	r3, #3983	; 0xf8f
 800378c:	4013      	ands	r3, r2
 800378e:	823b      	strh	r3, [r7, #16]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	8a3a      	ldrh	r2, [r7, #16]
 8003796:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800379a:	b292      	uxth	r2, r2
 800379c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f00f fd80 	bl	80132a4 <HAL_PCD_SetupStageCallback>
 80037a4:	e2fe      	b.n	8003da4 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80037a6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f280 82fa 	bge.w	8003da4 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80037bc:	4013      	ands	r3, r2
 80037be:	83fb      	strh	r3, [r7, #30]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	8bfa      	ldrh	r2, [r7, #30]
 80037c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037ca:	b292      	uxth	r2, r2
 80037cc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	461a      	mov	r2, r3
 80037da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4413      	add	r3, r2
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6812      	ldr	r2, [r2, #0]
 80037e6:	4413      	add	r3, r2
 80037e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80037f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037f4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80037f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d019      	beq.n	8003832 <PCD_EP_ISR_Handler+0x1ec>
 80037fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d015      	beq.n	8003832 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6818      	ldr	r0, [r3, #0]
 800380a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800380c:	6959      	ldr	r1, [r3, #20]
 800380e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003810:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003814:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003816:	b29b      	uxth	r3, r3
 8003818:	f005 ff73 	bl	8009702 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800381c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800381e:	695a      	ldr	r2, [r3, #20]
 8003820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	441a      	add	r2, r3
 8003826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003828:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800382a:	2100      	movs	r1, #0
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f00f fd4b 	bl	80132c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800383c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003844:	2b00      	cmp	r3, #0
 8003846:	f040 82ad 	bne.w	8003da4 <PCD_EP_ISR_Handler+0x75e>
 800384a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800384e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003852:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003856:	f000 82a5 	beq.w	8003da4 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	61bb      	str	r3, [r7, #24]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003868:	b29b      	uxth	r3, r3
 800386a:	461a      	mov	r2, r3
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	4413      	add	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	2b3e      	cmp	r3, #62	; 0x3e
 8003880:	d918      	bls.n	80038b4 <PCD_EP_ISR_Handler+0x26e>
 8003882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	647b      	str	r3, [r7, #68]	; 0x44
 800388a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 031f 	and.w	r3, r3, #31
 8003892:	2b00      	cmp	r3, #0
 8003894:	d102      	bne.n	800389c <PCD_EP_ISR_Handler+0x256>
 8003896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003898:	3b01      	subs	r3, #1
 800389a:	647b      	str	r3, [r7, #68]	; 0x44
 800389c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800389e:	b29b      	uxth	r3, r3
 80038a0:	029b      	lsls	r3, r3, #10
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	801a      	strh	r2, [r3, #0]
 80038b2:	e029      	b.n	8003908 <PCD_EP_ISR_Handler+0x2c2>
 80038b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d112      	bne.n	80038e2 <PCD_EP_ISR_Handler+0x29c>
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	801a      	strh	r2, [r3, #0]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038da:	b29a      	uxth	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	801a      	strh	r2, [r3, #0]
 80038e0:	e012      	b.n	8003908 <PCD_EP_ISR_Handler+0x2c2>
 80038e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	085b      	lsrs	r3, r3, #1
 80038e8:	647b      	str	r3, [r7, #68]	; 0x44
 80038ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <PCD_EP_ISR_Handler+0x2b6>
 80038f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038f8:	3301      	adds	r3, #1
 80038fa:	647b      	str	r3, [r7, #68]	; 0x44
 80038fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038fe:	b29b      	uxth	r3, r3
 8003900:	029b      	lsls	r3, r3, #10
 8003902:	b29a      	uxth	r2, r3
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	b29b      	uxth	r3, r3
 8003910:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003918:	827b      	strh	r3, [r7, #18]
 800391a:	8a7b      	ldrh	r3, [r7, #18]
 800391c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003920:	827b      	strh	r3, [r7, #18]
 8003922:	8a7b      	ldrh	r3, [r7, #18]
 8003924:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003928:	827b      	strh	r3, [r7, #18]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	8a7b      	ldrh	r3, [r7, #18]
 8003930:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003934:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800393c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003940:	b29b      	uxth	r3, r3
 8003942:	8013      	strh	r3, [r2, #0]
 8003944:	e22e      	b.n	8003da4 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800395a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800395e:	2b00      	cmp	r3, #0
 8003960:	f280 80f7 	bge.w	8003b52 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	461a      	mov	r2, r3
 800396a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	b29a      	uxth	r2, r3
 8003976:	f640 738f 	movw	r3, #3983	; 0xf8f
 800397a:	4013      	ands	r3, r2
 800397c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003992:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003996:	b292      	uxth	r2, r2
 8003998:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800399a:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800399e:	4613      	mov	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4413      	add	r3, r2
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	4413      	add	r3, r2
 80039ae:	3304      	adds	r3, #4
 80039b0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80039b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039b4:	7b1b      	ldrb	r3, [r3, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d123      	bne.n	8003a02 <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	4413      	add	r3, r2
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6812      	ldr	r2, [r2, #0]
 80039d2:	4413      	add	r3, r2
 80039d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80039e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 808e 	beq.w	8003b08 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6818      	ldr	r0, [r3, #0]
 80039f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f2:	6959      	ldr	r1, [r3, #20]
 80039f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f6:	88da      	ldrh	r2, [r3, #6]
 80039f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80039fc:	f005 fe81 	bl	8009702 <USB_ReadPMA>
 8003a00:	e082      	b.n	8003b08 <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a04:	78db      	ldrb	r3, [r3, #3]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d10a      	bne.n	8003a20 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003a0a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003a0e:	461a      	mov	r2, r3
 8003a10:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f9d4 	bl	8003dc0 <HAL_PCD_EP_DB_Receive>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003a1e:	e073      	b.n	8003b08 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	461a      	mov	r2, r3
 8003a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	461a      	mov	r2, r3
 8003a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	441a      	add	r2, r3
 8003a4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d022      	beq.n	8003ac4 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	461a      	mov	r2, r3
 8003a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	4413      	add	r3, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6812      	ldr	r2, [r2, #0]
 8003a96:	4413      	add	r3, r2
 8003a98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aa2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003aa6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d02c      	beq.n	8003b08 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab4:	6959      	ldr	r1, [r3, #20]
 8003ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab8:	891a      	ldrh	r2, [r3, #8]
 8003aba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003abe:	f005 fe20 	bl	8009702 <USB_ReadPMA>
 8003ac2:	e021      	b.n	8003b08 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	461a      	mov	r2, r3
 8003ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	4413      	add	r3, r2
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	4413      	add	r3, r2
 8003ade:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ae8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003aec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d009      	beq.n	8003b08 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6818      	ldr	r0, [r3, #0]
 8003af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003afa:	6959      	ldr	r1, [r3, #20]
 8003afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003afe:	895a      	ldrh	r2, [r3, #10]
 8003b00:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003b04:	f005 fdfd 	bl	8009702 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b0a:	69da      	ldr	r2, [r3, #28]
 8003b0c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003b10:	441a      	add	r2, r3
 8003b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b14:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b18:	695a      	ldr	r2, [r3, #20]
 8003b1a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003b1e:	441a      	add	r2, r3
 8003b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b22:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d005      	beq.n	8003b38 <PCD_EP_ISR_Handler+0x4f2>
 8003b2c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d206      	bcs.n	8003b46 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f00f fbc2 	bl	80132c8 <HAL_PCD_DataOutStageCallback>
 8003b44:	e005      	b.n	8003b52 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f004 f926 	bl	8007d9e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003b52:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 8122 	beq.w	8003da4 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8003b60:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	4613      	mov	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	4413      	add	r3, r2
 8003b72:	3304      	adds	r3, #4
 8003b74:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b90:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	441a      	add	r2, r3
 8003ba2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb4:	78db      	ldrb	r3, [r3, #3]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	f040 80a2 	bne.w	8003d00 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8003bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bc4:	7b1b      	ldrb	r3, [r3, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 8093 	beq.w	8003cf2 <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003bcc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d046      	beq.n	8003c66 <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bda:	785b      	ldrb	r3, [r3, #1]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d126      	bne.n	8003c2e <PCD_EP_ISR_Handler+0x5e8>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	4413      	add	r3, r2
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	00da      	lsls	r2, r3, #3
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	4413      	add	r3, r2
 8003c02:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003c06:	623b      	str	r3, [r7, #32]
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	801a      	strh	r2, [r3, #0]
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	801a      	strh	r2, [r3, #0]
 8003c2c:	e061      	b.n	8003cf2 <PCD_EP_ISR_Handler+0x6ac>
 8003c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c30:	785b      	ldrb	r3, [r3, #1]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d15d      	bne.n	8003cf2 <PCD_EP_ISR_Handler+0x6ac>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	461a      	mov	r2, r3
 8003c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4a:	4413      	add	r3, r2
 8003c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	00da      	lsls	r2, r3, #3
 8003c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c56:	4413      	add	r3, r2
 8003c58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c60:	2200      	movs	r2, #0
 8003c62:	801a      	strh	r2, [r3, #0]
 8003c64:	e045      	b.n	8003cf2 <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c6e:	785b      	ldrb	r3, [r3, #1]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d126      	bne.n	8003cc2 <PCD_EP_ISR_Handler+0x67c>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	637b      	str	r3, [r7, #52]	; 0x34
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	461a      	mov	r2, r3
 8003c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c88:	4413      	add	r3, r2
 8003c8a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	00da      	lsls	r2, r3, #3
 8003c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c94:	4413      	add	r3, r2
 8003c96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c9a:	633b      	str	r3, [r7, #48]	; 0x30
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003caa:	801a      	strh	r2, [r3, #0]
 8003cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cae:	881b      	ldrh	r3, [r3, #0]
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbe:	801a      	strh	r2, [r3, #0]
 8003cc0:	e017      	b.n	8003cf2 <PCD_EP_ISR_Handler+0x6ac>
 8003cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc4:	785b      	ldrb	r3, [r3, #1]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d113      	bne.n	8003cf2 <PCD_EP_ISR_Handler+0x6ac>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd8:	4413      	add	r3, r2
 8003cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	00da      	lsls	r2, r3, #3
 8003ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003cea:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cee:	2200      	movs	r2, #0
 8003cf0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f00f fb00 	bl	80132fe <HAL_PCD_DataInStageCallback>
 8003cfe:	e051      	b.n	8003da4 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003d00:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d144      	bne.n	8003d96 <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	461a      	mov	r2, r3
 8003d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	4413      	add	r3, r2
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	4413      	add	r3, r2
 8003d26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d30:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d36:	699a      	ldr	r2, [r3, #24]
 8003d38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d907      	bls.n	8003d50 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 8003d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d42:	699a      	ldr	r2, [r3, #24]
 8003d44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003d48:	1ad2      	subs	r2, r2, r3
 8003d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d4c:	619a      	str	r2, [r3, #24]
 8003d4e:	e002      	b.n	8003d56 <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 8003d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d52:	2200      	movs	r2, #0
 8003d54:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	4619      	mov	r1, r3
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f00f faca 	bl	80132fe <HAL_PCD_DataInStageCallback>
 8003d6a:	e01b      	b.n	8003da4 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d6e:	695a      	ldr	r2, [r3, #20]
 8003d70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003d74:	441a      	add	r2, r3
 8003d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d78:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d7c:	69da      	ldr	r2, [r3, #28]
 8003d7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003d82:	441a      	add	r2, r3
 8003d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d86:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f004 f805 	bl	8007d9e <USB_EPStartXfer>
 8003d94:	e006      	b.n	8003da4 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003d96:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f917 	bl	8003fd2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	b21b      	sxth	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f6ff ac4d 	blt.w	8003650 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3758      	adds	r7, #88	; 0x58
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003dce:	88fb      	ldrh	r3, [r7, #6]
 8003dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d07c      	beq.n	8003ed2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4413      	add	r3, r2
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	6812      	ldr	r2, [r2, #0]
 8003df0:	4413      	add	r3, r2
 8003df2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dfc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	699a      	ldr	r2, [r3, #24]
 8003e02:	8b7b      	ldrh	r3, [r7, #26]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d306      	bcc.n	8003e16 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	699a      	ldr	r2, [r3, #24]
 8003e0c:	8b7b      	ldrh	r3, [r7, #26]
 8003e0e:	1ad2      	subs	r2, r2, r3
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	619a      	str	r2, [r3, #24]
 8003e14:	e002      	b.n	8003e1c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d123      	bne.n	8003e6c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3e:	833b      	strh	r3, [r7, #24]
 8003e40:	8b3b      	ldrh	r3, [r7, #24]
 8003e42:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e46:	833b      	strh	r3, [r7, #24]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	441a      	add	r2, r3
 8003e56:	8b3b      	ldrh	r3, [r7, #24]
 8003e58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003e6c:	88fb      	ldrh	r3, [r7, #6]
 8003e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d01f      	beq.n	8003eb6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e90:	82fb      	strh	r3, [r7, #22]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	461a      	mov	r2, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	441a      	add	r2, r3
 8003ea0:	8afb      	ldrh	r3, [r7, #22]
 8003ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003eb6:	8b7b      	ldrh	r3, [r7, #26]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 8085 	beq.w	8003fc8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	6959      	ldr	r1, [r3, #20]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	891a      	ldrh	r2, [r3, #8]
 8003eca:	8b7b      	ldrh	r3, [r7, #26]
 8003ecc:	f005 fc19 	bl	8009702 <USB_ReadPMA>
 8003ed0:	e07a      	b.n	8003fc8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	461a      	mov	r2, r3
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	6812      	ldr	r2, [r2, #0]
 8003eea:	4413      	add	r3, r2
 8003eec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ef6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	699a      	ldr	r2, [r3, #24]
 8003efc:	8b7b      	ldrh	r3, [r7, #26]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d306      	bcc.n	8003f10 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	699a      	ldr	r2, [r3, #24]
 8003f06:	8b7b      	ldrh	r3, [r7, #26]
 8003f08:	1ad2      	subs	r2, r2, r3
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	619a      	str	r2, [r3, #24]
 8003f0e:	e002      	b.n	8003f16 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2200      	movs	r2, #0
 8003f14:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d123      	bne.n	8003f66 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f38:	83fb      	strh	r3, [r7, #30]
 8003f3a:	8bfb      	ldrh	r3, [r7, #30]
 8003f3c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f40:	83fb      	strh	r3, [r7, #30]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	441a      	add	r2, r3
 8003f50:	8bfb      	ldrh	r3, [r7, #30]
 8003f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003f66:	88fb      	ldrh	r3, [r7, #6]
 8003f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d11f      	bne.n	8003fb0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	461a      	mov	r2, r3
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8a:	83bb      	strh	r3, [r7, #28]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	441a      	add	r2, r3
 8003f9a:	8bbb      	ldrh	r3, [r7, #28]
 8003f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003fb0:	8b7b      	ldrh	r3, [r7, #26]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d008      	beq.n	8003fc8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6818      	ldr	r0, [r3, #0]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	6959      	ldr	r1, [r3, #20]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	895a      	ldrh	r2, [r3, #10]
 8003fc2:	8b7b      	ldrh	r3, [r7, #26]
 8003fc4:	f005 fb9d 	bl	8009702 <USB_ReadPMA>
    }
  }

  return count;
 8003fc8:	8b7b      	ldrh	r3, [r7, #26]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3720      	adds	r7, #32
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b0a2      	sub	sp, #136	; 0x88
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	60f8      	str	r0, [r7, #12]
 8003fda:	60b9      	str	r1, [r7, #8]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003fe0:	88fb      	ldrh	r3, [r7, #6]
 8003fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 81c5 	beq.w	8004376 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	4413      	add	r3, r2
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	6812      	ldr	r2, [r2, #0]
 8004004:	4413      	add	r3, r2
 8004006:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800400a:	881b      	ldrh	r3, [r3, #0]
 800400c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004010:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	699a      	ldr	r2, [r3, #24]
 8004018:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800401c:	429a      	cmp	r2, r3
 800401e:	d907      	bls.n	8004030 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	699a      	ldr	r2, [r3, #24]
 8004024:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004028:	1ad2      	subs	r2, r2, r3
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	619a      	str	r2, [r3, #24]
 800402e:	e002      	b.n	8004036 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2200      	movs	r2, #0
 8004034:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	2b00      	cmp	r3, #0
 800403c:	f040 80b9 	bne.w	80041b2 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	785b      	ldrb	r3, [r3, #1]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d126      	bne.n	8004096 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	62bb      	str	r3, [r7, #40]	; 0x28
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004056:	b29b      	uxth	r3, r3
 8004058:	461a      	mov	r2, r3
 800405a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405c:	4413      	add	r3, r2
 800405e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	00da      	lsls	r2, r3, #3
 8004066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004068:	4413      	add	r3, r2
 800406a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	b29b      	uxth	r3, r3
 8004076:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800407a:	b29a      	uxth	r2, r3
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	801a      	strh	r2, [r3, #0]
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	b29b      	uxth	r3, r3
 8004086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800408a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800408e:	b29a      	uxth	r2, r3
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	801a      	strh	r2, [r3, #0]
 8004094:	e01a      	b.n	80040cc <HAL_PCD_EP_DB_Transmit+0xfa>
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	785b      	ldrb	r3, [r3, #1]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d116      	bne.n	80040cc <HAL_PCD_EP_DB_Transmit+0xfa>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	633b      	str	r3, [r7, #48]	; 0x30
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	461a      	mov	r2, r3
 80040b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b2:	4413      	add	r3, r2
 80040b4:	633b      	str	r3, [r7, #48]	; 0x30
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	00da      	lsls	r2, r3, #3
 80040bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040be:	4413      	add	r3, r2
 80040c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80040c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c8:	2200      	movs	r2, #0
 80040ca:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	623b      	str	r3, [r7, #32]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	785b      	ldrb	r3, [r3, #1]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d126      	bne.n	8004128 <HAL_PCD_EP_DB_Transmit+0x156>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	61bb      	str	r3, [r7, #24]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	4413      	add	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	00da      	lsls	r2, r3, #3
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	4413      	add	r3, r2
 80040fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	b29b      	uxth	r3, r3
 8004108:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800410c:	b29a      	uxth	r2, r3
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	801a      	strh	r2, [r3, #0]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	b29b      	uxth	r3, r3
 8004118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800411c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004120:	b29a      	uxth	r2, r3
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	801a      	strh	r2, [r3, #0]
 8004126:	e017      	b.n	8004158 <HAL_PCD_EP_DB_Transmit+0x186>
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	785b      	ldrb	r3, [r3, #1]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d113      	bne.n	8004158 <HAL_PCD_EP_DB_Transmit+0x186>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004138:	b29b      	uxth	r3, r3
 800413a:	461a      	mov	r2, r3
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	4413      	add	r3, r2
 8004140:	623b      	str	r3, [r7, #32]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	00da      	lsls	r2, r3, #3
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	4413      	add	r3, r2
 800414c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	2200      	movs	r2, #0
 8004156:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	4619      	mov	r1, r3
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f00f f8cd 	bl	80132fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004164:	88fb      	ldrh	r3, [r7, #6]
 8004166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 82d2 	beq.w	8004714 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	461a      	mov	r2, r3
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	b29b      	uxth	r3, r3
 8004182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418a:	827b      	strh	r3, [r7, #18]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	441a      	add	r2, r3
 800419a:	8a7b      	ldrh	r3, [r7, #18]
 800419c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	8013      	strh	r3, [r2, #0]
 80041b0:	e2b0      	b.n	8004714 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d021      	beq.n	8004200 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	461a      	mov	r2, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	441a      	add	r2, r3
 80041e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80041ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004206:	2b01      	cmp	r3, #1
 8004208:	f040 8284 	bne.w	8004714 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	695a      	ldr	r2, [r3, #20]
 8004210:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004214:	441a      	add	r2, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	69da      	ldr	r2, [r3, #28]
 800421e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004222:	441a      	add	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	6a1a      	ldr	r2, [r3, #32]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	429a      	cmp	r2, r3
 8004232:	d309      	bcc.n	8004248 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	6a1a      	ldr	r2, [r3, #32]
 800423e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004240:	1ad2      	subs	r2, r2, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	621a      	str	r2, [r3, #32]
 8004246:	e015      	b.n	8004274 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d107      	bne.n	8004260 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8004250:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004254:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800425e:	e009      	b.n	8004274 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2200      	movs	r2, #0
 8004272:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	785b      	ldrb	r3, [r3, #1]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d155      	bne.n	8004328 <HAL_PCD_EP_DB_Transmit+0x356>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	63bb      	str	r3, [r7, #56]	; 0x38
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800428a:	b29b      	uxth	r3, r3
 800428c:	461a      	mov	r2, r3
 800428e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004290:	4413      	add	r3, r2
 8004292:	63bb      	str	r3, [r7, #56]	; 0x38
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	00da      	lsls	r2, r3, #3
 800429a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429c:	4413      	add	r3, r2
 800429e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80042a2:	637b      	str	r3, [r7, #52]	; 0x34
 80042a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a6:	2b3e      	cmp	r3, #62	; 0x3e
 80042a8:	d916      	bls.n	80042d8 <HAL_PCD_EP_DB_Transmit+0x306>
 80042aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042ac:	095b      	lsrs	r3, r3, #5
 80042ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80042b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d102      	bne.n	80042c0 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80042ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042bc:	3b01      	subs	r3, #1
 80042be:	64bb      	str	r3, [r7, #72]	; 0x48
 80042c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	029b      	lsls	r3, r3, #10
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d4:	801a      	strh	r2, [r3, #0]
 80042d6:	e043      	b.n	8004360 <HAL_PCD_EP_DB_Transmit+0x38e>
 80042d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d112      	bne.n	8004304 <HAL_PCD_EP_DB_Transmit+0x332>
 80042de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e0:	881b      	ldrh	r3, [r3, #0]
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ec:	801a      	strh	r2, [r3, #0]
 80042ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004300:	801a      	strh	r2, [r3, #0]
 8004302:	e02d      	b.n	8004360 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004306:	085b      	lsrs	r3, r3, #1
 8004308:	64bb      	str	r3, [r7, #72]	; 0x48
 800430a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <HAL_PCD_EP_DB_Transmit+0x348>
 8004314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004316:	3301      	adds	r3, #1
 8004318:	64bb      	str	r3, [r7, #72]	; 0x48
 800431a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800431c:	b29b      	uxth	r3, r3
 800431e:	029b      	lsls	r3, r3, #10
 8004320:	b29a      	uxth	r2, r3
 8004322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004324:	801a      	strh	r2, [r3, #0]
 8004326:	e01b      	b.n	8004360 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	785b      	ldrb	r3, [r3, #1]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d117      	bne.n	8004360 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	643b      	str	r3, [r7, #64]	; 0x40
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800433e:	b29b      	uxth	r3, r3
 8004340:	461a      	mov	r2, r3
 8004342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004344:	4413      	add	r3, r2
 8004346:	643b      	str	r3, [r7, #64]	; 0x40
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	00da      	lsls	r2, r3, #3
 800434e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004350:	4413      	add	r3, r2
 8004352:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800435a:	b29a      	uxth	r2, r3
 800435c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800435e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6818      	ldr	r0, [r3, #0]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	6959      	ldr	r1, [r3, #20]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	891a      	ldrh	r2, [r3, #8]
 800436c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800436e:	b29b      	uxth	r3, r3
 8004370:	f005 f985 	bl	800967e <USB_WritePMA>
 8004374:	e1ce      	b.n	8004714 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800437e:	b29b      	uxth	r3, r3
 8004380:	461a      	mov	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	4413      	add	r3, r2
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	4413      	add	r3, r2
 8004390:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800439a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	699a      	ldr	r2, [r3, #24]
 80043a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d307      	bcc.n	80043ba <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043b2:	1ad2      	subs	r2, r2, r3
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	619a      	str	r2, [r3, #24]
 80043b8:	e002      	b.n	80043c0 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2200      	movs	r2, #0
 80043be:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f040 80c4 	bne.w	8004552 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	785b      	ldrb	r3, [r3, #1]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d126      	bne.n	8004420 <HAL_PCD_EP_DB_Transmit+0x44e>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	461a      	mov	r2, r3
 80043e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043e6:	4413      	add	r3, r2
 80043e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	00da      	lsls	r2, r3, #3
 80043f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043f2:	4413      	add	r3, r2
 80043f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80043f8:	667b      	str	r3, [r7, #100]	; 0x64
 80043fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	b29b      	uxth	r3, r3
 8004400:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004404:	b29a      	uxth	r2, r3
 8004406:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004408:	801a      	strh	r2, [r3, #0]
 800440a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	b29b      	uxth	r3, r3
 8004410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004418:	b29a      	uxth	r2, r3
 800441a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800441c:	801a      	strh	r2, [r3, #0]
 800441e:	e01a      	b.n	8004456 <HAL_PCD_EP_DB_Transmit+0x484>
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	785b      	ldrb	r3, [r3, #1]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d116      	bne.n	8004456 <HAL_PCD_EP_DB_Transmit+0x484>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	673b      	str	r3, [r7, #112]	; 0x70
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004436:	b29b      	uxth	r3, r3
 8004438:	461a      	mov	r2, r3
 800443a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800443c:	4413      	add	r3, r2
 800443e:	673b      	str	r3, [r7, #112]	; 0x70
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	00da      	lsls	r2, r3, #3
 8004446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004448:	4413      	add	r3, r2
 800444a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800444e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004452:	2200      	movs	r2, #0
 8004454:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	785b      	ldrb	r3, [r3, #1]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d12f      	bne.n	80044c4 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004474:	b29b      	uxth	r3, r3
 8004476:	461a      	mov	r2, r3
 8004478:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800447c:	4413      	add	r3, r2
 800447e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	00da      	lsls	r2, r3, #3
 8004488:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800448c:	4413      	add	r3, r2
 800448e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004492:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004496:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800449a:	881b      	ldrh	r3, [r3, #0]
 800449c:	b29b      	uxth	r3, r3
 800449e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044a8:	801a      	strh	r2, [r3, #0]
 80044aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044c0:	801a      	strh	r2, [r3, #0]
 80044c2:	e017      	b.n	80044f4 <HAL_PCD_EP_DB_Transmit+0x522>
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	785b      	ldrb	r3, [r3, #1]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d113      	bne.n	80044f4 <HAL_PCD_EP_DB_Transmit+0x522>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	461a      	mov	r2, r3
 80044d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044da:	4413      	add	r3, r2
 80044dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	00da      	lsls	r2, r3, #3
 80044e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044e6:	4413      	add	r3, r2
 80044e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80044ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80044ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044f0:	2200      	movs	r2, #0
 80044f2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	4619      	mov	r1, r3
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f00e feff 	bl	80132fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004506:	2b00      	cmp	r3, #0
 8004508:	f040 8104 	bne.w	8004714 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	461a      	mov	r2, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	b29b      	uxth	r3, r3
 800451e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004526:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	461a      	mov	r2, r3
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	441a      	add	r2, r3
 8004538:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800453c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004544:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800454c:	b29b      	uxth	r3, r3
 800454e:	8013      	strh	r3, [r2, #0]
 8004550:	e0e0      	b.n	8004714 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004552:	88fb      	ldrh	r3, [r7, #6]
 8004554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d121      	bne.n	80045a0 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	b29b      	uxth	r3, r3
 800456e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004576:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	441a      	add	r2, r3
 8004588:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800458c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800459c:	b29b      	uxth	r3, r3
 800459e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	f040 80b4 	bne.w	8004714 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	695a      	ldr	r2, [r3, #20]
 80045b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045b4:	441a      	add	r2, r3
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	69da      	ldr	r2, [r3, #28]
 80045be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045c2:	441a      	add	r2, r3
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	6a1a      	ldr	r2, [r3, #32]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d309      	bcc.n	80045e8 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	6a1a      	ldr	r2, [r3, #32]
 80045de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045e0:	1ad2      	subs	r2, r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	621a      	str	r2, [r3, #32]
 80045e6:	e015      	b.n	8004614 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d107      	bne.n	8004600 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80045f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045f4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80045fe:	e009      	b.n	8004614 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2200      	movs	r2, #0
 800460a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	663b      	str	r3, [r7, #96]	; 0x60
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	785b      	ldrb	r3, [r3, #1]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d155      	bne.n	80046ce <HAL_PCD_EP_DB_Transmit+0x6fc>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	65bb      	str	r3, [r7, #88]	; 0x58
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004630:	b29b      	uxth	r3, r3
 8004632:	461a      	mov	r2, r3
 8004634:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004636:	4413      	add	r3, r2
 8004638:	65bb      	str	r3, [r7, #88]	; 0x58
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	00da      	lsls	r2, r3, #3
 8004640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004642:	4413      	add	r3, r2
 8004644:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004648:	657b      	str	r3, [r7, #84]	; 0x54
 800464a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800464c:	2b3e      	cmp	r3, #62	; 0x3e
 800464e:	d916      	bls.n	800467e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	677b      	str	r3, [r7, #116]	; 0x74
 8004656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	2b00      	cmp	r3, #0
 800465e:	d102      	bne.n	8004666 <HAL_PCD_EP_DB_Transmit+0x694>
 8004660:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004662:	3b01      	subs	r3, #1
 8004664:	677b      	str	r3, [r7, #116]	; 0x74
 8004666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004668:	b29b      	uxth	r3, r3
 800466a:	029b      	lsls	r3, r3, #10
 800466c:	b29b      	uxth	r3, r3
 800466e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004676:	b29a      	uxth	r2, r3
 8004678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800467a:	801a      	strh	r2, [r3, #0]
 800467c:	e040      	b.n	8004700 <HAL_PCD_EP_DB_Transmit+0x72e>
 800467e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004680:	2b00      	cmp	r3, #0
 8004682:	d112      	bne.n	80046aa <HAL_PCD_EP_DB_Transmit+0x6d8>
 8004684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	b29b      	uxth	r3, r3
 800468a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800468e:	b29a      	uxth	r2, r3
 8004690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004692:	801a      	strh	r2, [r3, #0]
 8004694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	b29b      	uxth	r3, r3
 800469a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800469e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046a6:	801a      	strh	r2, [r3, #0]
 80046a8:	e02a      	b.n	8004700 <HAL_PCD_EP_DB_Transmit+0x72e>
 80046aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ac:	085b      	lsrs	r3, r3, #1
 80046ae:	677b      	str	r3, [r7, #116]	; 0x74
 80046b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <HAL_PCD_EP_DB_Transmit+0x6ee>
 80046ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046bc:	3301      	adds	r3, #1
 80046be:	677b      	str	r3, [r7, #116]	; 0x74
 80046c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	029b      	lsls	r3, r3, #10
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ca:	801a      	strh	r2, [r3, #0]
 80046cc:	e018      	b.n	8004700 <HAL_PCD_EP_DB_Transmit+0x72e>
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	785b      	ldrb	r3, [r3, #1]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d114      	bne.n	8004700 <HAL_PCD_EP_DB_Transmit+0x72e>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046de:	b29b      	uxth	r3, r3
 80046e0:	461a      	mov	r2, r3
 80046e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046e4:	4413      	add	r3, r2
 80046e6:	663b      	str	r3, [r7, #96]	; 0x60
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	00da      	lsls	r2, r3, #3
 80046ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046f0:	4413      	add	r3, r2
 80046f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80046f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046fe:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6818      	ldr	r0, [r3, #0]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	6959      	ldr	r1, [r3, #20]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	895a      	ldrh	r2, [r3, #10]
 800470c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800470e:	b29b      	uxth	r3, r3
 8004710:	f004 ffb5 	bl	800967e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	461a      	mov	r2, r3
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	b29b      	uxth	r3, r3
 8004726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800472a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800472e:	823b      	strh	r3, [r7, #16]
 8004730:	8a3b      	ldrh	r3, [r7, #16]
 8004732:	f083 0310 	eor.w	r3, r3, #16
 8004736:	823b      	strh	r3, [r7, #16]
 8004738:	8a3b      	ldrh	r3, [r7, #16]
 800473a:	f083 0320 	eor.w	r3, r3, #32
 800473e:	823b      	strh	r3, [r7, #16]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	441a      	add	r2, r3
 800474e:	8a3b      	ldrh	r3, [r7, #16]
 8004750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800475c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004760:	b29b      	uxth	r3, r3
 8004762:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3788      	adds	r7, #136	; 0x88
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800476e:	b480      	push	{r7}
 8004770:	b087      	sub	sp, #28
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	607b      	str	r3, [r7, #4]
 8004778:	460b      	mov	r3, r1
 800477a:	817b      	strh	r3, [r7, #10]
 800477c:	4613      	mov	r3, r2
 800477e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004780:	897b      	ldrh	r3, [r7, #10]
 8004782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004786:	b29b      	uxth	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00c      	beq.n	80047a6 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800478c:	897b      	ldrh	r3, [r7, #10]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	4613      	mov	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4413      	add	r3, r2
 80047a0:	3304      	adds	r3, #4
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	e00a      	b.n	80047bc <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80047a6:	897a      	ldrh	r2, [r7, #10]
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4413      	add	r3, r2
 80047b8:	3304      	adds	r3, #4
 80047ba:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80047bc:	893b      	ldrh	r3, [r7, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d107      	bne.n	80047d2 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2200      	movs	r2, #0
 80047c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	80da      	strh	r2, [r3, #6]
 80047d0:	e00b      	b.n	80047ea <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2201      	movs	r2, #1
 80047d6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	b29a      	uxth	r2, r3
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	0c1b      	lsrs	r3, r3, #16
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	371c      	adds	r7, #28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800481c:	b29b      	uxth	r3, r3
 800481e:	f043 0301 	orr.w	r3, r3, #1
 8004822:	b29a      	uxth	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004830:	b29b      	uxth	r3, r3
 8004832:	f043 0302 	orr.w	r3, r3, #2
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004850:	4b05      	ldr	r3, [pc, #20]	; (8004868 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a04      	ldr	r2, [pc, #16]	; (8004868 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800485a:	6013      	str	r3, [r2, #0]
}
 800485c:	bf00      	nop
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	58000400 	.word	0x58000400

0800486c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004870:	4b04      	ldr	r3, [pc, #16]	; (8004884 <HAL_PWREx_GetVoltageRange+0x18>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004878:	4618      	mov	r0, r3
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	58000400 	.word	0x58000400

08004888 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800488c:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	4a04      	ldr	r2, [pc, #16]	; (80048a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004892:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004896:	6053      	str	r3, [r2, #4]
}
 8004898:	bf00      	nop
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	58000400 	.word	0x58000400

080048a8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80048ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048ba:	d101      	bne.n	80048c0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80048bc:	2301      	movs	r3, #1
 80048be:	e000      	b.n	80048c2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <LL_RCC_HSE_Enable>:
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80048d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048de:	6013      	str	r3, [r2, #0]
}
 80048e0:	bf00      	nop
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <LL_RCC_HSE_Disable>:
{
 80048ea:	b480      	push	{r7}
 80048ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80048ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048fc:	6013      	str	r3, [r2, #0]
}
 80048fe:	bf00      	nop
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <LL_RCC_HSE_IsReady>:
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800490c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004916:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800491a:	d101      	bne.n	8004920 <LL_RCC_HSE_IsReady+0x18>
 800491c:	2301      	movs	r3, #1
 800491e:	e000      	b.n	8004922 <LL_RCC_HSE_IsReady+0x1a>
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <LL_RCC_HSI_Enable>:
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800493a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800493e:	6013      	str	r3, [r2, #0]
}
 8004940:	bf00      	nop
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <LL_RCC_HSI_Disable>:
{
 800494a:	b480      	push	{r7}
 800494c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800494e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800495c:	6013      	str	r3, [r2, #0]
}
 800495e:	bf00      	nop
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <LL_RCC_HSI_IsReady>:
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800496c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800497a:	d101      	bne.n	8004980 <LL_RCC_HSI_IsReady+0x18>
 800497c:	2301      	movs	r3, #1
 800497e:	e000      	b.n	8004982 <LL_RCC_HSI_IsReady+0x1a>
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <LL_RCC_HSI_SetCalibTrimming>:
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	061b      	lsls	r3, r3, #24
 80049a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049a6:	4313      	orrs	r3, r2
 80049a8:	604b      	str	r3, [r1, #4]
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <LL_RCC_HSI48_Enable>:
{
 80049b6:	b480      	push	{r7}
 80049b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80049ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049c6:	f043 0301 	orr.w	r3, r3, #1
 80049ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80049ce:	bf00      	nop
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <LL_RCC_HSI48_Disable>:
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80049dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049e8:	f023 0301 	bic.w	r3, r3, #1
 80049ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80049f0:	bf00      	nop
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <LL_RCC_HSI48_IsReady>:
{
 80049fa:	b480      	push	{r7}
 80049fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80049fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d101      	bne.n	8004a12 <LL_RCC_HSI48_IsReady+0x18>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e000      	b.n	8004a14 <LL_RCC_HSI48_IsReady+0x1a>
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <LL_RCC_LSE_Enable>:
{
 8004a1e:	b480      	push	{r7}
 8004a20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a2e:	f043 0301 	orr.w	r3, r3, #1
 8004a32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a36:	bf00      	nop
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <LL_RCC_LSE_Disable>:
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a50:	f023 0301 	bic.w	r3, r3, #1
 8004a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a58:	bf00      	nop
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <LL_RCC_LSE_EnableBypass>:
{
 8004a62:	b480      	push	{r7}
 8004a64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a72:	f043 0304 	orr.w	r3, r3, #4
 8004a76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a7a:	bf00      	nop
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <LL_RCC_LSE_DisableBypass>:
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a94:	f023 0304 	bic.w	r3, r3, #4
 8004a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a9c:	bf00      	nop
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <LL_RCC_LSE_IsReady>:
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d101      	bne.n	8004abe <LL_RCC_LSE_IsReady+0x18>
 8004aba:	2301      	movs	r3, #1
 8004abc:	e000      	b.n	8004ac0 <LL_RCC_LSE_IsReady+0x1a>
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <LL_RCC_LSI1_Enable>:
{
 8004aca:	b480      	push	{r7}
 8004acc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ad6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ada:	f043 0301 	orr.w	r3, r3, #1
 8004ade:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004ae2:	bf00      	nop
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <LL_RCC_LSI1_Disable>:
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004af8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004b04:	bf00      	nop
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <LL_RCC_LSI1_IsReady>:
{
 8004b0e:	b480      	push	{r7}
 8004b10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d101      	bne.n	8004b26 <LL_RCC_LSI1_IsReady+0x18>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <LL_RCC_LSI1_IsReady+0x1a>
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <LL_RCC_LSI2_Enable>:
{
 8004b32:	b480      	push	{r7}
 8004b34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b42:	f043 0304 	orr.w	r3, r3, #4
 8004b46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004b4a:	bf00      	nop
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <LL_RCC_LSI2_Disable>:
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b64:	f023 0304 	bic.w	r3, r3, #4
 8004b68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004b6c:	bf00      	nop
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <LL_RCC_LSI2_IsReady>:
{
 8004b76:	b480      	push	{r7}
 8004b78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b08      	cmp	r3, #8
 8004b88:	d101      	bne.n	8004b8e <LL_RCC_LSI2_IsReady+0x18>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <LL_RCC_LSI2_IsReady+0x1a>
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <LL_RCC_LSI2_SetTrimming>:
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004baa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	021b      	lsls	r3, r3, #8
 8004bb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <LL_RCC_MSI_Enable>:
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bd6:	f043 0301 	orr.w	r3, r3, #1
 8004bda:	6013      	str	r3, [r2, #0]
}
 8004bdc:	bf00      	nop
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <LL_RCC_MSI_Disable>:
{
 8004be6:	b480      	push	{r7}
 8004be8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bf4:	f023 0301 	bic.w	r3, r3, #1
 8004bf8:	6013      	str	r3, [r2, #0]
}
 8004bfa:	bf00      	nop
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <LL_RCC_MSI_IsReady>:
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d101      	bne.n	8004c1a <LL_RCC_MSI_IsReady+0x16>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e000      	b.n	8004c1c <LL_RCC_MSI_IsReady+0x18>
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <LL_RCC_MSI_SetRange>:
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	600b      	str	r3, [r1, #0]
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <LL_RCC_MSI_GetRange>:
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c5e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2bb0      	cmp	r3, #176	; 0xb0
 8004c64:	d901      	bls.n	8004c6a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004c66:	23b0      	movs	r3, #176	; 0xb0
 8004c68:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004c6a:	687b      	ldr	r3, [r7, #4]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c92:	4313      	orrs	r3, r2
 8004c94:	604b      	str	r3, [r1, #4]
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <LL_RCC_SetSysClkSource>:
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f023 0203 	bic.w	r2, r3, #3
 8004cb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	608b      	str	r3, [r1, #8]
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <LL_RCC_GetSysClkSource>:
{
 8004cca:	b480      	push	{r7}
 8004ccc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 030c 	and.w	r3, r3, #12
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <LL_RCC_SetAHBPrescaler>:
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	608b      	str	r3, [r1, #8]
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <LL_C2_RCC_SetAHBPrescaler>:
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d16:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004d2a:	bf00      	nop
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <LL_RCC_SetAHB4Prescaler>:
{
 8004d36:	b480      	push	{r7}
 8004d38:	b083      	sub	sp, #12
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d42:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d46:	f023 020f 	bic.w	r2, r3, #15
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	091b      	lsrs	r3, r3, #4
 8004d4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <LL_RCC_SetAPB1Prescaler>:
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	608b      	str	r3, [r1, #8]
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <LL_RCC_SetAPB2Prescaler>:
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	608b      	str	r3, [r1, #8]
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <LL_RCC_GetAHBPrescaler>:
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <LL_RCC_GetAHB4Prescaler>:
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dd4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <LL_RCC_GetAPB1Prescaler>:
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <LL_RCC_GetAPB2Prescaler>:
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <LL_RCC_PLL_Enable>:
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e2a:	6013      	str	r3, [r2, #0]
}
 8004e2c:	bf00      	nop
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <LL_RCC_PLL_Disable>:
{
 8004e36:	b480      	push	{r7}
 8004e38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e48:	6013      	str	r3, [r2, #0]
}
 8004e4a:	bf00      	nop
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <LL_RCC_PLL_IsReady>:
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e66:	d101      	bne.n	8004e6c <LL_RCC_PLL_IsReady+0x18>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e000      	b.n	8004e6e <LL_RCC_PLL_IsReady+0x1a>
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <LL_RCC_PLL_GetN>:
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <LL_RCC_PLL_GetR>:
{
 8004e92:	b480      	push	{r7}
 8004e94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <LL_RCC_PLL_GetDivider>:
{
 8004eaa:	b480      	push	{r7}
 8004eac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <LL_RCC_PLL_GetMainSource>:
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0303 	and.w	r3, r3, #3
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <LL_RCC_IsActiveFlag_HPRE>:
{
 8004eda:	b480      	push	{r7}
 8004edc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eec:	d101      	bne.n	8004ef2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004efe:	b480      	push	{r7}
 8004f00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f06:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f12:	d101      	bne.n	8004f18 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f2c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f38:	d101      	bne.n	8004f3e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e000      	b.n	8004f40 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f5c:	d101      	bne.n	8004f62 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004f6e:	b480      	push	{r7}
 8004f70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f80:	d101      	bne.n	8004f86 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
	...

08004f94 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f94:	b590      	push	{r4, r7, lr}
 8004f96:	b08d      	sub	sp, #52	; 0x34
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e363      	b.n	800566e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 808d 	beq.w	80050ce <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fb4:	f7ff fe89 	bl	8004cca <LL_RCC_GetSysClkSource>
 8004fb8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fba:	f7ff ff82 	bl	8004ec2 <LL_RCC_PLL_GetMainSource>
 8004fbe:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d005      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x3e>
 8004fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc8:	2b0c      	cmp	r3, #12
 8004fca:	d147      	bne.n	800505c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d144      	bne.n	800505c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e347      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004fe2:	f7ff fe34 	bl	8004c4e <LL_RCC_MSI_GetRange>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	429c      	cmp	r4, r3
 8004fea:	d914      	bls.n	8005016 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 fd2f 	bl	8005a54 <RCC_SetFlashLatencyFromMSIRange>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e336      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff fe0e 	bl	8004c26 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	4618      	mov	r0, r3
 8005010:	f7ff fe32 	bl	8004c78 <LL_RCC_MSI_SetCalibTrimming>
 8005014:	e013      	b.n	800503e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	4618      	mov	r0, r3
 800501c:	f7ff fe03 	bl	8004c26 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff fe27 	bl	8004c78 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	4618      	mov	r0, r3
 8005030:	f000 fd10 	bl	8005a54 <RCC_SetFlashLatencyFromMSIRange>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e317      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800503e:	f000 fcc9 	bl	80059d4 <HAL_RCC_GetHCLKFreq>
 8005042:	4603      	mov	r3, r0
 8005044:	4aa4      	ldr	r2, [pc, #656]	; (80052d8 <HAL_RCC_OscConfig+0x344>)
 8005046:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005048:	4ba4      	ldr	r3, [pc, #656]	; (80052dc <HAL_RCC_OscConfig+0x348>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4618      	mov	r0, r3
 800504e:	f7fc fd23 	bl	8001a98 <HAL_InitTick>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d039      	beq.n	80050cc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e308      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01e      	beq.n	80050a2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005064:	f7ff fdb0 	bl	8004bc8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005068:	f7fc fd64 	bl	8001b34 <HAL_GetTick>
 800506c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005070:	f7fc fd60 	bl	8001b34 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e2f5      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005082:	f7ff fdbf 	bl	8004c04 <LL_RCC_MSI_IsReady>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0f1      	beq.n	8005070 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff fdc8 	bl	8004c26 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff fdec 	bl	8004c78 <LL_RCC_MSI_SetCalibTrimming>
 80050a0:	e015      	b.n	80050ce <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80050a2:	f7ff fda0 	bl	8004be6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050a6:	f7fc fd45 	bl	8001b34 <HAL_GetTick>
 80050aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050ae:	f7fc fd41 	bl	8001b34 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e2d6      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80050c0:	f7ff fda0 	bl	8004c04 <LL_RCC_MSI_IsReady>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1f1      	bne.n	80050ae <HAL_RCC_OscConfig+0x11a>
 80050ca:	e000      	b.n	80050ce <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80050cc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d047      	beq.n	800516a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050da:	f7ff fdf6 	bl	8004cca <LL_RCC_GetSysClkSource>
 80050de:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050e0:	f7ff feef 	bl	8004ec2 <LL_RCC_PLL_GetMainSource>
 80050e4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d005      	beq.n	80050f8 <HAL_RCC_OscConfig+0x164>
 80050ec:	6a3b      	ldr	r3, [r7, #32]
 80050ee:	2b0c      	cmp	r3, #12
 80050f0:	d108      	bne.n	8005104 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	2b03      	cmp	r3, #3
 80050f6:	d105      	bne.n	8005104 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d134      	bne.n	800516a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e2b4      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800510c:	d102      	bne.n	8005114 <HAL_RCC_OscConfig+0x180>
 800510e:	f7ff fbdd 	bl	80048cc <LL_RCC_HSE_Enable>
 8005112:	e001      	b.n	8005118 <HAL_RCC_OscConfig+0x184>
 8005114:	f7ff fbe9 	bl	80048ea <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d012      	beq.n	8005146 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005120:	f7fc fd08 	bl	8001b34 <HAL_GetTick>
 8005124:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005128:	f7fc fd04 	bl	8001b34 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b64      	cmp	r3, #100	; 0x64
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e299      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800513a:	f7ff fbe5 	bl	8004908 <LL_RCC_HSE_IsReady>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0f1      	beq.n	8005128 <HAL_RCC_OscConfig+0x194>
 8005144:	e011      	b.n	800516a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005146:	f7fc fcf5 	bl	8001b34 <HAL_GetTick>
 800514a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800514c:	e008      	b.n	8005160 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800514e:	f7fc fcf1 	bl	8001b34 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b64      	cmp	r3, #100	; 0x64
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e286      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005160:	f7ff fbd2 	bl	8004908 <LL_RCC_HSE_IsReady>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1f1      	bne.n	800514e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d04c      	beq.n	8005210 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005176:	f7ff fda8 	bl	8004cca <LL_RCC_GetSysClkSource>
 800517a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800517c:	f7ff fea1 	bl	8004ec2 <LL_RCC_PLL_GetMainSource>
 8005180:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	2b04      	cmp	r3, #4
 8005186:	d005      	beq.n	8005194 <HAL_RCC_OscConfig+0x200>
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	2b0c      	cmp	r3, #12
 800518c:	d10e      	bne.n	80051ac <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2b02      	cmp	r3, #2
 8005192:	d10b      	bne.n	80051ac <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e266      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7ff fbf1 	bl	800498c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80051aa:	e031      	b.n	8005210 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d019      	beq.n	80051e8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051b4:	f7ff fbba 	bl	800492c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b8:	f7fc fcbc 	bl	8001b34 <HAL_GetTick>
 80051bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051c0:	f7fc fcb8 	bl	8001b34 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e24d      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80051d2:	f7ff fbc9 	bl	8004968 <LL_RCC_HSI_IsReady>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0f1      	beq.n	80051c0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7ff fbd3 	bl	800498c <LL_RCC_HSI_SetCalibTrimming>
 80051e6:	e013      	b.n	8005210 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051e8:	f7ff fbaf 	bl	800494a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ec:	f7fc fca2 	bl	8001b34 <HAL_GetTick>
 80051f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f4:	f7fc fc9e 	bl	8001b34 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e233      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005206:	f7ff fbaf 	bl	8004968 <LL_RCC_HSI_IsReady>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1f1      	bne.n	80051f4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0308 	and.w	r3, r3, #8
 8005218:	2b00      	cmp	r3, #0
 800521a:	d106      	bne.n	800522a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 80a3 	beq.w	8005370 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d076      	beq.n	8005320 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0310 	and.w	r3, r3, #16
 800523a:	2b00      	cmp	r3, #0
 800523c:	d046      	beq.n	80052cc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800523e:	f7ff fc66 	bl	8004b0e <LL_RCC_LSI1_IsReady>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d113      	bne.n	8005270 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005248:	f7ff fc3f 	bl	8004aca <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800524c:	f7fc fc72 	bl	8001b34 <HAL_GetTick>
 8005250:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005254:	f7fc fc6e 	bl	8001b34 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e203      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005266:	f7ff fc52 	bl	8004b0e <LL_RCC_LSI1_IsReady>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0f1      	beq.n	8005254 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005270:	f7ff fc5f 	bl	8004b32 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005274:	f7fc fc5e 	bl	8001b34 <HAL_GetTick>
 8005278:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800527c:	f7fc fc5a 	bl	8001b34 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b03      	cmp	r3, #3
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e1ef      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800528e:	f7ff fc72 	bl	8004b76 <LL_RCC_LSI2_IsReady>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0f1      	beq.n	800527c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	4618      	mov	r0, r3
 800529e:	f7ff fc7c 	bl	8004b9a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80052a2:	f7ff fc23 	bl	8004aec <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a6:	f7fc fc45 	bl	8001b34 <HAL_GetTick>
 80052aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80052ac:	e008      	b.n	80052c0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80052ae:	f7fc fc41 	bl	8001b34 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e1d6      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80052c0:	f7ff fc25 	bl	8004b0e <LL_RCC_LSI1_IsReady>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1f1      	bne.n	80052ae <HAL_RCC_OscConfig+0x31a>
 80052ca:	e051      	b.n	8005370 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80052cc:	f7ff fbfd 	bl	8004aca <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d0:	f7fc fc30 	bl	8001b34 <HAL_GetTick>
 80052d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80052d6:	e00c      	b.n	80052f2 <HAL_RCC_OscConfig+0x35e>
 80052d8:	20000008 	.word	0x20000008
 80052dc:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80052e0:	f7fc fc28 	bl	8001b34 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e1bd      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80052f2:	f7ff fc0c 	bl	8004b0e <LL_RCC_LSI1_IsReady>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0f1      	beq.n	80052e0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80052fc:	f7ff fc2a 	bl	8004b54 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005300:	e008      	b.n	8005314 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005302:	f7fc fc17 	bl	8001b34 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b03      	cmp	r3, #3
 800530e:	d901      	bls.n	8005314 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e1ac      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005314:	f7ff fc2f 	bl	8004b76 <LL_RCC_LSI2_IsReady>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f1      	bne.n	8005302 <HAL_RCC_OscConfig+0x36e>
 800531e:	e027      	b.n	8005370 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005320:	f7ff fc18 	bl	8004b54 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005324:	f7fc fc06 	bl	8001b34 <HAL_GetTick>
 8005328:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800532c:	f7fc fc02 	bl	8001b34 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b03      	cmp	r3, #3
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e197      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800533e:	f7ff fc1a 	bl	8004b76 <LL_RCC_LSI2_IsReady>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1f1      	bne.n	800532c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005348:	f7ff fbd0 	bl	8004aec <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800534c:	f7fc fbf2 	bl	8001b34 <HAL_GetTick>
 8005350:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005354:	f7fc fbee 	bl	8001b34 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e183      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005366:	f7ff fbd2 	bl	8004b0e <LL_RCC_LSI1_IsReady>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1f1      	bne.n	8005354 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b00      	cmp	r3, #0
 800537a:	d05b      	beq.n	8005434 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800537c:	4ba7      	ldr	r3, [pc, #668]	; (800561c <HAL_RCC_OscConfig+0x688>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005384:	2b00      	cmp	r3, #0
 8005386:	d114      	bne.n	80053b2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005388:	f7ff fa60 	bl	800484c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800538c:	f7fc fbd2 	bl	8001b34 <HAL_GetTick>
 8005390:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005392:	e008      	b.n	80053a6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005394:	f7fc fbce 	bl	8001b34 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e163      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053a6:	4b9d      	ldr	r3, [pc, #628]	; (800561c <HAL_RCC_OscConfig+0x688>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0f0      	beq.n	8005394 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d102      	bne.n	80053c0 <HAL_RCC_OscConfig+0x42c>
 80053ba:	f7ff fb30 	bl	8004a1e <LL_RCC_LSE_Enable>
 80053be:	e00c      	b.n	80053da <HAL_RCC_OscConfig+0x446>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	2b05      	cmp	r3, #5
 80053c6:	d104      	bne.n	80053d2 <HAL_RCC_OscConfig+0x43e>
 80053c8:	f7ff fb4b 	bl	8004a62 <LL_RCC_LSE_EnableBypass>
 80053cc:	f7ff fb27 	bl	8004a1e <LL_RCC_LSE_Enable>
 80053d0:	e003      	b.n	80053da <HAL_RCC_OscConfig+0x446>
 80053d2:	f7ff fb35 	bl	8004a40 <LL_RCC_LSE_Disable>
 80053d6:	f7ff fb55 	bl	8004a84 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d014      	beq.n	800540c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e2:	f7fc fba7 	bl	8001b34 <HAL_GetTick>
 80053e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80053e8:	e00a      	b.n	8005400 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ea:	f7fc fba3 	bl	8001b34 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e136      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005400:	f7ff fb51 	bl	8004aa6 <LL_RCC_LSE_IsReady>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0ef      	beq.n	80053ea <HAL_RCC_OscConfig+0x456>
 800540a:	e013      	b.n	8005434 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800540c:	f7fc fb92 	bl	8001b34 <HAL_GetTick>
 8005410:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005412:	e00a      	b.n	800542a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005414:	f7fc fb8e 	bl	8001b34 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005422:	4293      	cmp	r3, r2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e121      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800542a:	f7ff fb3c 	bl	8004aa6 <LL_RCC_LSE_IsReady>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1ef      	bne.n	8005414 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543c:	2b00      	cmp	r3, #0
 800543e:	d02c      	beq.n	800549a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005444:	2b00      	cmp	r3, #0
 8005446:	d014      	beq.n	8005472 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005448:	f7ff fab5 	bl	80049b6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800544c:	f7fc fb72 	bl	8001b34 <HAL_GetTick>
 8005450:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005454:	f7fc fb6e 	bl	8001b34 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e103      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005466:	f7ff fac8 	bl	80049fa <LL_RCC_HSI48_IsReady>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0f1      	beq.n	8005454 <HAL_RCC_OscConfig+0x4c0>
 8005470:	e013      	b.n	800549a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005472:	f7ff fab1 	bl	80049d8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005476:	f7fc fb5d 	bl	8001b34 <HAL_GetTick>
 800547a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800547c:	e008      	b.n	8005490 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800547e:	f7fc fb59 	bl	8001b34 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e0ee      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005490:	f7ff fab3 	bl	80049fa <LL_RCC_HSI48_IsReady>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1f1      	bne.n	800547e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 80e4 	beq.w	800566c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054a4:	f7ff fc11 	bl	8004cca <LL_RCC_GetSysClkSource>
 80054a8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80054aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	f040 80b4 	bne.w	8005624 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f003 0203 	and.w	r2, r3, #3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d123      	bne.n	8005512 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d11c      	bne.n	8005512 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	0a1b      	lsrs	r3, r3, #8
 80054dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d114      	bne.n	8005512 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d10d      	bne.n	8005512 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005500:	429a      	cmp	r2, r3
 8005502:	d106      	bne.n	8005512 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800550e:	429a      	cmp	r2, r3
 8005510:	d05d      	beq.n	80055ce <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	2b0c      	cmp	r3, #12
 8005516:	d058      	beq.n	80055ca <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e0a1      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800552a:	f7ff fc84 	bl	8004e36 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800552e:	f7fc fb01 	bl	8001b34 <HAL_GetTick>
 8005532:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005534:	e008      	b.n	8005548 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005536:	f7fc fafd 	bl	8001b34 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e092      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1ef      	bne.n	8005536 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	4b30      	ldr	r3, [pc, #192]	; (8005620 <HAL_RCC_OscConfig+0x68c>)
 800555e:	4013      	ands	r3, r2
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005568:	4311      	orrs	r1, r2
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800556e:	0212      	lsls	r2, r2, #8
 8005570:	4311      	orrs	r1, r2
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005576:	4311      	orrs	r1, r2
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800557c:	4311      	orrs	r1, r2
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005582:	430a      	orrs	r2, r1
 8005584:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005588:	4313      	orrs	r3, r2
 800558a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800558c:	f7ff fc44 	bl	8004e18 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800559a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800559e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055a0:	f7fc fac8 	bl	8001b34 <HAL_GetTick>
 80055a4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055a8:	f7fc fac4 	bl	8001b34 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e059      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d0ef      	beq.n	80055a8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055c8:	e050      	b.n	800566c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e04f      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d147      	bne.n	800566c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80055dc:	f7ff fc1c 	bl	8004e18 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055f0:	f7fc faa0 	bl	8001b34 <HAL_GetTick>
 80055f4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f8:	f7fc fa9c 	bl	8001b34 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e031      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800560a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0ef      	beq.n	80055f8 <HAL_RCC_OscConfig+0x664>
 8005618:	e028      	b.n	800566c <HAL_RCC_OscConfig+0x6d8>
 800561a:	bf00      	nop
 800561c:	58000400 	.word	0x58000400
 8005620:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	2b0c      	cmp	r3, #12
 8005628:	d01e      	beq.n	8005668 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800562a:	f7ff fc04 	bl	8004e36 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562e:	f7fc fa81 	bl	8001b34 <HAL_GetTick>
 8005632:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005634:	e008      	b.n	8005648 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005636:	f7fc fa7d 	bl	8001b34 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	d901      	bls.n	8005648 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e012      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1ef      	bne.n	8005636 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800565a:	68da      	ldr	r2, [r3, #12]
 800565c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005660:	4b05      	ldr	r3, [pc, #20]	; (8005678 <HAL_RCC_OscConfig+0x6e4>)
 8005662:	4013      	ands	r3, r2
 8005664:	60cb      	str	r3, [r1, #12]
 8005666:	e001      	b.n	800566c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e000      	b.n	800566e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3734      	adds	r7, #52	; 0x34
 8005672:	46bd      	mov	sp, r7
 8005674:	bd90      	pop	{r4, r7, pc}
 8005676:	bf00      	nop
 8005678:	eefefffc 	.word	0xeefefffc

0800567c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e12d      	b.n	80058ec <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005690:	4b98      	ldr	r3, [pc, #608]	; (80058f4 <HAL_RCC_ClockConfig+0x278>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0307 	and.w	r3, r3, #7
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	429a      	cmp	r2, r3
 800569c:	d91b      	bls.n	80056d6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800569e:	4b95      	ldr	r3, [pc, #596]	; (80058f4 <HAL_RCC_ClockConfig+0x278>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f023 0207 	bic.w	r2, r3, #7
 80056a6:	4993      	ldr	r1, [pc, #588]	; (80058f4 <HAL_RCC_ClockConfig+0x278>)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ae:	f7fc fa41 	bl	8001b34 <HAL_GetTick>
 80056b2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b4:	e008      	b.n	80056c8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80056b6:	f7fc fa3d 	bl	8001b34 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e111      	b.n	80058ec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056c8:	4b8a      	ldr	r3, [pc, #552]	; (80058f4 <HAL_RCC_ClockConfig+0x278>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d1ef      	bne.n	80056b6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d016      	beq.n	8005710 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7ff fafb 	bl	8004ce2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80056ec:	f7fc fa22 	bl	8001b34 <HAL_GetTick>
 80056f0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80056f2:	e008      	b.n	8005706 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80056f4:	f7fc fa1e 	bl	8001b34 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e0f2      	b.n	80058ec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005706:	f7ff fbe8 	bl	8004eda <LL_RCC_IsActiveFlag_HPRE>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0f1      	beq.n	80056f4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0320 	and.w	r3, r3, #32
 8005718:	2b00      	cmp	r3, #0
 800571a:	d016      	beq.n	800574a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff faf2 	bl	8004d0a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005726:	f7fc fa05 	bl	8001b34 <HAL_GetTick>
 800572a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800572c:	e008      	b.n	8005740 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800572e:	f7fc fa01 	bl	8001b34 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e0d5      	b.n	80058ec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005740:	f7ff fbdd 	bl	8004efe <LL_RCC_IsActiveFlag_C2HPRE>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0f1      	beq.n	800572e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	d016      	beq.n	8005784 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	4618      	mov	r0, r3
 800575c:	f7ff faeb 	bl	8004d36 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005760:	f7fc f9e8 	bl	8001b34 <HAL_GetTick>
 8005764:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005766:	e008      	b.n	800577a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005768:	f7fc f9e4 	bl	8001b34 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d901      	bls.n	800577a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e0b8      	b.n	80058ec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800577a:	f7ff fbd3 	bl	8004f24 <LL_RCC_IsActiveFlag_SHDHPRE>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d0f1      	beq.n	8005768 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	2b00      	cmp	r3, #0
 800578e:	d016      	beq.n	80057be <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	4618      	mov	r0, r3
 8005796:	f7ff fae5 	bl	8004d64 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800579a:	f7fc f9cb 	bl	8001b34 <HAL_GetTick>
 800579e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80057a0:	e008      	b.n	80057b4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80057a2:	f7fc f9c7 	bl	8001b34 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d901      	bls.n	80057b4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e09b      	b.n	80058ec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80057b4:	f7ff fbc9 	bl	8004f4a <LL_RCC_IsActiveFlag_PPRE1>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0f1      	beq.n	80057a2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d017      	beq.n	80057fa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7ff fadb 	bl	8004d8c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80057d6:	f7fc f9ad 	bl	8001b34 <HAL_GetTick>
 80057da:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80057dc:	e008      	b.n	80057f0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80057de:	f7fc f9a9 	bl	8001b34 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d901      	bls.n	80057f0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e07d      	b.n	80058ec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80057f0:	f7ff fbbd 	bl	8004f6e <LL_RCC_IsActiveFlag_PPRE2>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0f1      	beq.n	80057de <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d043      	beq.n	800588e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	2b02      	cmp	r3, #2
 800580c:	d106      	bne.n	800581c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800580e:	f7ff f87b 	bl	8004908 <LL_RCC_HSE_IsReady>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d11e      	bne.n	8005856 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e067      	b.n	80058ec <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2b03      	cmp	r3, #3
 8005822:	d106      	bne.n	8005832 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005824:	f7ff fb16 	bl	8004e54 <LL_RCC_PLL_IsReady>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d113      	bne.n	8005856 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e05c      	b.n	80058ec <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d106      	bne.n	8005848 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800583a:	f7ff f9e3 	bl	8004c04 <LL_RCC_MSI_IsReady>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d108      	bne.n	8005856 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e051      	b.n	80058ec <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005848:	f7ff f88e 	bl	8004968 <LL_RCC_HSI_IsReady>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e04a      	b.n	80058ec <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	4618      	mov	r0, r3
 800585c:	f7ff fa21 	bl	8004ca2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005860:	f7fc f968 	bl	8001b34 <HAL_GetTick>
 8005864:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005866:	e00a      	b.n	800587e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005868:	f7fc f964 	bl	8001b34 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	f241 3288 	movw	r2, #5000	; 0x1388
 8005876:	4293      	cmp	r3, r2
 8005878:	d901      	bls.n	800587e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e036      	b.n	80058ec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800587e:	f7ff fa24 	bl	8004cca <LL_RCC_GetSysClkSource>
 8005882:	4602      	mov	r2, r0
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	429a      	cmp	r2, r3
 800588c:	d1ec      	bne.n	8005868 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800588e:	4b19      	ldr	r3, [pc, #100]	; (80058f4 <HAL_RCC_ClockConfig+0x278>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d21b      	bcs.n	80058d4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800589c:	4b15      	ldr	r3, [pc, #84]	; (80058f4 <HAL_RCC_ClockConfig+0x278>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f023 0207 	bic.w	r2, r3, #7
 80058a4:	4913      	ldr	r1, [pc, #76]	; (80058f4 <HAL_RCC_ClockConfig+0x278>)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058ac:	f7fc f942 	bl	8001b34 <HAL_GetTick>
 80058b0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80058b4:	f7fc f93e 	bl	8001b34 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e012      	b.n	80058ec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058c6:	4b0b      	ldr	r3, [pc, #44]	; (80058f4 <HAL_RCC_ClockConfig+0x278>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0307 	and.w	r3, r3, #7
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d1ef      	bne.n	80058b4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80058d4:	f000 f87e 	bl	80059d4 <HAL_RCC_GetHCLKFreq>
 80058d8:	4603      	mov	r3, r0
 80058da:	4a07      	ldr	r2, [pc, #28]	; (80058f8 <HAL_RCC_ClockConfig+0x27c>)
 80058dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80058de:	f7fc f935 	bl	8001b4c <HAL_GetTickPrio>
 80058e2:	4603      	mov	r3, r0
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7fc f8d7 	bl	8001a98 <HAL_InitTick>
 80058ea:	4603      	mov	r3, r0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	58004000 	.word	0x58004000
 80058f8:	20000008 	.word	0x20000008

080058fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058fc:	b590      	push	{r4, r7, lr}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005902:	f7ff f9e2 	bl	8004cca <LL_RCC_GetSysClkSource>
 8005906:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10a      	bne.n	8005924 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800590e:	f7ff f99e 	bl	8004c4e <LL_RCC_MSI_GetRange>
 8005912:	4603      	mov	r3, r0
 8005914:	091b      	lsrs	r3, r3, #4
 8005916:	f003 030f 	and.w	r3, r3, #15
 800591a:	4a2b      	ldr	r2, [pc, #172]	; (80059c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800591c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	e04b      	b.n	80059bc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b04      	cmp	r3, #4
 8005928:	d102      	bne.n	8005930 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800592a:	4b28      	ldr	r3, [pc, #160]	; (80059cc <HAL_RCC_GetSysClockFreq+0xd0>)
 800592c:	60fb      	str	r3, [r7, #12]
 800592e:	e045      	b.n	80059bc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b08      	cmp	r3, #8
 8005934:	d10a      	bne.n	800594c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005936:	f7fe ffb7 	bl	80048a8 <LL_RCC_HSE_IsEnabledDiv2>
 800593a:	4603      	mov	r3, r0
 800593c:	2b01      	cmp	r3, #1
 800593e:	d102      	bne.n	8005946 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005940:	4b22      	ldr	r3, [pc, #136]	; (80059cc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	e03a      	b.n	80059bc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005946:	4b22      	ldr	r3, [pc, #136]	; (80059d0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	e037      	b.n	80059bc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800594c:	f7ff fab9 	bl	8004ec2 <LL_RCC_PLL_GetMainSource>
 8005950:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b02      	cmp	r3, #2
 8005956:	d003      	beq.n	8005960 <HAL_RCC_GetSysClockFreq+0x64>
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	2b03      	cmp	r3, #3
 800595c:	d003      	beq.n	8005966 <HAL_RCC_GetSysClockFreq+0x6a>
 800595e:	e00d      	b.n	800597c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005960:	4b1a      	ldr	r3, [pc, #104]	; (80059cc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005962:	60bb      	str	r3, [r7, #8]
        break;
 8005964:	e015      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005966:	f7fe ff9f 	bl	80048a8 <LL_RCC_HSE_IsEnabledDiv2>
 800596a:	4603      	mov	r3, r0
 800596c:	2b01      	cmp	r3, #1
 800596e:	d102      	bne.n	8005976 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005970:	4b16      	ldr	r3, [pc, #88]	; (80059cc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005972:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005974:	e00d      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005976:	4b16      	ldr	r3, [pc, #88]	; (80059d0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005978:	60bb      	str	r3, [r7, #8]
        break;
 800597a:	e00a      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800597c:	f7ff f967 	bl	8004c4e <LL_RCC_MSI_GetRange>
 8005980:	4603      	mov	r3, r0
 8005982:	091b      	lsrs	r3, r3, #4
 8005984:	f003 030f 	and.w	r3, r3, #15
 8005988:	4a0f      	ldr	r2, [pc, #60]	; (80059c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800598a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800598e:	60bb      	str	r3, [r7, #8]
        break;
 8005990:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005992:	f7ff fa71 	bl	8004e78 <LL_RCC_PLL_GetN>
 8005996:	4602      	mov	r2, r0
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	fb03 f402 	mul.w	r4, r3, r2
 800599e:	f7ff fa84 	bl	8004eaa <LL_RCC_PLL_GetDivider>
 80059a2:	4603      	mov	r3, r0
 80059a4:	091b      	lsrs	r3, r3, #4
 80059a6:	3301      	adds	r3, #1
 80059a8:	fbb4 f4f3 	udiv	r4, r4, r3
 80059ac:	f7ff fa71 	bl	8004e92 <LL_RCC_PLL_GetR>
 80059b0:	4603      	mov	r3, r0
 80059b2:	0f5b      	lsrs	r3, r3, #29
 80059b4:	3301      	adds	r3, #1
 80059b6:	fbb4 f3f3 	udiv	r3, r4, r3
 80059ba:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80059bc:	68fb      	ldr	r3, [r7, #12]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd90      	pop	{r4, r7, pc}
 80059c6:	bf00      	nop
 80059c8:	08014df0 	.word	0x08014df0
 80059cc:	00f42400 	.word	0x00f42400
 80059d0:	01e84800 	.word	0x01e84800

080059d4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059d4:	b598      	push	{r3, r4, r7, lr}
 80059d6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80059d8:	f7ff ff90 	bl	80058fc <HAL_RCC_GetSysClockFreq>
 80059dc:	4604      	mov	r4, r0
 80059de:	f7ff f9e9 	bl	8004db4 <LL_RCC_GetAHBPrescaler>
 80059e2:	4603      	mov	r3, r0
 80059e4:	091b      	lsrs	r3, r3, #4
 80059e6:	f003 030f 	and.w	r3, r3, #15
 80059ea:	4a03      	ldr	r2, [pc, #12]	; (80059f8 <HAL_RCC_GetHCLKFreq+0x24>)
 80059ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059f0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	bd98      	pop	{r3, r4, r7, pc}
 80059f8:	08014d90 	.word	0x08014d90

080059fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059fc:	b598      	push	{r3, r4, r7, lr}
 80059fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005a00:	f7ff ffe8 	bl	80059d4 <HAL_RCC_GetHCLKFreq>
 8005a04:	4604      	mov	r4, r0
 8005a06:	f7ff f9ef 	bl	8004de8 <LL_RCC_GetAPB1Prescaler>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	0a1b      	lsrs	r3, r3, #8
 8005a0e:	f003 0307 	and.w	r3, r3, #7
 8005a12:	4a04      	ldr	r2, [pc, #16]	; (8005a24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a18:	f003 031f 	and.w	r3, r3, #31
 8005a1c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	bd98      	pop	{r3, r4, r7, pc}
 8005a24:	08014dd0 	.word	0x08014dd0

08005a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a28:	b598      	push	{r3, r4, r7, lr}
 8005a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005a2c:	f7ff ffd2 	bl	80059d4 <HAL_RCC_GetHCLKFreq>
 8005a30:	4604      	mov	r4, r0
 8005a32:	f7ff f9e5 	bl	8004e00 <LL_RCC_GetAPB2Prescaler>
 8005a36:	4603      	mov	r3, r0
 8005a38:	0adb      	lsrs	r3, r3, #11
 8005a3a:	f003 0307 	and.w	r3, r3, #7
 8005a3e:	4a04      	ldr	r2, [pc, #16]	; (8005a50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a44:	f003 031f 	and.w	r3, r3, #31
 8005a48:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	bd98      	pop	{r3, r4, r7, pc}
 8005a50:	08014dd0 	.word	0x08014dd0

08005a54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005a54:	b590      	push	{r4, r7, lr}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2bb0      	cmp	r3, #176	; 0xb0
 8005a60:	d903      	bls.n	8005a6a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005a62:	4b15      	ldr	r3, [pc, #84]	; (8005ab8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	e007      	b.n	8005a7a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	091b      	lsrs	r3, r3, #4
 8005a6e:	f003 030f 	and.w	r3, r3, #15
 8005a72:	4a11      	ldr	r2, [pc, #68]	; (8005ab8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a78:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005a7a:	f7ff f9a7 	bl	8004dcc <LL_RCC_GetAHB4Prescaler>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	091b      	lsrs	r3, r3, #4
 8005a82:	f003 030f 	and.w	r3, r3, #15
 8005a86:	4a0d      	ldr	r2, [pc, #52]	; (8005abc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a92:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	4a0a      	ldr	r2, [pc, #40]	; (8005ac0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005a98:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9c:	0c9c      	lsrs	r4, r3, #18
 8005a9e:	f7fe fee5 	bl	800486c <HAL_PWREx_GetVoltageRange>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f000 f80c 	bl	8005ac4 <RCC_SetFlashLatency>
 8005aac:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd90      	pop	{r4, r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	08014df0 	.word	0x08014df0
 8005abc:	08014d90 	.word	0x08014d90
 8005ac0:	431bde83 	.word	0x431bde83

08005ac4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005ac4:	b590      	push	{r4, r7, lr}
 8005ac6:	b093      	sub	sp, #76	; 0x4c
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005ace:	4b37      	ldr	r3, [pc, #220]	; (8005bac <RCC_SetFlashLatency+0xe8>)
 8005ad0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005ad4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ad6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005ada:	4a35      	ldr	r2, [pc, #212]	; (8005bb0 <RCC_SetFlashLatency+0xec>)
 8005adc:	f107 031c 	add.w	r3, r7, #28
 8005ae0:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ae2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005ae6:	4b33      	ldr	r3, [pc, #204]	; (8005bb4 <RCC_SetFlashLatency+0xf0>)
 8005ae8:	f107 040c 	add.w	r4, r7, #12
 8005aec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005aee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005af2:	2300      	movs	r3, #0
 8005af4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005afc:	d11a      	bne.n	8005b34 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005afe:	2300      	movs	r3, #0
 8005b00:	643b      	str	r3, [r7, #64]	; 0x40
 8005b02:	e013      	b.n	8005b2c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	3348      	adds	r3, #72	; 0x48
 8005b0a:	443b      	add	r3, r7
 8005b0c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d807      	bhi.n	8005b26 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	3348      	adds	r3, #72	; 0x48
 8005b1c:	443b      	add	r3, r7
 8005b1e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005b22:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005b24:	e020      	b.n	8005b68 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b28:	3301      	adds	r3, #1
 8005b2a:	643b      	str	r3, [r7, #64]	; 0x40
 8005b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d9e8      	bls.n	8005b04 <RCC_SetFlashLatency+0x40>
 8005b32:	e019      	b.n	8005b68 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005b34:	2300      	movs	r3, #0
 8005b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b38:	e013      	b.n	8005b62 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	3348      	adds	r3, #72	; 0x48
 8005b40:	443b      	add	r3, r7
 8005b42:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d807      	bhi.n	8005b5c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	3348      	adds	r3, #72	; 0x48
 8005b52:	443b      	add	r3, r7
 8005b54:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005b58:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005b5a:	e005      	b.n	8005b68 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b5e:	3301      	adds	r3, #1
 8005b60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d9e8      	bls.n	8005b3a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005b68:	4b13      	ldr	r3, [pc, #76]	; (8005bb8 <RCC_SetFlashLatency+0xf4>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f023 0207 	bic.w	r2, r3, #7
 8005b70:	4911      	ldr	r1, [pc, #68]	; (8005bb8 <RCC_SetFlashLatency+0xf4>)
 8005b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b74:	4313      	orrs	r3, r2
 8005b76:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b78:	f7fb ffdc 	bl	8001b34 <HAL_GetTick>
 8005b7c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005b7e:	e008      	b.n	8005b92 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b80:	f7fb ffd8 	bl	8001b34 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d901      	bls.n	8005b92 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e007      	b.n	8005ba2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005b92:	4b09      	ldr	r3, [pc, #36]	; (8005bb8 <RCC_SetFlashLatency+0xf4>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0307 	and.w	r3, r3, #7
 8005b9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d1ef      	bne.n	8005b80 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	374c      	adds	r7, #76	; 0x4c
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd90      	pop	{r4, r7, pc}
 8005baa:	bf00      	nop
 8005bac:	08014700 	.word	0x08014700
 8005bb0:	08014710 	.word	0x08014710
 8005bb4:	0801471c 	.word	0x0801471c
 8005bb8:	58004000 	.word	0x58004000

08005bbc <LL_RCC_LSE_IsEnabled>:
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d101      	bne.n	8005bd4 <LL_RCC_LSE_IsEnabled+0x18>
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e000      	b.n	8005bd6 <LL_RCC_LSE_IsEnabled+0x1a>
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <LL_RCC_LSE_IsReady>:
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d101      	bne.n	8005bf8 <LL_RCC_LSE_IsReady+0x18>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e000      	b.n	8005bfa <LL_RCC_LSE_IsReady+0x1a>
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <LL_RCC_SetRFWKPClockSource>:
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <LL_RCC_SetSMPSClockSource>:
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	f023 0203 	bic.w	r2, r3, #3
 8005c42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <LL_RCC_SetSMPSPrescaler>:
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <LL_RCC_SetUSARTClockSource>:
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c90:	f023 0203 	bic.w	r2, r3, #3
 8005c94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <LL_RCC_SetLPUARTClockSource>:
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cbc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005cc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <LL_RCC_SetI2CClockSource>:
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	091b      	lsrs	r3, r3, #4
 8005cec:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005cf0:	43db      	mvns	r3, r3
 8005cf2:	401a      	ands	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005cfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d00:	4313      	orrs	r3, r2
 8005d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d06:	bf00      	nop
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <LL_RCC_SetLPTIMClockSource>:
{
 8005d12:	b480      	push	{r7}
 8005d14:	b083      	sub	sp, #12
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	0c1b      	lsrs	r3, r3, #16
 8005d26:	041b      	lsls	r3, r3, #16
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	401a      	ands	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	041b      	lsls	r3, r3, #16
 8005d30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d34:	4313      	orrs	r3, r2
 8005d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d3a:	bf00      	nop
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <LL_RCC_SetSAIClockSource>:
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <LL_RCC_SetRNGClockSource>:
{
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d82:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005d86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <LL_RCC_SetCLK48ClockSource>:
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005db2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005dbe:	bf00      	nop
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <LL_RCC_SetUSBClockSource>:
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7ff ffe3 	bl	8005d9e <LL_RCC_SetCLK48ClockSource>
}
 8005dd8:	bf00      	nop
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <LL_RCC_SetADCClockSource>:
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005df4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <LL_RCC_SetRTCClockSource>:
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <LL_RCC_GetRTCClockSource>:
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <LL_RCC_ForceBackupDomainReset>:
{
 8005e52:	b480      	push	{r7}
 8005e54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005e6a:	bf00      	nop
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005e74:	b480      	push	{r7}
 8005e76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005e8c:	bf00      	nop
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <LL_RCC_PLLSAI1_Enable>:
{
 8005e96:	b480      	push	{r7}
 8005e98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ea4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ea8:	6013      	str	r3, [r2, #0]
}
 8005eaa:	bf00      	nop
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <LL_RCC_PLLSAI1_Disable>:
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ec2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ec6:	6013      	str	r3, [r2, #0]
}
 8005ec8:	bf00      	nop
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <LL_RCC_PLLSAI1_IsReady>:
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ee0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ee4:	d101      	bne.n	8005eea <LL_RCC_PLLSAI1_IsReady+0x18>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b088      	sub	sp, #32
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005efe:	2300      	movs	r3, #0
 8005f00:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005f02:	2300      	movs	r3, #0
 8005f04:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d034      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f16:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f1a:	d021      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005f1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f20:	d81b      	bhi.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f26:	d01d      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005f28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f2c:	d815      	bhi.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00b      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f36:	d110      	bne.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f46:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005f48:	e00d      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 f947 	bl	80061e2 <RCCEx_PLLSAI1_ConfigNP>
 8005f54:	4603      	mov	r3, r0
 8005f56:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005f58:	e005      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	77fb      	strb	r3, [r7, #31]
        break;
 8005f5e:	e002      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005f60:	bf00      	nop
 8005f62:	e000      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f66:	7ffb      	ldrb	r3, [r7, #31]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d105      	bne.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff fee8 	bl	8005d46 <LL_RCC_SetSAIClockSource>
 8005f76:	e001      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f78:	7ffb      	ldrb	r3, [r7, #31]
 8005f7a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d046      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005f88:	f7ff ff56 	bl	8005e38 <LL_RCC_GetRTCClockSource>
 8005f8c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d03c      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005f98:	f7fe fc58 	bl	800484c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d105      	bne.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7ff ff30 	bl	8005e0c <LL_RCC_SetRTCClockSource>
 8005fac:	e02e      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005fb8:	f7ff ff4b 	bl	8005e52 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005fbc:	f7ff ff5a 	bl	8005e74 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005fce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005fd8:	f7ff fdf0 	bl	8005bbc <LL_RCC_LSE_IsEnabled>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d114      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005fe2:	f7fb fda7 	bl	8001b34 <HAL_GetTick>
 8005fe6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005fe8:	e00b      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fea:	f7fb fda3 	bl	8001b34 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d902      	bls.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	77fb      	strb	r3, [r7, #31]
              break;
 8006000:	e004      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006002:	f7ff fded 	bl	8005be0 <LL_RCC_LSE_IsReady>
 8006006:	4603      	mov	r3, r0
 8006008:	2b01      	cmp	r3, #1
 800600a:	d1ee      	bne.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800600c:	7ffb      	ldrb	r3, [r7, #31]
 800600e:	77bb      	strb	r3, [r7, #30]
 8006010:	e001      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006012:	7ffb      	ldrb	r3, [r7, #31]
 8006014:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	d004      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	4618      	mov	r0, r3
 8006028:	f7ff fe2a 	bl	8005c80 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d004      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	4618      	mov	r0, r3
 800603e:	f7ff fe35 	bl	8005cac <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0310 	and.w	r3, r3, #16
 800604a:	2b00      	cmp	r3, #0
 800604c:	d004      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006052:	4618      	mov	r0, r3
 8006054:	f7ff fe5d 	bl	8005d12 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0320 	and.w	r3, r3, #32
 8006060:	2b00      	cmp	r3, #0
 8006062:	d004      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff fe52 	bl	8005d12 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0304 	and.w	r3, r3, #4
 8006076:	2b00      	cmp	r3, #0
 8006078:	d004      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	4618      	mov	r0, r3
 8006080:	f7ff fe2a 	bl	8005cd8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0308 	and.w	r3, r3, #8
 800608c:	2b00      	cmp	r3, #0
 800608e:	d004      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff fe1f 	bl	8005cd8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d022      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7ff fe8d 	bl	8005dca <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060b8:	d107      	bne.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80060ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060c8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060d2:	d10b      	bne.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	3304      	adds	r3, #4
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 f8dd 	bl	8006298 <RCCEx_PLLSAI1_ConfigNQ>
 80060de:	4603      	mov	r3, r0
 80060e0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80060e2:	7ffb      	ldrb	r3, [r7, #31]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80060e8:	7ffb      	ldrb	r3, [r7, #31]
 80060ea:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d02b      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006100:	d008      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006106:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800610a:	d003      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006110:	2b00      	cmp	r3, #0
 8006112:	d105      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006118:	4618      	mov	r0, r3
 800611a:	f7ff fe2a 	bl	8005d72 <LL_RCC_SetRNGClockSource>
 800611e:	e00a      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	2000      	movs	r0, #0
 800612c:	f7ff fe21 	bl	8005d72 <LL_RCC_SetRNGClockSource>
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f7ff fe34 	bl	8005d9e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800613e:	d107      	bne.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800614a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800614e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006158:	2b00      	cmp	r3, #0
 800615a:	d022      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006160:	4618      	mov	r0, r3
 8006162:	f7ff fe3d 	bl	8005de0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800616e:	d107      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800617a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800617e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006184:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006188:	d10b      	bne.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	3304      	adds	r3, #4
 800618e:	4618      	mov	r0, r3
 8006190:	f000 f8dd 	bl	800634e <RCCEx_PLLSAI1_ConfigNR>
 8006194:	4603      	mov	r3, r0
 8006196:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006198:	7ffb      	ldrb	r3, [r7, #31]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800619e:	7ffb      	ldrb	r3, [r7, #31]
 80061a0:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d004      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7ff fd26 	bl	8005c04 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d009      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7ff fd45 	bl	8005c58 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff fd2c 	bl	8005c30 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80061d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3720      	adds	r7, #32
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b084      	sub	sp, #16
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80061ee:	f7ff fe61 	bl	8005eb4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80061f2:	f7fb fc9f 	bl	8001b34 <HAL_GetTick>
 80061f6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80061f8:	e009      	b.n	800620e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061fa:	f7fb fc9b 	bl	8001b34 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b02      	cmp	r3, #2
 8006206:	d902      	bls.n	800620e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	73fb      	strb	r3, [r7, #15]
      break;
 800620c:	e004      	b.n	8006218 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800620e:	f7ff fe60 	bl	8005ed2 <LL_RCC_PLLSAI1_IsReady>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1f0      	bne.n	80061fa <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006218:	7bfb      	ldrb	r3, [r7, #15]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d137      	bne.n	800628e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800621e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	021b      	lsls	r3, r3, #8
 800622e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006232:	4313      	orrs	r3, r2
 8006234:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006248:	4313      	orrs	r3, r2
 800624a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800624c:	f7ff fe23 	bl	8005e96 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006250:	f7fb fc70 	bl	8001b34 <HAL_GetTick>
 8006254:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006256:	e009      	b.n	800626c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006258:	f7fb fc6c 	bl	8001b34 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b02      	cmp	r3, #2
 8006264:	d902      	bls.n	800626c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	73fb      	strb	r3, [r7, #15]
        break;
 800626a:	e004      	b.n	8006276 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800626c:	f7ff fe31 	bl	8005ed2 <LL_RCC_PLLSAI1_IsReady>
 8006270:	4603      	mov	r3, r0
 8006272:	2b01      	cmp	r3, #1
 8006274:	d1f0      	bne.n	8006258 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006276:	7bfb      	ldrb	r3, [r7, #15]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d108      	bne.n	800628e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800627c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006280:	691a      	ldr	r2, [r3, #16]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800628a:	4313      	orrs	r3, r2
 800628c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800628e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80062a4:	f7ff fe06 	bl	8005eb4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80062a8:	f7fb fc44 	bl	8001b34 <HAL_GetTick>
 80062ac:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80062ae:	e009      	b.n	80062c4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062b0:	f7fb fc40 	bl	8001b34 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d902      	bls.n	80062c4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	73fb      	strb	r3, [r7, #15]
      break;
 80062c2:	e004      	b.n	80062ce <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80062c4:	f7ff fe05 	bl	8005ed2 <LL_RCC_PLLSAI1_IsReady>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1f0      	bne.n	80062b0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d137      	bne.n	8006344 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80062d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	021b      	lsls	r3, r3, #8
 80062e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062e8:	4313      	orrs	r3, r2
 80062ea:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80062ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062fe:	4313      	orrs	r3, r2
 8006300:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006302:	f7ff fdc8 	bl	8005e96 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006306:	f7fb fc15 	bl	8001b34 <HAL_GetTick>
 800630a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800630c:	e009      	b.n	8006322 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800630e:	f7fb fc11 	bl	8001b34 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	2b02      	cmp	r3, #2
 800631a:	d902      	bls.n	8006322 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	73fb      	strb	r3, [r7, #15]
        break;
 8006320:	e004      	b.n	800632c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006322:	f7ff fdd6 	bl	8005ed2 <LL_RCC_PLLSAI1_IsReady>
 8006326:	4603      	mov	r3, r0
 8006328:	2b01      	cmp	r3, #1
 800632a:	d1f0      	bne.n	800630e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800632c:	7bfb      	ldrb	r3, [r7, #15]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d108      	bne.n	8006344 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006336:	691a      	ldr	r2, [r3, #16]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006340:	4313      	orrs	r3, r2
 8006342:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006344:	7bfb      	ldrb	r3, [r7, #15]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006356:	2300      	movs	r3, #0
 8006358:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800635a:	f7ff fdab 	bl	8005eb4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800635e:	f7fb fbe9 	bl	8001b34 <HAL_GetTick>
 8006362:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006364:	e009      	b.n	800637a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006366:	f7fb fbe5 	bl	8001b34 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	2b02      	cmp	r3, #2
 8006372:	d902      	bls.n	800637a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	73fb      	strb	r3, [r7, #15]
      break;
 8006378:	e004      	b.n	8006384 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800637a:	f7ff fdaa 	bl	8005ed2 <LL_RCC_PLLSAI1_IsReady>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1f0      	bne.n	8006366 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006384:	7bfb      	ldrb	r3, [r7, #15]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d137      	bne.n	80063fa <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800638a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	021b      	lsls	r3, r3, #8
 800639a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800639e:	4313      	orrs	r3, r2
 80063a0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80063a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063b4:	4313      	orrs	r3, r2
 80063b6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80063b8:	f7ff fd6d 	bl	8005e96 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063bc:	f7fb fbba 	bl	8001b34 <HAL_GetTick>
 80063c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80063c2:	e009      	b.n	80063d8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063c4:	f7fb fbb6 	bl	8001b34 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d902      	bls.n	80063d8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	73fb      	strb	r3, [r7, #15]
        break;
 80063d6:	e004      	b.n	80063e2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80063d8:	f7ff fd7b 	bl	8005ed2 <LL_RCC_PLLSAI1_IsReady>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d1f0      	bne.n	80063c4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d108      	bne.n	80063fa <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80063e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ec:	691a      	ldr	r2, [r3, #16]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063f6:	4313      	orrs	r3, r2
 80063f8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e090      	b.n	8006538 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d106      	bne.n	8006430 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7fb f99c 	bl	8001768 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	22ca      	movs	r2, #202	; 0xca
 800643e:	625a      	str	r2, [r3, #36]	; 0x24
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2253      	movs	r2, #83	; 0x53
 8006446:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f89f 	bl	800658c <RTC_EnterInitMode>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d009      	beq.n	8006468 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	22ff      	movs	r2, #255	; 0xff
 800645a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2204      	movs	r2, #4
 8006460:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e067      	b.n	8006538 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6812      	ldr	r2, [r2, #0]
 8006472:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800647a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6899      	ldr	r1, [r3, #8]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	431a      	orrs	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	431a      	orrs	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	68d2      	ldr	r2, [r2, #12]
 80064a2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6919      	ldr	r1, [r3, #16]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	041a      	lsls	r2, r3, #16
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	430a      	orrs	r2, r1
 80064b6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064c6:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0203 	bic.w	r2, r2, #3
 80064d6:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	69da      	ldr	r2, [r3, #28]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	431a      	orrs	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d113      	bne.n	8006526 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f81e 	bl	8006540 <HAL_RTC_WaitForSynchro>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00d      	beq.n	8006526 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	22ff      	movs	r2, #255	; 0xff
 8006510:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2204      	movs	r2, #4
 8006516:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e008      	b.n	8006538 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	22ff      	movs	r2, #255	; 0xff
 800652c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8006536:	2300      	movs	r3, #0
  }
}
 8006538:	4618      	mov	r0, r3
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006556:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006558:	f7fb faec 	bl	8001b34 <HAL_GetTick>
 800655c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800655e:	e009      	b.n	8006574 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006560:	f7fb fae8 	bl	8001b34 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800656e:	d901      	bls.n	8006574 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e007      	b.n	8006584 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b00      	cmp	r3, #0
 8006580:	d0ee      	beq.n	8006560 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d119      	bne.n	80065d6 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f04f 32ff 	mov.w	r2, #4294967295
 80065aa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80065ac:	f7fb fac2 	bl	8001b34 <HAL_GetTick>
 80065b0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80065b2:	e009      	b.n	80065c8 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80065b4:	f7fb fabe 	bl	8001b34 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065c2:	d901      	bls.n	80065c8 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e007      	b.n	80065d8 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d0ee      	beq.n	80065b4 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <LL_RCC_GetUSARTClockSource>:
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80065e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4013      	ands	r3, r2
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <LL_RCC_GetLPUARTClockSource>:
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800660c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4013      	ands	r3, r2
}
 8006614:	4618      	mov	r0, r3
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e042      	b.n	80066b8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006638:	2b00      	cmp	r3, #0
 800663a:	d106      	bne.n	800664a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f7fb f8bb 	bl	80017c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2224      	movs	r2, #36	; 0x24
 800664e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0201 	bic.w	r2, r2, #1
 8006660:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f8c2 	bl	80067ec <UART_SetConfig>
 8006668:	4603      	mov	r3, r0
 800666a:	2b01      	cmp	r3, #1
 800666c:	d101      	bne.n	8006672 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e022      	b.n	80066b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006676:	2b00      	cmp	r3, #0
 8006678:	d002      	beq.n	8006680 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fadc 	bl	8006c38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800668e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689a      	ldr	r2, [r3, #8]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800669e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f042 0201 	orr.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 fb63 	bl	8006d7c <UART_CheckIdleState>
 80066b6:	4603      	mov	r3, r0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b08a      	sub	sp, #40	; 0x28
 80066c4:	af02      	add	r7, sp, #8
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	603b      	str	r3, [r7, #0]
 80066cc:	4613      	mov	r3, r2
 80066ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066d6:	2b20      	cmp	r3, #32
 80066d8:	f040 8083 	bne.w	80067e2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <HAL_UART_Transmit+0x28>
 80066e2:	88fb      	ldrh	r3, [r7, #6]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e07b      	b.n	80067e4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d101      	bne.n	80066fa <HAL_UART_Transmit+0x3a>
 80066f6:	2302      	movs	r3, #2
 80066f8:	e074      	b.n	80067e4 <HAL_UART_Transmit+0x124>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2221      	movs	r2, #33	; 0x21
 800670e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006712:	f7fb fa0f 	bl	8001b34 <HAL_GetTick>
 8006716:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	88fa      	ldrh	r2, [r7, #6]
 800671c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	88fa      	ldrh	r2, [r7, #6]
 8006724:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006730:	d108      	bne.n	8006744 <HAL_UART_Transmit+0x84>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d104      	bne.n	8006744 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800673a:	2300      	movs	r3, #0
 800673c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	61bb      	str	r3, [r7, #24]
 8006742:	e003      	b.n	800674c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006748:	2300      	movs	r3, #0
 800674a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006754:	e02c      	b.n	80067b0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2200      	movs	r2, #0
 800675e:	2180      	movs	r1, #128	; 0x80
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f000 fb56 	bl	8006e12 <UART_WaitOnFlagUntilTimeout>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e039      	b.n	80067e4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10b      	bne.n	800678e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	881b      	ldrh	r3, [r3, #0]
 800677a:	461a      	mov	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006784:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	3302      	adds	r3, #2
 800678a:	61bb      	str	r3, [r7, #24]
 800678c:	e007      	b.n	800679e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	781a      	ldrb	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	3301      	adds	r3, #1
 800679c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	3b01      	subs	r3, #1
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1cc      	bne.n	8006756 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	2200      	movs	r2, #0
 80067c4:	2140      	movs	r1, #64	; 0x40
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 fb23 	bl	8006e12 <UART_WaitOnFlagUntilTimeout>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e006      	b.n	80067e4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2220      	movs	r2, #32
 80067da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	e000      	b.n	80067e4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80067e2:	2302      	movs	r3, #2
  }
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3720      	adds	r7, #32
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067f0:	b08c      	sub	sp, #48	; 0x30
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	431a      	orrs	r2, r3
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	431a      	orrs	r2, r3
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	4313      	orrs	r3, r2
 8006812:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	4baf      	ldr	r3, [pc, #700]	; (8006ad8 <UART_SetConfig+0x2ec>)
 800681c:	4013      	ands	r3, r2
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	6812      	ldr	r2, [r2, #0]
 8006822:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006824:	430b      	orrs	r3, r1
 8006826:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4aa4      	ldr	r2, [pc, #656]	; (8006adc <UART_SetConfig+0x2f0>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d004      	beq.n	8006858 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006854:	4313      	orrs	r3, r2
 8006856:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006862:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	6812      	ldr	r2, [r2, #0]
 800686a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800686c:	430b      	orrs	r3, r1
 800686e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006876:	f023 010f 	bic.w	r1, r3, #15
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a95      	ldr	r2, [pc, #596]	; (8006ae0 <UART_SetConfig+0x2f4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d125      	bne.n	80068dc <UART_SetConfig+0xf0>
 8006890:	2003      	movs	r0, #3
 8006892:	f7ff fea5 	bl	80065e0 <LL_RCC_GetUSARTClockSource>
 8006896:	4603      	mov	r3, r0
 8006898:	2b03      	cmp	r3, #3
 800689a:	d81b      	bhi.n	80068d4 <UART_SetConfig+0xe8>
 800689c:	a201      	add	r2, pc, #4	; (adr r2, 80068a4 <UART_SetConfig+0xb8>)
 800689e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a2:	bf00      	nop
 80068a4:	080068b5 	.word	0x080068b5
 80068a8:	080068c5 	.word	0x080068c5
 80068ac:	080068bd 	.word	0x080068bd
 80068b0:	080068cd 	.word	0x080068cd
 80068b4:	2301      	movs	r3, #1
 80068b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ba:	e042      	b.n	8006942 <UART_SetConfig+0x156>
 80068bc:	2302      	movs	r3, #2
 80068be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068c2:	e03e      	b.n	8006942 <UART_SetConfig+0x156>
 80068c4:	2304      	movs	r3, #4
 80068c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ca:	e03a      	b.n	8006942 <UART_SetConfig+0x156>
 80068cc:	2308      	movs	r3, #8
 80068ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068d2:	e036      	b.n	8006942 <UART_SetConfig+0x156>
 80068d4:	2310      	movs	r3, #16
 80068d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068da:	e032      	b.n	8006942 <UART_SetConfig+0x156>
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a7e      	ldr	r2, [pc, #504]	; (8006adc <UART_SetConfig+0x2f0>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d12a      	bne.n	800693c <UART_SetConfig+0x150>
 80068e6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80068ea:	f7ff fe89 	bl	8006600 <LL_RCC_GetLPUARTClockSource>
 80068ee:	4603      	mov	r3, r0
 80068f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068f4:	d01a      	beq.n	800692c <UART_SetConfig+0x140>
 80068f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068fa:	d81b      	bhi.n	8006934 <UART_SetConfig+0x148>
 80068fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006900:	d00c      	beq.n	800691c <UART_SetConfig+0x130>
 8006902:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006906:	d815      	bhi.n	8006934 <UART_SetConfig+0x148>
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <UART_SetConfig+0x128>
 800690c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006910:	d008      	beq.n	8006924 <UART_SetConfig+0x138>
 8006912:	e00f      	b.n	8006934 <UART_SetConfig+0x148>
 8006914:	2300      	movs	r3, #0
 8006916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800691a:	e012      	b.n	8006942 <UART_SetConfig+0x156>
 800691c:	2302      	movs	r3, #2
 800691e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006922:	e00e      	b.n	8006942 <UART_SetConfig+0x156>
 8006924:	2304      	movs	r3, #4
 8006926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800692a:	e00a      	b.n	8006942 <UART_SetConfig+0x156>
 800692c:	2308      	movs	r3, #8
 800692e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006932:	e006      	b.n	8006942 <UART_SetConfig+0x156>
 8006934:	2310      	movs	r3, #16
 8006936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800693a:	e002      	b.n	8006942 <UART_SetConfig+0x156>
 800693c:	2310      	movs	r3, #16
 800693e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a65      	ldr	r2, [pc, #404]	; (8006adc <UART_SetConfig+0x2f0>)
 8006948:	4293      	cmp	r3, r2
 800694a:	f040 8097 	bne.w	8006a7c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800694e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006952:	2b08      	cmp	r3, #8
 8006954:	d823      	bhi.n	800699e <UART_SetConfig+0x1b2>
 8006956:	a201      	add	r2, pc, #4	; (adr r2, 800695c <UART_SetConfig+0x170>)
 8006958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695c:	08006981 	.word	0x08006981
 8006960:	0800699f 	.word	0x0800699f
 8006964:	08006989 	.word	0x08006989
 8006968:	0800699f 	.word	0x0800699f
 800696c:	0800698f 	.word	0x0800698f
 8006970:	0800699f 	.word	0x0800699f
 8006974:	0800699f 	.word	0x0800699f
 8006978:	0800699f 	.word	0x0800699f
 800697c:	08006997 	.word	0x08006997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006980:	f7ff f83c 	bl	80059fc <HAL_RCC_GetPCLK1Freq>
 8006984:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006986:	e010      	b.n	80069aa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006988:	4b56      	ldr	r3, [pc, #344]	; (8006ae4 <UART_SetConfig+0x2f8>)
 800698a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800698c:	e00d      	b.n	80069aa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800698e:	f7fe ffb5 	bl	80058fc <HAL_RCC_GetSysClockFreq>
 8006992:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006994:	e009      	b.n	80069aa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800699c:	e005      	b.n	80069aa <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800699e:	2300      	movs	r3, #0
 80069a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80069a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 812a 	beq.w	8006c06 <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b6:	4a4c      	ldr	r2, [pc, #304]	; (8006ae8 <UART_SetConfig+0x2fc>)
 80069b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069bc:	461a      	mov	r2, r3
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80069c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	4613      	mov	r3, r2
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	4413      	add	r3, r2
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d305      	bcc.n	80069e2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d903      	bls.n	80069ea <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80069e8:	e10d      	b.n	8006c06 <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	2200      	movs	r2, #0
 80069ee:	60bb      	str	r3, [r7, #8]
 80069f0:	60fa      	str	r2, [r7, #12]
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f6:	4a3c      	ldr	r2, [pc, #240]	; (8006ae8 <UART_SetConfig+0x2fc>)
 80069f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2200      	movs	r2, #0
 8006a00:	603b      	str	r3, [r7, #0]
 8006a02:	607a      	str	r2, [r7, #4]
 8006a04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a0c:	f7f9 fc10 	bl	8000230 <__aeabi_uldivmod>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	4610      	mov	r0, r2
 8006a16:	4619      	mov	r1, r3
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	f04f 0300 	mov.w	r3, #0
 8006a20:	020b      	lsls	r3, r1, #8
 8006a22:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a26:	0202      	lsls	r2, r0, #8
 8006a28:	6979      	ldr	r1, [r7, #20]
 8006a2a:	6849      	ldr	r1, [r1, #4]
 8006a2c:	0849      	lsrs	r1, r1, #1
 8006a2e:	2000      	movs	r0, #0
 8006a30:	460c      	mov	r4, r1
 8006a32:	4605      	mov	r5, r0
 8006a34:	eb12 0804 	adds.w	r8, r2, r4
 8006a38:	eb43 0905 	adc.w	r9, r3, r5
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	469a      	mov	sl, r3
 8006a44:	4693      	mov	fp, r2
 8006a46:	4652      	mov	r2, sl
 8006a48:	465b      	mov	r3, fp
 8006a4a:	4640      	mov	r0, r8
 8006a4c:	4649      	mov	r1, r9
 8006a4e:	f7f9 fbef 	bl	8000230 <__aeabi_uldivmod>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4613      	mov	r3, r2
 8006a58:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a60:	d308      	bcc.n	8006a74 <UART_SetConfig+0x288>
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a68:	d204      	bcs.n	8006a74 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6a3a      	ldr	r2, [r7, #32]
 8006a70:	60da      	str	r2, [r3, #12]
 8006a72:	e0c8      	b.n	8006c06 <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a7a:	e0c4      	b.n	8006c06 <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	69db      	ldr	r3, [r3, #28]
 8006a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a84:	d16d      	bne.n	8006b62 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006a86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	2b07      	cmp	r3, #7
 8006a8e:	d82d      	bhi.n	8006aec <UART_SetConfig+0x300>
 8006a90:	a201      	add	r2, pc, #4	; (adr r2, 8006a98 <UART_SetConfig+0x2ac>)
 8006a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a96:	bf00      	nop
 8006a98:	08006ab9 	.word	0x08006ab9
 8006a9c:	08006ac1 	.word	0x08006ac1
 8006aa0:	08006aed 	.word	0x08006aed
 8006aa4:	08006ac7 	.word	0x08006ac7
 8006aa8:	08006aed 	.word	0x08006aed
 8006aac:	08006aed 	.word	0x08006aed
 8006ab0:	08006aed 	.word	0x08006aed
 8006ab4:	08006acf 	.word	0x08006acf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ab8:	f7fe ffb6 	bl	8005a28 <HAL_RCC_GetPCLK2Freq>
 8006abc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006abe:	e01b      	b.n	8006af8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ac0:	4b08      	ldr	r3, [pc, #32]	; (8006ae4 <UART_SetConfig+0x2f8>)
 8006ac2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ac4:	e018      	b.n	8006af8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ac6:	f7fe ff19 	bl	80058fc <HAL_RCC_GetSysClockFreq>
 8006aca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006acc:	e014      	b.n	8006af8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ad4:	e010      	b.n	8006af8 <UART_SetConfig+0x30c>
 8006ad6:	bf00      	nop
 8006ad8:	cfff69f3 	.word	0xcfff69f3
 8006adc:	40008000 	.word	0x40008000
 8006ae0:	40013800 	.word	0x40013800
 8006ae4:	00f42400 	.word	0x00f42400
 8006ae8:	08014e30 	.word	0x08014e30
      default:
        pclk = 0U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006af6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 8083 	beq.w	8006c06 <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b04:	4a4a      	ldr	r2, [pc, #296]	; (8006c30 <UART_SetConfig+0x444>)
 8006b06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b12:	005a      	lsls	r2, r3, #1
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	085b      	lsrs	r3, r3, #1
 8006b1a:	441a      	add	r2, r3
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b24:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b26:	6a3b      	ldr	r3, [r7, #32]
 8006b28:	2b0f      	cmp	r3, #15
 8006b2a:	d916      	bls.n	8006b5a <UART_SetConfig+0x36e>
 8006b2c:	6a3b      	ldr	r3, [r7, #32]
 8006b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b32:	d212      	bcs.n	8006b5a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	f023 030f 	bic.w	r3, r3, #15
 8006b3c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	085b      	lsrs	r3, r3, #1
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	f003 0307 	and.w	r3, r3, #7
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	8bfb      	ldrh	r3, [r7, #30]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	8bfa      	ldrh	r2, [r7, #30]
 8006b56:	60da      	str	r2, [r3, #12]
 8006b58:	e055      	b.n	8006c06 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006b60:	e051      	b.n	8006c06 <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b66:	3b01      	subs	r3, #1
 8006b68:	2b07      	cmp	r3, #7
 8006b6a:	d822      	bhi.n	8006bb2 <UART_SetConfig+0x3c6>
 8006b6c:	a201      	add	r2, pc, #4	; (adr r2, 8006b74 <UART_SetConfig+0x388>)
 8006b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b72:	bf00      	nop
 8006b74:	08006b95 	.word	0x08006b95
 8006b78:	08006b9d 	.word	0x08006b9d
 8006b7c:	08006bb3 	.word	0x08006bb3
 8006b80:	08006ba3 	.word	0x08006ba3
 8006b84:	08006bb3 	.word	0x08006bb3
 8006b88:	08006bb3 	.word	0x08006bb3
 8006b8c:	08006bb3 	.word	0x08006bb3
 8006b90:	08006bab 	.word	0x08006bab
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b94:	f7fe ff48 	bl	8005a28 <HAL_RCC_GetPCLK2Freq>
 8006b98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b9a:	e010      	b.n	8006bbe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b9c:	4b25      	ldr	r3, [pc, #148]	; (8006c34 <UART_SetConfig+0x448>)
 8006b9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ba0:	e00d      	b.n	8006bbe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ba2:	f7fe feab 	bl	80058fc <HAL_RCC_GetSysClockFreq>
 8006ba6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ba8:	e009      	b.n	8006bbe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006bb0:	e005      	b.n	8006bbe <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006bbc:	bf00      	nop
    }

    if (pclk != 0U)
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d020      	beq.n	8006c06 <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc8:	4a19      	ldr	r2, [pc, #100]	; (8006c30 <UART_SetConfig+0x444>)
 8006bca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	085b      	lsrs	r3, r3, #1
 8006bdc:	441a      	add	r2, r3
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006be8:	6a3b      	ldr	r3, [r7, #32]
 8006bea:	2b0f      	cmp	r3, #15
 8006bec:	d908      	bls.n	8006c00 <UART_SetConfig+0x414>
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bf4:	d204      	bcs.n	8006c00 <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6a3a      	ldr	r2, [r7, #32]
 8006bfc:	60da      	str	r2, [r3, #12]
 8006bfe:	e002      	b.n	8006c06 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006c22:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3730      	adds	r7, #48	; 0x30
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c30:	08014e30 	.word	0x08014e30
 8006c34:	00f42400 	.word	0x00f42400

08006c38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00a      	beq.n	8006c62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00a      	beq.n	8006c84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c88:	f003 0304 	and.w	r3, r3, #4
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00a      	beq.n	8006ca6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006caa:	f003 0308 	and.w	r3, r3, #8
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00a      	beq.n	8006cc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ccc:	f003 0310 	and.w	r3, r3, #16
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00a      	beq.n	8006cea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00a      	beq.n	8006d0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d01a      	beq.n	8006d4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d36:	d10a      	bne.n	8006d4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00a      	beq.n	8006d70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	605a      	str	r2, [r3, #4]
  }
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af02      	add	r7, sp, #8
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d8c:	f7fa fed2 	bl	8001b34 <HAL_GetTick>
 8006d90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0308 	and.w	r3, r3, #8
 8006d9c:	2b08      	cmp	r3, #8
 8006d9e:	d10e      	bne.n	8006dbe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006da0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f82f 	bl	8006e12 <UART_WaitOnFlagUntilTimeout>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d001      	beq.n	8006dbe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e025      	b.n	8006e0a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0304 	and.w	r3, r3, #4
 8006dc8:	2b04      	cmp	r3, #4
 8006dca:	d10e      	bne.n	8006dea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dd0:	9300      	str	r3, [sp, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f819 	bl	8006e12 <UART_WaitOnFlagUntilTimeout>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e00f      	b.n	8006e0a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2220      	movs	r2, #32
 8006dee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2220      	movs	r2, #32
 8006df6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b09c      	sub	sp, #112	; 0x70
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	60f8      	str	r0, [r7, #12]
 8006e1a:	60b9      	str	r1, [r7, #8]
 8006e1c:	603b      	str	r3, [r7, #0]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e22:	e0a9      	b.n	8006f78 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2a:	f000 80a5 	beq.w	8006f78 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e2e:	f7fa fe81 	bl	8001b34 <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d302      	bcc.n	8006e44 <UART_WaitOnFlagUntilTimeout+0x32>
 8006e3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d140      	bne.n	8006ec6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e4c:	e853 3f00 	ldrex	r3, [r3]
 8006e50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e58:	667b      	str	r3, [r7, #100]	; 0x64
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e64:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e6a:	e841 2300 	strex	r3, r2, [r1]
 8006e6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1e6      	bne.n	8006e44 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3308      	adds	r3, #8
 8006e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e80:	e853 3f00 	ldrex	r3, [r3]
 8006e84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e88:	f023 0301 	bic.w	r3, r3, #1
 8006e8c:	663b      	str	r3, [r7, #96]	; 0x60
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3308      	adds	r3, #8
 8006e94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e96:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e9e:	e841 2300 	strex	r3, r2, [r1]
 8006ea2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1e5      	bne.n	8006e76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2220      	movs	r2, #32
 8006eae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e069      	b.n	8006f9a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0304 	and.w	r3, r3, #4
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d051      	beq.n	8006f78 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ee2:	d149      	bne.n	8006f78 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006eec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef6:	e853 3f00 	ldrex	r3, [r3]
 8006efa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	461a      	mov	r2, r3
 8006f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f0e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f14:	e841 2300 	strex	r3, r2, [r1]
 8006f18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1e6      	bne.n	8006eee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3308      	adds	r3, #8
 8006f26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	e853 3f00 	ldrex	r3, [r3]
 8006f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	f023 0301 	bic.w	r3, r3, #1
 8006f36:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3308      	adds	r3, #8
 8006f3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f40:	623a      	str	r2, [r7, #32]
 8006f42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f44:	69f9      	ldr	r1, [r7, #28]
 8006f46:	6a3a      	ldr	r2, [r7, #32]
 8006f48:	e841 2300 	strex	r3, r2, [r1]
 8006f4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1e5      	bne.n	8006f20 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2220      	movs	r2, #32
 8006f58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2220      	movs	r2, #32
 8006f68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e010      	b.n	8006f9a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	69da      	ldr	r2, [r3, #28]
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	4013      	ands	r3, r2
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	bf0c      	ite	eq
 8006f88:	2301      	moveq	r3, #1
 8006f8a:	2300      	movne	r3, #0
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	461a      	mov	r2, r3
 8006f90:	79fb      	ldrb	r3, [r7, #7]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	f43f af46 	beq.w	8006e24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3770      	adds	r7, #112	; 0x70
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b085      	sub	sp, #20
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d101      	bne.n	8006fb8 <HAL_UARTEx_DisableFifoMode+0x16>
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	e027      	b.n	8007008 <HAL_UARTEx_DisableFifoMode+0x66>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2224      	movs	r2, #36	; 0x24
 8006fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 0201 	bic.w	r2, r2, #1
 8006fde:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006fe6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007028:	2302      	movs	r3, #2
 800702a:	e02d      	b.n	8007088 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2224      	movs	r2, #36	; 0x24
 8007038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 0201 	bic.w	r2, r2, #1
 8007052:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	430a      	orrs	r2, r1
 8007066:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f84f 	bl	800710c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2220      	movs	r2, #32
 800707a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d101      	bne.n	80070a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80070a4:	2302      	movs	r3, #2
 80070a6:	e02d      	b.n	8007104 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2224      	movs	r2, #36	; 0x24
 80070b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f022 0201 	bic.w	r2, r2, #1
 80070ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f811 	bl	800710c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2220      	movs	r2, #32
 80070f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007118:	2b00      	cmp	r3, #0
 800711a:	d108      	bne.n	800712e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800712c:	e031      	b.n	8007192 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800712e:	2308      	movs	r3, #8
 8007130:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007132:	2308      	movs	r3, #8
 8007134:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	0e5b      	lsrs	r3, r3, #25
 800713e:	b2db      	uxtb	r3, r3
 8007140:	f003 0307 	and.w	r3, r3, #7
 8007144:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	0f5b      	lsrs	r3, r3, #29
 800714e:	b2db      	uxtb	r3, r3
 8007150:	f003 0307 	and.w	r3, r3, #7
 8007154:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007156:	7bbb      	ldrb	r3, [r7, #14]
 8007158:	7b3a      	ldrb	r2, [r7, #12]
 800715a:	4911      	ldr	r1, [pc, #68]	; (80071a0 <UARTEx_SetNbDataToProcess+0x94>)
 800715c:	5c8a      	ldrb	r2, [r1, r2]
 800715e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007162:	7b3a      	ldrb	r2, [r7, #12]
 8007164:	490f      	ldr	r1, [pc, #60]	; (80071a4 <UARTEx_SetNbDataToProcess+0x98>)
 8007166:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007168:	fb93 f3f2 	sdiv	r3, r3, r2
 800716c:	b29a      	uxth	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007174:	7bfb      	ldrb	r3, [r7, #15]
 8007176:	7b7a      	ldrb	r2, [r7, #13]
 8007178:	4909      	ldr	r1, [pc, #36]	; (80071a0 <UARTEx_SetNbDataToProcess+0x94>)
 800717a:	5c8a      	ldrb	r2, [r1, r2]
 800717c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007180:	7b7a      	ldrb	r2, [r7, #13]
 8007182:	4908      	ldr	r1, [pc, #32]	; (80071a4 <UARTEx_SetNbDataToProcess+0x98>)
 8007184:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007186:	fb93 f3f2 	sdiv	r3, r3, r2
 800718a:	b29a      	uxth	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007192:	bf00      	nop
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	08014e48 	.word	0x08014e48
 80071a4:	08014e50 	.word	0x08014e50

080071a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80071b8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80071bc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b085      	sub	sp, #20
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80071de:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80071e2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	43db      	mvns	r3, r3
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	4013      	ands	r3, r2
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800720c:	b084      	sub	sp, #16
 800720e:	b480      	push	{r7}
 8007210:	b083      	sub	sp, #12
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	f107 0014 	add.w	r0, r7, #20
 800721a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	b004      	add	sp, #16
 800724c:	4770      	bx	lr
	...

08007250 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007250:	b480      	push	{r7}
 8007252:	b09d      	sub	sp, #116	; 0x74
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800725a:	2300      	movs	r3, #0
 800725c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4413      	add	r3, r2
 800726a:	881b      	ldrh	r3, [r3, #0]
 800726c:	b29b      	uxth	r3, r3
 800726e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007276:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	78db      	ldrb	r3, [r3, #3]
 800727e:	2b03      	cmp	r3, #3
 8007280:	d81f      	bhi.n	80072c2 <USB_ActivateEndpoint+0x72>
 8007282:	a201      	add	r2, pc, #4	; (adr r2, 8007288 <USB_ActivateEndpoint+0x38>)
 8007284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007288:	08007299 	.word	0x08007299
 800728c:	080072b5 	.word	0x080072b5
 8007290:	080072cb 	.word	0x080072cb
 8007294:	080072a7 	.word	0x080072a7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007298:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800729c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80072a4:	e012      	b.n	80072cc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80072a6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80072aa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80072ae:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80072b2:	e00b      	b.n	80072cc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80072b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80072b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80072bc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80072c0:	e004      	b.n	80072cc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80072c8:	e000      	b.n	80072cc <USB_ActivateEndpoint+0x7c>
      break;
 80072ca:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	441a      	add	r2, r3
 80072d6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80072da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4413      	add	r3, r2
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	b21b      	sxth	r3, r3
 80072fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007306:	b21a      	sxth	r2, r3
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	b21b      	sxth	r3, r3
 800730e:	4313      	orrs	r3, r2
 8007310:	b21b      	sxth	r3, r3
 8007312:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	441a      	add	r2, r3
 8007320:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800732c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007334:	b29b      	uxth	r3, r3
 8007336:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	7b1b      	ldrb	r3, [r3, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	f040 816e 	bne.w	800761e <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	785b      	ldrb	r3, [r3, #1]
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 8084 	beq.w	8007454 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	61bb      	str	r3, [r7, #24]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007356:	b29b      	uxth	r3, r3
 8007358:	461a      	mov	r2, r3
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	4413      	add	r3, r2
 800735e:	61bb      	str	r3, [r7, #24]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	00da      	lsls	r2, r3, #3
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	4413      	add	r3, r2
 800736a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800736e:	617b      	str	r3, [r7, #20]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	88db      	ldrh	r3, [r3, #6]
 8007374:	085b      	lsrs	r3, r3, #1
 8007376:	b29b      	uxth	r3, r3
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	b29a      	uxth	r2, r3
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	827b      	strh	r3, [r7, #18]
 800738e:	8a7b      	ldrh	r3, [r7, #18]
 8007390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007394:	2b00      	cmp	r3, #0
 8007396:	d01b      	beq.n	80073d0 <USB_ActivateEndpoint+0x180>
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ae:	823b      	strh	r3, [r7, #16]
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	441a      	add	r2, r3
 80073ba:	8a3b      	ldrh	r3, [r7, #16]
 80073bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	78db      	ldrb	r3, [r3, #3]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d020      	beq.n	800741a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ee:	81bb      	strh	r3, [r7, #12]
 80073f0:	89bb      	ldrh	r3, [r7, #12]
 80073f2:	f083 0320 	eor.w	r3, r3, #32
 80073f6:	81bb      	strh	r3, [r7, #12]
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	441a      	add	r2, r3
 8007402:	89bb      	ldrh	r3, [r7, #12]
 8007404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800740c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007414:	b29b      	uxth	r3, r3
 8007416:	8013      	strh	r3, [r2, #0]
 8007418:	e2cb      	b.n	80079b2 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800742c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007430:	81fb      	strh	r3, [r7, #14]
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	441a      	add	r2, r3
 800743c:	89fb      	ldrh	r3, [r7, #14]
 800743e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800744a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800744e:	b29b      	uxth	r3, r3
 8007450:	8013      	strh	r3, [r2, #0]
 8007452:	e2ae      	b.n	80079b2 <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	633b      	str	r3, [r7, #48]	; 0x30
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800745e:	b29b      	uxth	r3, r3
 8007460:	461a      	mov	r2, r3
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	4413      	add	r3, r2
 8007466:	633b      	str	r3, [r7, #48]	; 0x30
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	00da      	lsls	r2, r3, #3
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	4413      	add	r3, r2
 8007472:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007476:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	88db      	ldrh	r3, [r3, #6]
 800747c:	085b      	lsrs	r3, r3, #1
 800747e:	b29b      	uxth	r3, r3
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	b29a      	uxth	r2, r3
 8007484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007486:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	62bb      	str	r3, [r7, #40]	; 0x28
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007492:	b29b      	uxth	r3, r3
 8007494:	461a      	mov	r2, r3
 8007496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007498:	4413      	add	r3, r2
 800749a:	62bb      	str	r3, [r7, #40]	; 0x28
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	00da      	lsls	r2, r3, #3
 80074a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a4:	4413      	add	r3, r2
 80074a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074aa:	627b      	str	r3, [r7, #36]	; 0x24
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	2b3e      	cmp	r3, #62	; 0x3e
 80074b2:	d918      	bls.n	80074e6 <USB_ActivateEndpoint+0x296>
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	095b      	lsrs	r3, r3, #5
 80074ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	f003 031f 	and.w	r3, r3, #31
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d102      	bne.n	80074ce <USB_ActivateEndpoint+0x27e>
 80074c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074ca:	3b01      	subs	r3, #1
 80074cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80074ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	029b      	lsls	r3, r3, #10
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074de:	b29a      	uxth	r2, r3
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	801a      	strh	r2, [r3, #0]
 80074e4:	e029      	b.n	800753a <USB_ActivateEndpoint+0x2ea>
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d112      	bne.n	8007514 <USB_ActivateEndpoint+0x2c4>
 80074ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fc:	801a      	strh	r2, [r3, #0]
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	b29b      	uxth	r3, r3
 8007504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800750c:	b29a      	uxth	r2, r3
 800750e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007510:	801a      	strh	r2, [r3, #0]
 8007512:	e012      	b.n	800753a <USB_ActivateEndpoint+0x2ea>
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	085b      	lsrs	r3, r3, #1
 800751a:	66bb      	str	r3, [r7, #104]	; 0x68
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	2b00      	cmp	r3, #0
 8007526:	d002      	beq.n	800752e <USB_ActivateEndpoint+0x2de>
 8007528:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800752a:	3301      	adds	r3, #1
 800752c:	66bb      	str	r3, [r7, #104]	; 0x68
 800752e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007530:	b29b      	uxth	r3, r3
 8007532:	029b      	lsls	r3, r3, #10
 8007534:	b29a      	uxth	r2, r3
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	4413      	add	r3, r2
 8007544:	881b      	ldrh	r3, [r3, #0]
 8007546:	847b      	strh	r3, [r7, #34]	; 0x22
 8007548:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800754a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d01b      	beq.n	800758a <USB_ActivateEndpoint+0x33a>
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	b29b      	uxth	r3, r3
 8007560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007568:	843b      	strh	r3, [r7, #32]
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	441a      	add	r2, r3
 8007574:	8c3b      	ldrh	r3, [r7, #32]
 8007576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800757a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800757e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007586:	b29b      	uxth	r3, r3
 8007588:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d124      	bne.n	80075dc <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4413      	add	r3, r2
 800759c:	881b      	ldrh	r3, [r3, #0]
 800759e:	b29b      	uxth	r3, r3
 80075a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a8:	83bb      	strh	r3, [r7, #28]
 80075aa:	8bbb      	ldrh	r3, [r7, #28]
 80075ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80075b0:	83bb      	strh	r3, [r7, #28]
 80075b2:	8bbb      	ldrh	r3, [r7, #28]
 80075b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80075b8:	83bb      	strh	r3, [r7, #28]
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	441a      	add	r2, r3
 80075c4:	8bbb      	ldrh	r3, [r7, #28]
 80075c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	8013      	strh	r3, [r2, #0]
 80075da:	e1ea      	b.n	80079b2 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	881b      	ldrh	r3, [r3, #0]
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f2:	83fb      	strh	r3, [r7, #30]
 80075f4:	8bfb      	ldrh	r3, [r7, #30]
 80075f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80075fa:	83fb      	strh	r3, [r7, #30]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	441a      	add	r2, r3
 8007606:	8bfb      	ldrh	r3, [r7, #30]
 8007608:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800760c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007618:	b29b      	uxth	r3, r3
 800761a:	8013      	strh	r3, [r2, #0]
 800761c:	e1c9      	b.n	80079b2 <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	78db      	ldrb	r3, [r3, #3]
 8007622:	2b02      	cmp	r3, #2
 8007624:	d11e      	bne.n	8007664 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4413      	add	r3, r2
 8007630:	881b      	ldrh	r3, [r3, #0]
 8007632:	b29b      	uxth	r3, r3
 8007634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800763c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	441a      	add	r2, r3
 800764a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800764e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007656:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800765a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800765e:	b29b      	uxth	r3, r3
 8007660:	8013      	strh	r3, [r2, #0]
 8007662:	e01d      	b.n	80076a0 <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	b29b      	uxth	r3, r3
 8007672:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800767a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	441a      	add	r2, r3
 8007688:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800768c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007690:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800769c:	b29b      	uxth	r3, r3
 800769e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	461a      	mov	r2, r3
 80076ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076b0:	4413      	add	r3, r2
 80076b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	00da      	lsls	r2, r3, #3
 80076ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076bc:	4413      	add	r3, r2
 80076be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	891b      	ldrh	r3, [r3, #8]
 80076c8:	085b      	lsrs	r3, r3, #1
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	005b      	lsls	r3, r3, #1
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076d2:	801a      	strh	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	657b      	str	r3, [r7, #84]	; 0x54
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076de:	b29b      	uxth	r3, r3
 80076e0:	461a      	mov	r2, r3
 80076e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076e4:	4413      	add	r3, r2
 80076e6:	657b      	str	r3, [r7, #84]	; 0x54
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	00da      	lsls	r2, r3, #3
 80076ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076f0:	4413      	add	r3, r2
 80076f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80076f6:	653b      	str	r3, [r7, #80]	; 0x50
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	895b      	ldrh	r3, [r3, #10]
 80076fc:	085b      	lsrs	r3, r3, #1
 80076fe:	b29b      	uxth	r3, r3
 8007700:	005b      	lsls	r3, r3, #1
 8007702:	b29a      	uxth	r2, r3
 8007704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007706:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	785b      	ldrb	r3, [r3, #1]
 800770c:	2b00      	cmp	r3, #0
 800770e:	f040 8093 	bne.w	8007838 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007722:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800772a:	2b00      	cmp	r3, #0
 800772c:	d01b      	beq.n	8007766 <USB_ActivateEndpoint+0x516>
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	881b      	ldrh	r3, [r3, #0]
 800773a:	b29b      	uxth	r3, r3
 800773c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007744:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	441a      	add	r2, r3
 8007750:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007752:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007756:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800775a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800775e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007762:	b29b      	uxth	r3, r3
 8007764:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4413      	add	r3, r2
 8007770:	881b      	ldrh	r3, [r3, #0]
 8007772:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007774:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777a:	2b00      	cmp	r3, #0
 800777c:	d01b      	beq.n	80077b6 <USB_ActivateEndpoint+0x566>
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	881b      	ldrh	r3, [r3, #0]
 800778a:	b29b      	uxth	r3, r3
 800778c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007794:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	441a      	add	r2, r3
 80077a0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80077a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	881b      	ldrh	r3, [r3, #0]
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077cc:	873b      	strh	r3, [r7, #56]	; 0x38
 80077ce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80077d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80077d4:	873b      	strh	r3, [r7, #56]	; 0x38
 80077d6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80077d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80077dc:	873b      	strh	r3, [r7, #56]	; 0x38
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	441a      	add	r2, r3
 80077e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80077ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	881b      	ldrh	r3, [r3, #0]
 800780a:	b29b      	uxth	r3, r3
 800780c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007814:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	441a      	add	r2, r3
 8007820:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800782a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800782e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007832:	b29b      	uxth	r3, r3
 8007834:	8013      	strh	r3, [r2, #0]
 8007836:	e0bc      	b.n	80079b2 <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	881b      	ldrh	r3, [r3, #0]
 8007844:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007848:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800784c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d01d      	beq.n	8007890 <USB_ActivateEndpoint+0x640>
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	4413      	add	r3, r2
 800785e:	881b      	ldrh	r3, [r3, #0]
 8007860:	b29b      	uxth	r3, r3
 8007862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800786a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	441a      	add	r2, r3
 8007878:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800787c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007884:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800788c:	b29b      	uxth	r3, r3
 800788e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80078a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80078a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d01d      	beq.n	80078e8 <USB_ActivateEndpoint+0x698>
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	881b      	ldrh	r3, [r3, #0]
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	441a      	add	r2, r3
 80078d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80078d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	78db      	ldrb	r3, [r3, #3]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d024      	beq.n	800793a <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4413      	add	r3, r2
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007906:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800790a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800790e:	f083 0320 	eor.w	r3, r3, #32
 8007912:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	441a      	add	r2, r3
 8007920:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800792c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007934:	b29b      	uxth	r3, r3
 8007936:	8013      	strh	r3, [r2, #0]
 8007938:	e01d      	b.n	8007976 <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	881b      	ldrh	r3, [r3, #0]
 8007946:	b29b      	uxth	r3, r3
 8007948:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800794c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007950:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	441a      	add	r2, r3
 800795e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800796a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800796e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007972:	b29b      	uxth	r3, r3
 8007974:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	b29b      	uxth	r3, r3
 8007984:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800798c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	441a      	add	r2, r3
 800799a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800799e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80079b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3774      	adds	r7, #116	; 0x74
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop

080079c4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b08d      	sub	sp, #52	; 0x34
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	7b1b      	ldrb	r3, [r3, #12]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f040 808e 	bne.w	8007af4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	785b      	ldrb	r3, [r3, #1]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d044      	beq.n	8007a6a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4413      	add	r3, r2
 80079ea:	881b      	ldrh	r3, [r3, #0]
 80079ec:	81bb      	strh	r3, [r7, #12]
 80079ee:	89bb      	ldrh	r3, [r7, #12]
 80079f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d01b      	beq.n	8007a30 <USB_DeactivateEndpoint+0x6c>
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	881b      	ldrh	r3, [r3, #0]
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a0e:	817b      	strh	r3, [r7, #10]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	441a      	add	r2, r3
 8007a1a:	897b      	ldrh	r3, [r7, #10]
 8007a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	4413      	add	r3, r2
 8007a3a:	881b      	ldrh	r3, [r3, #0]
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a46:	813b      	strh	r3, [r7, #8]
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	441a      	add	r2, r3
 8007a52:	893b      	ldrh	r3, [r7, #8]
 8007a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	8013      	strh	r3, [r2, #0]
 8007a68:	e192      	b.n	8007d90 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4413      	add	r3, r2
 8007a74:	881b      	ldrh	r3, [r3, #0]
 8007a76:	827b      	strh	r3, [r7, #18]
 8007a78:	8a7b      	ldrh	r3, [r7, #18]
 8007a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d01b      	beq.n	8007aba <USB_DeactivateEndpoint+0xf6>
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	881b      	ldrh	r3, [r3, #0]
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a98:	823b      	strh	r3, [r7, #16]
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	441a      	add	r2, r3
 8007aa4:	8a3b      	ldrh	r3, [r7, #16]
 8007aa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	881b      	ldrh	r3, [r3, #0]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ad0:	81fb      	strh	r3, [r7, #14]
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	441a      	add	r2, r3
 8007adc:	89fb      	ldrh	r3, [r7, #14]
 8007ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	8013      	strh	r3, [r2, #0]
 8007af2:	e14d      	b.n	8007d90 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	785b      	ldrb	r3, [r3, #1]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f040 80a5 	bne.w	8007c48 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	881b      	ldrh	r3, [r3, #0]
 8007b0a:	843b      	strh	r3, [r7, #32]
 8007b0c:	8c3b      	ldrh	r3, [r7, #32]
 8007b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d01b      	beq.n	8007b4e <USB_DeactivateEndpoint+0x18a>
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	4413      	add	r3, r2
 8007b20:	881b      	ldrh	r3, [r3, #0]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b2c:	83fb      	strh	r3, [r7, #30]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	441a      	add	r2, r3
 8007b38:	8bfb      	ldrh	r3, [r7, #30]
 8007b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	881b      	ldrh	r3, [r3, #0]
 8007b5a:	83bb      	strh	r3, [r7, #28]
 8007b5c:	8bbb      	ldrh	r3, [r7, #28]
 8007b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d01b      	beq.n	8007b9e <USB_DeactivateEndpoint+0x1da>
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	4413      	add	r3, r2
 8007b70:	881b      	ldrh	r3, [r3, #0]
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b7c:	837b      	strh	r3, [r7, #26]
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	441a      	add	r2, r3
 8007b88:	8b7b      	ldrh	r3, [r7, #26]
 8007b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	881b      	ldrh	r3, [r3, #0]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb4:	833b      	strh	r3, [r7, #24]
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	441a      	add	r2, r3
 8007bc0:	8b3b      	ldrh	r3, [r7, #24]
 8007bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4413      	add	r3, r2
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bec:	82fb      	strh	r3, [r7, #22]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	441a      	add	r2, r3
 8007bf8:	8afb      	ldrh	r3, [r7, #22]
 8007bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c24:	82bb      	strh	r3, [r7, #20]
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	441a      	add	r2, r3
 8007c30:	8abb      	ldrh	r3, [r7, #20]
 8007c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	8013      	strh	r3, [r2, #0]
 8007c46:	e0a3      	b.n	8007d90 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007c56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d01b      	beq.n	8007c98 <USB_DeactivateEndpoint+0x2d4>
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4413      	add	r3, r2
 8007c6a:	881b      	ldrh	r3, [r3, #0]
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c76:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	441a      	add	r2, r3
 8007c82:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4413      	add	r3, r2
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007ca6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d01b      	beq.n	8007ce8 <USB_DeactivateEndpoint+0x324>
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc6:	853b      	strh	r3, [r7, #40]	; 0x28
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	441a      	add	r2, r3
 8007cd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ce0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	881b      	ldrh	r3, [r3, #0]
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cfe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	441a      	add	r2, r3
 8007d0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d36:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	441a      	add	r2, r3
 8007d42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d6e:	847b      	strh	r3, [r7, #34]	; 0x22
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	441a      	add	r2, r3
 8007d7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3734      	adds	r7, #52	; 0x34
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b0c2      	sub	sp, #264	; 0x108
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dac:	6018      	str	r0, [r3, #0]
 8007dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007db6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	785b      	ldrb	r3, [r3, #1]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	f040 867b 	bne.w	8008ac0 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	699a      	ldr	r2, [r3, #24]
 8007dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d908      	bls.n	8007df8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007df6:	e007      	b.n	8007e08 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	7b1b      	ldrb	r3, [r3, #12]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d13a      	bne.n	8007e8e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	6959      	ldr	r1, [r3, #20]
 8007e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	88da      	ldrh	r2, [r3, #6]
 8007e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007e3a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007e3e:	6800      	ldr	r0, [r0, #0]
 8007e40:	f001 fc1d 	bl	800967e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007e44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	613b      	str	r3, [r7, #16]
 8007e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	461a      	mov	r2, r3
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	4413      	add	r3, r2
 8007e66:	613b      	str	r3, [r7, #16]
 8007e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	00da      	lsls	r2, r3, #3
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	4413      	add	r3, r2
 8007e7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e7e:	60fb      	str	r3, [r7, #12]
 8007e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	801a      	strh	r2, [r3, #0]
 8007e8a:	f000 bde3 	b.w	8008a54 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	78db      	ldrb	r3, [r3, #3]
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	f040 843a 	bne.w	8008714 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	6a1a      	ldr	r2, [r3, #32]
 8007eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	f240 83b7 	bls.w	800862c <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4413      	add	r3, r2
 8007ed8:	881b      	ldrh	r3, [r3, #0]
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ee4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	441a      	add	r2, r3
 8007f02:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f0e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6a1a      	ldr	r2, [r3, #32]
 8007f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f2a:	1ad2      	subs	r2, r2, r3
 8007f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	881b      	ldrh	r3, [r3, #0]
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f000 81b3 	beq.w	80082c6 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	633b      	str	r3, [r7, #48]	; 0x30
 8007f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	785b      	ldrb	r3, [r3, #1]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d16d      	bne.n	8008058 <USB_EPStartXfer+0x2ba>
 8007f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	461a      	mov	r2, r3
 8007f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9c:	4413      	add	r3, r2
 8007f9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	00da      	lsls	r2, r3, #3
 8007fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8007fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fbc:	2b3e      	cmp	r3, #62	; 0x3e
 8007fbe:	d91c      	bls.n	8007ffa <USB_EPStartXfer+0x25c>
 8007fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fc4:	095b      	lsrs	r3, r3, #5
 8007fc6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fce:	f003 031f 	and.w	r3, r3, #31
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d104      	bne.n	8007fe0 <USB_EPStartXfer+0x242>
 8007fd6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007fe0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	029b      	lsls	r3, r3, #10
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff6:	801a      	strh	r2, [r3, #0]
 8007ff8:	e053      	b.n	80080a2 <USB_EPStartXfer+0x304>
 8007ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d112      	bne.n	8008028 <USB_EPStartXfer+0x28a>
 8008002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008004:	881b      	ldrh	r3, [r3, #0]
 8008006:	b29b      	uxth	r3, r3
 8008008:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800800c:	b29a      	uxth	r2, r3
 800800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008010:	801a      	strh	r2, [r3, #0]
 8008012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008014:	881b      	ldrh	r3, [r3, #0]
 8008016:	b29b      	uxth	r3, r3
 8008018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800801c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008020:	b29a      	uxth	r2, r3
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	801a      	strh	r2, [r3, #0]
 8008026:	e03c      	b.n	80080a2 <USB_EPStartXfer+0x304>
 8008028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800802c:	085b      	lsrs	r3, r3, #1
 800802e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008036:	f003 0301 	and.w	r3, r3, #1
 800803a:	2b00      	cmp	r3, #0
 800803c:	d004      	beq.n	8008048 <USB_EPStartXfer+0x2aa>
 800803e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008042:	3301      	adds	r3, #1
 8008044:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008048:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800804c:	b29b      	uxth	r3, r3
 800804e:	029b      	lsls	r3, r3, #10
 8008050:	b29a      	uxth	r2, r3
 8008052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008054:	801a      	strh	r2, [r3, #0]
 8008056:	e024      	b.n	80080a2 <USB_EPStartXfer+0x304>
 8008058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800805c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	785b      	ldrb	r3, [r3, #1]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d11c      	bne.n	80080a2 <USB_EPStartXfer+0x304>
 8008068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800806c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008076:	b29b      	uxth	r3, r3
 8008078:	461a      	mov	r2, r3
 800807a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807c:	4413      	add	r3, r2
 800807e:	633b      	str	r3, [r7, #48]	; 0x30
 8008080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	00da      	lsls	r2, r3, #3
 800808e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008090:	4413      	add	r3, r2
 8008092:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008096:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800809c:	b29a      	uxth	r2, r3
 800809e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80080a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	895b      	ldrh	r3, [r3, #10]
 80080ae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6959      	ldr	r1, [r3, #20]
 80080be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80080c8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80080cc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80080d0:	6800      	ldr	r0, [r0, #0]
 80080d2:	f001 fad4 	bl	800967e <USB_WritePMA>
            ep->xfer_buff += len;
 80080d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	695a      	ldr	r2, [r3, #20]
 80080e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080e6:	441a      	add	r2, r3
 80080e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80080f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6a1a      	ldr	r2, [r3, #32]
 8008100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	429a      	cmp	r2, r3
 800810e:	d90f      	bls.n	8008130 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8008110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	6a1a      	ldr	r2, [r3, #32]
 800811c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008120:	1ad2      	subs	r2, r2, r3
 8008122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	621a      	str	r2, [r3, #32]
 800812e:	e00e      	b.n	800814e <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8008130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6a1b      	ldr	r3, [r3, #32]
 800813c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2200      	movs	r2, #0
 800814c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800814e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	785b      	ldrb	r3, [r3, #1]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d16d      	bne.n	800823a <USB_EPStartXfer+0x49c>
 800815e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008162:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	61bb      	str	r3, [r7, #24]
 800816a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800816e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008178:	b29b      	uxth	r3, r3
 800817a:	461a      	mov	r2, r3
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	4413      	add	r3, r2
 8008180:	61bb      	str	r3, [r7, #24]
 8008182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	00da      	lsls	r2, r3, #3
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	4413      	add	r3, r2
 8008194:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008198:	617b      	str	r3, [r7, #20]
 800819a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800819e:	2b3e      	cmp	r3, #62	; 0x3e
 80081a0:	d91c      	bls.n	80081dc <USB_EPStartXfer+0x43e>
 80081a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081a6:	095b      	lsrs	r3, r3, #5
 80081a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80081ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081b0:	f003 031f 	and.w	r3, r3, #31
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d104      	bne.n	80081c2 <USB_EPStartXfer+0x424>
 80081b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081bc:	3b01      	subs	r3, #1
 80081be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80081c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	029b      	lsls	r3, r3, #10
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	801a      	strh	r2, [r3, #0]
 80081da:	e059      	b.n	8008290 <USB_EPStartXfer+0x4f2>
 80081dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d112      	bne.n	800820a <USB_EPStartXfer+0x46c>
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	881b      	ldrh	r3, [r3, #0]
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	801a      	strh	r2, [r3, #0]
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008202:	b29a      	uxth	r2, r3
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	801a      	strh	r2, [r3, #0]
 8008208:	e042      	b.n	8008290 <USB_EPStartXfer+0x4f2>
 800820a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800820e:	085b      	lsrs	r3, r3, #1
 8008210:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008218:	f003 0301 	and.w	r3, r3, #1
 800821c:	2b00      	cmp	r3, #0
 800821e:	d004      	beq.n	800822a <USB_EPStartXfer+0x48c>
 8008220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008224:	3301      	adds	r3, #1
 8008226:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800822a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800822e:	b29b      	uxth	r3, r3
 8008230:	029b      	lsls	r3, r3, #10
 8008232:	b29a      	uxth	r2, r3
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	801a      	strh	r2, [r3, #0]
 8008238:	e02a      	b.n	8008290 <USB_EPStartXfer+0x4f2>
 800823a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800823e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	785b      	ldrb	r3, [r3, #1]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d122      	bne.n	8008290 <USB_EPStartXfer+0x4f2>
 800824a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800824e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	623b      	str	r3, [r7, #32]
 8008256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800825a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008264:	b29b      	uxth	r3, r3
 8008266:	461a      	mov	r2, r3
 8008268:	6a3b      	ldr	r3, [r7, #32]
 800826a:	4413      	add	r3, r2
 800826c:	623b      	str	r3, [r7, #32]
 800826e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	00da      	lsls	r2, r3, #3
 800827c:	6a3b      	ldr	r3, [r7, #32]
 800827e:	4413      	add	r3, r2
 8008280:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008284:	61fb      	str	r3, [r7, #28]
 8008286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800828a:	b29a      	uxth	r2, r3
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	891b      	ldrh	r3, [r3, #8]
 800829c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80082a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6959      	ldr	r1, [r3, #20]
 80082ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80082b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80082ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80082be:	6800      	ldr	r0, [r0, #0]
 80082c0:	f001 f9dd 	bl	800967e <USB_WritePMA>
 80082c4:	e3c6      	b.n	8008a54 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80082c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	785b      	ldrb	r3, [r3, #1]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d16d      	bne.n	80083b2 <USB_EPStartXfer+0x614>
 80082d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80082e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	461a      	mov	r2, r3
 80082f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082f6:	4413      	add	r3, r2
 80082f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80082fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	00da      	lsls	r2, r3, #3
 8008308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800830a:	4413      	add	r3, r2
 800830c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008310:	647b      	str	r3, [r7, #68]	; 0x44
 8008312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008316:	2b3e      	cmp	r3, #62	; 0x3e
 8008318:	d91c      	bls.n	8008354 <USB_EPStartXfer+0x5b6>
 800831a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800831e:	095b      	lsrs	r3, r3, #5
 8008320:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008328:	f003 031f 	and.w	r3, r3, #31
 800832c:	2b00      	cmp	r3, #0
 800832e:	d104      	bne.n	800833a <USB_EPStartXfer+0x59c>
 8008330:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008334:	3b01      	subs	r3, #1
 8008336:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800833a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800833e:	b29b      	uxth	r3, r3
 8008340:	029b      	lsls	r3, r3, #10
 8008342:	b29b      	uxth	r3, r3
 8008344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800834c:	b29a      	uxth	r2, r3
 800834e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008350:	801a      	strh	r2, [r3, #0]
 8008352:	e059      	b.n	8008408 <USB_EPStartXfer+0x66a>
 8008354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008358:	2b00      	cmp	r3, #0
 800835a:	d112      	bne.n	8008382 <USB_EPStartXfer+0x5e4>
 800835c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800835e:	881b      	ldrh	r3, [r3, #0]
 8008360:	b29b      	uxth	r3, r3
 8008362:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008366:	b29a      	uxth	r2, r3
 8008368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800836a:	801a      	strh	r2, [r3, #0]
 800836c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800836e:	881b      	ldrh	r3, [r3, #0]
 8008370:	b29b      	uxth	r3, r3
 8008372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800837a:	b29a      	uxth	r2, r3
 800837c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800837e:	801a      	strh	r2, [r3, #0]
 8008380:	e042      	b.n	8008408 <USB_EPStartXfer+0x66a>
 8008382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008386:	085b      	lsrs	r3, r3, #1
 8008388:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800838c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008390:	f003 0301 	and.w	r3, r3, #1
 8008394:	2b00      	cmp	r3, #0
 8008396:	d004      	beq.n	80083a2 <USB_EPStartXfer+0x604>
 8008398:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800839c:	3301      	adds	r3, #1
 800839e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80083a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	029b      	lsls	r3, r3, #10
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083ae:	801a      	strh	r2, [r3, #0]
 80083b0:	e02a      	b.n	8008408 <USB_EPStartXfer+0x66a>
 80083b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	785b      	ldrb	r3, [r3, #1]
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d122      	bne.n	8008408 <USB_EPStartXfer+0x66a>
 80083c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	653b      	str	r3, [r7, #80]	; 0x50
 80083ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083dc:	b29b      	uxth	r3, r3
 80083de:	461a      	mov	r2, r3
 80083e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083e2:	4413      	add	r3, r2
 80083e4:	653b      	str	r3, [r7, #80]	; 0x50
 80083e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	00da      	lsls	r2, r3, #3
 80083f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083f6:	4413      	add	r3, r2
 80083f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80083fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008402:	b29a      	uxth	r2, r3
 8008404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008406:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800840c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	891b      	ldrh	r3, [r3, #8]
 8008414:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800841c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	6959      	ldr	r1, [r3, #20]
 8008424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008428:	b29b      	uxth	r3, r3
 800842a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800842e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008432:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008436:	6800      	ldr	r0, [r0, #0]
 8008438:	f001 f921 	bl	800967e <USB_WritePMA>
            ep->xfer_buff += len;
 800843c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	695a      	ldr	r2, [r3, #20]
 8008448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800844c:	441a      	add	r2, r3
 800844e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800845a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800845e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6a1a      	ldr	r2, [r3, #32]
 8008466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800846a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	429a      	cmp	r2, r3
 8008474:	d90f      	bls.n	8008496 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8008476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800847a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6a1a      	ldr	r2, [r3, #32]
 8008482:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008486:	1ad2      	subs	r2, r2, r3
 8008488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800848c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	621a      	str	r2, [r3, #32]
 8008494:	e00e      	b.n	80084b4 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8008496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800849a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80084a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2200      	movs	r2, #0
 80084b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80084b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	643b      	str	r3, [r7, #64]	; 0x40
 80084c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	785b      	ldrb	r3, [r3, #1]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d16d      	bne.n	80085ac <USB_EPStartXfer+0x80e>
 80084d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	63bb      	str	r3, [r7, #56]	; 0x38
 80084dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	461a      	mov	r2, r3
 80084ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f0:	4413      	add	r3, r2
 80084f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80084f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	00da      	lsls	r2, r3, #3
 8008502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008504:	4413      	add	r3, r2
 8008506:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800850a:	637b      	str	r3, [r7, #52]	; 0x34
 800850c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008510:	2b3e      	cmp	r3, #62	; 0x3e
 8008512:	d91c      	bls.n	800854e <USB_EPStartXfer+0x7b0>
 8008514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008518:	095b      	lsrs	r3, r3, #5
 800851a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800851e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008522:	f003 031f 	and.w	r3, r3, #31
 8008526:	2b00      	cmp	r3, #0
 8008528:	d104      	bne.n	8008534 <USB_EPStartXfer+0x796>
 800852a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800852e:	3b01      	subs	r3, #1
 8008530:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008538:	b29b      	uxth	r3, r3
 800853a:	029b      	lsls	r3, r3, #10
 800853c:	b29b      	uxth	r3, r3
 800853e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008546:	b29a      	uxth	r2, r3
 8008548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800854a:	801a      	strh	r2, [r3, #0]
 800854c:	e053      	b.n	80085f6 <USB_EPStartXfer+0x858>
 800854e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008552:	2b00      	cmp	r3, #0
 8008554:	d112      	bne.n	800857c <USB_EPStartXfer+0x7de>
 8008556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008558:	881b      	ldrh	r3, [r3, #0]
 800855a:	b29b      	uxth	r3, r3
 800855c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008560:	b29a      	uxth	r2, r3
 8008562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008564:	801a      	strh	r2, [r3, #0]
 8008566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	b29b      	uxth	r3, r3
 800856c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008574:	b29a      	uxth	r2, r3
 8008576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008578:	801a      	strh	r2, [r3, #0]
 800857a:	e03c      	b.n	80085f6 <USB_EPStartXfer+0x858>
 800857c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008580:	085b      	lsrs	r3, r3, #1
 8008582:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800858a:	f003 0301 	and.w	r3, r3, #1
 800858e:	2b00      	cmp	r3, #0
 8008590:	d004      	beq.n	800859c <USB_EPStartXfer+0x7fe>
 8008592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008596:	3301      	adds	r3, #1
 8008598:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800859c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	029b      	lsls	r3, r3, #10
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a8:	801a      	strh	r2, [r3, #0]
 80085aa:	e024      	b.n	80085f6 <USB_EPStartXfer+0x858>
 80085ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	785b      	ldrb	r3, [r3, #1]
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d11c      	bne.n	80085f6 <USB_EPStartXfer+0x858>
 80085bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	461a      	mov	r2, r3
 80085ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085d0:	4413      	add	r3, r2
 80085d2:	643b      	str	r3, [r7, #64]	; 0x40
 80085d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	00da      	lsls	r2, r3, #3
 80085e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085e4:	4413      	add	r3, r2
 80085e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80085ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80085f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	895b      	ldrh	r3, [r3, #10]
 8008602:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800860a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6959      	ldr	r1, [r3, #20]
 8008612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008616:	b29b      	uxth	r3, r3
 8008618:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800861c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008620:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008624:	6800      	ldr	r0, [r0, #0]
 8008626:	f001 f82a 	bl	800967e <USB_WritePMA>
 800862a:	e213      	b.n	8008a54 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800862c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6a1b      	ldr	r3, [r3, #32]
 8008638:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800863c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008640:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800864a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	4413      	add	r3, r2
 8008656:	881b      	ldrh	r3, [r3, #0]
 8008658:	b29b      	uxth	r3, r3
 800865a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800865e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008662:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800866a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	441a      	add	r2, r3
 8008680:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800868c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008694:	b29b      	uxth	r3, r3
 8008696:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800869c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	461a      	mov	r2, r3
 80086b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086b8:	4413      	add	r3, r2
 80086ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	00da      	lsls	r2, r3, #3
 80086ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086cc:	4413      	add	r3, r2
 80086ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80086d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80086d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086d8:	b29a      	uxth	r2, r3
 80086da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086dc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80086de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	891b      	ldrh	r3, [r3, #8]
 80086ea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6959      	ldr	r1, [r3, #20]
 80086fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086fe:	b29b      	uxth	r3, r3
 8008700:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008704:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008708:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800870c:	6800      	ldr	r0, [r0, #0]
 800870e:	f000 ffb6 	bl	800967e <USB_WritePMA>
 8008712:	e19f      	b.n	8008a54 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	6a1a      	ldr	r2, [r3, #32]
 8008720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008724:	1ad2      	subs	r2, r2, r3
 8008726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800872a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008736:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4413      	add	r3, r2
 800874c:	881b      	ldrh	r3, [r3, #0]
 800874e:	b29b      	uxth	r3, r3
 8008750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008754:	2b00      	cmp	r3, #0
 8008756:	f000 80bc 	beq.w	80088d2 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800875a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800875e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	673b      	str	r3, [r7, #112]	; 0x70
 8008766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800876a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	785b      	ldrb	r3, [r3, #1]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d16d      	bne.n	8008852 <USB_EPStartXfer+0xab4>
 8008776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800877a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	66bb      	str	r3, [r7, #104]	; 0x68
 8008782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008786:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008790:	b29b      	uxth	r3, r3
 8008792:	461a      	mov	r2, r3
 8008794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008796:	4413      	add	r3, r2
 8008798:	66bb      	str	r3, [r7, #104]	; 0x68
 800879a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800879e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	00da      	lsls	r2, r3, #3
 80087a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087aa:	4413      	add	r3, r2
 80087ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80087b0:	667b      	str	r3, [r7, #100]	; 0x64
 80087b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087b6:	2b3e      	cmp	r3, #62	; 0x3e
 80087b8:	d91c      	bls.n	80087f4 <USB_EPStartXfer+0xa56>
 80087ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087be:	095b      	lsrs	r3, r3, #5
 80087c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80087c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087c8:	f003 031f 	and.w	r3, r3, #31
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d104      	bne.n	80087da <USB_EPStartXfer+0xa3c>
 80087d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80087d4:	3b01      	subs	r3, #1
 80087d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80087da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80087de:	b29b      	uxth	r3, r3
 80087e0:	029b      	lsls	r3, r3, #10
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087f0:	801a      	strh	r2, [r3, #0]
 80087f2:	e053      	b.n	800889c <USB_EPStartXfer+0xafe>
 80087f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d112      	bne.n	8008822 <USB_EPStartXfer+0xa84>
 80087fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087fe:	881b      	ldrh	r3, [r3, #0]
 8008800:	b29b      	uxth	r3, r3
 8008802:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008806:	b29a      	uxth	r2, r3
 8008808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800880a:	801a      	strh	r2, [r3, #0]
 800880c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800880e:	881b      	ldrh	r3, [r3, #0]
 8008810:	b29b      	uxth	r3, r3
 8008812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800881a:	b29a      	uxth	r2, r3
 800881c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800881e:	801a      	strh	r2, [r3, #0]
 8008820:	e03c      	b.n	800889c <USB_EPStartXfer+0xafe>
 8008822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008826:	085b      	lsrs	r3, r3, #1
 8008828:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800882c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008830:	f003 0301 	and.w	r3, r3, #1
 8008834:	2b00      	cmp	r3, #0
 8008836:	d004      	beq.n	8008842 <USB_EPStartXfer+0xaa4>
 8008838:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800883c:	3301      	adds	r3, #1
 800883e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008842:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008846:	b29b      	uxth	r3, r3
 8008848:	029b      	lsls	r3, r3, #10
 800884a:	b29a      	uxth	r2, r3
 800884c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800884e:	801a      	strh	r2, [r3, #0]
 8008850:	e024      	b.n	800889c <USB_EPStartXfer+0xafe>
 8008852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	785b      	ldrb	r3, [r3, #1]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d11c      	bne.n	800889c <USB_EPStartXfer+0xafe>
 8008862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008866:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008870:	b29b      	uxth	r3, r3
 8008872:	461a      	mov	r2, r3
 8008874:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008876:	4413      	add	r3, r2
 8008878:	673b      	str	r3, [r7, #112]	; 0x70
 800887a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800887e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	00da      	lsls	r2, r3, #3
 8008888:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800888a:	4413      	add	r3, r2
 800888c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008890:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008896:	b29a      	uxth	r2, r3
 8008898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800889a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800889c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	895b      	ldrh	r3, [r3, #10]
 80088a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	6959      	ldr	r1, [r3, #20]
 80088b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088bc:	b29b      	uxth	r3, r3
 80088be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80088c2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80088c6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80088ca:	6800      	ldr	r0, [r0, #0]
 80088cc:	f000 fed7 	bl	800967e <USB_WritePMA>
 80088d0:	e0c0      	b.n	8008a54 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80088d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	785b      	ldrb	r3, [r3, #1]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d16d      	bne.n	80089be <USB_EPStartXfer+0xc20>
 80088e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	461a      	mov	r2, r3
 8008900:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008902:	4413      	add	r3, r2
 8008904:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800890a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	00da      	lsls	r2, r3, #3
 8008914:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008916:	4413      	add	r3, r2
 8008918:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800891c:	67bb      	str	r3, [r7, #120]	; 0x78
 800891e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008922:	2b3e      	cmp	r3, #62	; 0x3e
 8008924:	d91c      	bls.n	8008960 <USB_EPStartXfer+0xbc2>
 8008926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800892a:	095b      	lsrs	r3, r3, #5
 800892c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008934:	f003 031f 	and.w	r3, r3, #31
 8008938:	2b00      	cmp	r3, #0
 800893a:	d104      	bne.n	8008946 <USB_EPStartXfer+0xba8>
 800893c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008940:	3b01      	subs	r3, #1
 8008942:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008946:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800894a:	b29b      	uxth	r3, r3
 800894c:	029b      	lsls	r3, r3, #10
 800894e:	b29b      	uxth	r3, r3
 8008950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008958:	b29a      	uxth	r2, r3
 800895a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800895c:	801a      	strh	r2, [r3, #0]
 800895e:	e05f      	b.n	8008a20 <USB_EPStartXfer+0xc82>
 8008960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008964:	2b00      	cmp	r3, #0
 8008966:	d112      	bne.n	800898e <USB_EPStartXfer+0xbf0>
 8008968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800896a:	881b      	ldrh	r3, [r3, #0]
 800896c:	b29b      	uxth	r3, r3
 800896e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008972:	b29a      	uxth	r2, r3
 8008974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008976:	801a      	strh	r2, [r3, #0]
 8008978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800897a:	881b      	ldrh	r3, [r3, #0]
 800897c:	b29b      	uxth	r3, r3
 800897e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008986:	b29a      	uxth	r2, r3
 8008988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800898a:	801a      	strh	r2, [r3, #0]
 800898c:	e048      	b.n	8008a20 <USB_EPStartXfer+0xc82>
 800898e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008992:	085b      	lsrs	r3, r3, #1
 8008994:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800899c:	f003 0301 	and.w	r3, r3, #1
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d004      	beq.n	80089ae <USB_EPStartXfer+0xc10>
 80089a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80089a8:	3301      	adds	r3, #1
 80089aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80089ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	029b      	lsls	r3, r3, #10
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089ba:	801a      	strh	r2, [r3, #0]
 80089bc:	e030      	b.n	8008a20 <USB_EPStartXfer+0xc82>
 80089be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	785b      	ldrb	r3, [r3, #1]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d128      	bne.n	8008a20 <USB_EPStartXfer+0xc82>
 80089ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80089dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	461a      	mov	r2, r3
 80089ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089f2:	4413      	add	r3, r2
 80089f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80089f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	00da      	lsls	r2, r3, #3
 8008a06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a0a:	4413      	add	r3, r2
 8008a0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008a10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a1e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	891b      	ldrh	r3, [r3, #8]
 8008a2c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	6959      	ldr	r1, [r3, #20]
 8008a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008a46:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008a4a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008a4e:	6800      	ldr	r0, [r0, #0]
 8008a50:	f000 fe15 	bl	800967e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4413      	add	r3, r2
 8008a6e:	881b      	ldrh	r3, [r3, #0]
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a7a:	817b      	strh	r3, [r7, #10]
 8008a7c:	897b      	ldrh	r3, [r7, #10]
 8008a7e:	f083 0310 	eor.w	r3, r3, #16
 8008a82:	817b      	strh	r3, [r7, #10]
 8008a84:	897b      	ldrh	r3, [r7, #10]
 8008a86:	f083 0320 	eor.w	r3, r3, #32
 8008a8a:	817b      	strh	r3, [r7, #10]
 8008a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	441a      	add	r2, r3
 8008aa6:	897b      	ldrh	r3, [r7, #10]
 8008aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	8013      	strh	r3, [r2, #0]
 8008abc:	f000 bc9f 	b.w	80093fe <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	7b1b      	ldrb	r3, [r3, #12]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f040 80ae 	bne.w	8008c2e <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	699a      	ldr	r2, [r3, #24]
 8008ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d917      	bls.n	8008b1e <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8008aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	699a      	ldr	r2, [r3, #24]
 8008b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b0e:	1ad2      	subs	r2, r2, r3
 8008b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	619a      	str	r2, [r3, #24]
 8008b1c:	e00e      	b.n	8008b3c <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8008b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	699b      	ldr	r3, [r3, #24]
 8008b2a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b60:	4413      	add	r3, r2
 8008b62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	00da      	lsls	r2, r3, #3
 8008b74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b78:	4413      	add	r3, r2
 8008b7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b86:	2b3e      	cmp	r3, #62	; 0x3e
 8008b88:	d91d      	bls.n	8008bc6 <USB_EPStartXfer+0xe28>
 8008b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b8e:	095b      	lsrs	r3, r3, #5
 8008b90:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b98:	f003 031f 	and.w	r3, r3, #31
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d104      	bne.n	8008baa <USB_EPStartXfer+0xe0c>
 8008ba0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008baa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	029b      	lsls	r3, r3, #10
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bc2:	801a      	strh	r2, [r3, #0]
 8008bc4:	e3e1      	b.n	800938a <USB_EPStartXfer+0x15ec>
 8008bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d116      	bne.n	8008bfc <USB_EPStartXfer+0xe5e>
 8008bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bd2:	881b      	ldrh	r3, [r3, #0]
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008be0:	801a      	strh	r2, [r3, #0]
 8008be2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008be6:	881b      	ldrh	r3, [r3, #0]
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bf8:	801a      	strh	r2, [r3, #0]
 8008bfa:	e3c6      	b.n	800938a <USB_EPStartXfer+0x15ec>
 8008bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c00:	085b      	lsrs	r3, r3, #1
 8008c02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d004      	beq.n	8008c1c <USB_EPStartXfer+0xe7e>
 8008c12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008c16:	3301      	adds	r3, #1
 8008c18:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	029b      	lsls	r3, r3, #10
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c2a:	801a      	strh	r2, [r3, #0]
 8008c2c:	e3ad      	b.n	800938a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	78db      	ldrb	r3, [r3, #3]
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	f040 8200 	bne.w	8009040 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	785b      	ldrb	r3, [r3, #1]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f040 8091 	bne.w	8008d74 <USB_EPStartXfer+0xfd6>
 8008c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	461a      	mov	r2, r3
 8008c72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c76:	4413      	add	r3, r2
 8008c78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	00da      	lsls	r2, r3, #3
 8008c8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c8e:	4413      	add	r3, r2
 8008c90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008c94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	2b3e      	cmp	r3, #62	; 0x3e
 8008ca6:	d925      	bls.n	8008cf4 <USB_EPStartXfer+0xf56>
 8008ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	095b      	lsrs	r3, r3, #5
 8008cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	f003 031f 	and.w	r3, r3, #31
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d104      	bne.n	8008cd8 <USB_EPStartXfer+0xf3a>
 8008cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cd2:	3b01      	subs	r3, #1
 8008cd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	029b      	lsls	r3, r3, #10
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ce6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cea:	b29a      	uxth	r2, r3
 8008cec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008cf0:	801a      	strh	r2, [r3, #0]
 8008cf2:	e074      	b.n	8008dde <USB_EPStartXfer+0x1040>
 8008cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d116      	bne.n	8008d32 <USB_EPStartXfer+0xf94>
 8008d04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d08:	881b      	ldrh	r3, [r3, #0]
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d16:	801a      	strh	r2, [r3, #0]
 8008d18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d1c:	881b      	ldrh	r3, [r3, #0]
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d2e:	801a      	strh	r2, [r3, #0]
 8008d30:	e055      	b.n	8008dde <USB_EPStartXfer+0x1040>
 8008d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	085b      	lsrs	r3, r3, #1
 8008d40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	f003 0301 	and.w	r3, r3, #1
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d004      	beq.n	8008d62 <USB_EPStartXfer+0xfc4>
 8008d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	029b      	lsls	r3, r3, #10
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d70:	801a      	strh	r2, [r3, #0]
 8008d72:	e034      	b.n	8008dde <USB_EPStartXfer+0x1040>
 8008d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	785b      	ldrb	r3, [r3, #1]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d12c      	bne.n	8008dde <USB_EPStartXfer+0x1040>
 8008d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	461a      	mov	r2, r3
 8008da4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008da8:	4413      	add	r3, r2
 8008daa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	00da      	lsls	r2, r3, #3
 8008dbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008dc0:	4413      	add	r3, r2
 8008dc2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008ddc:	801a      	strh	r2, [r3, #0]
 8008dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008de2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	785b      	ldrb	r3, [r3, #1]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f040 8091 	bne.w	8008f20 <USB_EPStartXfer+0x1182>
 8008dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e22:	4413      	add	r3, r2
 8008e24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	00da      	lsls	r2, r3, #3
 8008e36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e3a:	4413      	add	r3, r2
 8008e3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008e40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008e44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	691b      	ldr	r3, [r3, #16]
 8008e50:	2b3e      	cmp	r3, #62	; 0x3e
 8008e52:	d925      	bls.n	8008ea0 <USB_EPStartXfer+0x1102>
 8008e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	095b      	lsrs	r3, r3, #5
 8008e62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	f003 031f 	and.w	r3, r3, #31
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d104      	bne.n	8008e84 <USB_EPStartXfer+0x10e6>
 8008e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	029b      	lsls	r3, r3, #10
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e9c:	801a      	strh	r2, [r3, #0]
 8008e9e:	e06d      	b.n	8008f7c <USB_EPStartXfer+0x11de>
 8008ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d116      	bne.n	8008ede <USB_EPStartXfer+0x1140>
 8008eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008eb4:	881b      	ldrh	r3, [r3, #0]
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ec2:	801a      	strh	r2, [r3, #0]
 8008ec4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ec8:	881b      	ldrh	r3, [r3, #0]
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ed0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ed4:	b29a      	uxth	r2, r3
 8008ed6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008eda:	801a      	strh	r2, [r3, #0]
 8008edc:	e04e      	b.n	8008f7c <USB_EPStartXfer+0x11de>
 8008ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	085b      	lsrs	r3, r3, #1
 8008eec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	f003 0301 	and.w	r3, r3, #1
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d004      	beq.n	8008f0e <USB_EPStartXfer+0x1170>
 8008f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f08:	3301      	adds	r3, #1
 8008f0a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	029b      	lsls	r3, r3, #10
 8008f16:	b29a      	uxth	r2, r3
 8008f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f1c:	801a      	strh	r2, [r3, #0]
 8008f1e:	e02d      	b.n	8008f7c <USB_EPStartXfer+0x11de>
 8008f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	785b      	ldrb	r3, [r3, #1]
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d125      	bne.n	8008f7c <USB_EPStartXfer+0x11de>
 8008f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	461a      	mov	r2, r3
 8008f42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008f46:	4413      	add	r3, r2
 8008f48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	00da      	lsls	r2, r3, #3
 8008f5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008f5e:	4413      	add	r3, r2
 8008f60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008f64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f7a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	69db      	ldr	r3, [r3, #28]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 81fe 	beq.w	800938a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	4413      	add	r3, r2
 8008fa8:	881b      	ldrh	r3, [r3, #0]
 8008faa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008fae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d005      	beq.n	8008fc6 <USB_EPStartXfer+0x1228>
 8008fba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d10d      	bne.n	8008fe2 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008fc6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f040 81db 	bne.w	800938a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008fd4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f040 81d4 	bne.w	800938a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fe6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4413      	add	r3, r2
 8008ffc:	881b      	ldrh	r3, [r3, #0]
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009008:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800900c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009010:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800901a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	441a      	add	r2, r3
 8009026:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800902a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800902e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009036:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800903a:	b29b      	uxth	r3, r3
 800903c:	8013      	strh	r3, [r2, #0]
 800903e:	e1a4      	b.n	800938a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	78db      	ldrb	r3, [r3, #3]
 800904c:	2b01      	cmp	r3, #1
 800904e:	f040 819a 	bne.w	8009386 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	699a      	ldr	r2, [r3, #24]
 800905e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	429a      	cmp	r2, r3
 800906c:	d917      	bls.n	800909e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800906e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800907e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	699a      	ldr	r2, [r3, #24]
 800908a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800908e:	1ad2      	subs	r2, r2, r3
 8009090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	619a      	str	r2, [r3, #24]
 800909c:	e00e      	b.n	80090bc <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800909e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80090ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2200      	movs	r2, #0
 80090ba:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80090bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	785b      	ldrb	r3, [r3, #1]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d178      	bne.n	80091be <USB_EPStartXfer+0x1420>
 80090cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80090da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	461a      	mov	r2, r3
 80090ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80090f0:	4413      	add	r3, r2
 80090f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80090f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	00da      	lsls	r2, r3, #3
 8009104:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009108:	4413      	add	r3, r2
 800910a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800910e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009116:	2b3e      	cmp	r3, #62	; 0x3e
 8009118:	d91d      	bls.n	8009156 <USB_EPStartXfer+0x13b8>
 800911a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800911e:	095b      	lsrs	r3, r3, #5
 8009120:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009128:	f003 031f 	and.w	r3, r3, #31
 800912c:	2b00      	cmp	r3, #0
 800912e:	d104      	bne.n	800913a <USB_EPStartXfer+0x139c>
 8009130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009134:	3b01      	subs	r3, #1
 8009136:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800913a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800913e:	b29b      	uxth	r3, r3
 8009140:	029b      	lsls	r3, r3, #10
 8009142:	b29b      	uxth	r3, r3
 8009144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800914c:	b29a      	uxth	r2, r3
 800914e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009152:	801a      	strh	r2, [r3, #0]
 8009154:	e064      	b.n	8009220 <USB_EPStartXfer+0x1482>
 8009156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800915a:	2b00      	cmp	r3, #0
 800915c:	d116      	bne.n	800918c <USB_EPStartXfer+0x13ee>
 800915e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	b29b      	uxth	r3, r3
 8009166:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800916a:	b29a      	uxth	r2, r3
 800916c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009170:	801a      	strh	r2, [r3, #0]
 8009172:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009176:	881b      	ldrh	r3, [r3, #0]
 8009178:	b29b      	uxth	r3, r3
 800917a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800917e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009182:	b29a      	uxth	r2, r3
 8009184:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009188:	801a      	strh	r2, [r3, #0]
 800918a:	e049      	b.n	8009220 <USB_EPStartXfer+0x1482>
 800918c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009190:	085b      	lsrs	r3, r3, #1
 8009192:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800919a:	f003 0301 	and.w	r3, r3, #1
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d004      	beq.n	80091ac <USB_EPStartXfer+0x140e>
 80091a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091a6:	3301      	adds	r3, #1
 80091a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80091ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	029b      	lsls	r3, r3, #10
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091ba:	801a      	strh	r2, [r3, #0]
 80091bc:	e030      	b.n	8009220 <USB_EPStartXfer+0x1482>
 80091be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	785b      	ldrb	r3, [r3, #1]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d128      	bne.n	8009220 <USB_EPStartXfer+0x1482>
 80091ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80091dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	461a      	mov	r2, r3
 80091ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80091f2:	4413      	add	r3, r2
 80091f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80091f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	00da      	lsls	r2, r3, #3
 8009206:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800920a:	4413      	add	r3, r2
 800920c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009210:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009218:	b29a      	uxth	r2, r3
 800921a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800921e:	801a      	strh	r2, [r3, #0]
 8009220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009224:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800922e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	785b      	ldrb	r3, [r3, #1]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d178      	bne.n	8009330 <USB_EPStartXfer+0x1592>
 800923e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009242:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800924c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009250:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800925a:	b29b      	uxth	r3, r3
 800925c:	461a      	mov	r2, r3
 800925e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009262:	4413      	add	r3, r2
 8009264:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800926c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	00da      	lsls	r2, r3, #3
 8009276:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800927a:	4413      	add	r3, r2
 800927c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009280:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009288:	2b3e      	cmp	r3, #62	; 0x3e
 800928a:	d91d      	bls.n	80092c8 <USB_EPStartXfer+0x152a>
 800928c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009290:	095b      	lsrs	r3, r3, #5
 8009292:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800929a:	f003 031f 	and.w	r3, r3, #31
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d104      	bne.n	80092ac <USB_EPStartXfer+0x150e>
 80092a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80092a6:	3b01      	subs	r3, #1
 80092a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80092ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	029b      	lsls	r3, r3, #10
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092be:	b29a      	uxth	r2, r3
 80092c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092c4:	801a      	strh	r2, [r3, #0]
 80092c6:	e060      	b.n	800938a <USB_EPStartXfer+0x15ec>
 80092c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d116      	bne.n	80092fe <USB_EPStartXfer+0x1560>
 80092d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092d4:	881b      	ldrh	r3, [r3, #0]
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80092dc:	b29a      	uxth	r2, r3
 80092de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092e2:	801a      	strh	r2, [r3, #0]
 80092e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092e8:	881b      	ldrh	r3, [r3, #0]
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092fa:	801a      	strh	r2, [r3, #0]
 80092fc:	e045      	b.n	800938a <USB_EPStartXfer+0x15ec>
 80092fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009302:	085b      	lsrs	r3, r3, #1
 8009304:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800930c:	f003 0301 	and.w	r3, r3, #1
 8009310:	2b00      	cmp	r3, #0
 8009312:	d004      	beq.n	800931e <USB_EPStartXfer+0x1580>
 8009314:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009318:	3301      	adds	r3, #1
 800931a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800931e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009322:	b29b      	uxth	r3, r3
 8009324:	029b      	lsls	r3, r3, #10
 8009326:	b29a      	uxth	r2, r3
 8009328:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800932c:	801a      	strh	r2, [r3, #0]
 800932e:	e02c      	b.n	800938a <USB_EPStartXfer+0x15ec>
 8009330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	785b      	ldrb	r3, [r3, #1]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d124      	bne.n	800938a <USB_EPStartXfer+0x15ec>
 8009340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009344:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800934e:	b29b      	uxth	r3, r3
 8009350:	461a      	mov	r2, r3
 8009352:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009356:	4413      	add	r3, r2
 8009358:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800935c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	00da      	lsls	r2, r3, #3
 800936a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800936e:	4413      	add	r3, r2
 8009370:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009374:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800937c:	b29a      	uxth	r2, r3
 800937e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009382:	801a      	strh	r2, [r3, #0]
 8009384:	e001      	b.n	800938a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	e03a      	b.n	8009400 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800938a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800938e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	4413      	add	r3, r2
 80093a4:	881b      	ldrh	r3, [r3, #0]
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093b0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80093b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80093b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80093bc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80093c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80093c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80093c8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80093cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	441a      	add	r2, r3
 80093e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80093ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800940a:	b480      	push	{r7}
 800940c:	b085      	sub	sp, #20
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	785b      	ldrb	r3, [r3, #1]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d020      	beq.n	800945e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	4413      	add	r3, r2
 8009426:	881b      	ldrh	r3, [r3, #0]
 8009428:	b29b      	uxth	r3, r3
 800942a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800942e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009432:	81bb      	strh	r3, [r7, #12]
 8009434:	89bb      	ldrh	r3, [r7, #12]
 8009436:	f083 0310 	eor.w	r3, r3, #16
 800943a:	81bb      	strh	r3, [r7, #12]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	441a      	add	r2, r3
 8009446:	89bb      	ldrh	r3, [r7, #12]
 8009448:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800944c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009450:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009458:	b29b      	uxth	r3, r3
 800945a:	8013      	strh	r3, [r2, #0]
 800945c:	e01f      	b.n	800949e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	4413      	add	r3, r2
 8009468:	881b      	ldrh	r3, [r3, #0]
 800946a:	b29b      	uxth	r3, r3
 800946c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009474:	81fb      	strh	r3, [r7, #14]
 8009476:	89fb      	ldrh	r3, [r7, #14]
 8009478:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800947c:	81fb      	strh	r3, [r7, #14]
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	441a      	add	r2, r3
 8009488:	89fb      	ldrh	r3, [r7, #14]
 800948a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800948e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800949a:	b29b      	uxth	r3, r3
 800949c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800949e:	2300      	movs	r3, #0
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3714      	adds	r7, #20
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b087      	sub	sp, #28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	7b1b      	ldrb	r3, [r3, #12]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f040 809d 	bne.w	80095fa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	785b      	ldrb	r3, [r3, #1]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d04c      	beq.n	8009562 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	4413      	add	r3, r2
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	823b      	strh	r3, [r7, #16]
 80094d6:	8a3b      	ldrh	r3, [r7, #16]
 80094d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d01b      	beq.n	8009518 <USB_EPClearStall+0x6c>
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4413      	add	r3, r2
 80094ea:	881b      	ldrh	r3, [r3, #0]
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094f6:	81fb      	strh	r3, [r7, #14]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	441a      	add	r2, r3
 8009502:	89fb      	ldrh	r3, [r7, #14]
 8009504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800950c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009510:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009514:	b29b      	uxth	r3, r3
 8009516:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	78db      	ldrb	r3, [r3, #3]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d06c      	beq.n	80095fa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	4413      	add	r3, r2
 800952a:	881b      	ldrh	r3, [r3, #0]
 800952c:	b29b      	uxth	r3, r3
 800952e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009536:	81bb      	strh	r3, [r7, #12]
 8009538:	89bb      	ldrh	r3, [r7, #12]
 800953a:	f083 0320 	eor.w	r3, r3, #32
 800953e:	81bb      	strh	r3, [r7, #12]
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	441a      	add	r2, r3
 800954a:	89bb      	ldrh	r3, [r7, #12]
 800954c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800955c:	b29b      	uxth	r3, r3
 800955e:	8013      	strh	r3, [r2, #0]
 8009560:	e04b      	b.n	80095fa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	4413      	add	r3, r2
 800956c:	881b      	ldrh	r3, [r3, #0]
 800956e:	82fb      	strh	r3, [r7, #22]
 8009570:	8afb      	ldrh	r3, [r7, #22]
 8009572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009576:	2b00      	cmp	r3, #0
 8009578:	d01b      	beq.n	80095b2 <USB_EPClearStall+0x106>
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	4413      	add	r3, r2
 8009584:	881b      	ldrh	r3, [r3, #0]
 8009586:	b29b      	uxth	r3, r3
 8009588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800958c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009590:	82bb      	strh	r3, [r7, #20]
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	441a      	add	r2, r3
 800959c:	8abb      	ldrh	r3, [r7, #20]
 800959e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80095aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4413      	add	r3, r2
 80095bc:	881b      	ldrh	r3, [r3, #0]
 80095be:	b29b      	uxth	r3, r3
 80095c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095c8:	827b      	strh	r3, [r7, #18]
 80095ca:	8a7b      	ldrh	r3, [r7, #18]
 80095cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80095d0:	827b      	strh	r3, [r7, #18]
 80095d2:	8a7b      	ldrh	r3, [r7, #18]
 80095d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80095d8:	827b      	strh	r3, [r7, #18]
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	441a      	add	r2, r3
 80095e4:	8a7b      	ldrh	r3, [r7, #18]
 80095e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80095fa:	2300      	movs	r3, #0
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	371c      	adds	r7, #28
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	460b      	mov	r3, r1
 8009612:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009614:	78fb      	ldrb	r3, [r7, #3]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d103      	bne.n	8009622 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2280      	movs	r2, #128	; 0x80
 800961e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800963e:	b29b      	uxth	r3, r3
 8009640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009648:	b29a      	uxth	r2, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	370c      	adds	r7, #12
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr

0800965e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800965e:	b480      	push	{r7}
 8009660:	b085      	sub	sp, #20
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800966c:	b29b      	uxth	r3, r3
 800966e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009670:	68fb      	ldr	r3, [r7, #12]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3714      	adds	r7, #20
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr

0800967e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800967e:	b480      	push	{r7}
 8009680:	b08b      	sub	sp, #44	; 0x2c
 8009682:	af00      	add	r7, sp, #0
 8009684:	60f8      	str	r0, [r7, #12]
 8009686:	60b9      	str	r1, [r7, #8]
 8009688:	4611      	mov	r1, r2
 800968a:	461a      	mov	r2, r3
 800968c:	460b      	mov	r3, r1
 800968e:	80fb      	strh	r3, [r7, #6]
 8009690:	4613      	mov	r3, r2
 8009692:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009694:	88bb      	ldrh	r3, [r7, #4]
 8009696:	3301      	adds	r3, #1
 8009698:	085b      	lsrs	r3, r3, #1
 800969a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80096a4:	88fa      	ldrh	r2, [r7, #6]
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	4413      	add	r3, r2
 80096aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096ae:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	627b      	str	r3, [r7, #36]	; 0x24
 80096b4:	e01b      	b.n	80096ee <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	3301      	adds	r3, #1
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	021b      	lsls	r3, r3, #8
 80096c4:	b21a      	sxth	r2, r3
 80096c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	b21b      	sxth	r3, r3
 80096ce:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	8a7a      	ldrh	r2, [r7, #18]
 80096d4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80096d6:	6a3b      	ldr	r3, [r7, #32]
 80096d8:	3302      	adds	r3, #2
 80096da:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	3301      	adds	r3, #1
 80096e0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	3301      	adds	r3, #1
 80096e6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80096e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ea:	3b01      	subs	r3, #1
 80096ec:	627b      	str	r3, [r7, #36]	; 0x24
 80096ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d1e0      	bne.n	80096b6 <USB_WritePMA+0x38>
  }
}
 80096f4:	bf00      	nop
 80096f6:	bf00      	nop
 80096f8:	372c      	adds	r7, #44	; 0x2c
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr

08009702 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009702:	b480      	push	{r7}
 8009704:	b08b      	sub	sp, #44	; 0x2c
 8009706:	af00      	add	r7, sp, #0
 8009708:	60f8      	str	r0, [r7, #12]
 800970a:	60b9      	str	r1, [r7, #8]
 800970c:	4611      	mov	r1, r2
 800970e:	461a      	mov	r2, r3
 8009710:	460b      	mov	r3, r1
 8009712:	80fb      	strh	r3, [r7, #6]
 8009714:	4613      	mov	r3, r2
 8009716:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009718:	88bb      	ldrh	r3, [r7, #4]
 800971a:	085b      	lsrs	r3, r3, #1
 800971c:	b29b      	uxth	r3, r3
 800971e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009728:	88fa      	ldrh	r2, [r7, #6]
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	4413      	add	r3, r2
 800972e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009732:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	627b      	str	r3, [r7, #36]	; 0x24
 8009738:	e018      	b.n	800976c <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800973a:	6a3b      	ldr	r3, [r7, #32]
 800973c:	881b      	ldrh	r3, [r3, #0]
 800973e:	b29b      	uxth	r3, r3
 8009740:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009742:	6a3b      	ldr	r3, [r7, #32]
 8009744:	3302      	adds	r3, #2
 8009746:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	b2da      	uxtb	r2, r3
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	3301      	adds	r3, #1
 8009754:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	0a1b      	lsrs	r3, r3, #8
 800975a:	b2da      	uxtb	r2, r3
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	3301      	adds	r3, #1
 8009764:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009768:	3b01      	subs	r3, #1
 800976a:	627b      	str	r3, [r7, #36]	; 0x24
 800976c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1e3      	bne.n	800973a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009772:	88bb      	ldrh	r3, [r7, #4]
 8009774:	f003 0301 	and.w	r3, r3, #1
 8009778:	b29b      	uxth	r3, r3
 800977a:	2b00      	cmp	r3, #0
 800977c:	d007      	beq.n	800978e <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800977e:	6a3b      	ldr	r3, [r7, #32]
 8009780:	881b      	ldrh	r3, [r3, #0]
 8009782:	b29b      	uxth	r3, r3
 8009784:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	b2da      	uxtb	r2, r3
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	701a      	strb	r2, [r3, #0]
  }
}
 800978e:	bf00      	nop
 8009790:	372c      	adds	r7, #44	; 0x2c
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr

0800979a <VL53L0X_GetRangeStatusString>:
	return Status;
}

VL53L0X_Error VL53L0X_GetRangeStatusString(uint8_t RangeStatus,
	char *pRangeStatusString)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b084      	sub	sp, #16
 800979e:	af00      	add	r7, sp, #0
 80097a0:	4603      	mov	r3, r0
 80097a2:	6039      	str	r1, [r7, #0]
 80097a4:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097a6:	2300      	movs	r3, #0
 80097a8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_range_status_string(RangeStatus,
 80097aa:	79fb      	ldrb	r3, [r7, #7]
 80097ac:	6839      	ldr	r1, [r7, #0]
 80097ae:	4618      	mov	r0, r3
 80097b0:	f004 faaa 	bl	800dd08 <VL53L0X_get_range_status_string>
 80097b4:	4603      	mov	r3, r0
 80097b6:	73fb      	strb	r3, [r7, #15]
		pRangeStatusString);

	LOG_FUNCTION_END(Status);
	return Status;
 80097b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <VL53L0X_GetPalErrorString>:

VL53L0X_Error VL53L0X_GetPalErrorString(VL53L0X_Error PalErrorCode,
	char *pPalErrorString)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	4603      	mov	r3, r0
 80097cc:	6039      	str	r1, [r7, #0]
 80097ce:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097d0:	2300      	movs	r3, #0
 80097d2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_pal_error_string(PalErrorCode, pPalErrorString);
 80097d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097d8:	6839      	ldr	r1, [r7, #0]
 80097da:	4618      	mov	r0, r3
 80097dc:	f004 fb0e 	bl	800ddfc <VL53L0X_get_pal_error_string>
 80097e0:	4603      	mov	r3, r0
 80097e2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80097e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3710      	adds	r7, #16
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097fa:	2300      	movs	r3, #0
 80097fc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80097fe:	6839      	ldr	r1, [r7, #0]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f001 fba2 	bl	800af4a <VL53L0X_get_offset_calibration_data_micro_meter>
 8009806:	4603      	mov	r3, r0
 8009808:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800980a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800980e:	4618      	mov	r0, r3
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
	...

08009818 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8009818:	b5b0      	push	{r4, r5, r7, lr}
 800981a:	b09e      	sub	sp, #120	; 0x78
 800981c:	af02      	add	r7, sp, #8
 800981e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009820:	2300      	movs	r3, #0
 8009822:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8009826:	f107 031c 	add.w	r3, r7, #28
 800982a:	2240      	movs	r2, #64	; 0x40
 800982c:	2100      	movs	r1, #0
 800982e:	4618      	mov	r0, r3
 8009830:	f00a fabe 	bl	8013db0 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8009834:	2300      	movs	r3, #0
 8009836:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8009838:	2300      	movs	r3, #0
 800983a:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800983c:	2300      	movs	r3, #0
 800983e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8009842:	2300      	movs	r3, #0
 8009844:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8009846:	2300      	movs	r3, #0
 8009848:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800984a:	2300      	movs	r3, #0
 800984c:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800984e:	2300      	movs	r3, #0
 8009850:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8009854:	2101      	movs	r1, #1
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f002 fabe 	bl	800bdd8 <VL53L0X_get_info_from_device>
 800985c:	4603      	mov	r3, r0
 800985e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8009868:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8009870:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8009874:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009878:	2b01      	cmp	r3, #1
 800987a:	d80d      	bhi.n	8009898 <VL53L0X_StaticInit+0x80>
 800987c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009880:	2b01      	cmp	r3, #1
 8009882:	d102      	bne.n	800988a <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8009884:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009886:	2b20      	cmp	r3, #32
 8009888:	d806      	bhi.n	8009898 <VL53L0X_StaticInit+0x80>
 800988a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800988e:	2b00      	cmp	r3, #0
 8009890:	d10e      	bne.n	80098b0 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8009892:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009894:	2b0c      	cmp	r3, #12
 8009896:	d90b      	bls.n	80098b0 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8009898:	f107 0218 	add.w	r2, r7, #24
 800989c:	f107 0314 	add.w	r3, r7, #20
 80098a0:	4619      	mov	r1, r3
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f001 fd50 	bl	800b348 <VL53L0X_perform_ref_spad_management>
 80098a8:	4603      	mov	r3, r0
 80098aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80098ae:	e009      	b.n	80098c4 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80098b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098b4:	461a      	mov	r2, r3
 80098b6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f001 ff51 	bl	800b760 <VL53L0X_set_reference_spads>
 80098be:	4603      	mov	r3, r0
 80098c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80098c4:	4b94      	ldr	r3, [pc, #592]	; (8009b18 <VL53L0X_StaticInit+0x300>)
 80098c6:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80098c8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d10f      	bne.n	80098f0 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80098d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80098da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d104      	bne.n	80098ec <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80098e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80098ea:	e001      	b.n	80098f0 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80098ec:	4b8a      	ldr	r3, [pc, #552]	; (8009b18 <VL53L0X_StaticInit+0x300>)
 80098ee:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80098f0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d106      	bne.n	8009906 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80098f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f003 fb8a 	bl	800d014 <VL53L0X_load_tuning_settings>
 8009900:	4603      	mov	r3, r0
 8009902:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8009906:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10a      	bne.n	8009924 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800990e:	2300      	movs	r3, #0
 8009910:	9300      	str	r3, [sp, #0]
 8009912:	2304      	movs	r3, #4
 8009914:	2200      	movs	r2, #0
 8009916:	2100      	movs	r1, #0
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f001 f941 	bl	800aba0 <VL53L0X_SetGpioConfig>
 800991e:	4603      	mov	r3, r0
 8009920:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009924:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009928:	2b00      	cmp	r3, #0
 800992a:	d121      	bne.n	8009970 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800992c:	2201      	movs	r2, #1
 800992e:	21ff      	movs	r1, #255	; 0xff
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f004 fde1 	bl	800e4f8 <VL53L0X_WrByte>
 8009936:	4603      	mov	r3, r0
 8009938:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800993c:	f107 031a 	add.w	r3, r7, #26
 8009940:	461a      	mov	r2, r3
 8009942:	2184      	movs	r1, #132	; 0x84
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f004 fe74 	bl	800e632 <VL53L0X_RdWord>
 800994a:	4603      	mov	r3, r0
 800994c:	461a      	mov	r2, r3
 800994e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009952:	4313      	orrs	r3, r2
 8009954:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009958:	2200      	movs	r2, #0
 800995a:	21ff      	movs	r1, #255	; 0xff
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f004 fdcb 	bl	800e4f8 <VL53L0X_WrByte>
 8009962:	4603      	mov	r3, r0
 8009964:	461a      	mov	r2, r3
 8009966:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800996a:	4313      	orrs	r3, r2
 800996c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009970:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009974:	2b00      	cmp	r3, #0
 8009976:	d105      	bne.n	8009984 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8009978:	8b7b      	ldrh	r3, [r7, #26]
 800997a:	011b      	lsls	r3, r3, #4
 800997c:	461a      	mov	r2, r3
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8009984:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009988:	2b00      	cmp	r3, #0
 800998a:	d108      	bne.n	800999e <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800998c:	f107 031c 	add.w	r3, r7, #28
 8009990:	4619      	mov	r1, r3
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f8c2 	bl	8009b1c <VL53L0X_GetDeviceParameters>
 8009998:	4603      	mov	r3, r0
 800999a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800999e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d110      	bne.n	80099c8 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80099a6:	f107 0319 	add.w	r3, r7, #25
 80099aa:	4619      	mov	r1, r3
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 f984 	bl	8009cba <VL53L0X_GetFractionEnable>
 80099b2:	4603      	mov	r3, r0
 80099b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80099b8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d103      	bne.n	80099c8 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80099c0:	7e7a      	ldrb	r2, [r7, #25]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80099c8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d10e      	bne.n	80099ee <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f103 0410 	add.w	r4, r3, #16
 80099d6:	f107 051c 	add.w	r5, r7, #28
 80099da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80099de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80099e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80099e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80099ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80099ee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d111      	bne.n	8009a1a <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 80099f6:	f107 0319 	add.w	r3, r7, #25
 80099fa:	461a      	mov	r2, r3
 80099fc:	2101      	movs	r1, #1
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f004 fdf8 	bl	800e5f4 <VL53L0X_RdByte>
 8009a04:	4603      	mov	r3, r0
 8009a06:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8009a0a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d103      	bne.n	8009a1a <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8009a12:	7e7a      	ldrb	r2, [r7, #25]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8009a1a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d107      	bne.n	8009a32 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8009a22:	2200      	movs	r2, #0
 8009a24:	2100      	movs	r1, #0
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 f9a4 	bl	8009d74 <VL53L0X_SetSequenceStepEnable>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8009a32:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d107      	bne.n	8009a4a <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	2102      	movs	r1, #2
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 f998 	bl	8009d74 <VL53L0X_SetSequenceStepEnable>
 8009a44:	4603      	mov	r3, r0
 8009a46:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8009a4a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d103      	bne.n	8009a5a <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2203      	movs	r2, #3
 8009a56:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8009a5a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d109      	bne.n	8009a76 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8009a62:	f107 0313 	add.w	r3, r7, #19
 8009a66:	461a      	mov	r2, r3
 8009a68:	2100      	movs	r1, #0
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f96a 	bl	8009d44 <VL53L0X_GetVcselPulsePeriod>
 8009a70:	4603      	mov	r3, r0
 8009a72:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009a76:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d103      	bne.n	8009a86 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009a7e:	7cfa      	ldrb	r2, [r7, #19]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8009a86:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d109      	bne.n	8009aa2 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8009a8e:	f107 0313 	add.w	r3, r7, #19
 8009a92:	461a      	mov	r2, r3
 8009a94:	2101      	movs	r1, #1
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f954 	bl	8009d44 <VL53L0X_GetVcselPulsePeriod>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009aa2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d103      	bne.n	8009ab2 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009aaa:	7cfa      	ldrb	r2, [r7, #19]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8009ab2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d109      	bne.n	8009ace <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8009aba:	f107 030c 	add.w	r3, r7, #12
 8009abe:	461a      	mov	r2, r3
 8009ac0:	2103      	movs	r1, #3
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f002 ff0a 	bl	800c8dc <get_sequence_step_timeout>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009ace:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d103      	bne.n	8009ade <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8009ade:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d109      	bne.n	8009afa <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8009ae6:	f107 030c 	add.w	r3, r7, #12
 8009aea:	461a      	mov	r2, r3
 8009aec:	2104      	movs	r1, #4
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f002 fef4 	bl	800c8dc <get_sequence_step_timeout>
 8009af4:	4603      	mov	r3, r0
 8009af6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009afa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d103      	bne.n	8009b0a <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009b0a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3770      	adds	r7, #112	; 0x70
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bdb0      	pop	{r4, r5, r7, pc}
 8009b16:	bf00      	nop
 8009b18:	20000014 	.word	0x20000014

08009b1c <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b26:	2300      	movs	r3, #0
 8009b28:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 f8b0 	bl	8009c94 <VL53L0X_GetDeviceMode>
 8009b34:	4603      	mov	r3, r0
 8009b36:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d107      	bne.n	8009b50 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	3308      	adds	r3, #8
 8009b44:	4619      	mov	r1, r3
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fa60 	bl	800a00c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8009b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d102      	bne.n	8009b5e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8009b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d107      	bne.n	8009b76 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	3310      	adds	r3, #16
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fa96 	bl	800a09e <VL53L0X_GetXTalkCompensationRateMegaCps>
 8009b72:	4603      	mov	r3, r0
 8009b74:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8009b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d107      	bne.n	8009b8e <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	3314      	adds	r3, #20
 8009b82:	4619      	mov	r1, r3
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f7ff fe33 	bl	80097f0 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8009b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d134      	bne.n	8009c00 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009b96:	2300      	movs	r3, #0
 8009b98:	60bb      	str	r3, [r7, #8]
 8009b9a:	e02a      	b.n	8009bf2 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8009b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d12a      	bne.n	8009bfa <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	b299      	uxth	r1, r3
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	3308      	adds	r3, #8
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	683a      	ldr	r2, [r7, #0]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	3304      	adds	r3, #4
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 fbb6 	bl	800a328 <VL53L0X_GetLimitCheckValue>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	7bfb      	ldrb	r3, [r7, #15]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8009bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d117      	bne.n	8009bfe <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	b299      	uxth	r1, r3
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	3318      	adds	r3, #24
 8009bd6:	683a      	ldr	r2, [r7, #0]
 8009bd8:	4413      	add	r3, r2
 8009bda:	461a      	mov	r2, r3
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fb1d 	bl	800a21c <VL53L0X_GetLimitCheckEnable>
 8009be2:	4603      	mov	r3, r0
 8009be4:	461a      	mov	r2, r3
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
 8009be8:	4313      	orrs	r3, r2
 8009bea:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	60bb      	str	r3, [r7, #8]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	2b05      	cmp	r3, #5
 8009bf6:	ddd1      	ble.n	8009b9c <VL53L0X_GetDeviceParameters+0x80>
 8009bf8:	e002      	b.n	8009c00 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8009bfa:	bf00      	nop
 8009bfc:	e000      	b.n	8009c00 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8009bfe:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d107      	bne.n	8009c18 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	333c      	adds	r3, #60	; 0x3c
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fc8e 	bl	800a530 <VL53L0X_GetWrapAroundCheckEnable>
 8009c14:	4603      	mov	r3, r0
 8009c16:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8009c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d107      	bne.n	8009c30 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	3304      	adds	r3, #4
 8009c24:	4619      	mov	r1, r3
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f879 	bl	8009d1e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3710      	adds	r7, #16
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b085      	sub	sp, #20
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	460b      	mov	r3, r1
 8009c46:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8009c4c:	78fb      	ldrb	r3, [r7, #3]
 8009c4e:	2b15      	cmp	r3, #21
 8009c50:	bf8c      	ite	hi
 8009c52:	2201      	movhi	r2, #1
 8009c54:	2200      	movls	r2, #0
 8009c56:	b2d2      	uxtb	r2, r2
 8009c58:	2a00      	cmp	r2, #0
 8009c5a:	d10e      	bne.n	8009c7a <VL53L0X_SetDeviceMode+0x3e>
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	409a      	lsls	r2, r3
 8009c60:	4b0b      	ldr	r3, [pc, #44]	; (8009c90 <VL53L0X_SetDeviceMode+0x54>)
 8009c62:	4013      	ands	r3, r2
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	bf14      	ite	ne
 8009c68:	2301      	movne	r3, #1
 8009c6a:	2300      	moveq	r3, #0
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d003      	beq.n	8009c7a <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	78fa      	ldrb	r2, [r7, #3]
 8009c76:	741a      	strb	r2, [r3, #16]
		break;
 8009c78:	e001      	b.n	8009c7e <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8009c7a:	23f8      	movs	r3, #248	; 0xf8
 8009c7c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3714      	adds	r7, #20
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	0030000b 	.word	0x0030000b

08009c94 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	7c1a      	ldrb	r2, [r3, #16]
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3714      	adds	r7, #20
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b084      	sub	sp, #16
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8009cc8:	683a      	ldr	r2, [r7, #0]
 8009cca:	2109      	movs	r1, #9
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f004 fc91 	bl	800e5f4 <VL53L0X_RdByte>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d106      	bne.n	8009cec <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	f003 0301 	and.w	r3, r3, #1
 8009ce6:	b2da      	uxtb	r2, r3
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d02:	2300      	movs	r3, #0
 8009d04:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8009d06:	6839      	ldr	r1, [r7, #0]
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f002 fff1 	bl	800ccf0 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8009d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b084      	sub	sp, #16
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
 8009d26:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8009d2c:	6839      	ldr	r1, [r7, #0]
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f003 f8be 	bl	800ceb0 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8009d34:	4603      	mov	r3, r0
 8009d36:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8009d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b086      	sub	sp, #24
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	607a      	str	r2, [r7, #4]
 8009d50:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d52:	2300      	movs	r3, #0
 8009d54:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8009d56:	7afb      	ldrb	r3, [r7, #11]
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f002 ff90 	bl	800cc82 <VL53L0X_get_vcsel_pulse_period>
 8009d62:	4603      	mov	r3, r0
 8009d64:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8009d66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3718      	adds	r7, #24
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
	...

08009d74 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b086      	sub	sp, #24
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	70fb      	strb	r3, [r7, #3]
 8009d80:	4613      	mov	r3, r2
 8009d82:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d84:	2300      	movs	r3, #0
 8009d86:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009d90:	f107 030f 	add.w	r3, r7, #15
 8009d94:	461a      	mov	r2, r3
 8009d96:	2101      	movs	r1, #1
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f004 fc2b 	bl	800e5f4 <VL53L0X_RdByte>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8009da2:	7bfb      	ldrb	r3, [r7, #15]
 8009da4:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8009da6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d15a      	bne.n	8009e64 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8009dae:	78bb      	ldrb	r3, [r7, #2]
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d12b      	bne.n	8009e0c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8009db4:	78fb      	ldrb	r3, [r7, #3]
 8009db6:	2b04      	cmp	r3, #4
 8009db8:	d825      	bhi.n	8009e06 <VL53L0X_SetSequenceStepEnable+0x92>
 8009dba:	a201      	add	r2, pc, #4	; (adr r2, 8009dc0 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8009dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc0:	08009dd5 	.word	0x08009dd5
 8009dc4:	08009ddf 	.word	0x08009ddf
 8009dc8:	08009de9 	.word	0x08009de9
 8009dcc:	08009df3 	.word	0x08009df3
 8009dd0:	08009dfd 	.word	0x08009dfd
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8009dd4:	7dbb      	ldrb	r3, [r7, #22]
 8009dd6:	f043 0310 	orr.w	r3, r3, #16
 8009dda:	75bb      	strb	r3, [r7, #22]
				break;
 8009ddc:	e043      	b.n	8009e66 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8009dde:	7dbb      	ldrb	r3, [r7, #22]
 8009de0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8009de4:	75bb      	strb	r3, [r7, #22]
				break;
 8009de6:	e03e      	b.n	8009e66 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8009de8:	7dbb      	ldrb	r3, [r7, #22]
 8009dea:	f043 0304 	orr.w	r3, r3, #4
 8009dee:	75bb      	strb	r3, [r7, #22]
				break;
 8009df0:	e039      	b.n	8009e66 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8009df2:	7dbb      	ldrb	r3, [r7, #22]
 8009df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009df8:	75bb      	strb	r3, [r7, #22]
				break;
 8009dfa:	e034      	b.n	8009e66 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8009dfc:	7dbb      	ldrb	r3, [r7, #22]
 8009dfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009e02:	75bb      	strb	r3, [r7, #22]
				break;
 8009e04:	e02f      	b.n	8009e66 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009e06:	23fc      	movs	r3, #252	; 0xfc
 8009e08:	75fb      	strb	r3, [r7, #23]
 8009e0a:	e02c      	b.n	8009e66 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8009e0c:	78fb      	ldrb	r3, [r7, #3]
 8009e0e:	2b04      	cmp	r3, #4
 8009e10:	d825      	bhi.n	8009e5e <VL53L0X_SetSequenceStepEnable+0xea>
 8009e12:	a201      	add	r2, pc, #4	; (adr r2, 8009e18 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8009e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e18:	08009e2d 	.word	0x08009e2d
 8009e1c:	08009e37 	.word	0x08009e37
 8009e20:	08009e41 	.word	0x08009e41
 8009e24:	08009e4b 	.word	0x08009e4b
 8009e28:	08009e55 	.word	0x08009e55
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8009e2c:	7dbb      	ldrb	r3, [r7, #22]
 8009e2e:	f023 0310 	bic.w	r3, r3, #16
 8009e32:	75bb      	strb	r3, [r7, #22]
				break;
 8009e34:	e017      	b.n	8009e66 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8009e36:	7dbb      	ldrb	r3, [r7, #22]
 8009e38:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8009e3c:	75bb      	strb	r3, [r7, #22]
				break;
 8009e3e:	e012      	b.n	8009e66 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8009e40:	7dbb      	ldrb	r3, [r7, #22]
 8009e42:	f023 0304 	bic.w	r3, r3, #4
 8009e46:	75bb      	strb	r3, [r7, #22]
				break;
 8009e48:	e00d      	b.n	8009e66 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8009e4a:	7dbb      	ldrb	r3, [r7, #22]
 8009e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e50:	75bb      	strb	r3, [r7, #22]
				break;
 8009e52:	e008      	b.n	8009e66 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8009e54:	7dbb      	ldrb	r3, [r7, #22]
 8009e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e5a:	75bb      	strb	r3, [r7, #22]
				break;
 8009e5c:	e003      	b.n	8009e66 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009e5e:	23fc      	movs	r3, #252	; 0xfc
 8009e60:	75fb      	strb	r3, [r7, #23]
 8009e62:	e000      	b.n	8009e66 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8009e64:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8009e66:	7bfb      	ldrb	r3, [r7, #15]
 8009e68:	7dba      	ldrb	r2, [r7, #22]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d01e      	beq.n	8009eac <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8009e6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d107      	bne.n	8009e86 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8009e76:	7dbb      	ldrb	r3, [r7, #22]
 8009e78:	461a      	mov	r2, r3
 8009e7a:	2101      	movs	r1, #1
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f004 fb3b 	bl	800e4f8 <VL53L0X_WrByte>
 8009e82:	4603      	mov	r3, r0
 8009e84:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8009e86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d103      	bne.n	8009e96 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	7dba      	ldrb	r2, [r7, #22]
 8009e92:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8009e96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d106      	bne.n	8009eac <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	695b      	ldr	r3, [r3, #20]
 8009ea2:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8009ea4:	6939      	ldr	r1, [r7, #16]
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7ff ff26 	bl	8009cf8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8009eac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3718      	adds	r7, #24
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b087      	sub	sp, #28
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	607b      	str	r3, [r7, #4]
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	72fb      	strb	r3, [r7, #11]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8009ed4:	7afb      	ldrb	r3, [r7, #11]
 8009ed6:	2b04      	cmp	r3, #4
 8009ed8:	d836      	bhi.n	8009f48 <sequence_step_enabled+0x90>
 8009eda:	a201      	add	r2, pc, #4	; (adr r2, 8009ee0 <sequence_step_enabled+0x28>)
 8009edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee0:	08009ef5 	.word	0x08009ef5
 8009ee4:	08009f07 	.word	0x08009f07
 8009ee8:	08009f19 	.word	0x08009f19
 8009eec:	08009f2b 	.word	0x08009f2b
 8009ef0:	08009f3d 	.word	0x08009f3d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8009ef4:	7abb      	ldrb	r3, [r7, #10]
 8009ef6:	111b      	asrs	r3, r3, #4
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	f003 0301 	and.w	r3, r3, #1
 8009efe:	b2da      	uxtb	r2, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	701a      	strb	r2, [r3, #0]
		break;
 8009f04:	e022      	b.n	8009f4c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8009f06:	7abb      	ldrb	r3, [r7, #10]
 8009f08:	10db      	asrs	r3, r3, #3
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	f003 0301 	and.w	r3, r3, #1
 8009f10:	b2da      	uxtb	r2, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	701a      	strb	r2, [r3, #0]
		break;
 8009f16:	e019      	b.n	8009f4c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8009f18:	7abb      	ldrb	r3, [r7, #10]
 8009f1a:	109b      	asrs	r3, r3, #2
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	f003 0301 	and.w	r3, r3, #1
 8009f22:	b2da      	uxtb	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	701a      	strb	r2, [r3, #0]
		break;
 8009f28:	e010      	b.n	8009f4c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8009f2a:	7abb      	ldrb	r3, [r7, #10]
 8009f2c:	119b      	asrs	r3, r3, #6
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	f003 0301 	and.w	r3, r3, #1
 8009f34:	b2da      	uxtb	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	701a      	strb	r2, [r3, #0]
		break;
 8009f3a:	e007      	b.n	8009f4c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8009f3c:	7abb      	ldrb	r3, [r7, #10]
 8009f3e:	09db      	lsrs	r3, r3, #7
 8009f40:	b2da      	uxtb	r2, r3
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	701a      	strb	r2, [r3, #0]
		break;
 8009f46:	e001      	b.n	8009f4c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009f48:	23fc      	movs	r3, #252	; 0xfc
 8009f4a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009f4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	371c      	adds	r7, #28
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f66:	2300      	movs	r3, #0
 8009f68:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009f6e:	f107 030e 	add.w	r3, r7, #14
 8009f72:	461a      	mov	r2, r3
 8009f74:	2101      	movs	r1, #1
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f004 fb3c 	bl	800e5f4 <VL53L0X_RdByte>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8009f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d107      	bne.n	8009f98 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8009f88:	7bba      	ldrb	r2, [r7, #14]
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f7ff ff92 	bl	8009eb8 <sequence_step_enabled>
 8009f94:	4603      	mov	r3, r0
 8009f96:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d108      	bne.n	8009fb2 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8009fa0:	7bba      	ldrb	r2, [r7, #14]
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	3302      	adds	r3, #2
 8009fa6:	2101      	movs	r1, #1
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f7ff ff85 	bl	8009eb8 <sequence_step_enabled>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d108      	bne.n	8009fcc <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8009fba:	7bba      	ldrb	r2, [r7, #14]
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	2102      	movs	r1, #2
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f7ff ff78 	bl	8009eb8 <sequence_step_enabled>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d108      	bne.n	8009fe6 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8009fd4:	7bba      	ldrb	r2, [r7, #14]
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	3303      	adds	r3, #3
 8009fda:	2103      	movs	r1, #3
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f7ff ff6b 	bl	8009eb8 <sequence_step_enabled>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d108      	bne.n	800a000 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8009fee:	7bba      	ldrb	r2, [r7, #14]
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	3304      	adds	r3, #4
 8009ff4:	2104      	movs	r1, #4
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f7ff ff5e 	bl	8009eb8 <sequence_step_enabled>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a000:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a004:	4618      	mov	r0, r3
 800a006:	3710      	adds	r7, #16
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a016:	2300      	movs	r3, #0
 800a018:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800a01a:	f107 030c 	add.w	r3, r7, #12
 800a01e:	461a      	mov	r2, r3
 800a020:	21f8      	movs	r1, #248	; 0xf8
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f004 fb05 	bl	800e632 <VL53L0X_RdWord>
 800a028:	4603      	mov	r3, r0
 800a02a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800a02c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d108      	bne.n	800a046 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800a034:	f107 0308 	add.w	r3, r7, #8
 800a038:	461a      	mov	r2, r3
 800a03a:	2104      	movs	r1, #4
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f004 fb17 	bl	800e670 <VL53L0X_RdDWord>
 800a042:	4603      	mov	r3, r0
 800a044:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10c      	bne.n	800a068 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800a04e:	89bb      	ldrh	r3, [r7, #12]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d005      	beq.n	800a060 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	89ba      	ldrh	r2, [r7, #12]
 800a058:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a068:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800a074:	b480      	push	{r7}
 800a076:	b085      	sub	sp, #20
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a07e:	2300      	movs	r3, #0
 800a080:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	7f1b      	ldrb	r3, [r3, #28]
 800a086:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	7bba      	ldrb	r2, [r7, #14]
 800a08c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a08e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a092:	4618      	mov	r0, r3
 800a094:	3714      	adds	r7, #20
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b086      	sub	sp, #24
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
 800a0a6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800a0ac:	f107 030e 	add.w	r3, r7, #14
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	2120      	movs	r1, #32
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f004 fabc 	bl	800e632 <VL53L0X_RdWord>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800a0be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d118      	bne.n	800a0f8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800a0c6:	89fb      	ldrh	r3, [r7, #14]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d109      	bne.n	800a0e0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6a1b      	ldr	r3, [r3, #32]
 800a0d0:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	771a      	strb	r2, [r3, #28]
 800a0de:	e00b      	b.n	800a0f8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800a0e0:	89fb      	ldrh	r3, [r7, #14]
 800a0e2:	00db      	lsls	r3, r3, #3
 800a0e4:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	693a      	ldr	r2, [r7, #16]
 800a0ea:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	693a      	ldr	r2, [r7, #16]
 800a0f0:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a0f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3718      	adds	r7, #24
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b086      	sub	sp, #24
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	460b      	mov	r3, r1
 800a10e:	807b      	strh	r3, [r7, #2]
 800a110:	4613      	mov	r3, r2
 800a112:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a114:	2300      	movs	r3, #0
 800a116:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800a118:	2300      	movs	r3, #0
 800a11a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800a11c:	2300      	movs	r3, #0
 800a11e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800a120:	2300      	movs	r3, #0
 800a122:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800a124:	887b      	ldrh	r3, [r7, #2]
 800a126:	2b05      	cmp	r3, #5
 800a128:	d902      	bls.n	800a130 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a12a:	23fc      	movs	r3, #252	; 0xfc
 800a12c:	75fb      	strb	r3, [r7, #23]
 800a12e:	e05b      	b.n	800a1e8 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800a130:	787b      	ldrb	r3, [r7, #1]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d106      	bne.n	800a144 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800a136:	2300      	movs	r3, #0
 800a138:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800a13a:	2300      	movs	r3, #0
 800a13c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800a13e:	2301      	movs	r3, #1
 800a140:	73bb      	strb	r3, [r7, #14]
 800a142:	e00a      	b.n	800a15a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a144:	887b      	ldrh	r3, [r7, #2]
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	330c      	adds	r3, #12
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4413      	add	r3, r2
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800a152:	2300      	movs	r3, #0
 800a154:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800a156:	2301      	movs	r3, #1
 800a158:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800a15a:	887b      	ldrh	r3, [r7, #2]
 800a15c:	2b05      	cmp	r3, #5
 800a15e:	d841      	bhi.n	800a1e4 <VL53L0X_SetLimitCheckEnable+0xe0>
 800a160:	a201      	add	r2, pc, #4	; (adr r2, 800a168 <VL53L0X_SetLimitCheckEnable+0x64>)
 800a162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a166:	bf00      	nop
 800a168:	0800a181 	.word	0x0800a181
 800a16c:	0800a18b 	.word	0x0800a18b
 800a170:	0800a1a1 	.word	0x0800a1a1
 800a174:	0800a1ab 	.word	0x0800a1ab
 800a178:	0800a1b5 	.word	0x0800a1b5
 800a17c:	0800a1cd 	.word	0x0800a1cd

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	7bfa      	ldrb	r2, [r7, #15]
 800a184:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800a188:	e02e      	b.n	800a1e8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800a18e:	b29b      	uxth	r3, r3
 800a190:	461a      	mov	r2, r3
 800a192:	2144      	movs	r1, #68	; 0x44
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f004 f9cf 	bl	800e538 <VL53L0X_WrWord>
 800a19a:	4603      	mov	r3, r0
 800a19c:	75fb      	strb	r3, [r7, #23]

			break;
 800a19e:	e023      	b.n	800a1e8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	7bfa      	ldrb	r2, [r7, #15]
 800a1a4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800a1a8:	e01e      	b.n	800a1e8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	7bfa      	ldrb	r2, [r7, #15]
 800a1ae:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800a1b2:	e019      	b.n	800a1e8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800a1b4:	7bbb      	ldrb	r3, [r7, #14]
 800a1b6:	005b      	lsls	r3, r3, #1
 800a1b8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800a1ba:	7b7b      	ldrb	r3, [r7, #13]
 800a1bc:	22fe      	movs	r2, #254	; 0xfe
 800a1be:	2160      	movs	r1, #96	; 0x60
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f004 f9d9 	bl	800e578 <VL53L0X_UpdateByte>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800a1ca:	e00d      	b.n	800a1e8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800a1cc:	7bbb      	ldrb	r3, [r7, #14]
 800a1ce:	011b      	lsls	r3, r3, #4
 800a1d0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800a1d2:	7b7b      	ldrb	r3, [r7, #13]
 800a1d4:	22ef      	movs	r2, #239	; 0xef
 800a1d6:	2160      	movs	r1, #96	; 0x60
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f004 f9cd 	bl	800e578 <VL53L0X_UpdateByte>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800a1e2:	e001      	b.n	800a1e8 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a1e4:	23fc      	movs	r3, #252	; 0xfc
 800a1e6:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a1e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10f      	bne.n	800a210 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800a1f0:	787b      	ldrb	r3, [r7, #1]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d106      	bne.n	800a204 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a1f6:	887b      	ldrh	r3, [r7, #2]
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a202:	e005      	b.n	800a210 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a204:	887b      	ldrh	r3, [r7, #2]
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	4413      	add	r3, r2
 800a20a:	2201      	movs	r2, #1
 800a20c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a210:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3718      	adds	r7, #24
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b087      	sub	sp, #28
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	460b      	mov	r3, r1
 800a226:	607a      	str	r2, [r7, #4]
 800a228:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a22a:	2300      	movs	r3, #0
 800a22c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800a22e:	897b      	ldrh	r3, [r7, #10]
 800a230:	2b05      	cmp	r3, #5
 800a232:	d905      	bls.n	800a240 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a234:	23fc      	movs	r3, #252	; 0xfc
 800a236:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	701a      	strb	r2, [r3, #0]
 800a23e:	e008      	b.n	800a252 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a240:	897b      	ldrh	r3, [r7, #10]
 800a242:	68fa      	ldr	r2, [r7, #12]
 800a244:	4413      	add	r3, r2
 800a246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a24a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	7dba      	ldrb	r2, [r7, #22]
 800a250:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a252:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a256:	4618      	mov	r0, r3
 800a258:	371c      	adds	r7, #28
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
	...

0800a264 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b086      	sub	sp, #24
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	460b      	mov	r3, r1
 800a26e:	607a      	str	r2, [r7, #4]
 800a270:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a272:	2300      	movs	r3, #0
 800a274:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800a276:	897b      	ldrh	r3, [r7, #10]
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	4413      	add	r3, r2
 800a27c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a280:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800a282:	7dbb      	ldrb	r3, [r7, #22]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d107      	bne.n	800a298 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a288:	897b      	ldrh	r3, [r7, #10]
 800a28a:	68fa      	ldr	r2, [r7, #12]
 800a28c:	330c      	adds	r3, #12
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	4413      	add	r3, r2
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	605a      	str	r2, [r3, #4]
 800a296:	e040      	b.n	800a31a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800a298:	897b      	ldrh	r3, [r7, #10]
 800a29a:	2b05      	cmp	r3, #5
 800a29c:	d830      	bhi.n	800a300 <VL53L0X_SetLimitCheckValue+0x9c>
 800a29e:	a201      	add	r2, pc, #4	; (adr r2, 800a2a4 <VL53L0X_SetLimitCheckValue+0x40>)
 800a2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a4:	0800a2bd 	.word	0x0800a2bd
 800a2a8:	0800a2c5 	.word	0x0800a2c5
 800a2ac:	0800a2db 	.word	0x0800a2db
 800a2b0:	0800a2e3 	.word	0x0800a2e3
 800a2b4:	0800a2eb 	.word	0x0800a2eb
 800a2b8:	0800a2eb 	.word	0x0800a2eb

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800a2c2:	e01f      	b.n	800a304 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	2144      	movs	r1, #68	; 0x44
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	f004 f932 	bl	800e538 <VL53L0X_WrWord>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800a2d8:	e014      	b.n	800a304 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800a2e0:	e010      	b.n	800a304 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800a2e8:	e00c      	b.n	800a304 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	2164      	movs	r1, #100	; 0x64
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f004 f91f 	bl	800e538 <VL53L0X_WrWord>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800a2fe:	e001      	b.n	800a304 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a300:	23fc      	movs	r3, #252	; 0xfc
 800a302:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a304:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d106      	bne.n	800a31a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a30c:	897b      	ldrh	r3, [r7, #10]
 800a30e:	68fa      	ldr	r2, [r7, #12]
 800a310:	330c      	adds	r3, #12
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	4413      	add	r3, r2
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a31a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3718      	adds	r7, #24
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop

0800a328 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b088      	sub	sp, #32
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	460b      	mov	r3, r1
 800a332:	607a      	str	r2, [r7, #4]
 800a334:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a336:	2300      	movs	r3, #0
 800a338:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800a33a:	2300      	movs	r3, #0
 800a33c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800a33e:	897b      	ldrh	r3, [r7, #10]
 800a340:	2b05      	cmp	r3, #5
 800a342:	d847      	bhi.n	800a3d4 <VL53L0X_GetLimitCheckValue+0xac>
 800a344:	a201      	add	r2, pc, #4	; (adr r2, 800a34c <VL53L0X_GetLimitCheckValue+0x24>)
 800a346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a34a:	bf00      	nop
 800a34c:	0800a365 	.word	0x0800a365
 800a350:	0800a371 	.word	0x0800a371
 800a354:	0800a397 	.word	0x0800a397
 800a358:	0800a3a3 	.word	0x0800a3a3
 800a35c:	0800a3af 	.word	0x0800a3af
 800a360:	0800a3af 	.word	0x0800a3af

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a368:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800a36a:	2300      	movs	r3, #0
 800a36c:	77bb      	strb	r3, [r7, #30]
		break;
 800a36e:	e033      	b.n	800a3d8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800a370:	f107 0316 	add.w	r3, r7, #22
 800a374:	461a      	mov	r2, r3
 800a376:	2144      	movs	r1, #68	; 0x44
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f004 f95a 	bl	800e632 <VL53L0X_RdWord>
 800a37e:	4603      	mov	r3, r0
 800a380:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800a382:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d102      	bne.n	800a390 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800a38a:	8afb      	ldrh	r3, [r7, #22]
 800a38c:	025b      	lsls	r3, r3, #9
 800a38e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800a390:	2301      	movs	r3, #1
 800a392:	77bb      	strb	r3, [r7, #30]
		break;
 800a394:	e020      	b.n	800a3d8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a39a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800a39c:	2300      	movs	r3, #0
 800a39e:	77bb      	strb	r3, [r7, #30]
		break;
 800a3a0:	e01a      	b.n	800a3d8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	77bb      	strb	r3, [r7, #30]
		break;
 800a3ac:	e014      	b.n	800a3d8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800a3ae:	f107 0316 	add.w	r3, r7, #22
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	2164      	movs	r1, #100	; 0x64
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f004 f93b 	bl	800e632 <VL53L0X_RdWord>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800a3c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d102      	bne.n	800a3ce <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800a3c8:	8afb      	ldrh	r3, [r7, #22]
 800a3ca:	025b      	lsls	r3, r3, #9
 800a3cc:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	77bb      	strb	r3, [r7, #30]
		break;
 800a3d2:	e001      	b.n	800a3d8 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a3d4:	23fc      	movs	r3, #252	; 0xfc
 800a3d6:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a3d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d12a      	bne.n	800a436 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800a3e0:	7fbb      	ldrb	r3, [r7, #30]
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d124      	bne.n	800a430 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d110      	bne.n	800a40e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800a3ec:	897b      	ldrh	r3, [r7, #10]
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	330c      	adds	r3, #12
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	4413      	add	r3, r2
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	69ba      	ldr	r2, [r7, #24]
 800a3fe:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800a400:	897b      	ldrh	r3, [r7, #10]
 800a402:	68fa      	ldr	r2, [r7, #12]
 800a404:	4413      	add	r3, r2
 800a406:	2200      	movs	r2, #0
 800a408:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a40c:	e013      	b.n	800a436 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	69ba      	ldr	r2, [r7, #24]
 800a412:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800a414:	897b      	ldrh	r3, [r7, #10]
 800a416:	68fa      	ldr	r2, [r7, #12]
 800a418:	330c      	adds	r3, #12
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	4413      	add	r3, r2
 800a41e:	69ba      	ldr	r2, [r7, #24]
 800a420:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800a422:	897b      	ldrh	r3, [r7, #10]
 800a424:	68fa      	ldr	r2, [r7, #12]
 800a426:	4413      	add	r3, r2
 800a428:	2201      	movs	r2, #1
 800a42a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a42e:	e002      	b.n	800a436 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	69ba      	ldr	r2, [r7, #24]
 800a434:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a436:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3720      	adds	r7, #32
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop

0800a444 <VL53L0X_GetLimitCheckCurrent>:

VL53L0X_Error VL53L0X_GetLimitCheckCurrent(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckCurrent)
{
 800a444:	b4b0      	push	{r4, r5, r7}
 800a446:	b08d      	sub	sp, #52	; 0x34
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	460b      	mov	r3, r1
 800a44e:	607a      	str	r2, [r7, #4]
 800a450:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a452:	2300      	movs	r3, #0
 800a454:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L0X_RangingMeasurementData_t LastRangeDataBuffer;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800a458:	897b      	ldrh	r3, [r7, #10]
 800a45a:	2b05      	cmp	r3, #5
 800a45c:	d903      	bls.n	800a466 <VL53L0X_GetLimitCheckCurrent+0x22>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a45e:	23fc      	movs	r3, #252	; 0xfc
 800a460:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a464:	e05d      	b.n	800a522 <VL53L0X_GetLimitCheckCurrent+0xde>
	} else {
		switch (LimitCheckId) {
 800a466:	897b      	ldrh	r3, [r7, #10]
 800a468:	2b05      	cmp	r3, #5
 800a46a:	d857      	bhi.n	800a51c <VL53L0X_GetLimitCheckCurrent+0xd8>
 800a46c:	a201      	add	r2, pc, #4	; (adr r2, 800a474 <VL53L0X_GetLimitCheckCurrent+0x30>)
 800a46e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a472:	bf00      	nop
 800a474:	0800a48d 	.word	0x0800a48d
 800a478:	0800a499 	.word	0x0800a499
 800a47c:	0800a4b7 	.word	0x0800a4b7
 800a480:	0800a4c3 	.word	0x0800a4c3
 800a484:	0800a4e1 	.word	0x0800a4e1
 800a488:	0800a4ff 	.word	0x0800a4ff
		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* Need to run a ranging to have the latest values */
			*pLimitCheckCurrent = PALDevDataGet(Dev, SigmaEstimate);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	601a      	str	r2, [r3, #0]

			break;
 800a496:	e044      	b.n	800a522 <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f107 0410 	add.w	r4, r7, #16
 800a49e:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800a4a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a4aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 800a4ae:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	601a      	str	r2, [r3, #0]

			break;
 800a4b4:	e035      	b.n	800a522 <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
			/* Need to run a ranging to have the latest values */
			*pLimitCheckCurrent = PALDevDataGet(Dev,
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	601a      	str	r2, [r3, #0]
				LastSignalRefMcps);

			break;
 800a4c0:	e02f      	b.n	800a522 <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f107 0410 	add.w	r4, r7, #16
 800a4c8:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800a4cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a4d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 800a4d8:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	601a      	str	r2, [r3, #0]

			break;
 800a4de:	e020      	b.n	800a522 <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f107 0410 	add.w	r4, r7, #16
 800a4e6:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800a4ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a4f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 800a4f6:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	601a      	str	r2, [r3, #0]

			break;
 800a4fc:	e011      	b.n	800a522 <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f107 0410 	add.w	r4, r7, #16
 800a504:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800a508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a50a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a50c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a510:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 800a514:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	601a      	str	r2, [r3, #0]

			break;
 800a51a:	e002      	b.n	800a522 <VL53L0X_GetLimitCheckCurrent+0xde>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a51c:	23fc      	movs	r3, #252	; 0xfc
 800a51e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a522:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f

}
 800a526:	4618      	mov	r0, r3
 800a528:	3734      	adds	r7, #52	; 0x34
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bcb0      	pop	{r4, r5, r7}
 800a52e:	4770      	bx	lr

0800a530 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a53a:	2300      	movs	r3, #0
 800a53c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800a53e:	f107 030e 	add.w	r3, r7, #14
 800a542:	461a      	mov	r2, r3
 800a544:	2101      	movs	r1, #1
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f004 f854 	bl	800e5f4 <VL53L0X_RdByte>
 800a54c:	4603      	mov	r3, r0
 800a54e:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800a550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d10e      	bne.n	800a576 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800a558:	7bba      	ldrb	r2, [r7, #14]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800a560:	7bbb      	ldrb	r3, [r7, #14]
 800a562:	b25b      	sxtb	r3, r3
 800a564:	2b00      	cmp	r3, #0
 800a566:	da03      	bge.n	800a570 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	2201      	movs	r2, #1
 800a56c:	701a      	strb	r2, [r3, #0]
 800a56e:	e002      	b.n	800a576 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	2200      	movs	r2, #0
 800a574:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d104      	bne.n	800a588 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	781a      	ldrb	r2, [r3, #0]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a588:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3710      	adds	r7, #16
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a59c:	2300      	movs	r3, #0
 800a59e:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800a5a0:	f107 030e 	add.w	r3, r7, #14
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f7ff fb74 	bl	8009c94 <VL53L0X_GetDeviceMode>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800a5b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d107      	bne.n	800a5c8 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800a5b8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d104      	bne.n	800a5c8 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 f898 	bl	800a6f4 <VL53L0X_StartMeasurement>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800a5c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d104      	bne.n	800a5da <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f001 fb47 	bl	800bc64 <VL53L0X_measurement_poll_for_completion>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800a5da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d106      	bne.n	800a5f0 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800a5e2:	7bbb      	ldrb	r3, [r7, #14]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d103      	bne.n	800a5f0 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2203      	movs	r2, #3
 800a5ec:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800a5f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3710      	adds	r7, #16
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b086      	sub	sp, #24
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a608:	2300      	movs	r3, #0
 800a60a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800a60c:	2301      	movs	r3, #1
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	68b9      	ldr	r1, [r7, #8]
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f001 fae9 	bl	800bbea <VL53L0X_perform_ref_calibration>
 800a618:	4603      	mov	r3, r0
 800a61a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800a61c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3718      	adds	r7, #24
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b086      	sub	sp, #24
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	460b      	mov	r3, r1
 800a632:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a634:	2300      	movs	r3, #0
 800a636:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800a63e:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800a640:	7dbb      	ldrb	r3, [r7, #22]
 800a642:	2b01      	cmp	r3, #1
 800a644:	d005      	beq.n	800a652 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800a646:	7dbb      	ldrb	r3, [r7, #22]
 800a648:	2b02      	cmp	r3, #2
 800a64a:	d002      	beq.n	800a652 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800a64c:	7dbb      	ldrb	r3, [r7, #22]
 800a64e:	2b03      	cmp	r3, #3
 800a650:	d147      	bne.n	800a6e2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800a652:	f107 030c 	add.w	r3, r7, #12
 800a656:	f107 0210 	add.w	r2, r7, #16
 800a65a:	2101      	movs	r1, #1
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 fbc3 	bl	800ade8 <VL53L0X_GetInterruptThresholds>
 800a662:	4603      	mov	r3, r0
 800a664:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800a66c:	d803      	bhi.n	800a676 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800a66e:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800a670:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800a674:	d935      	bls.n	800a6e2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800a676:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d131      	bne.n	800a6e2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800a67e:	78fb      	ldrb	r3, [r7, #3]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d006      	beq.n	800a692 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800a684:	491a      	ldr	r1, [pc, #104]	; (800a6f0 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f002 fcc4 	bl	800d014 <VL53L0X_load_tuning_settings>
 800a68c:	4603      	mov	r3, r0
 800a68e:	75fb      	strb	r3, [r7, #23]
 800a690:	e027      	b.n	800a6e2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800a692:	2204      	movs	r2, #4
 800a694:	21ff      	movs	r1, #255	; 0xff
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f003 ff2e 	bl	800e4f8 <VL53L0X_WrByte>
 800a69c:	4603      	mov	r3, r0
 800a69e:	461a      	mov	r2, r3
 800a6a0:	7dfb      	ldrb	r3, [r7, #23]
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	2170      	movs	r1, #112	; 0x70
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f003 ff24 	bl	800e4f8 <VL53L0X_WrByte>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	7dfb      	ldrb	r3, [r7, #23]
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	21ff      	movs	r1, #255	; 0xff
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f003 ff1a 	bl	800e4f8 <VL53L0X_WrByte>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	7dfb      	ldrb	r3, [r7, #23]
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	2180      	movs	r1, #128	; 0x80
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f003 ff10 	bl	800e4f8 <VL53L0X_WrByte>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	461a      	mov	r2, r3
 800a6dc:	7dfb      	ldrb	r3, [r7, #23]
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800a6e2:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3718      	adds	r7, #24
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	20000108 	.word	0x20000108

0800a6f4 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b086      	sub	sp, #24
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800a700:	2301      	movs	r3, #1
 800a702:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800a704:	f107 030e 	add.w	r3, r7, #14
 800a708:	4619      	mov	r1, r3
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f7ff fac2 	bl	8009c94 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a710:	2201      	movs	r2, #1
 800a712:	2180      	movs	r1, #128	; 0x80
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f003 feef 	bl	800e4f8 <VL53L0X_WrByte>
 800a71a:	4603      	mov	r3, r0
 800a71c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a71e:	2201      	movs	r2, #1
 800a720:	21ff      	movs	r1, #255	; 0xff
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f003 fee8 	bl	800e4f8 <VL53L0X_WrByte>
 800a728:	4603      	mov	r3, r0
 800a72a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a72c:	2200      	movs	r2, #0
 800a72e:	2100      	movs	r1, #0
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f003 fee1 	bl	800e4f8 <VL53L0X_WrByte>
 800a736:	4603      	mov	r3, r0
 800a738:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800a740:	461a      	mov	r2, r3
 800a742:	2191      	movs	r1, #145	; 0x91
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f003 fed7 	bl	800e4f8 <VL53L0X_WrByte>
 800a74a:	4603      	mov	r3, r0
 800a74c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a74e:	2201      	movs	r2, #1
 800a750:	2100      	movs	r1, #0
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f003 fed0 	bl	800e4f8 <VL53L0X_WrByte>
 800a758:	4603      	mov	r3, r0
 800a75a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a75c:	2200      	movs	r2, #0
 800a75e:	21ff      	movs	r1, #255	; 0xff
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f003 fec9 	bl	800e4f8 <VL53L0X_WrByte>
 800a766:	4603      	mov	r3, r0
 800a768:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a76a:	2200      	movs	r2, #0
 800a76c:	2180      	movs	r1, #128	; 0x80
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f003 fec2 	bl	800e4f8 <VL53L0X_WrByte>
 800a774:	4603      	mov	r3, r0
 800a776:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800a778:	7bbb      	ldrb	r3, [r7, #14]
 800a77a:	2b03      	cmp	r3, #3
 800a77c:	d054      	beq.n	800a828 <VL53L0X_StartMeasurement+0x134>
 800a77e:	2b03      	cmp	r3, #3
 800a780:	dc6c      	bgt.n	800a85c <VL53L0X_StartMeasurement+0x168>
 800a782:	2b00      	cmp	r3, #0
 800a784:	d002      	beq.n	800a78c <VL53L0X_StartMeasurement+0x98>
 800a786:	2b01      	cmp	r3, #1
 800a788:	d034      	beq.n	800a7f4 <VL53L0X_StartMeasurement+0x100>
 800a78a:	e067      	b.n	800a85c <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800a78c:	2201      	movs	r2, #1
 800a78e:	2100      	movs	r1, #0
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f003 feb1 	bl	800e4f8 <VL53L0X_WrByte>
 800a796:	4603      	mov	r3, r0
 800a798:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800a79a:	7bfb      	ldrb	r3, [r7, #15]
 800a79c:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800a79e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d15d      	bne.n	800a862 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d008      	beq.n	800a7c2 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800a7b0:	f107 030d 	add.w	r3, r7, #13
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f003 ff1b 	bl	800e5f4 <VL53L0X_RdByte>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800a7c8:	7b7a      	ldrb	r2, [r7, #13]
 800a7ca:	7bfb      	ldrb	r3, [r7, #15]
 800a7cc:	4013      	ands	r3, r2
 800a7ce:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800a7d0:	7bfa      	ldrb	r2, [r7, #15]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d107      	bne.n	800a7e6 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800a7d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d103      	bne.n	800a7e6 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a7e4:	d3e1      	bcc.n	800a7aa <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a7ec:	d339      	bcc.n	800a862 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800a7ee:	23f9      	movs	r3, #249	; 0xf9
 800a7f0:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800a7f2:	e036      	b.n	800a862 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800a7f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d105      	bne.n	800a808 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800a7fc:	2101      	movs	r1, #1
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f7ff ff12 	bl	800a628 <VL53L0X_CheckAndLoadInterruptSettings>
 800a804:	4603      	mov	r3, r0
 800a806:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800a808:	2202      	movs	r2, #2
 800a80a:	2100      	movs	r1, #0
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f003 fe73 	bl	800e4f8 <VL53L0X_WrByte>
 800a812:	4603      	mov	r3, r0
 800a814:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800a816:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d123      	bne.n	800a866 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2204      	movs	r2, #4
 800a822:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800a826:	e01e      	b.n	800a866 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800a828:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d105      	bne.n	800a83c <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800a830:	2101      	movs	r1, #1
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f7ff fef8 	bl	800a628 <VL53L0X_CheckAndLoadInterruptSettings>
 800a838:	4603      	mov	r3, r0
 800a83a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800a83c:	2204      	movs	r2, #4
 800a83e:	2100      	movs	r1, #0
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f003 fe59 	bl	800e4f8 <VL53L0X_WrByte>
 800a846:	4603      	mov	r3, r0
 800a848:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800a84a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d10b      	bne.n	800a86a <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2204      	movs	r2, #4
 800a856:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800a85a:	e006      	b.n	800a86a <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800a85c:	23f8      	movs	r3, #248	; 0xf8
 800a85e:	75fb      	strb	r3, [r7, #23]
 800a860:	e004      	b.n	800a86c <VL53L0X_StartMeasurement+0x178>
		break;
 800a862:	bf00      	nop
 800a864:	e002      	b.n	800a86c <VL53L0X_StartMeasurement+0x178>
		break;
 800a866:	bf00      	nop
 800a868:	e000      	b.n	800a86c <VL53L0X_StartMeasurement+0x178>
		break;
 800a86a:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800a86c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a870:	4618      	mov	r0, r3
 800a872:	3718      	adds	r7, #24
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a882:	2300      	movs	r3, #0
 800a884:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800a88c:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800a88e:	7bbb      	ldrb	r3, [r7, #14]
 800a890:	2b04      	cmp	r3, #4
 800a892:	d112      	bne.n	800a8ba <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800a894:	f107 0308 	add.w	r3, r7, #8
 800a898:	4619      	mov	r1, r3
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 fb1e 	bl	800aedc <VL53L0X_GetInterruptMaskStatus>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	2b04      	cmp	r3, #4
 800a8a8:	d103      	bne.n	800a8b2 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	701a      	strb	r2, [r3, #0]
 800a8b0:	e01c      	b.n	800a8ec <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	701a      	strb	r2, [r3, #0]
 800a8b8:	e018      	b.n	800a8ec <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800a8ba:	f107 030d 	add.w	r3, r7, #13
 800a8be:	461a      	mov	r2, r3
 800a8c0:	2114      	movs	r1, #20
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f003 fe96 	bl	800e5f4 <VL53L0X_RdByte>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800a8cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d10b      	bne.n	800a8ec <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800a8d4:	7b7b      	ldrb	r3, [r7, #13]
 800a8d6:	f003 0301 	and.w	r3, r3, #1
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d003      	beq.n	800a8e6 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	701a      	strb	r2, [r3, #0]
 800a8e4:	e002      	b.n	800a8ec <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a8ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3710      	adds	r7, #16
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800a8f8:	b5b0      	push	{r4, r5, r7, lr}
 800a8fa:	b096      	sub	sp, #88	; 0x58
 800a8fc:	af02      	add	r7, sp, #8
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a902:	2300      	movs	r3, #0
 800a904:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800a908:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a90c:	230c      	movs	r3, #12
 800a90e:	2114      	movs	r1, #20
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f003 fdcc 	bl	800e4ae <VL53L0X_ReadMulti>
 800a916:	4603      	mov	r3, r0
 800a918:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800a91c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a920:	2b00      	cmp	r3, #0
 800a922:	f040 80d1 	bne.w	800aac8 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	2200      	movs	r2, #0
 800a92a:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	2200      	movs	r2, #0
 800a930:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800a932:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a936:	b29b      	uxth	r3, r3
 800a938:	021b      	lsls	r3, r3, #8
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a940:	b29b      	uxth	r3, r3
 800a942:	4413      	add	r3, r2
 800a944:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	2200      	movs	r2, #0
 800a94c:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800a94e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a952:	b29b      	uxth	r3, r3
 800a954:	021b      	lsls	r3, r3, #8
 800a956:	b29a      	uxth	r2, r3
 800a958:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	4413      	add	r3, r2
 800a960:	b29b      	uxth	r3, r3
 800a962:	025b      	lsls	r3, r3, #9
 800a964:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a96a:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800a96c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a970:	b29b      	uxth	r3, r3
 800a972:	021b      	lsls	r3, r3, #8
 800a974:	b29a      	uxth	r2, r3
 800a976:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	4413      	add	r3, r2
 800a97e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800a982:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a986:	025b      	lsls	r3, r3, #9
 800a988:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800a98e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a992:	b29b      	uxth	r3, r3
 800a994:	021b      	lsls	r3, r3, #8
 800a996:	b29a      	uxth	r2, r3
 800a998:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	4413      	add	r3, r2
 800a9a0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a9aa:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800a9ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a9b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800a9ba:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800a9c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800a9c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a9c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a9cc:	d046      	beq.n	800aa5c <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800a9ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a9d0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800a9d4:	fb02 f303 	mul.w	r3, r2, r3
 800a9d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a9dc:	4a57      	ldr	r2, [pc, #348]	; (800ab3c <VL53L0X_GetRangingMeasurementData+0x244>)
 800a9de:	fb82 1203 	smull	r1, r2, r2, r3
 800a9e2:	1192      	asrs	r2, r2, #6
 800a9e4:	17db      	asrs	r3, r3, #31
 800a9e6:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800a9e8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a1b      	ldr	r3, [r3, #32]
 800a9f0:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	7f1b      	ldrb	r3, [r3, #28]
 800a9f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800a9fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d02c      	beq.n	800aa5c <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800aa02:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aa04:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800aa08:	fb02 f303 	mul.w	r3, r2, r3
 800aa0c:	121a      	asrs	r2, r3, #8
					<= 0) {
 800aa0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d10d      	bne.n	800aa30 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800aa14:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d004      	beq.n	800aa26 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800aa1c:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800aa20:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800aa24:	e016      	b.n	800aa54 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800aa26:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800aa2a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800aa2e:	e011      	b.n	800aa54 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800aa30:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800aa34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa36:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800aa3a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aa3c:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800aa40:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800aa44:	121b      	asrs	r3, r3, #8
 800aa46:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800aa48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa4a:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800aa4c:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800aa50:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800aa54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800aa58:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800aa5c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d00d      	beq.n	800aa80 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800aa64:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800aa68:	089b      	lsrs	r3, r3, #2
 800aa6a:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800aa70:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	019b      	lsls	r3, r3, #6
 800aa78:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	75da      	strb	r2, [r3, #23]
 800aa7e:	e006      	b.n	800aa8e <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800aa86:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800aa8e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800aa92:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800aa96:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800aa9a:	9301      	str	r3, [sp, #4]
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f002 ff53 	bl	800d950 <VL53L0X_get_pal_range_status>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	461a      	mov	r2, r3
 800aaae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aab2:	4313      	orrs	r3, r2
 800aab4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800aab8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d103      	bne.n	800aac8 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800aac0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aac8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d12f      	bne.n	800ab30 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f107 040c 	add.w	r4, r7, #12
 800aad6:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800aada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aadc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aade:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800aae2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800aaea:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800aaf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800aaf8:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800aafe:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800ab04:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800ab0a:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800ab10:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800ab16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800ab20:	f107 050c 	add.w	r5, r7, #12
 800ab24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ab2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ab30:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3750      	adds	r7, #80	; 0x50
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bdb0      	pop	{r4, r5, r7, pc}
 800ab3c:	10624dd3 	.word	0x10624dd3

0800ab40 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800ab4e:	2100      	movs	r1, #0
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f7ff f873 	bl	8009c3c <VL53L0X_SetDeviceMode>
 800ab56:	4603      	mov	r3, r0
 800ab58:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800ab5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d104      	bne.n	800ab6c <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f7ff fd16 	bl	800a594 <VL53L0X_PerformSingleMeasurement>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800ab6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d105      	bne.n	800ab80 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800ab74:	6839      	ldr	r1, [r7, #0]
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f7ff febe 	bl	800a8f8 <VL53L0X_GetRangingMeasurementData>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800ab80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d105      	bne.n	800ab94 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800ab88:	2100      	movs	r1, #0
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 f962 	bl	800ae54 <VL53L0X_ClearInterruptMask>
 800ab90:	4603      	mov	r3, r0
 800ab92:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800ab94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	4608      	mov	r0, r1
 800abaa:	4611      	mov	r1, r2
 800abac:	461a      	mov	r2, r3
 800abae:	4603      	mov	r3, r0
 800abb0:	70fb      	strb	r3, [r7, #3]
 800abb2:	460b      	mov	r3, r1
 800abb4:	70bb      	strb	r3, [r7, #2]
 800abb6:	4613      	mov	r3, r2
 800abb8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abba:	2300      	movs	r3, #0
 800abbc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800abbe:	78fb      	ldrb	r3, [r7, #3]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d002      	beq.n	800abca <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800abc4:	23f6      	movs	r3, #246	; 0xf6
 800abc6:	73fb      	strb	r3, [r7, #15]
 800abc8:	e107      	b.n	800adda <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800abca:	78bb      	ldrb	r3, [r7, #2]
 800abcc:	2b14      	cmp	r3, #20
 800abce:	d110      	bne.n	800abf2 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800abd0:	7e3b      	ldrb	r3, [r7, #24]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d102      	bne.n	800abdc <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800abd6:	2310      	movs	r3, #16
 800abd8:	73bb      	strb	r3, [r7, #14]
 800abda:	e001      	b.n	800abe0 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800abdc:	2301      	movs	r3, #1
 800abde:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800abe0:	7bbb      	ldrb	r3, [r7, #14]
 800abe2:	461a      	mov	r2, r3
 800abe4:	2184      	movs	r1, #132	; 0x84
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f003 fc86 	bl	800e4f8 <VL53L0X_WrByte>
 800abec:	4603      	mov	r3, r0
 800abee:	73fb      	strb	r3, [r7, #15]
 800abf0:	e0f3      	b.n	800adda <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800abf2:	78bb      	ldrb	r3, [r7, #2]
 800abf4:	2b15      	cmp	r3, #21
 800abf6:	f040 8097 	bne.w	800ad28 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800abfa:	2201      	movs	r2, #1
 800abfc:	21ff      	movs	r1, #255	; 0xff
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f003 fc7a 	bl	800e4f8 <VL53L0X_WrByte>
 800ac04:	4603      	mov	r3, r0
 800ac06:	461a      	mov	r2, r3
 800ac08:	7bfb      	ldrb	r3, [r7, #15]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800ac0e:	2200      	movs	r2, #0
 800ac10:	2100      	movs	r1, #0
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f003 fc70 	bl	800e4f8 <VL53L0X_WrByte>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	7bfb      	ldrb	r3, [r7, #15]
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ac22:	2200      	movs	r2, #0
 800ac24:	21ff      	movs	r1, #255	; 0xff
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f003 fc66 	bl	800e4f8 <VL53L0X_WrByte>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	461a      	mov	r2, r3
 800ac30:	7bfb      	ldrb	r3, [r7, #15]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800ac36:	2201      	movs	r2, #1
 800ac38:	2180      	movs	r1, #128	; 0x80
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f003 fc5c 	bl	800e4f8 <VL53L0X_WrByte>
 800ac40:	4603      	mov	r3, r0
 800ac42:	461a      	mov	r2, r3
 800ac44:	7bfb      	ldrb	r3, [r7, #15]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800ac4a:	2202      	movs	r2, #2
 800ac4c:	2185      	movs	r1, #133	; 0x85
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f003 fc52 	bl	800e4f8 <VL53L0X_WrByte>
 800ac54:	4603      	mov	r3, r0
 800ac56:	461a      	mov	r2, r3
 800ac58:	7bfb      	ldrb	r3, [r7, #15]
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800ac5e:	2204      	movs	r2, #4
 800ac60:	21ff      	movs	r1, #255	; 0xff
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f003 fc48 	bl	800e4f8 <VL53L0X_WrByte>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	7bfb      	ldrb	r3, [r7, #15]
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800ac72:	2200      	movs	r2, #0
 800ac74:	21cd      	movs	r1, #205	; 0xcd
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f003 fc3e 	bl	800e4f8 <VL53L0X_WrByte>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	461a      	mov	r2, r3
 800ac80:	7bfb      	ldrb	r3, [r7, #15]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800ac86:	2211      	movs	r2, #17
 800ac88:	21cc      	movs	r1, #204	; 0xcc
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f003 fc34 	bl	800e4f8 <VL53L0X_WrByte>
 800ac90:	4603      	mov	r3, r0
 800ac92:	461a      	mov	r2, r3
 800ac94:	7bfb      	ldrb	r3, [r7, #15]
 800ac96:	4313      	orrs	r3, r2
 800ac98:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800ac9a:	2207      	movs	r2, #7
 800ac9c:	21ff      	movs	r1, #255	; 0xff
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f003 fc2a 	bl	800e4f8 <VL53L0X_WrByte>
 800aca4:	4603      	mov	r3, r0
 800aca6:	461a      	mov	r2, r3
 800aca8:	7bfb      	ldrb	r3, [r7, #15]
 800acaa:	4313      	orrs	r3, r2
 800acac:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800acae:	2200      	movs	r2, #0
 800acb0:	21be      	movs	r1, #190	; 0xbe
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f003 fc20 	bl	800e4f8 <VL53L0X_WrByte>
 800acb8:	4603      	mov	r3, r0
 800acba:	461a      	mov	r2, r3
 800acbc:	7bfb      	ldrb	r3, [r7, #15]
 800acbe:	4313      	orrs	r3, r2
 800acc0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800acc2:	2206      	movs	r2, #6
 800acc4:	21ff      	movs	r1, #255	; 0xff
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f003 fc16 	bl	800e4f8 <VL53L0X_WrByte>
 800accc:	4603      	mov	r3, r0
 800acce:	461a      	mov	r2, r3
 800acd0:	7bfb      	ldrb	r3, [r7, #15]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800acd6:	2209      	movs	r2, #9
 800acd8:	21cc      	movs	r1, #204	; 0xcc
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f003 fc0c 	bl	800e4f8 <VL53L0X_WrByte>
 800ace0:	4603      	mov	r3, r0
 800ace2:	461a      	mov	r2, r3
 800ace4:	7bfb      	ldrb	r3, [r7, #15]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800acea:	2200      	movs	r2, #0
 800acec:	21ff      	movs	r1, #255	; 0xff
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f003 fc02 	bl	800e4f8 <VL53L0X_WrByte>
 800acf4:	4603      	mov	r3, r0
 800acf6:	461a      	mov	r2, r3
 800acf8:	7bfb      	ldrb	r3, [r7, #15]
 800acfa:	4313      	orrs	r3, r2
 800acfc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800acfe:	2201      	movs	r2, #1
 800ad00:	21ff      	movs	r1, #255	; 0xff
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f003 fbf8 	bl	800e4f8 <VL53L0X_WrByte>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	7bfb      	ldrb	r3, [r7, #15]
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800ad12:	2200      	movs	r2, #0
 800ad14:	2100      	movs	r1, #0
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f003 fbee 	bl	800e4f8 <VL53L0X_WrByte>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	461a      	mov	r2, r3
 800ad20:	7bfb      	ldrb	r3, [r7, #15]
 800ad22:	4313      	orrs	r3, r2
 800ad24:	73fb      	strb	r3, [r7, #15]
 800ad26:	e058      	b.n	800adda <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800ad28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d121      	bne.n	800ad74 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800ad30:	787b      	ldrb	r3, [r7, #1]
 800ad32:	2b04      	cmp	r3, #4
 800ad34:	d81b      	bhi.n	800ad6e <VL53L0X_SetGpioConfig+0x1ce>
 800ad36:	a201      	add	r2, pc, #4	; (adr r2, 800ad3c <VL53L0X_SetGpioConfig+0x19c>)
 800ad38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad3c:	0800ad51 	.word	0x0800ad51
 800ad40:	0800ad57 	.word	0x0800ad57
 800ad44:	0800ad5d 	.word	0x0800ad5d
 800ad48:	0800ad63 	.word	0x0800ad63
 800ad4c:	0800ad69 	.word	0x0800ad69
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800ad50:	2300      	movs	r3, #0
 800ad52:	73bb      	strb	r3, [r7, #14]
				break;
 800ad54:	e00f      	b.n	800ad76 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800ad56:	2301      	movs	r3, #1
 800ad58:	73bb      	strb	r3, [r7, #14]
				break;
 800ad5a:	e00c      	b.n	800ad76 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800ad5c:	2302      	movs	r3, #2
 800ad5e:	73bb      	strb	r3, [r7, #14]
				break;
 800ad60:	e009      	b.n	800ad76 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800ad62:	2303      	movs	r3, #3
 800ad64:	73bb      	strb	r3, [r7, #14]
				break;
 800ad66:	e006      	b.n	800ad76 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800ad68:	2304      	movs	r3, #4
 800ad6a:	73bb      	strb	r3, [r7, #14]
				break;
 800ad6c:	e003      	b.n	800ad76 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800ad6e:	23f5      	movs	r3, #245	; 0xf5
 800ad70:	73fb      	strb	r3, [r7, #15]
 800ad72:	e000      	b.n	800ad76 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800ad74:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800ad76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d107      	bne.n	800ad8e <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800ad7e:	7bbb      	ldrb	r3, [r7, #14]
 800ad80:	461a      	mov	r2, r3
 800ad82:	210a      	movs	r1, #10
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f003 fbb7 	bl	800e4f8 <VL53L0X_WrByte>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800ad8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d10f      	bne.n	800adb6 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800ad96:	7e3b      	ldrb	r3, [r7, #24]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d102      	bne.n	800ada2 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	73bb      	strb	r3, [r7, #14]
 800ada0:	e001      	b.n	800ada6 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800ada2:	2310      	movs	r3, #16
 800ada4:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800ada6:	7bbb      	ldrb	r3, [r7, #14]
 800ada8:	22ef      	movs	r2, #239	; 0xef
 800adaa:	2184      	movs	r1, #132	; 0x84
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f003 fbe3 	bl	800e578 <VL53L0X_UpdateByte>
 800adb2:	4603      	mov	r3, r0
 800adb4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800adb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d103      	bne.n	800adc6 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	787a      	ldrb	r2, [r7, #1]
 800adc2:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800adc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d105      	bne.n	800adda <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800adce:	2100      	movs	r1, #0
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 f83f 	bl	800ae54 <VL53L0X_ClearInterruptMask>
 800add6:	4603      	mov	r3, r0
 800add8:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800adda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop

0800ade8 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b086      	sub	sp, #24
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	607a      	str	r2, [r7, #4]
 800adf2:	603b      	str	r3, [r7, #0]
 800adf4:	460b      	mov	r3, r1
 800adf6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800adf8:	2300      	movs	r3, #0
 800adfa:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800adfc:	f107 0314 	add.w	r3, r7, #20
 800ae00:	461a      	mov	r2, r3
 800ae02:	210e      	movs	r1, #14
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	f003 fc14 	bl	800e632 <VL53L0X_RdWord>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800ae0e:	8abb      	ldrh	r3, [r7, #20]
 800ae10:	045b      	lsls	r3, r3, #17
 800ae12:	461a      	mov	r2, r3
 800ae14:	4b0e      	ldr	r3, [pc, #56]	; (800ae50 <VL53L0X_GetInterruptThresholds+0x68>)
 800ae16:	4013      	ands	r3, r2
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800ae1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d10f      	bne.n	800ae44 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800ae24:	f107 0314 	add.w	r3, r7, #20
 800ae28:	461a      	mov	r2, r3
 800ae2a:	210c      	movs	r1, #12
 800ae2c:	68f8      	ldr	r0, [r7, #12]
 800ae2e:	f003 fc00 	bl	800e632 <VL53L0X_RdWord>
 800ae32:	4603      	mov	r3, r0
 800ae34:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800ae36:	8abb      	ldrh	r3, [r7, #20]
 800ae38:	045b      	lsls	r3, r3, #17
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	4b04      	ldr	r3, [pc, #16]	; (800ae50 <VL53L0X_GetInterruptThresholds+0x68>)
 800ae3e:	4013      	ands	r3, r2
		*pThresholdHigh =
 800ae40:	683a      	ldr	r2, [r7, #0]
 800ae42:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ae44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3718      	adds	r7, #24
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	1ffe0000 	.word	0x1ffe0000

0800ae54 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount= 0;
 800ae62:	2300      	movs	r3, #0
 800ae64:	73bb      	strb	r3, [r7, #14]
	uint8_t Byte= 0;
 800ae66:	2300      	movs	r3, #0
 800ae68:	737b      	strb	r3, [r7, #13]
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800ae6e:	2201      	movs	r2, #1
 800ae70:	210b      	movs	r1, #11
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f003 fb40 	bl	800e4f8 <VL53L0X_WrByte>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	210b      	movs	r1, #11
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f003 fb39 	bl	800e4f8 <VL53L0X_WrByte>
 800ae86:	4603      	mov	r3, r0
 800ae88:	461a      	mov	r2, r3
 800ae8a:	7bfb      	ldrb	r3, [r7, #15]
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800ae90:	f107 030d 	add.w	r3, r7, #13
 800ae94:	461a      	mov	r2, r3
 800ae96:	2113      	movs	r1, #19
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f003 fbab 	bl	800e5f4 <VL53L0X_RdByte>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	461a      	mov	r2, r3
 800aea2:	7bfb      	ldrb	r3, [r7, #15]
 800aea4:	4313      	orrs	r3, r2
 800aea6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800aea8:	7bbb      	ldrb	r3, [r7, #14]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800aeae:	7b7b      	ldrb	r3, [r7, #13]
 800aeb0:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d006      	beq.n	800aec6 <VL53L0X_ClearInterruptMask+0x72>
			&& (LoopCount < 3)
 800aeb8:	7bbb      	ldrb	r3, [r7, #14]
 800aeba:	2b02      	cmp	r3, #2
 800aebc:	d803      	bhi.n	800aec6 <VL53L0X_ClearInterruptMask+0x72>
			&& (Status == VL53L0X_ERROR_NONE));
 800aebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d0d3      	beq.n	800ae6e <VL53L0X_ClearInterruptMask+0x1a>


	if (LoopCount >= 3)
 800aec6:	7bbb      	ldrb	r3, [r7, #14]
 800aec8:	2b02      	cmp	r3, #2
 800aeca:	d901      	bls.n	800aed0 <VL53L0X_ClearInterruptMask+0x7c>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800aecc:	23f4      	movs	r3, #244	; 0xf4
 800aece:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800aed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3710      	adds	r7, #16
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aee6:	2300      	movs	r3, #0
 800aee8:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800aeea:	f107 030e 	add.w	r3, r7, #14
 800aeee:	461a      	mov	r2, r3
 800aef0:	2113      	movs	r1, #19
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f003 fb7e 	bl	800e5f4 <VL53L0X_RdByte>
 800aef8:	4603      	mov	r3, r0
 800aefa:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800aefc:	7bbb      	ldrb	r3, [r7, #14]
 800aefe:	f003 0207 	and.w	r2, r3, #7
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800af06:	7bbb      	ldrb	r3, [r7, #14]
 800af08:	f003 0318 	and.w	r3, r3, #24
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d001      	beq.n	800af14 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800af10:	23fa      	movs	r3, #250	; 0xfa
 800af12:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800af14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3710      	adds	r7, #16
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b086      	sub	sp, #24
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af2c:	2300      	movs	r3, #0
 800af2e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	68b9      	ldr	r1, [r7, #8]
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f000 fa07 	bl	800b348 <VL53L0X_perform_ref_spad_management>
 800af3a:	4603      	mov	r3, r0
 800af3c:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800af3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3718      	adds	r7, #24
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b084      	sub	sp, #16
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
 800af52:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af54:	2300      	movs	r3, #0
 800af56:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800af58:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800af5c:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800af5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af62:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800af64:	f107 0308 	add.w	r3, r7, #8
 800af68:	461a      	mov	r2, r3
 800af6a:	2128      	movs	r1, #40	; 0x28
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f003 fb60 	bl	800e632 <VL53L0X_RdWord>
 800af72:	4603      	mov	r3, r0
 800af74:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800af76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d11e      	bne.n	800afbc <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800af7e:	893b      	ldrh	r3, [r7, #8]
 800af80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af84:	b29b      	uxth	r3, r3
 800af86:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800af88:	893b      	ldrh	r3, [r7, #8]
 800af8a:	461a      	mov	r2, r3
 800af8c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800af90:	429a      	cmp	r2, r3
 800af92:	dd0b      	ble.n	800afac <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800af94:	893a      	ldrh	r2, [r7, #8]
 800af96:	897b      	ldrh	r3, [r7, #10]
 800af98:	1ad3      	subs	r3, r2, r3
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	b21b      	sxth	r3, r3
 800af9e:	461a      	mov	r2, r3
					* 250;
 800afa0:	23fa      	movs	r3, #250	; 0xfa
 800afa2:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	601a      	str	r2, [r3, #0]
 800afaa:	e007      	b.n	800afbc <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800afac:	893b      	ldrh	r3, [r7, #8]
 800afae:	b21b      	sxth	r3, r3
 800afb0:	461a      	mov	r2, r3
 800afb2:	23fa      	movs	r3, #250	; 0xfa
 800afb4:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800afbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800afc8:	b480      	push	{r7}
 800afca:	b08b      	sub	sp, #44	; 0x2c
 800afcc:	af00      	add	r7, sp, #0
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	607a      	str	r2, [r7, #4]
 800afd4:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800afd6:	2308      	movs	r3, #8
 800afd8:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800afda:	2300      	movs	r3, #0
 800afdc:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	f04f 32ff 	mov.w	r2, #4294967295
 800afe4:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	fbb2 f3f3 	udiv	r3, r2, r3
 800afee:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	69ba      	ldr	r2, [r7, #24]
 800aff4:	fbb3 f2f2 	udiv	r2, r3, r2
 800aff8:	69b9      	ldr	r1, [r7, #24]
 800affa:	fb01 f202 	mul.w	r2, r1, r2
 800affe:	1a9b      	subs	r3, r3, r2
 800b000:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	627b      	str	r3, [r7, #36]	; 0x24
 800b006:	e030      	b.n	800b06a <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800b008:	2300      	movs	r3, #0
 800b00a:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800b00c:	68fa      	ldr	r2, [r7, #12]
 800b00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b010:	4413      	add	r3, r2
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800b016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d11e      	bne.n	800b05c <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800b01e:	7ffa      	ldrb	r2, [r7, #31]
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	fa42 f303 	asr.w	r3, r2, r3
 800b026:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800b02c:	e016      	b.n	800b05c <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800b02e:	7ffb      	ldrb	r3, [r7, #31]
 800b030:	f003 0301 	and.w	r3, r3, #1
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00b      	beq.n	800b050 <get_next_good_spad+0x88>
				success = 1;
 800b038:	2301      	movs	r3, #1
 800b03a:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800b03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03e:	69ba      	ldr	r2, [r7, #24]
 800b040:	fb03 f202 	mul.w	r2, r3, r2
 800b044:	6a3b      	ldr	r3, [r7, #32]
 800b046:	4413      	add	r3, r2
 800b048:	461a      	mov	r2, r3
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	601a      	str	r2, [r3, #0]
				break;
 800b04e:	e009      	b.n	800b064 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800b050:	7ffb      	ldrb	r3, [r7, #31]
 800b052:	085b      	lsrs	r3, r3, #1
 800b054:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800b056:	6a3b      	ldr	r3, [r7, #32]
 800b058:	3301      	adds	r3, #1
 800b05a:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800b05c:	6a3a      	ldr	r2, [r7, #32]
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	429a      	cmp	r2, r3
 800b062:	d3e4      	bcc.n	800b02e <get_next_good_spad+0x66>
				coarseIndex++) {
 800b064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b066:	3301      	adds	r3, #1
 800b068:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800b06a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	429a      	cmp	r2, r3
 800b070:	d202      	bcs.n	800b078 <get_next_good_spad+0xb0>
 800b072:	7fbb      	ldrb	r3, [r7, #30]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d0c7      	beq.n	800b008 <get_next_good_spad+0x40>
		}

	}
}
 800b078:	bf00      	nop
 800b07a:	372c      	adds	r7, #44	; 0x2c
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800b084:	b480      	push	{r7}
 800b086:	b085      	sub	sp, #20
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800b08c:	2301      	movs	r3, #1
 800b08e:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	099b      	lsrs	r3, r3, #6
 800b094:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800b096:	4a07      	ldr	r2, [pc, #28]	; (800b0b4 <is_aperture+0x30>)
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d101      	bne.n	800b0a6 <is_aperture+0x22>
		isAperture = 0;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800b0a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3714      	adds	r7, #20
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr
 800b0b4:	200002c0 	.word	0x200002c0

0800b0b8 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b089      	sub	sp, #36	; 0x24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800b0c8:	2308      	movs	r3, #8
 800b0ca:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	69bb      	ldr	r3, [r7, #24]
 800b0d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0d4:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	69ba      	ldr	r2, [r7, #24]
 800b0da:	fbb3 f2f2 	udiv	r2, r3, r2
 800b0de:	69b9      	ldr	r1, [r7, #24]
 800b0e0:	fb01 f202 	mul.w	r2, r1, r2
 800b0e4:	1a9b      	subs	r3, r3, r2
 800b0e6:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800b0e8:	697a      	ldr	r2, [r7, #20]
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d302      	bcc.n	800b0f6 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b0f0:	23ce      	movs	r3, #206	; 0xce
 800b0f2:	77fb      	strb	r3, [r7, #31]
 800b0f4:	e010      	b.n	800b118 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	4413      	add	r3, r2
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	b25a      	sxtb	r2, r3
 800b100:	2101      	movs	r1, #1
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	fa01 f303 	lsl.w	r3, r1, r3
 800b108:	b25b      	sxtb	r3, r3
 800b10a:	4313      	orrs	r3, r2
 800b10c:	b259      	sxtb	r1, r3
 800b10e:	68fa      	ldr	r2, [r7, #12]
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	4413      	add	r3, r2
 800b114:	b2ca      	uxtb	r2, r1
 800b116:	701a      	strb	r2, [r3, #0]

	return status;
 800b118:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3724      	adds	r7, #36	; 0x24
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr

0800b128 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800b132:	2306      	movs	r3, #6
 800b134:	683a      	ldr	r2, [r7, #0]
 800b136:	21b0      	movs	r1, #176	; 0xb0
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f003 f991 	bl	800e460 <VL53L0X_WriteMulti>
 800b13e:	4603      	mov	r3, r0
 800b140:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800b142:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b146:	4618      	mov	r0, r3
 800b148:	3710      	adds	r7, #16
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800b14e:	b580      	push	{r7, lr}
 800b150:	b084      	sub	sp, #16
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
 800b156:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800b158:	2306      	movs	r3, #6
 800b15a:	683a      	ldr	r2, [r7, #0]
 800b15c:	21b0      	movs	r1, #176	; 0xb0
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f003 f9a5 	bl	800e4ae <VL53L0X_ReadMulti>
 800b164:	4603      	mov	r3, r0
 800b166:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800b168:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3710      	adds	r7, #16
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b08c      	sub	sp, #48	; 0x30
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	607a      	str	r2, [r7, #4]
 800b17e:	603b      	str	r3, [r7, #0]
 800b180:	460b      	mov	r3, r1
 800b182:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b184:	2300      	movs	r3, #0
 800b186:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800b18a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b18c:	61fb      	str	r3, [r7, #28]
	uint32_t currentSpad;
	uint8_t checkSpadArray[6]= {0,};
 800b18e:	2300      	movs	r3, #0
 800b190:	617b      	str	r3, [r7, #20]
 800b192:	2300      	movs	r3, #0
 800b194:	833b      	strh	r3, [r7, #24]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */
//	 VL53L0X_ERROR_REF_SPAD_INIT error. nextGoodSpad= -1
	currentSpad = offset;
 800b196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b198:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800b19a:	2300      	movs	r3, #0
 800b19c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b19e:	e02b      	b.n	800b1f8 <enable_ref_spads+0x84>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800b1a0:	f107 031c 	add.w	r3, r7, #28
 800b1a4:	6a3a      	ldr	r2, [r7, #32]
 800b1a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f7ff ff0d 	bl	800afc8 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800b1ae:	69fb      	ldr	r3, [r7, #28]
 800b1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b4:	d103      	bne.n	800b1be <enable_ref_spads+0x4a>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b1b6:	23ce      	movs	r3, #206	; 0xce
 800b1b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800b1bc:	e020      	b.n	800b200 <enable_ref_spads+0x8c>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1c4:	4413      	add	r3, r2
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7ff ff5c 	bl	800b084 <is_aperture>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	7afb      	ldrb	r3, [r7, #11]
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d003      	beq.n	800b1de <enable_ref_spads+0x6a>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b1d6:	23ce      	movs	r3, #206	; 0xce
 800b1d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800b1dc:	e010      	b.n	800b200 <enable_ref_spads+0x8c>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800b1de:	69fb      	ldr	r3, [r7, #28]
 800b1e0:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800b1e2:	6a3a      	ldr	r2, [r7, #32]
 800b1e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b1e6:	6838      	ldr	r0, [r7, #0]
 800b1e8:	f7ff ff66 	bl	800b0b8 <enable_spad_bit>
		currentSpad++;
 800b1ec:	6a3b      	ldr	r3, [r7, #32]
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800b1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d3cf      	bcc.n	800b1a0 <enable_ref_spads+0x2c>
	}
	*lastSpad = currentSpad;
 800b200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b202:	6a3a      	ldr	r2, [r7, #32]
 800b204:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800b206:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d106      	bne.n	800b21c <enable_ref_spads+0xa8>
		status = set_ref_spad_map(Dev, spadArray);
 800b20e:	6839      	ldr	r1, [r7, #0]
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	f7ff ff89 	bl	800b128 <set_ref_spad_map>
 800b216:	4603      	mov	r3, r0
 800b218:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800b21c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b220:	2b00      	cmp	r3, #0
 800b222:	d121      	bne.n	800b268 <enable_ref_spads+0xf4>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800b224:	f107 0314 	add.w	r3, r7, #20
 800b228:	4619      	mov	r1, r3
 800b22a:	68f8      	ldr	r0, [r7, #12]
 800b22c:	f7ff ff8f 	bl	800b14e <get_ref_spad_map>
 800b230:	4603      	mov	r3, r0
 800b232:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800b236:	2300      	movs	r3, #0
 800b238:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800b23a:	e011      	b.n	800b260 <enable_ref_spads+0xec>
			if (spadArray[i] != checkSpadArray[i]) {
 800b23c:	683a      	ldr	r2, [r7, #0]
 800b23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b240:	4413      	add	r3, r2
 800b242:	781a      	ldrb	r2, [r3, #0]
 800b244:	f107 0114 	add.w	r1, r7, #20
 800b248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24a:	440b      	add	r3, r1
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	429a      	cmp	r2, r3
 800b250:	d003      	beq.n	800b25a <enable_ref_spads+0xe6>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b252:	23ce      	movs	r3, #206	; 0xce
 800b254:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800b258:	e006      	b.n	800b268 <enable_ref_spads+0xf4>
			}
			i++;
 800b25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25c:	3301      	adds	r3, #1
 800b25e:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800b260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b264:	429a      	cmp	r2, r3
 800b266:	d3e9      	bcc.n	800b23c <enable_ref_spads+0xc8>
		}
	}
	return status;
 800b268:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3730      	adds	r7, #48	; 0x30
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b08a      	sub	sp, #40	; 0x28
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b27e:	2300      	movs	r3, #0
 800b280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800b284:	2300      	movs	r3, #0
 800b286:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b290:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800b294:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d107      	bne.n	800b2ac <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800b29c:	22c0      	movs	r2, #192	; 0xc0
 800b29e:	2101      	movs	r1, #1
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f003 f929 	bl	800e4f8 <VL53L0X_WrByte>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800b2ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d108      	bne.n	800b2c6 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800b2b4:	f107 0308 	add.w	r3, r7, #8
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f7ff fc40 	bl	800ab40 <VL53L0X_PerformSingleRangingMeasurement>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800b2c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d107      	bne.n	800b2de <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	21ff      	movs	r1, #255	; 0xff
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f003 f910 	bl	800e4f8 <VL53L0X_WrByte>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800b2de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d107      	bne.n	800b2f6 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800b2e6:	683a      	ldr	r2, [r7, #0]
 800b2e8:	21b6      	movs	r1, #182	; 0xb6
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f003 f9a1 	bl	800e632 <VL53L0X_RdWord>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800b2f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d107      	bne.n	800b30e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b2fe:	2200      	movs	r2, #0
 800b300:	21ff      	movs	r1, #255	; 0xff
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f003 f8f8 	bl	800e4f8 <VL53L0X_WrByte>
 800b308:	4603      	mov	r3, r0
 800b30a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800b30e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b312:	2b00      	cmp	r3, #0
 800b314:	d112      	bne.n	800b33c <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b316:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b31a:	461a      	mov	r2, r3
 800b31c:	2101      	movs	r1, #1
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f003 f8ea 	bl	800e4f8 <VL53L0X_WrByte>
 800b324:	4603      	mov	r3, r0
 800b326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800b32a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d104      	bne.n	800b33c <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b338:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800b33c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b340:	4618      	mov	r0, r3
 800b342:	3728      	adds	r7, #40	; 0x28
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800b348:	b590      	push	{r4, r7, lr}
 800b34a:	b09d      	sub	sp, #116	; 0x74
 800b34c:	af06      	add	r7, sp, #24
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	60b9      	str	r1, [r7, #8]
 800b352:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b354:	2300      	movs	r3, #0
 800b356:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800b35a:	23b4      	movs	r3, #180	; 0xb4
 800b35c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800b360:	2303      	movs	r3, #3
 800b362:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800b364:	232c      	movs	r3, #44	; 0x2c
 800b366:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800b368:	2300      	movs	r3, #0
 800b36a:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800b36c:	2300      	movs	r3, #0
 800b36e:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800b370:	2300      	movs	r3, #0
 800b372:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800b374:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800b378:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800b37a:	2300      	movs	r3, #0
 800b37c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800b37e:	2300      	movs	r3, #0
 800b380:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800b382:	2306      	movs	r3, #6
 800b384:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800b386:	2300      	movs	r3, #0
 800b388:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800b38a:	2300      	movs	r3, #0
 800b38c:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800b38e:	2300      	movs	r3, #0
 800b390:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800b394:	2300      	movs	r3, #0
 800b396:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800b398:	2300      	movs	r3, #0
 800b39a:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800b39c:	2300      	movs	r3, #0
 800b39e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800b3ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b3b2:	e009      	b.n	800b3c8 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3b8:	4413      	add	r3, r2
 800b3ba:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800b3be:	2200      	movs	r2, #0
 800b3c0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800b3c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b3c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d3f1      	bcc.n	800b3b4 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	21ff      	movs	r1, #255	; 0xff
 800b3d4:	68f8      	ldr	r0, [r7, #12]
 800b3d6:	f003 f88f 	bl	800e4f8 <VL53L0X_WrByte>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800b3e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d107      	bne.n	800b3f8 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	214f      	movs	r1, #79	; 0x4f
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f003 f883 	bl	800e4f8 <VL53L0X_WrByte>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800b3f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d107      	bne.n	800b410 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800b400:	222c      	movs	r2, #44	; 0x2c
 800b402:	214e      	movs	r1, #78	; 0x4e
 800b404:	68f8      	ldr	r0, [r7, #12]
 800b406:	f003 f877 	bl	800e4f8 <VL53L0X_WrByte>
 800b40a:	4603      	mov	r3, r0
 800b40c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800b410:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b414:	2b00      	cmp	r3, #0
 800b416:	d107      	bne.n	800b428 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b418:	2200      	movs	r2, #0
 800b41a:	21ff      	movs	r1, #255	; 0xff
 800b41c:	68f8      	ldr	r0, [r7, #12]
 800b41e:	f003 f86b 	bl	800e4f8 <VL53L0X_WrByte>
 800b422:	4603      	mov	r3, r0
 800b424:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800b428:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d109      	bne.n	800b444 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800b430:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b434:	461a      	mov	r2, r3
 800b436:	21b6      	movs	r1, #182	; 0xb6
 800b438:	68f8      	ldr	r0, [r7, #12]
 800b43a:	f003 f85d 	bl	800e4f8 <VL53L0X_WrByte>
 800b43e:	4603      	mov	r3, r0
 800b440:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800b444:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d107      	bne.n	800b45c <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800b44c:	2200      	movs	r2, #0
 800b44e:	2180      	movs	r1, #128	; 0x80
 800b450:	68f8      	ldr	r0, [r7, #12]
 800b452:	f003 f851 	bl	800e4f8 <VL53L0X_WrByte>
 800b456:	4603      	mov	r3, r0
 800b458:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800b45c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b460:	2b00      	cmp	r3, #0
 800b462:	d10a      	bne.n	800b47a <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800b464:	f107 0210 	add.w	r2, r7, #16
 800b468:	f107 0111 	add.w	r1, r7, #17
 800b46c:	2300      	movs	r3, #0
 800b46e:	68f8      	ldr	r0, [r7, #12]
 800b470:	f000 fbbb 	bl	800bbea <VL53L0X_perform_ref_calibration>
 800b474:	4603      	mov	r3, r0
 800b476:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);
	// error
	if (Status == VL53L0X_ERROR_NONE) {
 800b47a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d121      	bne.n	800b4c6 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800b482:	2300      	movs	r3, #0
 800b484:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800b486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b488:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800b48a:	2300      	movs	r3, #0
 800b48c:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800b48e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b490:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800b49e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b4a2:	f107 0218 	add.w	r2, r7, #24
 800b4a6:	9204      	str	r2, [sp, #16]
 800b4a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4aa:	9203      	str	r2, [sp, #12]
 800b4ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b4ae:	9202      	str	r2, [sp, #8]
 800b4b0:	9301      	str	r3, [sp, #4]
 800b4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b4:	9300      	str	r3, [sp, #0]
 800b4b6:	4623      	mov	r3, r4
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	68f8      	ldr	r0, [r7, #12]
 800b4bc:	f7ff fe5a 	bl	800b174 <enable_ref_spads>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b4c6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d174      	bne.n	800b5b8 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800b4d2:	f107 0312 	add.w	r3, r7, #18
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	68f8      	ldr	r0, [r7, #12]
 800b4da:	f7ff fecb 	bl	800b274 <perform_ref_signal_measurement>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800b4e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d161      	bne.n	800b5b0 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800b4ec:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800b4ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d25d      	bcs.n	800b5b0 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4f8:	e009      	b.n	800b50e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800b4fa:	68fa      	ldr	r2, [r7, #12]
 800b4fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4fe:	4413      	add	r3, r2
 800b500:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800b504:	2200      	movs	r2, #0
 800b506:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800b508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b50a:	3301      	adds	r3, #1
 800b50c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b50e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b512:	429a      	cmp	r2, r3
 800b514:	d3f1      	bcc.n	800b4fa <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800b516:	e002      	b.n	800b51e <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800b518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b51a:	3301      	adds	r3, #1
 800b51c:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800b51e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800b522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b524:	4413      	add	r3, r2
 800b526:	4618      	mov	r0, r3
 800b528:	f7ff fdac 	bl	800b084 <is_aperture>
 800b52c:	4603      	mov	r3, r0
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d103      	bne.n	800b53a <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800b532:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b536:	429a      	cmp	r2, r3
 800b538:	d3ee      	bcc.n	800b518 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800b53a:	2301      	movs	r3, #1
 800b53c:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800b53e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b540:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800b54e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b552:	f107 0218 	add.w	r2, r7, #24
 800b556:	9204      	str	r2, [sp, #16]
 800b558:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b55a:	9203      	str	r2, [sp, #12]
 800b55c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b55e:	9202      	str	r2, [sp, #8]
 800b560:	9301      	str	r3, [sp, #4]
 800b562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b564:	9300      	str	r3, [sp, #0]
 800b566:	4623      	mov	r3, r4
 800b568:	4602      	mov	r2, r0
 800b56a:	68f8      	ldr	r0, [r7, #12]
 800b56c:	f7ff fe02 	bl	800b174 <enable_ref_spads>
 800b570:	4603      	mov	r3, r0
 800b572:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800b576:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d11b      	bne.n	800b5b6 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800b57e:	69bb      	ldr	r3, [r7, #24]
 800b580:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800b582:	f107 0312 	add.w	r3, r7, #18
 800b586:	4619      	mov	r1, r3
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f7ff fe73 	bl	800b274 <perform_ref_signal_measurement>
 800b58e:	4603      	mov	r3, r0
 800b590:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800b594:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d10c      	bne.n	800b5b6 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800b59c:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800b59e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d208      	bcs.n	800b5b6 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800b5aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800b5ae:	e002      	b.n	800b5b6 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5b4:	e000      	b.n	800b5b8 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800b5b6:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800b5b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	f040 80af 	bne.w	800b720 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800b5c2:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800b5c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	f240 80aa 	bls.w	800b720 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800b5cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800b5d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5d4:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800b5dc:	f107 031c 	add.w	r3, r7, #28
 800b5e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f008 fbd6 	bl	8013d94 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800b5e8:	8a7b      	ldrh	r3, [r7, #18]
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b5ee:	1ad3      	subs	r3, r2, r3
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	bfb8      	it	lt
 800b5f4:	425b      	neglt	r3, r3
 800b5f6:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800b5fe:	e086      	b.n	800b70e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800b606:	f107 0314 	add.w	r3, r7, #20
 800b60a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b60c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b60e:	f7ff fcdb 	bl	800afc8 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b618:	d103      	bne.n	800b622 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b61a:	23ce      	movs	r3, #206	; 0xce
 800b61c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800b620:	e07e      	b.n	800b720 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800b622:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b626:	697a      	ldr	r2, [r7, #20]
 800b628:	4413      	add	r3, r2
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7ff fd2a 	bl	800b084 <is_aperture>
 800b630:	4603      	mov	r3, r0
 800b632:	461a      	mov	r2, r3
 800b634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b636:	4293      	cmp	r3, r2
 800b638:	d003      	beq.n	800b642 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800b63a:	2301      	movs	r3, #1
 800b63c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800b640:	e06e      	b.n	800b720 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800b642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b644:	3301      	adds	r3, #1
 800b646:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800b652:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b654:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b656:	4618      	mov	r0, r3
 800b658:	f7ff fd2e 	bl	800b0b8 <enable_spad_bit>
 800b65c:	4603      	mov	r3, r0
 800b65e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800b662:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b666:	2b00      	cmp	r3, #0
 800b668:	d10c      	bne.n	800b684 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800b66a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b66c:	3301      	adds	r3, #1
 800b66e:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800b676:	4619      	mov	r1, r3
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f7ff fd55 	bl	800b128 <set_ref_spad_map>
 800b67e:	4603      	mov	r3, r0
 800b680:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800b684:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d146      	bne.n	800b71a <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800b68c:	f107 0312 	add.w	r3, r7, #18
 800b690:	4619      	mov	r1, r3
 800b692:	68f8      	ldr	r0, [r7, #12]
 800b694:	f7ff fdee 	bl	800b274 <perform_ref_signal_measurement>
 800b698:	4603      	mov	r3, r0
 800b69a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800b69e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d13b      	bne.n	800b71e <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800b6a6:	8a7b      	ldrh	r3, [r7, #18]
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b6ac:	1ad3      	subs	r3, r2, r3
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	bfb8      	it	lt
 800b6b2:	425b      	neglt	r3, r3
 800b6b4:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800b6b6:	8a7b      	ldrh	r3, [r7, #18]
 800b6b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d21c      	bcs.n	800b6f8 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800b6be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d914      	bls.n	800b6f0 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800b6c6:	f107 031c 	add.w	r3, r7, #28
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	f7ff fd2b 	bl	800b128 <set_ref_spad_map>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800b6de:	f107 011c 	add.w	r1, r7, #28
 800b6e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f008 fb55 	bl	8013d94 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800b6ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6f6:	e00a      	b.n	800b70e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fa:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800b702:	f107 031c 	add.w	r3, r7, #28
 800b706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b708:	4618      	mov	r0, r3
 800b70a:	f008 fb43 	bl	8013d94 <memcpy>
		while (!complete) {
 800b70e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b712:	2b00      	cmp	r3, #0
 800b714:	f43f af74 	beq.w	800b600 <VL53L0X_perform_ref_spad_management+0x2b8>
 800b718:	e002      	b.n	800b720 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800b71a:	bf00      	nop
 800b71c:	e000      	b.n	800b720 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800b71e:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b720:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b724:	2b00      	cmp	r3, #0
 800b726:	d115      	bne.n	800b754 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b72c:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800b734:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2201      	movs	r2, #1
 800b73a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	b2da      	uxtb	r2, r3
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	781a      	ldrb	r2, [r3, #0]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800b754:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800b758:	4618      	mov	r0, r3
 800b75a:	375c      	adds	r7, #92	; 0x5c
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd90      	pop	{r4, r7, pc}

0800b760 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800b760:	b590      	push	{r4, r7, lr}
 800b762:	b093      	sub	sp, #76	; 0x4c
 800b764:	af06      	add	r7, sp, #24
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	4613      	mov	r3, r2
 800b76c:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b76e:	2300      	movs	r3, #0
 800b770:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800b774:	2300      	movs	r3, #0
 800b776:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800b778:	23b4      	movs	r3, #180	; 0xb4
 800b77a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800b77e:	2306      	movs	r3, #6
 800b780:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800b782:	232c      	movs	r3, #44	; 0x2c
 800b784:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b786:	2201      	movs	r2, #1
 800b788:	21ff      	movs	r1, #255	; 0xff
 800b78a:	68f8      	ldr	r0, [r7, #12]
 800b78c:	f002 feb4 	bl	800e4f8 <VL53L0X_WrByte>
 800b790:	4603      	mov	r3, r0
 800b792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800b796:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d107      	bne.n	800b7ae <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800b79e:	2200      	movs	r2, #0
 800b7a0:	214f      	movs	r1, #79	; 0x4f
 800b7a2:	68f8      	ldr	r0, [r7, #12]
 800b7a4:	f002 fea8 	bl	800e4f8 <VL53L0X_WrByte>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800b7ae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d107      	bne.n	800b7c6 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800b7b6:	222c      	movs	r2, #44	; 0x2c
 800b7b8:	214e      	movs	r1, #78	; 0x4e
 800b7ba:	68f8      	ldr	r0, [r7, #12]
 800b7bc:	f002 fe9c 	bl	800e4f8 <VL53L0X_WrByte>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800b7c6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d107      	bne.n	800b7de <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	21ff      	movs	r1, #255	; 0xff
 800b7d2:	68f8      	ldr	r0, [r7, #12]
 800b7d4:	f002 fe90 	bl	800e4f8 <VL53L0X_WrByte>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800b7de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d109      	bne.n	800b7fa <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800b7e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	21b6      	movs	r1, #182	; 0xb6
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	f002 fe82 	bl	800e4f8 <VL53L0X_WrByte>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	627b      	str	r3, [r7, #36]	; 0x24
 800b7fe:	e009      	b.n	800b814 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800b800:	68fa      	ldr	r2, [r7, #12]
 800b802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b804:	4413      	add	r3, r2
 800b806:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800b80a:	2200      	movs	r2, #0
 800b80c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800b80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b810:	3301      	adds	r3, #1
 800b812:	627b      	str	r3, [r7, #36]	; 0x24
 800b814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b816:	69fb      	ldr	r3, [r7, #28]
 800b818:	429a      	cmp	r2, r3
 800b81a:	d3f1      	bcc.n	800b800 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800b81c:	79fb      	ldrb	r3, [r7, #7]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d011      	beq.n	800b846 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800b822:	e002      	b.n	800b82a <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800b824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b826:	3301      	adds	r3, #1
 800b828:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800b82a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b830:	4413      	add	r3, r2
 800b832:	4618      	mov	r0, r3
 800b834:	f7ff fc26 	bl	800b084 <is_aperture>
 800b838:	4603      	mov	r3, r0
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d103      	bne.n	800b846 <VL53L0X_set_reference_spads+0xe6>
 800b83e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	429a      	cmp	r2, r3
 800b844:	d3ee      	bcc.n	800b824 <VL53L0X_set_reference_spads+0xc4>
	}

	// 21.03.01 Status= -50 ?
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800b852:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b856:	79f9      	ldrb	r1, [r7, #7]
 800b858:	f107 0214 	add.w	r2, r7, #20
 800b85c:	9204      	str	r2, [sp, #16]
 800b85e:	68ba      	ldr	r2, [r7, #8]
 800b860:	9203      	str	r2, [sp, #12]
 800b862:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b864:	9202      	str	r2, [sp, #8]
 800b866:	9301      	str	r3, [sp, #4]
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	9300      	str	r3, [sp, #0]
 800b86c:	4623      	mov	r3, r4
 800b86e:	4602      	mov	r2, r0
 800b870:	68f8      	ldr	r0, [r7, #12]
 800b872:	f7ff fc7f 	bl	800b174 <enable_ref_spads>
 800b876:	4603      	mov	r3, r0
 800b878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800b87c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b880:	2b00      	cmp	r3, #0
 800b882:	d10c      	bne.n	800b89e <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2201      	movs	r2, #1
 800b888:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	b2da      	uxtb	r2, r3
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	79fa      	ldrb	r2, [r7, #7]
 800b89a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800b89e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3734      	adds	r7, #52	; 0x34
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd90      	pop	{r4, r7, pc}

0800b8aa <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b084      	sub	sp, #16
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b8ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d10a      	bne.n	800b8d8 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800b8c2:	78fb      	ldrb	r3, [r7, #3]
 800b8c4:	f043 0301 	orr.w	r3, r3, #1
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	2100      	movs	r1, #0
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f002 fe12 	bl	800e4f8 <VL53L0X_WrByte>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800b8d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d104      	bne.n	800b8ea <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 f9bf 	bl	800bc64 <VL53L0X_measurement_poll_for_completion>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b8ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d105      	bne.n	800b8fe <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b8f2:	2100      	movs	r1, #0
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f7ff faad 	bl	800ae54 <VL53L0X_ClearInterruptMask>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b8fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d106      	bne.n	800b914 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800b906:	2200      	movs	r2, #0
 800b908:	2100      	movs	r1, #0
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f002 fdf4 	bl	800e4f8 <VL53L0X_WrByte>
 800b910:	4603      	mov	r3, r0
 800b912:	73fb      	strb	r3, [r7, #15]

	return Status;
 800b914:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3710      	adds	r7, #16
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	4608      	mov	r0, r1
 800b92a:	4611      	mov	r1, r2
 800b92c:	461a      	mov	r2, r3
 800b92e:	4603      	mov	r3, r0
 800b930:	70fb      	strb	r3, [r7, #3]
 800b932:	460b      	mov	r3, r1
 800b934:	70bb      	strb	r3, [r7, #2]
 800b936:	4613      	mov	r3, r2
 800b938:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b93a:	2300      	movs	r3, #0
 800b93c:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800b93e:	2300      	movs	r3, #0
 800b940:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b942:	2201      	movs	r2, #1
 800b944:	21ff      	movs	r1, #255	; 0xff
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f002 fdd6 	bl	800e4f8 <VL53L0X_WrByte>
 800b94c:	4603      	mov	r3, r0
 800b94e:	461a      	mov	r2, r3
 800b950:	7bfb      	ldrb	r3, [r7, #15]
 800b952:	4313      	orrs	r3, r2
 800b954:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b956:	2200      	movs	r2, #0
 800b958:	2100      	movs	r1, #0
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f002 fdcc 	bl	800e4f8 <VL53L0X_WrByte>
 800b960:	4603      	mov	r3, r0
 800b962:	461a      	mov	r2, r3
 800b964:	7bfb      	ldrb	r3, [r7, #15]
 800b966:	4313      	orrs	r3, r2
 800b968:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b96a:	2200      	movs	r2, #0
 800b96c:	21ff      	movs	r1, #255	; 0xff
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f002 fdc2 	bl	800e4f8 <VL53L0X_WrByte>
 800b974:	4603      	mov	r3, r0
 800b976:	461a      	mov	r2, r3
 800b978:	7bfb      	ldrb	r3, [r7, #15]
 800b97a:	4313      	orrs	r3, r2
 800b97c:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800b97e:	78fb      	ldrb	r3, [r7, #3]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d01e      	beq.n	800b9c2 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800b984:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d009      	beq.n	800b9a0 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800b98c:	69ba      	ldr	r2, [r7, #24]
 800b98e:	21cb      	movs	r1, #203	; 0xcb
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f002 fe2f 	bl	800e5f4 <VL53L0X_RdByte>
 800b996:	4603      	mov	r3, r0
 800b998:	461a      	mov	r2, r3
 800b99a:	7bfb      	ldrb	r3, [r7, #15]
 800b99c:	4313      	orrs	r3, r2
 800b99e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800b9a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d02a      	beq.n	800b9fe <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800b9a8:	f107 030e 	add.w	r3, r7, #14
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	21ee      	movs	r1, #238	; 0xee
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f002 fe1f 	bl	800e5f4 <VL53L0X_RdByte>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	7bfb      	ldrb	r3, [r7, #15]
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	73fb      	strb	r3, [r7, #15]
 800b9c0:	e01d      	b.n	800b9fe <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800b9c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d00a      	beq.n	800b9e0 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800b9ca:	78bb      	ldrb	r3, [r7, #2]
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	21cb      	movs	r1, #203	; 0xcb
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f002 fd91 	bl	800e4f8 <VL53L0X_WrByte>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	461a      	mov	r2, r3
 800b9da:	7bfb      	ldrb	r3, [r7, #15]
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800b9e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d00a      	beq.n	800b9fe <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800b9e8:	787b      	ldrb	r3, [r7, #1]
 800b9ea:	2280      	movs	r2, #128	; 0x80
 800b9ec:	21ee      	movs	r1, #238	; 0xee
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f002 fdc2 	bl	800e578 <VL53L0X_UpdateByte>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	7bfb      	ldrb	r3, [r7, #15]
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b9fe:	2201      	movs	r2, #1
 800ba00:	21ff      	movs	r1, #255	; 0xff
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f002 fd78 	bl	800e4f8 <VL53L0X_WrByte>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	7bfb      	ldrb	r3, [r7, #15]
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800ba12:	2201      	movs	r2, #1
 800ba14:	2100      	movs	r1, #0
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f002 fd6e 	bl	800e4f8 <VL53L0X_WrByte>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	461a      	mov	r2, r3
 800ba20:	7bfb      	ldrb	r3, [r7, #15]
 800ba22:	4313      	orrs	r3, r2
 800ba24:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ba26:	2200      	movs	r2, #0
 800ba28:	21ff      	movs	r1, #255	; 0xff
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f002 fd64 	bl	800e4f8 <VL53L0X_WrByte>
 800ba30:	4603      	mov	r3, r0
 800ba32:	461a      	mov	r2, r3
 800ba34:	7bfb      	ldrb	r3, [r7, #15]
 800ba36:	4313      	orrs	r3, r2
 800ba38:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800ba3a:	7bbb      	ldrb	r3, [r7, #14]
 800ba3c:	f023 0310 	bic.w	r3, r3, #16
 800ba40:	b2da      	uxtb	r2, r3
 800ba42:	69fb      	ldr	r3, [r7, #28]
 800ba44:	701a      	strb	r2, [r3, #0]

	return Status;
 800ba46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b08a      	sub	sp, #40	; 0x28
 800ba56:	af04      	add	r7, sp, #16
 800ba58:	60f8      	str	r0, [r7, #12]
 800ba5a:	60b9      	str	r1, [r7, #8]
 800ba5c:	4611      	mov	r1, r2
 800ba5e:	461a      	mov	r2, r3
 800ba60:	460b      	mov	r3, r1
 800ba62:	71fb      	strb	r3, [r7, #7]
 800ba64:	4613      	mov	r3, r2
 800ba66:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800ba70:	2300      	movs	r3, #0
 800ba72:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800ba74:	2300      	movs	r3, #0
 800ba76:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800ba7c:	79bb      	ldrb	r3, [r7, #6]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d003      	beq.n	800ba8a <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800ba88:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	2101      	movs	r1, #1
 800ba8e:	68f8      	ldr	r0, [r7, #12]
 800ba90:	f002 fd32 	bl	800e4f8 <VL53L0X_WrByte>
 800ba94:	4603      	mov	r3, r0
 800ba96:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800ba98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d105      	bne.n	800baac <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800baa0:	2140      	movs	r1, #64	; 0x40
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f7ff ff01 	bl	800b8aa <VL53L0X_perform_single_ref_calibration>
 800baa8:	4603      	mov	r3, r0
 800baaa:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800baac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d115      	bne.n	800bae0 <VL53L0X_perform_vhv_calibration+0x8e>
 800bab4:	79fb      	ldrb	r3, [r7, #7]
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	d112      	bne.n	800bae0 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800baba:	7d39      	ldrb	r1, [r7, #20]
 800babc:	7d7a      	ldrb	r2, [r7, #21]
 800babe:	2300      	movs	r3, #0
 800bac0:	9303      	str	r3, [sp, #12]
 800bac2:	2301      	movs	r3, #1
 800bac4:	9302      	str	r3, [sp, #8]
 800bac6:	f107 0313 	add.w	r3, r7, #19
 800baca:	9301      	str	r3, [sp, #4]
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	460b      	mov	r3, r1
 800bad2:	2101      	movs	r1, #1
 800bad4:	68f8      	ldr	r0, [r7, #12]
 800bad6:	f7ff ff23 	bl	800b920 <VL53L0X_ref_calibration_io>
 800bada:	4603      	mov	r3, r0
 800badc:	75fb      	strb	r3, [r7, #23]
 800bade:	e002      	b.n	800bae6 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	2200      	movs	r2, #0
 800bae4:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800bae6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d112      	bne.n	800bb14 <VL53L0X_perform_vhv_calibration+0xc2>
 800baee:	79bb      	ldrb	r3, [r7, #6]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d00f      	beq.n	800bb14 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800baf4:	7dbb      	ldrb	r3, [r7, #22]
 800baf6:	461a      	mov	r2, r3
 800baf8:	2101      	movs	r1, #1
 800bafa:	68f8      	ldr	r0, [r7, #12]
 800bafc:	f002 fcfc 	bl	800e4f8 <VL53L0X_WrByte>
 800bb00:	4603      	mov	r3, r0
 800bb02:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800bb04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d103      	bne.n	800bb14 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	7dba      	ldrb	r2, [r7, #22]
 800bb10:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800bb14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3718      	adds	r7, #24
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b08a      	sub	sp, #40	; 0x28
 800bb24:	af04      	add	r7, sp, #16
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	4611      	mov	r1, r2
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	460b      	mov	r3, r1
 800bb30:	71fb      	strb	r3, [r7, #7]
 800bb32:	4613      	mov	r3, r2
 800bb34:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb36:	2300      	movs	r3, #0
 800bb38:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800bb42:	2300      	movs	r3, #0
 800bb44:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800bb46:	79bb      	ldrb	r3, [r7, #6]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d003      	beq.n	800bb54 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800bb52:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800bb54:	2202      	movs	r2, #2
 800bb56:	2101      	movs	r1, #1
 800bb58:	68f8      	ldr	r0, [r7, #12]
 800bb5a:	f002 fccd 	bl	800e4f8 <VL53L0X_WrByte>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800bb62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d105      	bne.n	800bb76 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800bb6a:	2100      	movs	r1, #0
 800bb6c:	68f8      	ldr	r0, [r7, #12]
 800bb6e:	f7ff fe9c 	bl	800b8aa <VL53L0X_perform_single_ref_calibration>
 800bb72:	4603      	mov	r3, r0
 800bb74:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800bb76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d115      	bne.n	800bbaa <VL53L0X_perform_phase_calibration+0x8a>
 800bb7e:	79fb      	ldrb	r3, [r7, #7]
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d112      	bne.n	800bbaa <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800bb84:	7d39      	ldrb	r1, [r7, #20]
 800bb86:	7d7a      	ldrb	r2, [r7, #21]
 800bb88:	2301      	movs	r3, #1
 800bb8a:	9303      	str	r3, [sp, #12]
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	9302      	str	r3, [sp, #8]
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	9301      	str	r3, [sp, #4]
 800bb94:	f107 0313 	add.w	r3, r7, #19
 800bb98:	9300      	str	r3, [sp, #0]
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	2101      	movs	r1, #1
 800bb9e:	68f8      	ldr	r0, [r7, #12]
 800bba0:	f7ff febe 	bl	800b920 <VL53L0X_ref_calibration_io>
 800bba4:	4603      	mov	r3, r0
 800bba6:	75fb      	strb	r3, [r7, #23]
 800bba8:	e002      	b.n	800bbb0 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	2200      	movs	r2, #0
 800bbae:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800bbb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d112      	bne.n	800bbde <VL53L0X_perform_phase_calibration+0xbe>
 800bbb8:	79bb      	ldrb	r3, [r7, #6]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d00f      	beq.n	800bbde <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800bbbe:	7dbb      	ldrb	r3, [r7, #22]
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	2101      	movs	r1, #1
 800bbc4:	68f8      	ldr	r0, [r7, #12]
 800bbc6:	f002 fc97 	bl	800e4f8 <VL53L0X_WrByte>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800bbce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d103      	bne.n	800bbde <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	7dba      	ldrb	r2, [r7, #22]
 800bbda:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800bbde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3718      	adds	r7, #24
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b086      	sub	sp, #24
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	60f8      	str	r0, [r7, #12]
 800bbf2:	60b9      	str	r1, [r7, #8]
 800bbf4:	607a      	str	r2, [r7, #4]
 800bbf6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800bc06:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800bc08:	78fa      	ldrb	r2, [r7, #3]
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	68b9      	ldr	r1, [r7, #8]
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f7ff ff1f 	bl	800ba52 <VL53L0X_perform_vhv_calibration>
 800bc14:	4603      	mov	r3, r0
 800bc16:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800bc18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d107      	bne.n	800bc30 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800bc20:	78fa      	ldrb	r2, [r7, #3]
 800bc22:	2300      	movs	r3, #0
 800bc24:	6879      	ldr	r1, [r7, #4]
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f7ff ff7a 	bl	800bb20 <VL53L0X_perform_phase_calibration>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800bc30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d10f      	bne.n	800bc58 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800bc38:	7dbb      	ldrb	r3, [r7, #22]
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	2101      	movs	r1, #1
 800bc3e:	68f8      	ldr	r0, [r7, #12]
 800bc40:	f002 fc5a 	bl	800e4f8 <VL53L0X_WrByte>
 800bc44:	4603      	mov	r3, r0
 800bc46:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800bc48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d103      	bne.n	800bc58 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	7dba      	ldrb	r2, [r7, #22]
 800bc54:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800bc58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3718      	adds	r7, #24
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b086      	sub	sp, #24
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800bc70:	2300      	movs	r3, #0
 800bc72:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800bc74:	2300      	movs	r3, #0
 800bc76:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800bc78:	f107 030f 	add.w	r3, r7, #15
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f7fe fdfa 	bl	800a878 <VL53L0X_GetMeasurementDataReady>
 800bc84:	4603      	mov	r3, r0
 800bc86:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800bc88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d110      	bne.n	800bcb2 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800bc90:	7bfb      	ldrb	r3, [r7, #15]
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d00f      	beq.n	800bcb6 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	3301      	adds	r3, #1
 800bc9a:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800bca2:	d302      	bcc.n	800bcaa <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800bca4:	23f9      	movs	r3, #249	; 0xf9
 800bca6:	75fb      	strb	r3, [r7, #23]
			break;
 800bca8:	e006      	b.n	800bcb8 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f002 fcff 	bl	800e6ae <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800bcb0:	e7e2      	b.n	800bc78 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800bcb2:	bf00      	nop
 800bcb4:	e000      	b.n	800bcb8 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800bcb6:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800bcb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3718      	adds	r7, #24
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b085      	sub	sp, #20
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	4603      	mov	r3, r0
 800bccc:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800bcd2:	79fb      	ldrb	r3, [r7, #7]
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	005b      	lsls	r3, r3, #1
 800bcda:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800bcdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3714      	adds	r7, #20
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr

0800bcea <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800bcea:	b480      	push	{r7}
 800bcec:	b085      	sub	sp, #20
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800bcf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bcfa:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800bcfc:	e002      	b.n	800bd04 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	089b      	lsrs	r3, r3, #2
 800bd02:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800bd04:	68ba      	ldr	r2, [r7, #8]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d8f8      	bhi.n	800bcfe <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800bd0c:	e017      	b.n	800bd3e <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800bd0e:	68fa      	ldr	r2, [r7, #12]
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	4413      	add	r3, r2
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d30b      	bcc.n	800bd32 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800bd1a:	68fa      	ldr	r2, [r7, #12]
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	4413      	add	r3, r2
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	1ad3      	subs	r3, r2, r3
 800bd24:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	085b      	lsrs	r3, r3, #1
 800bd2a:	68ba      	ldr	r2, [r7, #8]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	60fb      	str	r3, [r7, #12]
 800bd30:	e002      	b.n	800bd38 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	085b      	lsrs	r3, r3, #1
 800bd36:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	089b      	lsrs	r3, r3, #2
 800bd3c:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d1e4      	bne.n	800bd0e <VL53L0X_isqrt+0x24>
	}

	return res;
 800bd44:	68fb      	ldr	r3, [r7, #12]
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3714      	adds	r7, #20
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr

0800bd52 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b086      	sub	sp, #24
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800bd5e:	2200      	movs	r2, #0
 800bd60:	2183      	movs	r1, #131	; 0x83
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f002 fbc8 	bl	800e4f8 <VL53L0X_WrByte>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	7dfb      	ldrb	r3, [r7, #23]
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800bd72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d11e      	bne.n	800bdb8 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800bd7e:	f107 030f 	add.w	r3, r7, #15
 800bd82:	461a      	mov	r2, r3
 800bd84:	2183      	movs	r1, #131	; 0x83
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f002 fc34 	bl	800e5f4 <VL53L0X_RdByte>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800bd90:	7bfb      	ldrb	r3, [r7, #15]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d10a      	bne.n	800bdac <VL53L0X_device_read_strobe+0x5a>
 800bd96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d106      	bne.n	800bdac <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	3301      	adds	r3, #1
 800bda2:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800bdaa:	d3e8      	bcc.n	800bd7e <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800bdb2:	d301      	bcc.n	800bdb8 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800bdb4:	23f9      	movs	r3, #249	; 0xf9
 800bdb6:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800bdb8:	2201      	movs	r2, #1
 800bdba:	2183      	movs	r1, #131	; 0x83
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f002 fb9b 	bl	800e4f8 <VL53L0X_WrByte>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	7dfb      	ldrb	r3, [r7, #23]
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800bdcc:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3718      	adds	r7, #24
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b098      	sub	sp, #96	; 0x60
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	460b      	mov	r3, r1
 800bde2:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bde4:	2300      	movs	r3, #0
 800bde6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800bdea:	2300      	movs	r3, #0
 800bdec:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800bdfe:	2300      	movs	r3, #0
 800be00:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800be02:	2300      	movs	r3, #0
 800be04:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800be08:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800be0c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800be0e:	2300      	movs	r3, #0
 800be10:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800be12:	2300      	movs	r3, #0
 800be14:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800be16:	2300      	movs	r3, #0
 800be18:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800be20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800be24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800be28:	2b07      	cmp	r3, #7
 800be2a:	f000 8408 	beq.w	800c63e <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800be2e:	2201      	movs	r2, #1
 800be30:	2180      	movs	r1, #128	; 0x80
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f002 fb60 	bl	800e4f8 <VL53L0X_WrByte>
 800be38:	4603      	mov	r3, r0
 800be3a:	461a      	mov	r2, r3
 800be3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be40:	4313      	orrs	r3, r2
 800be42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800be46:	2201      	movs	r2, #1
 800be48:	21ff      	movs	r1, #255	; 0xff
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f002 fb54 	bl	800e4f8 <VL53L0X_WrByte>
 800be50:	4603      	mov	r3, r0
 800be52:	461a      	mov	r2, r3
 800be54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be58:	4313      	orrs	r3, r2
 800be5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800be5e:	2200      	movs	r2, #0
 800be60:	2100      	movs	r1, #0
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f002 fb48 	bl	800e4f8 <VL53L0X_WrByte>
 800be68:	4603      	mov	r3, r0
 800be6a:	461a      	mov	r2, r3
 800be6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be70:	4313      	orrs	r3, r2
 800be72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800be76:	2206      	movs	r2, #6
 800be78:	21ff      	movs	r1, #255	; 0xff
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f002 fb3c 	bl	800e4f8 <VL53L0X_WrByte>
 800be80:	4603      	mov	r3, r0
 800be82:	461a      	mov	r2, r3
 800be84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be88:	4313      	orrs	r3, r2
 800be8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800be8e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800be92:	461a      	mov	r2, r3
 800be94:	2183      	movs	r1, #131	; 0x83
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f002 fbac 	bl	800e5f4 <VL53L0X_RdByte>
 800be9c:	4603      	mov	r3, r0
 800be9e:	461a      	mov	r2, r3
 800bea0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bea4:	4313      	orrs	r3, r2
 800bea6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800beaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800beae:	f043 0304 	orr.w	r3, r3, #4
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	461a      	mov	r2, r3
 800beb6:	2183      	movs	r1, #131	; 0x83
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f002 fb1d 	bl	800e4f8 <VL53L0X_WrByte>
 800bebe:	4603      	mov	r3, r0
 800bec0:	461a      	mov	r2, r3
 800bec2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bec6:	4313      	orrs	r3, r2
 800bec8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800becc:	2207      	movs	r2, #7
 800bece:	21ff      	movs	r1, #255	; 0xff
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f002 fb11 	bl	800e4f8 <VL53L0X_WrByte>
 800bed6:	4603      	mov	r3, r0
 800bed8:	461a      	mov	r2, r3
 800beda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bede:	4313      	orrs	r3, r2
 800bee0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800bee4:	2201      	movs	r2, #1
 800bee6:	2181      	movs	r1, #129	; 0x81
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f002 fb05 	bl	800e4f8 <VL53L0X_WrByte>
 800beee:	4603      	mov	r3, r0
 800bef0:	461a      	mov	r2, r3
 800bef2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bef6:	4313      	orrs	r3, r2
 800bef8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f002 fbd6 	bl	800e6ae <VL53L0X_PollingDelay>
 800bf02:	4603      	mov	r3, r0
 800bf04:	461a      	mov	r2, r3
 800bf06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800bf10:	2201      	movs	r2, #1
 800bf12:	2180      	movs	r1, #128	; 0x80
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f002 faef 	bl	800e4f8 <VL53L0X_WrByte>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf22:	4313      	orrs	r3, r2
 800bf24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800bf28:	78fb      	ldrb	r3, [r7, #3]
 800bf2a:	f003 0301 	and.w	r3, r3, #1
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	f000 8098 	beq.w	800c064 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800bf34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bf38:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	f040 8091 	bne.w	800c064 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800bf42:	226b      	movs	r2, #107	; 0x6b
 800bf44:	2194      	movs	r1, #148	; 0x94
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f002 fad6 	bl	800e4f8 <VL53L0X_WrByte>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	461a      	mov	r2, r3
 800bf50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf54:	4313      	orrs	r3, r2
 800bf56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f7ff fef9 	bl	800bd52 <VL53L0X_device_read_strobe>
 800bf60:	4603      	mov	r3, r0
 800bf62:	461a      	mov	r2, r3
 800bf64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf68:	4313      	orrs	r3, r2
 800bf6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bf6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bf72:	461a      	mov	r2, r3
 800bf74:	2190      	movs	r1, #144	; 0x90
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f002 fb7a 	bl	800e670 <VL53L0X_RdDWord>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	461a      	mov	r2, r3
 800bf80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf84:	4313      	orrs	r3, r2
 800bf86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800bf8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8c:	0a1b      	lsrs	r3, r3, #8
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf94:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800bf98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9a:	0bdb      	lsrs	r3, r3, #15
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	f003 0301 	and.w	r3, r3, #1
 800bfa2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800bfa6:	2224      	movs	r2, #36	; 0x24
 800bfa8:	2194      	movs	r1, #148	; 0x94
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f002 faa4 	bl	800e4f8 <VL53L0X_WrByte>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f7ff fec7 	bl	800bd52 <VL53L0X_device_read_strobe>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bfd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	2190      	movs	r1, #144	; 0x90
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f002 fb48 	bl	800e670 <VL53L0X_RdDWord>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800bfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff0:	0e1b      	lsrs	r3, r3, #24
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800bff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff8:	0c1b      	lsrs	r3, r3, #16
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800bffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c000:	0a1b      	lsrs	r3, r3, #8
 800c002:	b2db      	uxtb	r3, r3
 800c004:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800c006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800c00c:	2225      	movs	r2, #37	; 0x25
 800c00e:	2194      	movs	r1, #148	; 0x94
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f002 fa71 	bl	800e4f8 <VL53L0X_WrByte>
 800c016:	4603      	mov	r3, r0
 800c018:	461a      	mov	r2, r3
 800c01a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c01e:	4313      	orrs	r3, r2
 800c020:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f7ff fe94 	bl	800bd52 <VL53L0X_device_read_strobe>
 800c02a:	4603      	mov	r3, r0
 800c02c:	461a      	mov	r2, r3
 800c02e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c032:	4313      	orrs	r3, r2
 800c034:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c038:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c03c:	461a      	mov	r2, r3
 800c03e:	2190      	movs	r1, #144	; 0x90
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f002 fb15 	bl	800e670 <VL53L0X_RdDWord>
 800c046:	4603      	mov	r3, r0
 800c048:	461a      	mov	r2, r3
 800c04a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c04e:	4313      	orrs	r3, r2
 800c050:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800c054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c056:	0e1b      	lsrs	r3, r3, #24
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800c05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05e:	0c1b      	lsrs	r3, r3, #16
 800c060:	b2db      	uxtb	r3, r3
 800c062:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800c064:	78fb      	ldrb	r3, [r7, #3]
 800c066:	f003 0302 	and.w	r3, r3, #2
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	f000 8189 	beq.w	800c382 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800c070:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c074:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800c078:	2b00      	cmp	r3, #0
 800c07a:	f040 8182 	bne.w	800c382 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800c07e:	2202      	movs	r2, #2
 800c080:	2194      	movs	r1, #148	; 0x94
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f002 fa38 	bl	800e4f8 <VL53L0X_WrByte>
 800c088:	4603      	mov	r3, r0
 800c08a:	461a      	mov	r2, r3
 800c08c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c090:	4313      	orrs	r3, r2
 800c092:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f7ff fe5b 	bl	800bd52 <VL53L0X_device_read_strobe>
 800c09c:	4603      	mov	r3, r0
 800c09e:	461a      	mov	r2, r3
 800c0a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800c0aa:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	2190      	movs	r1, #144	; 0x90
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f002 fa9e 	bl	800e5f4 <VL53L0X_RdByte>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0c0:	4313      	orrs	r3, r2
 800c0c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800c0c6:	227b      	movs	r2, #123	; 0x7b
 800c0c8:	2194      	movs	r1, #148	; 0x94
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f002 fa14 	bl	800e4f8 <VL53L0X_WrByte>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f7ff fe37 	bl	800bd52 <VL53L0X_device_read_strobe>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800c0f2:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	2190      	movs	r1, #144	; 0x90
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f002 fa7a 	bl	800e5f4 <VL53L0X_RdByte>
 800c100:	4603      	mov	r3, r0
 800c102:	461a      	mov	r2, r3
 800c104:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c108:	4313      	orrs	r3, r2
 800c10a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800c10e:	2277      	movs	r2, #119	; 0x77
 800c110:	2194      	movs	r1, #148	; 0x94
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f002 f9f0 	bl	800e4f8 <VL53L0X_WrByte>
 800c118:	4603      	mov	r3, r0
 800c11a:	461a      	mov	r2, r3
 800c11c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c120:	4313      	orrs	r3, r2
 800c122:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f7ff fe13 	bl	800bd52 <VL53L0X_device_read_strobe>
 800c12c:	4603      	mov	r3, r0
 800c12e:	461a      	mov	r2, r3
 800c130:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c134:	4313      	orrs	r3, r2
 800c136:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c13a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c13e:	461a      	mov	r2, r3
 800c140:	2190      	movs	r1, #144	; 0x90
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f002 fa94 	bl	800e670 <VL53L0X_RdDWord>
 800c148:	4603      	mov	r3, r0
 800c14a:	461a      	mov	r2, r3
 800c14c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c150:	4313      	orrs	r3, r2
 800c152:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800c156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c158:	0e5b      	lsrs	r3, r3, #25
 800c15a:	b2db      	uxtb	r3, r3
 800c15c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c160:	b2db      	uxtb	r3, r3
 800c162:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800c164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c166:	0c9b      	lsrs	r3, r3, #18
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c16e:	b2db      	uxtb	r3, r3
 800c170:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800c172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c174:	0adb      	lsrs	r3, r3, #11
 800c176:	b2db      	uxtb	r3, r3
 800c178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800c180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c182:	091b      	lsrs	r3, r3, #4
 800c184:	b2db      	uxtb	r3, r3
 800c186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800c18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c190:	b2db      	uxtb	r3, r3
 800c192:	00db      	lsls	r3, r3, #3
 800c194:	b2db      	uxtb	r3, r3
 800c196:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800c1a0:	2278      	movs	r2, #120	; 0x78
 800c1a2:	2194      	movs	r1, #148	; 0x94
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f002 f9a7 	bl	800e4f8 <VL53L0X_WrByte>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f7ff fdca 	bl	800bd52 <VL53L0X_device_read_strobe>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c1cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	2190      	movs	r1, #144	; 0x90
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f002 fa4b 	bl	800e670 <VL53L0X_RdDWord>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	461a      	mov	r2, r3
 800c1de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800c1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ea:	0f5b      	lsrs	r3, r3, #29
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1f2:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800c1f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c1f8:	4413      	add	r3, r2
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800c1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c200:	0d9b      	lsrs	r3, r3, #22
 800c202:	b2db      	uxtb	r3, r3
 800c204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c208:	b2db      	uxtb	r3, r3
 800c20a:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800c20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20e:	0bdb      	lsrs	r3, r3, #15
 800c210:	b2db      	uxtb	r3, r3
 800c212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c216:	b2db      	uxtb	r3, r3
 800c218:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800c21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c21c:	0a1b      	lsrs	r3, r3, #8
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c224:	b2db      	uxtb	r3, r3
 800c226:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800c228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22a:	085b      	lsrs	r3, r3, #1
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c232:	b2db      	uxtb	r3, r3
 800c234:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800c236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c238:	b2db      	uxtb	r3, r3
 800c23a:	019b      	lsls	r3, r3, #6
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c242:	b2db      	uxtb	r3, r3
 800c244:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800c248:	2279      	movs	r2, #121	; 0x79
 800c24a:	2194      	movs	r1, #148	; 0x94
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f002 f953 	bl	800e4f8 <VL53L0X_WrByte>
 800c252:	4603      	mov	r3, r0
 800c254:	461a      	mov	r2, r3
 800c256:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c25a:	4313      	orrs	r3, r2
 800c25c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f7ff fd76 	bl	800bd52 <VL53L0X_device_read_strobe>
 800c266:	4603      	mov	r3, r0
 800c268:	461a      	mov	r2, r3
 800c26a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c26e:	4313      	orrs	r3, r2
 800c270:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c274:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c278:	461a      	mov	r2, r3
 800c27a:	2190      	movs	r1, #144	; 0x90
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f002 f9f7 	bl	800e670 <VL53L0X_RdDWord>
 800c282:	4603      	mov	r3, r0
 800c284:	461a      	mov	r2, r3
 800c286:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c28a:	4313      	orrs	r3, r2
 800c28c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800c290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c292:	0e9b      	lsrs	r3, r3, #26
 800c294:	b2db      	uxtb	r3, r3
 800c296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c29a:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800c29c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c2a0:	4413      	add	r3, r2
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800c2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a8:	0cdb      	lsrs	r3, r3, #19
 800c2aa:	b2db      	uxtb	r3, r3
 800c2ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800c2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b6:	0b1b      	lsrs	r3, r3, #12
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2be:	b2db      	uxtb	r3, r3
 800c2c0:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800c2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c4:	095b      	lsrs	r3, r3, #5
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800c2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	b2db      	uxtb	r3, r3
 800c2d8:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800c2e2:	227a      	movs	r2, #122	; 0x7a
 800c2e4:	2194      	movs	r1, #148	; 0x94
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f002 f906 	bl	800e4f8 <VL53L0X_WrByte>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f7ff fd29 	bl	800bd52 <VL53L0X_device_read_strobe>
 800c300:	4603      	mov	r3, r0
 800c302:	461a      	mov	r2, r3
 800c304:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c308:	4313      	orrs	r3, r2
 800c30a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c30e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c312:	461a      	mov	r2, r3
 800c314:	2190      	movs	r1, #144	; 0x90
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f002 f9aa 	bl	800e670 <VL53L0X_RdDWord>
 800c31c:	4603      	mov	r3, r0
 800c31e:	461a      	mov	r2, r3
 800c320:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c324:	4313      	orrs	r3, r2
 800c326:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800c32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32c:	0f9b      	lsrs	r3, r3, #30
 800c32e:	b2db      	uxtb	r3, r3
 800c330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c334:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800c336:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c33a:	4413      	add	r3, r2
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800c340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c342:	0ddb      	lsrs	r3, r3, #23
 800c344:	b2db      	uxtb	r3, r3
 800c346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800c34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c350:	0c1b      	lsrs	r3, r3, #16
 800c352:	b2db      	uxtb	r3, r3
 800c354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c358:	b2db      	uxtb	r3, r3
 800c35a:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800c35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35e:	0a5b      	lsrs	r3, r3, #9
 800c360:	b2db      	uxtb	r3, r3
 800c362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c366:	b2db      	uxtb	r3, r3
 800c368:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800c36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36e:	089b      	lsrs	r3, r3, #2
 800c370:	b2db      	uxtb	r3, r3
 800c372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c376:	b2db      	uxtb	r3, r3
 800c378:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800c37c:	2300      	movs	r3, #0
 800c37e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800c382:	78fb      	ldrb	r3, [r7, #3]
 800c384:	f003 0304 	and.w	r3, r3, #4
 800c388:	2b00      	cmp	r3, #0
 800c38a:	f000 80f1 	beq.w	800c570 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800c38e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c392:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800c396:	2b00      	cmp	r3, #0
 800c398:	f040 80ea 	bne.w	800c570 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800c39c:	227b      	movs	r2, #123	; 0x7b
 800c39e:	2194      	movs	r1, #148	; 0x94
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f002 f8a9 	bl	800e4f8 <VL53L0X_WrByte>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f7ff fccc 	bl	800bd52 <VL53L0X_device_read_strobe>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	461a      	mov	r2, r3
 800c3be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800c3c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	2190      	movs	r1, #144	; 0x90
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f002 f94d 	bl	800e670 <VL53L0X_RdDWord>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	461a      	mov	r2, r3
 800c3da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800c3e4:	227c      	movs	r2, #124	; 0x7c
 800c3e6:	2194      	movs	r1, #148	; 0x94
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f002 f885 	bl	800e4f8 <VL53L0X_WrByte>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3f6:	4313      	orrs	r3, r2
 800c3f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f7ff fca8 	bl	800bd52 <VL53L0X_device_read_strobe>
 800c402:	4603      	mov	r3, r0
 800c404:	461a      	mov	r2, r3
 800c406:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c40a:	4313      	orrs	r3, r2
 800c40c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800c410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c414:	461a      	mov	r2, r3
 800c416:	2190      	movs	r1, #144	; 0x90
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f002 f929 	bl	800e670 <VL53L0X_RdDWord>
 800c41e:	4603      	mov	r3, r0
 800c420:	461a      	mov	r2, r3
 800c422:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c426:	4313      	orrs	r3, r2
 800c428:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800c42c:	2273      	movs	r2, #115	; 0x73
 800c42e:	2194      	movs	r1, #148	; 0x94
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f002 f861 	bl	800e4f8 <VL53L0X_WrByte>
 800c436:	4603      	mov	r3, r0
 800c438:	461a      	mov	r2, r3
 800c43a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c43e:	4313      	orrs	r3, r2
 800c440:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f7ff fc84 	bl	800bd52 <VL53L0X_device_read_strobe>
 800c44a:	4603      	mov	r3, r0
 800c44c:	461a      	mov	r2, r3
 800c44e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c452:	4313      	orrs	r3, r2
 800c454:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c458:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c45c:	461a      	mov	r2, r3
 800c45e:	2190      	movs	r1, #144	; 0x90
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f002 f905 	bl	800e670 <VL53L0X_RdDWord>
 800c466:	4603      	mov	r3, r0
 800c468:	461a      	mov	r2, r3
 800c46a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c46e:	4313      	orrs	r3, r2
 800c470:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800c474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c476:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800c478:	b29b      	uxth	r3, r3
 800c47a:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800c47c:	2274      	movs	r2, #116	; 0x74
 800c47e:	2194      	movs	r1, #148	; 0x94
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f002 f839 	bl	800e4f8 <VL53L0X_WrByte>
 800c486:	4603      	mov	r3, r0
 800c488:	461a      	mov	r2, r3
 800c48a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c48e:	4313      	orrs	r3, r2
 800c490:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f7ff fc5c 	bl	800bd52 <VL53L0X_device_read_strobe>
 800c49a:	4603      	mov	r3, r0
 800c49c:	461a      	mov	r2, r3
 800c49e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c4a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	2190      	movs	r1, #144	; 0x90
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f002 f8dd 	bl	800e670 <VL53L0X_RdDWord>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800c4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c6:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800c4c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800c4ce:	2275      	movs	r2, #117	; 0x75
 800c4d0:	2194      	movs	r1, #148	; 0x94
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f002 f810 	bl	800e4f8 <VL53L0X_WrByte>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	461a      	mov	r2, r3
 800c4dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f7ff fc33 	bl	800bd52 <VL53L0X_device_read_strobe>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c4fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c4fe:	461a      	mov	r2, r3
 800c500:	2190      	movs	r1, #144	; 0x90
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f002 f8b4 	bl	800e670 <VL53L0X_RdDWord>
 800c508:	4603      	mov	r3, r0
 800c50a:	461a      	mov	r2, r3
 800c50c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c510:	4313      	orrs	r3, r2
 800c512:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800c516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c518:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800c51a:	b29b      	uxth	r3, r3
 800c51c:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800c51e:	2276      	movs	r2, #118	; 0x76
 800c520:	2194      	movs	r1, #148	; 0x94
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f001 ffe8 	bl	800e4f8 <VL53L0X_WrByte>
 800c528:	4603      	mov	r3, r0
 800c52a:	461a      	mov	r2, r3
 800c52c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c530:	4313      	orrs	r3, r2
 800c532:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f7ff fc0b 	bl	800bd52 <VL53L0X_device_read_strobe>
 800c53c:	4603      	mov	r3, r0
 800c53e:	461a      	mov	r2, r3
 800c540:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c544:	4313      	orrs	r3, r2
 800c546:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c54a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c54e:	461a      	mov	r2, r3
 800c550:	2190      	movs	r1, #144	; 0x90
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f002 f88c 	bl	800e670 <VL53L0X_RdDWord>
 800c558:	4603      	mov	r3, r0
 800c55a:	461a      	mov	r2, r3
 800c55c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c560:	4313      	orrs	r3, r2
 800c562:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800c566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c568:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800c56a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c56c:	4313      	orrs	r3, r2
 800c56e:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800c570:	2200      	movs	r2, #0
 800c572:	2181      	movs	r1, #129	; 0x81
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f001 ffbf 	bl	800e4f8 <VL53L0X_WrByte>
 800c57a:	4603      	mov	r3, r0
 800c57c:	461a      	mov	r2, r3
 800c57e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c582:	4313      	orrs	r3, r2
 800c584:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800c588:	2206      	movs	r2, #6
 800c58a:	21ff      	movs	r1, #255	; 0xff
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f001 ffb3 	bl	800e4f8 <VL53L0X_WrByte>
 800c592:	4603      	mov	r3, r0
 800c594:	461a      	mov	r2, r3
 800c596:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c59a:	4313      	orrs	r3, r2
 800c59c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800c5a0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	2183      	movs	r1, #131	; 0x83
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f002 f823 	bl	800e5f4 <VL53L0X_RdByte>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800c5bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c5c0:	f023 0304 	bic.w	r3, r3, #4
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	2183      	movs	r1, #131	; 0x83
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f001 ff94 	bl	800e4f8 <VL53L0X_WrByte>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c5de:	2201      	movs	r2, #1
 800c5e0:	21ff      	movs	r1, #255	; 0xff
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f001 ff88 	bl	800e4f8 <VL53L0X_WrByte>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	2100      	movs	r1, #0
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f001 ff7c 	bl	800e4f8 <VL53L0X_WrByte>
 800c600:	4603      	mov	r3, r0
 800c602:	461a      	mov	r2, r3
 800c604:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c608:	4313      	orrs	r3, r2
 800c60a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c60e:	2200      	movs	r2, #0
 800c610:	21ff      	movs	r1, #255	; 0xff
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f001 ff70 	bl	800e4f8 <VL53L0X_WrByte>
 800c618:	4603      	mov	r3, r0
 800c61a:	461a      	mov	r2, r3
 800c61c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c620:	4313      	orrs	r3, r2
 800c622:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c626:	2200      	movs	r2, #0
 800c628:	2180      	movs	r1, #128	; 0x80
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f001 ff64 	bl	800e4f8 <VL53L0X_WrByte>
 800c630:	4603      	mov	r3, r0
 800c632:	461a      	mov	r2, r3
 800c634:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c638:	4313      	orrs	r3, r2
 800c63a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800c63e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800c642:	2b00      	cmp	r3, #0
 800c644:	f040 808f 	bne.w	800c766 <VL53L0X_get_info_from_device+0x98e>
 800c648:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c64c:	2b07      	cmp	r3, #7
 800c64e:	f000 808a 	beq.w	800c766 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800c652:	78fb      	ldrb	r3, [r7, #3]
 800c654:	f003 0301 	and.w	r3, r3, #1
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d024      	beq.n	800c6a6 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800c65c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c660:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800c664:	2b00      	cmp	r3, #0
 800c666:	d11e      	bne.n	800c6a6 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800c66e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800c678:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800c67c:	2300      	movs	r3, #0
 800c67e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c680:	e00e      	b.n	800c6a0 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800c682:	f107 0208 	add.w	r2, r7, #8
 800c686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c688:	4413      	add	r3, r2
 800c68a:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800c68c:	687a      	ldr	r2, [r7, #4]
 800c68e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c690:	4413      	add	r3, r2
 800c692:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800c696:	460a      	mov	r2, r1
 800c698:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800c69a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c69c:	3301      	adds	r3, #1
 800c69e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6a2:	2b05      	cmp	r3, #5
 800c6a4:	dded      	ble.n	800c682 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800c6a6:	78fb      	ldrb	r3, [r7, #3]
 800c6a8:	f003 0302 	and.w	r3, r3, #2
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d018      	beq.n	800c6e2 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800c6b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c6b4:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d112      	bne.n	800c6e2 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c6bc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c6c6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	33f3      	adds	r3, #243	; 0xf3
 800c6d4:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800c6d6:	f107 0310 	add.w	r3, r7, #16
 800c6da:	4619      	mov	r1, r3
 800c6dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c6de:	f007 fe13 	bl	8014308 <strcpy>

		}

		if (((option & 4) == 4) &&
 800c6e2:	78fb      	ldrb	r3, [r7, #3]
 800c6e4:	f003 0304 	and.w	r3, r3, #4
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d030      	beq.n	800c74e <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800c6ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c6f0:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d12a      	bne.n	800c74e <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c6f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800c708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c70a:	025b      	lsls	r3, r3, #9
 800c70c:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c712:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800c716:	2300      	movs	r3, #0
 800c718:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800c71c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d011      	beq.n	800c746 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800c722:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c726:	1ad3      	subs	r3, r2, r3
 800c728:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800c72a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c72c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c730:	fb02 f303 	mul.w	r3, r2, r3
 800c734:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800c736:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800c73a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800c73e:	425b      	negs	r3, r3
 800c740:	b29b      	uxth	r3, r3
 800c742:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800c746:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800c74e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800c752:	78fb      	ldrb	r3, [r7, #3]
 800c754:	4313      	orrs	r3, r2
 800c756:	b2db      	uxtb	r3, r3
 800c758:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800c75c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c766:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3760      	adds	r7, #96	; 0x60
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}

0800c772 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800c772:	b480      	push	{r7}
 800c774:	b087      	sub	sp, #28
 800c776:	af00      	add	r7, sp, #0
 800c778:	6078      	str	r0, [r7, #4]
 800c77a:	460b      	mov	r3, r1
 800c77c:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800c77e:	f240 6277 	movw	r2, #1655	; 0x677
 800c782:	f04f 0300 	mov.w	r3, #0
 800c786:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800c78a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800c78e:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800c790:	78fb      	ldrb	r3, [r7, #3]
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800c798:	693a      	ldr	r2, [r7, #16]
 800c79a:	fb02 f303 	mul.w	r3, r2, r3
 800c79e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800c7a0:	68bb      	ldr	r3, [r7, #8]
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	371c      	adds	r7, #28
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr

0800c7ae <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800c7ae:	b480      	push	{r7}
 800c7b0:	b087      	sub	sp, #28
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d017      	beq.n	800c7f8 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	3b01      	subs	r3, #1
 800c7cc:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c7ce:	e005      	b.n	800c7dc <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	085b      	lsrs	r3, r3, #1
 800c7d4:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800c7d6:	89fb      	ldrh	r3, [r7, #14]
 800c7d8:	3301      	adds	r3, #1
 800c7da:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d1f4      	bne.n	800c7d0 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800c7e6:	89fb      	ldrh	r3, [r7, #14]
 800c7e8:	021b      	lsls	r3, r3, #8
 800c7ea:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	b2db      	uxtb	r3, r3
 800c7f2:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800c7f4:	4413      	add	r3, r2
 800c7f6:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800c7f8:	8afb      	ldrh	r3, [r7, #22]

}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	371c      	adds	r7, #28
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr

0800c806 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800c806:	b480      	push	{r7}
 800c808:	b085      	sub	sp, #20
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	4603      	mov	r3, r0
 800c80e:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800c810:	2300      	movs	r3, #0
 800c812:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c814:	88fb      	ldrh	r3, [r7, #6]
 800c816:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800c818:	88fa      	ldrh	r2, [r7, #6]
 800c81a:	0a12      	lsrs	r2, r2, #8
 800c81c:	b292      	uxth	r2, r2
 800c81e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c820:	3301      	adds	r3, #1
 800c822:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800c824:	68fb      	ldr	r3, [r7, #12]
}
 800c826:	4618      	mov	r0, r3
 800c828:	3714      	adds	r7, #20
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr
	...

0800c834 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b088      	sub	sp, #32
 800c838:	af00      	add	r7, sp, #0
 800c83a:	60f8      	str	r0, [r7, #12]
 800c83c:	60b9      	str	r1, [r7, #8]
 800c83e:	4613      	mov	r3, r2
 800c840:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800c842:	2300      	movs	r3, #0
 800c844:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800c846:	79fb      	ldrb	r3, [r7, #7]
 800c848:	4619      	mov	r1, r3
 800c84a:	68f8      	ldr	r0, [r7, #12]
 800c84c:	f7ff ff91 	bl	800c772 <VL53L0X_calc_macro_period_ps>
 800c850:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800c852:	69bb      	ldr	r3, [r7, #24]
 800c854:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c858:	4a0a      	ldr	r2, [pc, #40]	; (800c884 <VL53L0X_calc_timeout_mclks+0x50>)
 800c85a:	fba2 2303 	umull	r2, r3, r2, r3
 800c85e:	099b      	lsrs	r3, r3, #6
 800c860:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c868:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	085b      	lsrs	r3, r3, #1
 800c870:	441a      	add	r2, r3
	timeout_period_mclks =
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	fbb2 f3f3 	udiv	r3, r2, r3
 800c878:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800c87a:	69fb      	ldr	r3, [r7, #28]
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3720      	adds	r7, #32
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}
 800c884:	10624dd3 	.word	0x10624dd3

0800c888 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b086      	sub	sp, #24
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	460b      	mov	r3, r1
 800c892:	807b      	strh	r3, [r7, #2]
 800c894:	4613      	mov	r3, r2
 800c896:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800c898:	2300      	movs	r3, #0
 800c89a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800c89c:	787b      	ldrb	r3, [r7, #1]
 800c89e:	4619      	mov	r1, r3
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f7ff ff66 	bl	800c772 <VL53L0X_calc_macro_period_ps>
 800c8a6:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c8ae:	4a0a      	ldr	r2, [pc, #40]	; (800c8d8 <VL53L0X_calc_timeout_us+0x50>)
 800c8b0:	fba2 2303 	umull	r2, r3, r2, r3
 800c8b4:	099b      	lsrs	r3, r3, #6
 800c8b6:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800c8b8:	887b      	ldrh	r3, [r7, #2]
 800c8ba:	68fa      	ldr	r2, [r7, #12]
 800c8bc:	fb02 f303 	mul.w	r3, r2, r3
 800c8c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800c8c4:	4a04      	ldr	r2, [pc, #16]	; (800c8d8 <VL53L0X_calc_timeout_us+0x50>)
 800c8c6:	fba2 2303 	umull	r2, r3, r2, r3
 800c8ca:	099b      	lsrs	r3, r3, #6
 800c8cc:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800c8ce:	697b      	ldr	r3, [r7, #20]
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3718      	adds	r7, #24
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}
 800c8d8:	10624dd3 	.word	0x10624dd3

0800c8dc <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b08c      	sub	sp, #48	; 0x30
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	460b      	mov	r3, r1
 800c8e6:	607a      	str	r2, [r7, #4]
 800c8e8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800c8fe:	2300      	movs	r3, #0
 800c900:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800c902:	7afb      	ldrb	r3, [r7, #11]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d005      	beq.n	800c914 <get_sequence_step_timeout+0x38>
 800c908:	7afb      	ldrb	r3, [r7, #11]
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d002      	beq.n	800c914 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800c90e:	7afb      	ldrb	r3, [r7, #11]
 800c910:	2b02      	cmp	r3, #2
 800c912:	d128      	bne.n	800c966 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c914:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c918:	461a      	mov	r2, r3
 800c91a:	2100      	movs	r1, #0
 800c91c:	68f8      	ldr	r0, [r7, #12]
 800c91e:	f7fd fa11 	bl	8009d44 <VL53L0X_GetVcselPulsePeriod>
 800c922:	4603      	mov	r3, r0
 800c924:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800c928:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d109      	bne.n	800c944 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800c930:	f107 0320 	add.w	r3, r7, #32
 800c934:	461a      	mov	r2, r3
 800c936:	2146      	movs	r1, #70	; 0x46
 800c938:	68f8      	ldr	r0, [r7, #12]
 800c93a:	f001 fe5b 	bl	800e5f4 <VL53L0X_RdByte>
 800c93e:	4603      	mov	r3, r0
 800c940:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800c944:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c948:	b29b      	uxth	r3, r3
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7ff ff5b 	bl	800c806 <VL53L0X_decode_timeout>
 800c950:	4603      	mov	r3, r0
 800c952:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c954:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c958:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c95a:	4619      	mov	r1, r3
 800c95c:	68f8      	ldr	r0, [r7, #12]
 800c95e:	f7ff ff93 	bl	800c888 <VL53L0X_calc_timeout_us>
 800c962:	62b8      	str	r0, [r7, #40]	; 0x28
 800c964:	e092      	b.n	800ca8c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800c966:	7afb      	ldrb	r3, [r7, #11]
 800c968:	2b03      	cmp	r3, #3
 800c96a:	d135      	bne.n	800c9d8 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c96c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c970:	461a      	mov	r2, r3
 800c972:	2100      	movs	r1, #0
 800c974:	68f8      	ldr	r0, [r7, #12]
 800c976:	f7fd f9e5 	bl	8009d44 <VL53L0X_GetVcselPulsePeriod>
 800c97a:	4603      	mov	r3, r0
 800c97c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800c980:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c984:	2b00      	cmp	r3, #0
 800c986:	f040 8081 	bne.w	800ca8c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c98a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c98e:	461a      	mov	r2, r3
 800c990:	2100      	movs	r1, #0
 800c992:	68f8      	ldr	r0, [r7, #12]
 800c994:	f7fd f9d6 	bl	8009d44 <VL53L0X_GetVcselPulsePeriod>
 800c998:	4603      	mov	r3, r0
 800c99a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800c99e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d109      	bne.n	800c9ba <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800c9a6:	f107 031e 	add.w	r3, r7, #30
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	2151      	movs	r1, #81	; 0x51
 800c9ae:	68f8      	ldr	r0, [r7, #12]
 800c9b0:	f001 fe3f 	bl	800e632 <VL53L0X_RdWord>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c9ba:	8bfb      	ldrh	r3, [r7, #30]
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7ff ff22 	bl	800c806 <VL53L0X_decode_timeout>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c9c6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c9ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c9cc:	4619      	mov	r1, r3
 800c9ce:	68f8      	ldr	r0, [r7, #12]
 800c9d0:	f7ff ff5a 	bl	800c888 <VL53L0X_calc_timeout_us>
 800c9d4:	62b8      	str	r0, [r7, #40]	; 0x28
 800c9d6:	e059      	b.n	800ca8c <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800c9d8:	7afb      	ldrb	r3, [r7, #11]
 800c9da:	2b04      	cmp	r3, #4
 800c9dc:	d156      	bne.n	800ca8c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c9de:	f107 0314 	add.w	r3, r7, #20
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	68f8      	ldr	r0, [r7, #12]
 800c9e6:	f7fd fab9 	bl	8009f5c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800c9ee:	7dfb      	ldrb	r3, [r7, #23]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d01d      	beq.n	800ca30 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c9f4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	2100      	movs	r1, #0
 800c9fc:	68f8      	ldr	r0, [r7, #12]
 800c9fe:	f7fd f9a1 	bl	8009d44 <VL53L0X_GetVcselPulsePeriod>
 800ca02:	4603      	mov	r3, r0
 800ca04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800ca08:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d10f      	bne.n	800ca30 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800ca10:	f107 031e 	add.w	r3, r7, #30
 800ca14:	461a      	mov	r2, r3
 800ca16:	2151      	movs	r1, #81	; 0x51
 800ca18:	68f8      	ldr	r0, [r7, #12]
 800ca1a:	f001 fe0a 	bl	800e632 <VL53L0X_RdWord>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800ca24:	8bfb      	ldrh	r3, [r7, #30]
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7ff feed 	bl	800c806 <VL53L0X_decode_timeout>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800ca30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d109      	bne.n	800ca4c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ca38:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	2101      	movs	r1, #1
 800ca40:	68f8      	ldr	r0, [r7, #12]
 800ca42:	f7fd f97f 	bl	8009d44 <VL53L0X_GetVcselPulsePeriod>
 800ca46:	4603      	mov	r3, r0
 800ca48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800ca4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d10f      	bne.n	800ca74 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800ca54:	f107 031c 	add.w	r3, r7, #28
 800ca58:	461a      	mov	r2, r3
 800ca5a:	2171      	movs	r1, #113	; 0x71
 800ca5c:	68f8      	ldr	r0, [r7, #12]
 800ca5e:	f001 fde8 	bl	800e632 <VL53L0X_RdWord>
 800ca62:	4603      	mov	r3, r0
 800ca64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800ca68:	8bbb      	ldrh	r3, [r7, #28]
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7ff fecb 	bl	800c806 <VL53L0X_decode_timeout>
 800ca70:	4603      	mov	r3, r0
 800ca72:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800ca74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ca76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ca78:	1ad3      	subs	r3, r2, r3
 800ca7a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800ca7c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ca80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca82:	4619      	mov	r1, r3
 800ca84:	68f8      	ldr	r0, [r7, #12]
 800ca86:	f7ff feff 	bl	800c888 <VL53L0X_calc_timeout_us>
 800ca8a:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca90:	601a      	str	r2, [r3, #0]

	return Status;
 800ca92:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3730      	adds	r7, #48	; 0x30
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b08a      	sub	sp, #40	; 0x28
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	60f8      	str	r0, [r7, #12]
 800caa6:	460b      	mov	r3, r1
 800caa8:	607a      	str	r2, [r7, #4]
 800caaa:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800caac:	2300      	movs	r3, #0
 800caae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800cab2:	7afb      	ldrb	r3, [r7, #11]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d005      	beq.n	800cac4 <set_sequence_step_timeout+0x26>
 800cab8:	7afb      	ldrb	r3, [r7, #11]
 800caba:	2b01      	cmp	r3, #1
 800cabc:	d002      	beq.n	800cac4 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800cabe:	7afb      	ldrb	r3, [r7, #11]
 800cac0:	2b02      	cmp	r3, #2
 800cac2:	d138      	bne.n	800cb36 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cac4:	f107 031b 	add.w	r3, r7, #27
 800cac8:	461a      	mov	r2, r3
 800caca:	2100      	movs	r1, #0
 800cacc:	68f8      	ldr	r0, [r7, #12]
 800cace:	f7fd f939 	bl	8009d44 <VL53L0X_GetVcselPulsePeriod>
 800cad2:	4603      	mov	r3, r0
 800cad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800cad8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d11a      	bne.n	800cb16 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800cae0:	7efb      	ldrb	r3, [r7, #27]
 800cae2:	461a      	mov	r2, r3
 800cae4:	6879      	ldr	r1, [r7, #4]
 800cae6:	68f8      	ldr	r0, [r7, #12]
 800cae8:	f7ff fea4 	bl	800c834 <VL53L0X_calc_timeout_mclks>
 800caec:	4603      	mov	r3, r0
 800caee:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800caf0:	8bbb      	ldrh	r3, [r7, #28]
 800caf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800caf6:	d903      	bls.n	800cb00 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800caf8:	23ff      	movs	r3, #255	; 0xff
 800cafa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cafe:	e004      	b.n	800cb0a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800cb00:	8bbb      	ldrh	r3, [r7, #28]
 800cb02:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800cb04:	3b01      	subs	r3, #1
 800cb06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cb0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb0e:	b29a      	uxth	r2, r3
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800cb16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	f040 80ab 	bne.w	800cc76 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800cb20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb24:	461a      	mov	r2, r3
 800cb26:	2146      	movs	r1, #70	; 0x46
 800cb28:	68f8      	ldr	r0, [r7, #12]
 800cb2a:	f001 fce5 	bl	800e4f8 <VL53L0X_WrByte>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800cb34:	e09f      	b.n	800cc76 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800cb36:	7afb      	ldrb	r3, [r7, #11]
 800cb38:	2b03      	cmp	r3, #3
 800cb3a:	d135      	bne.n	800cba8 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800cb3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d11b      	bne.n	800cb7c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cb44:	f107 031b 	add.w	r3, r7, #27
 800cb48:	461a      	mov	r2, r3
 800cb4a:	2100      	movs	r1, #0
 800cb4c:	68f8      	ldr	r0, [r7, #12]
 800cb4e:	f7fd f8f9 	bl	8009d44 <VL53L0X_GetVcselPulsePeriod>
 800cb52:	4603      	mov	r3, r0
 800cb54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800cb58:	7efb      	ldrb	r3, [r7, #27]
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	6879      	ldr	r1, [r7, #4]
 800cb5e:	68f8      	ldr	r0, [r7, #12]
 800cb60:	f7ff fe68 	bl	800c834 <VL53L0X_calc_timeout_mclks>
 800cb64:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800cb66:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800cb68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7ff fe1f 	bl	800c7ae <VL53L0X_encode_timeout>
 800cb70:	4603      	mov	r3, r0
 800cb72:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cb74:	8b3a      	ldrh	r2, [r7, #24]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800cb7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d108      	bne.n	800cb96 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800cb84:	8b3b      	ldrh	r3, [r7, #24]
 800cb86:	461a      	mov	r2, r3
 800cb88:	2151      	movs	r1, #81	; 0x51
 800cb8a:	68f8      	ldr	r0, [r7, #12]
 800cb8c:	f001 fcd4 	bl	800e538 <VL53L0X_WrWord>
 800cb90:	4603      	mov	r3, r0
 800cb92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800cb96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d16b      	bne.n	800cc76 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	687a      	ldr	r2, [r7, #4]
 800cba2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800cba6:	e066      	b.n	800cc76 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800cba8:	7afb      	ldrb	r3, [r7, #11]
 800cbaa:	2b04      	cmp	r3, #4
 800cbac:	d160      	bne.n	800cc70 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800cbae:	f107 0310 	add.w	r3, r7, #16
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	68f8      	ldr	r0, [r7, #12]
 800cbb6:	f7fd f9d1 	bl	8009f5c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800cbbe:	7cfb      	ldrb	r3, [r7, #19]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d01d      	beq.n	800cc00 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cbc4:	f107 031b 	add.w	r3, r7, #27
 800cbc8:	461a      	mov	r2, r3
 800cbca:	2100      	movs	r1, #0
 800cbcc:	68f8      	ldr	r0, [r7, #12]
 800cbce:	f7fd f8b9 	bl	8009d44 <VL53L0X_GetVcselPulsePeriod>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800cbd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d10f      	bne.n	800cc00 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800cbe0:	f107 0318 	add.w	r3, r7, #24
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	2151      	movs	r1, #81	; 0x51
 800cbe8:	68f8      	ldr	r0, [r7, #12]
 800cbea:	f001 fd22 	bl	800e632 <VL53L0X_RdWord>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800cbf4:	8b3b      	ldrh	r3, [r7, #24]
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f7ff fe05 	bl	800c806 <VL53L0X_decode_timeout>
 800cbfc:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800cbfe:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800cc00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d109      	bne.n	800cc1c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cc08:	f107 031b 	add.w	r3, r7, #27
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	2101      	movs	r1, #1
 800cc10:	68f8      	ldr	r0, [r7, #12]
 800cc12:	f7fd f897 	bl	8009d44 <VL53L0X_GetVcselPulsePeriod>
 800cc16:	4603      	mov	r3, r0
 800cc18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800cc1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d128      	bne.n	800cc76 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800cc24:	7efb      	ldrb	r3, [r7, #27]
 800cc26:	461a      	mov	r2, r3
 800cc28:	6879      	ldr	r1, [r7, #4]
 800cc2a:	68f8      	ldr	r0, [r7, #12]
 800cc2c:	f7ff fe02 	bl	800c834 <VL53L0X_calc_timeout_mclks>
 800cc30:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800cc32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc34:	6a3a      	ldr	r2, [r7, #32]
 800cc36:	4413      	add	r3, r2
 800cc38:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800cc3a:	6a38      	ldr	r0, [r7, #32]
 800cc3c:	f7ff fdb7 	bl	800c7ae <VL53L0X_encode_timeout>
 800cc40:	4603      	mov	r3, r0
 800cc42:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800cc44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d108      	bne.n	800cc5e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800cc4c:	8bfb      	ldrh	r3, [r7, #30]
 800cc4e:	461a      	mov	r2, r3
 800cc50:	2171      	movs	r1, #113	; 0x71
 800cc52:	68f8      	ldr	r0, [r7, #12]
 800cc54:	f001 fc70 	bl	800e538 <VL53L0X_WrWord>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800cc5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d107      	bne.n	800cc76 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	687a      	ldr	r2, [r7, #4]
 800cc6a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800cc6e:	e002      	b.n	800cc76 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cc70:	23fc      	movs	r3, #252	; 0xfc
 800cc72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800cc76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3728      	adds	r7, #40	; 0x28
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}

0800cc82 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b086      	sub	sp, #24
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	60f8      	str	r0, [r7, #12]
 800cc8a:	460b      	mov	r3, r1
 800cc8c:	607a      	str	r2, [r7, #4]
 800cc8e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cc90:	2300      	movs	r3, #0
 800cc92:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800cc94:	7afb      	ldrb	r3, [r7, #11]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d002      	beq.n	800cca0 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800cc9a:	2b01      	cmp	r3, #1
 800cc9c:	d00a      	beq.n	800ccb4 <VL53L0X_get_vcsel_pulse_period+0x32>
 800cc9e:	e013      	b.n	800ccc8 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800cca0:	f107 0316 	add.w	r3, r7, #22
 800cca4:	461a      	mov	r2, r3
 800cca6:	2150      	movs	r1, #80	; 0x50
 800cca8:	68f8      	ldr	r0, [r7, #12]
 800ccaa:	f001 fca3 	bl	800e5f4 <VL53L0X_RdByte>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ccb2:	e00b      	b.n	800cccc <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800ccb4:	f107 0316 	add.w	r3, r7, #22
 800ccb8:	461a      	mov	r2, r3
 800ccba:	2170      	movs	r1, #112	; 0x70
 800ccbc:	68f8      	ldr	r0, [r7, #12]
 800ccbe:	f001 fc99 	bl	800e5f4 <VL53L0X_RdByte>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ccc6:	e001      	b.n	800cccc <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ccc8:	23fc      	movs	r3, #252	; 0xfc
 800ccca:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800cccc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d107      	bne.n	800cce4 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800ccd4:	7dbb      	ldrb	r3, [r7, #22]
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7fe fff4 	bl	800bcc4 <VL53L0X_decode_vcsel_period>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	701a      	strb	r2, [r3, #0]

	return Status;
 800cce4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3718      	adds	r7, #24
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b092      	sub	sp, #72	; 0x48
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800cd00:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800cd04:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800cd06:	f240 7376 	movw	r3, #1910	; 0x776
 800cd0a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800cd0c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800cd10:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800cd12:	f44f 7325 	mov.w	r3, #660	; 0x294
 800cd16:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800cd18:	f240 234e 	movw	r3, #590	; 0x24e
 800cd1c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800cd1e:	f240 23b2 	movw	r3, #690	; 0x2b2
 800cd22:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800cd24:	f44f 7325 	mov.w	r3, #660	; 0x294
 800cd28:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800cd2a:	f240 2326 	movw	r3, #550	; 0x226
 800cd2e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800cd30:	2300      	movs	r3, #0
 800cd32:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800cd34:	f644 6320 	movw	r3, #20000	; 0x4e20
 800cd38:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800cd3e:	683a      	ldr	r2, [r7, #0]
 800cd40:	6a3b      	ldr	r3, [r7, #32]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d205      	bcs.n	800cd52 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cd46:	23fc      	movs	r3, #252	; 0xfc
 800cd48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800cd4c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cd50:	e0aa      	b.n	800cea8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800cd52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd56:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800cd58:	683a      	ldr	r2, [r7, #0]
 800cd5a:	1ad3      	subs	r3, r2, r3
 800cd5c:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800cd5e:	f107 0314 	add.w	r3, r7, #20
 800cd62:	4619      	mov	r1, r3
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f7fd f8f9 	bl	8009f5c <VL53L0X_GetSequenceStepEnables>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800cd70:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d15b      	bne.n	800ce30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800cd78:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d105      	bne.n	800cd8a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800cd7e:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d102      	bne.n	800cd8a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800cd84:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d052      	beq.n	800ce30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800cd8a:	f107 0310 	add.w	r3, r7, #16
 800cd8e:	461a      	mov	r2, r3
 800cd90:	2102      	movs	r1, #2
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f7ff fda2 	bl	800c8dc <get_sequence_step_timeout>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800cd9e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d002      	beq.n	800cdac <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800cda6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cdaa:	e07d      	b.n	800cea8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800cdac:	7d3b      	ldrb	r3, [r7, #20]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d00f      	beq.n	800cdd2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800cdb2:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800cdb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdb6:	4413      	add	r3, r2
 800cdb8:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800cdba:	69fa      	ldr	r2, [r7, #28]
 800cdbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d204      	bcs.n	800cdcc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800cdc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cdc4:	69fb      	ldr	r3, [r7, #28]
 800cdc6:	1ad3      	subs	r3, r2, r3
 800cdc8:	643b      	str	r3, [r7, #64]	; 0x40
 800cdca:	e002      	b.n	800cdd2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cdcc:	23fc      	movs	r3, #252	; 0xfc
 800cdce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800cdd2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d002      	beq.n	800cde0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800cdda:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cdde:	e063      	b.n	800cea8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800cde0:	7dbb      	ldrb	r3, [r7, #22]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d011      	beq.n	800ce0a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800cde6:	693a      	ldr	r2, [r7, #16]
 800cde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdea:	4413      	add	r3, r2
 800cdec:	005b      	lsls	r3, r3, #1
 800cdee:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800cdf0:	69fa      	ldr	r2, [r7, #28]
 800cdf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d204      	bcs.n	800ce02 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800cdf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cdfa:	69fb      	ldr	r3, [r7, #28]
 800cdfc:	1ad3      	subs	r3, r2, r3
 800cdfe:	643b      	str	r3, [r7, #64]	; 0x40
 800ce00:	e016      	b.n	800ce30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ce02:	23fc      	movs	r3, #252	; 0xfc
 800ce04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ce08:	e012      	b.n	800ce30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800ce0a:	7d7b      	ldrb	r3, [r7, #21]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d00f      	beq.n	800ce30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce14:	4413      	add	r3, r2
 800ce16:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ce18:	69fa      	ldr	r2, [r7, #28]
 800ce1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d204      	bcs.n	800ce2a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ce20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	1ad3      	subs	r3, r2, r3
 800ce26:	643b      	str	r3, [r7, #64]	; 0x40
 800ce28:	e002      	b.n	800ce30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ce2a:	23fc      	movs	r3, #252	; 0xfc
 800ce2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800ce30:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d002      	beq.n	800ce3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ce38:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ce3c:	e034      	b.n	800cea8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800ce3e:	7dfb      	ldrb	r3, [r7, #23]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d019      	beq.n	800ce78 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800ce44:	f107 030c 	add.w	r3, r7, #12
 800ce48:	461a      	mov	r2, r3
 800ce4a:	2103      	movs	r1, #3
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f7ff fd45 	bl	800c8dc <get_sequence_step_timeout>
 800ce52:	4603      	mov	r3, r0
 800ce54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce5c:	4413      	add	r3, r2
 800ce5e:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ce60:	69fa      	ldr	r2, [r7, #28]
 800ce62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d204      	bcs.n	800ce72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800ce68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce6a:	69fb      	ldr	r3, [r7, #28]
 800ce6c:	1ad3      	subs	r3, r2, r3
 800ce6e:	643b      	str	r3, [r7, #64]	; 0x40
 800ce70:	e002      	b.n	800ce78 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ce72:	23fc      	movs	r3, #252	; 0xfc
 800ce74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800ce78:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d111      	bne.n	800cea4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800ce80:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d00e      	beq.n	800cea4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800ce86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8a:	1ad3      	subs	r3, r2, r3
 800ce8c:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800ce8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce90:	2104      	movs	r1, #4
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f7ff fe03 	bl	800ca9e <set_sequence_step_timeout>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	683a      	ldr	r2, [r7, #0]
 800cea2:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800cea4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3748      	adds	r7, #72	; 0x48
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b090      	sub	sp, #64	; 0x40
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ceba:	2300      	movs	r3, #0
 800cebc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800cec0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800cec4:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800cec6:	f240 7376 	movw	r3, #1910	; 0x776
 800ceca:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800cecc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ced0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800ced2:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ced6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800ced8:	f240 234e 	movw	r3, #590	; 0x24e
 800cedc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800cede:	f240 23b2 	movw	r3, #690	; 0x2b2
 800cee2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800cee4:	f44f 7325 	mov.w	r3, #660	; 0x294
 800cee8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ceea:	f240 2326 	movw	r3, #550	; 0x226
 800ceee:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800cef0:	2300      	movs	r3, #0
 800cef2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800cef4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef8:	441a      	add	r2, r3
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800cefe:	f107 0318 	add.w	r3, r7, #24
 800cf02:	4619      	mov	r1, r3
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f7fd f829 	bl	8009f5c <VL53L0X_GetSequenceStepEnables>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800cf10:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d002      	beq.n	800cf1e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800cf18:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cf1c:	e075      	b.n	800d00a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800cf1e:	7e3b      	ldrb	r3, [r7, #24]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d105      	bne.n	800cf30 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800cf24:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d102      	bne.n	800cf30 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800cf2a:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d030      	beq.n	800cf92 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800cf30:	f107 0310 	add.w	r3, r7, #16
 800cf34:	461a      	mov	r2, r3
 800cf36:	2102      	movs	r1, #2
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f7ff fccf 	bl	800c8dc <get_sequence_step_timeout>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800cf44:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d122      	bne.n	800cf92 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800cf4c:	7e3b      	ldrb	r3, [r7, #24]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d007      	beq.n	800cf62 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800cf56:	6939      	ldr	r1, [r7, #16]
 800cf58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5a:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800cf5c:	441a      	add	r2, r3
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800cf62:	7ebb      	ldrb	r3, [r7, #26]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d009      	beq.n	800cf7c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800cf6c:	6939      	ldr	r1, [r7, #16]
 800cf6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf70:	440b      	add	r3, r1
 800cf72:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800cf74:	441a      	add	r2, r3
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	601a      	str	r2, [r3, #0]
 800cf7a:	e00a      	b.n	800cf92 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800cf7c:	7e7b      	ldrb	r3, [r7, #25]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d007      	beq.n	800cf92 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800cf86:	6939      	ldr	r1, [r7, #16]
 800cf88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf8a:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800cf8c:	441a      	add	r2, r3
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800cf92:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d114      	bne.n	800cfc4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800cf9a:	7efb      	ldrb	r3, [r7, #27]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d011      	beq.n	800cfc4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800cfa0:	f107 030c 	add.w	r3, r7, #12
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	2103      	movs	r1, #3
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f7ff fc97 	bl	800c8dc <get_sequence_step_timeout>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800cfb8:	68f9      	ldr	r1, [r7, #12]
 800cfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfbc:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800cfbe:	441a      	add	r2, r3
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800cfc4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d114      	bne.n	800cff6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800cfcc:	7f3b      	ldrb	r3, [r7, #28]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d011      	beq.n	800cff6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800cfd2:	f107 0314 	add.w	r3, r7, #20
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	2104      	movs	r1, #4
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f7ff fc7e 	bl	800c8dc <get_sequence_step_timeout>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800cfea:	6979      	ldr	r1, [r7, #20]
 800cfec:	6a3b      	ldr	r3, [r7, #32]
 800cfee:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800cff0:	441a      	add	r2, r3
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800cff6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d103      	bne.n	800d006 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d006:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3740      	adds	r7, #64	; 0x40
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
	...

0800d014 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b088      	sub	sp, #32
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d01e:	2300      	movs	r3, #0
 800d020:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800d022:	2300      	movs	r3, #0
 800d024:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800d026:	e0c6      	b.n	800d1b6 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	683a      	ldr	r2, [r7, #0]
 800d02c:	4413      	add	r3, r2
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	74fb      	strb	r3, [r7, #19]
		Index++;
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	3301      	adds	r3, #1
 800d036:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800d038:	7cfb      	ldrb	r3, [r7, #19]
 800d03a:	2bff      	cmp	r3, #255	; 0xff
 800d03c:	f040 808d 	bne.w	800d15a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	683a      	ldr	r2, [r7, #0]
 800d044:	4413      	add	r3, r2
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	747b      	strb	r3, [r7, #17]
			Index++;
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	3301      	adds	r3, #1
 800d04e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800d050:	7c7b      	ldrb	r3, [r7, #17]
 800d052:	2b03      	cmp	r3, #3
 800d054:	d87e      	bhi.n	800d154 <VL53L0X_load_tuning_settings+0x140>
 800d056:	a201      	add	r2, pc, #4	; (adr r2, 800d05c <VL53L0X_load_tuning_settings+0x48>)
 800d058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d05c:	0800d06d 	.word	0x0800d06d
 800d060:	0800d0a7 	.word	0x0800d0a7
 800d064:	0800d0e1 	.word	0x0800d0e1
 800d068:	0800d11b 	.word	0x0800d11b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	683a      	ldr	r2, [r7, #0]
 800d070:	4413      	add	r3, r2
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	743b      	strb	r3, [r7, #16]
				Index++;
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	3301      	adds	r3, #1
 800d07a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	683a      	ldr	r2, [r7, #0]
 800d080:	4413      	add	r3, r2
 800d082:	781b      	ldrb	r3, [r3, #0]
 800d084:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	3301      	adds	r3, #1
 800d08a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d08c:	7c3b      	ldrb	r3, [r7, #16]
 800d08e:	b29b      	uxth	r3, r3
 800d090:	021b      	lsls	r3, r3, #8
 800d092:	b29a      	uxth	r2, r3
 800d094:	7bfb      	ldrb	r3, [r7, #15]
 800d096:	b29b      	uxth	r3, r3
 800d098:	4413      	add	r3, r2
 800d09a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	89ba      	ldrh	r2, [r7, #12]
 800d0a0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800d0a4:	e087      	b.n	800d1b6 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	683a      	ldr	r2, [r7, #0]
 800d0aa:	4413      	add	r3, r2
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	743b      	strb	r3, [r7, #16]
				Index++;
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	683a      	ldr	r2, [r7, #0]
 800d0ba:	4413      	add	r3, r2
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d0c6:	7c3b      	ldrb	r3, [r7, #16]
 800d0c8:	b29b      	uxth	r3, r3
 800d0ca:	021b      	lsls	r3, r3, #8
 800d0cc:	b29a      	uxth	r2, r3
 800d0ce:	7bfb      	ldrb	r3, [r7, #15]
 800d0d0:	b29b      	uxth	r3, r3
 800d0d2:	4413      	add	r3, r2
 800d0d4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	89ba      	ldrh	r2, [r7, #12]
 800d0da:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800d0de:	e06a      	b.n	800d1b6 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	683a      	ldr	r2, [r7, #0]
 800d0e4:	4413      	add	r3, r2
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	743b      	strb	r3, [r7, #16]
				Index++;
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	683a      	ldr	r2, [r7, #0]
 800d0f4:	4413      	add	r3, r2
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d100:	7c3b      	ldrb	r3, [r7, #16]
 800d102:	b29b      	uxth	r3, r3
 800d104:	021b      	lsls	r3, r3, #8
 800d106:	b29a      	uxth	r2, r3
 800d108:	7bfb      	ldrb	r3, [r7, #15]
 800d10a:	b29b      	uxth	r3, r3
 800d10c:	4413      	add	r3, r2
 800d10e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	89ba      	ldrh	r2, [r7, #12]
 800d114:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800d118:	e04d      	b.n	800d1b6 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	683a      	ldr	r2, [r7, #0]
 800d11e:	4413      	add	r3, r2
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	743b      	strb	r3, [r7, #16]
				Index++;
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	3301      	adds	r3, #1
 800d128:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	683a      	ldr	r2, [r7, #0]
 800d12e:	4413      	add	r3, r2
 800d130:	781b      	ldrb	r3, [r3, #0]
 800d132:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	3301      	adds	r3, #1
 800d138:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d13a:	7c3b      	ldrb	r3, [r7, #16]
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	021b      	lsls	r3, r3, #8
 800d140:	b29a      	uxth	r2, r3
 800d142:	7bfb      	ldrb	r3, [r7, #15]
 800d144:	b29b      	uxth	r3, r3
 800d146:	4413      	add	r3, r2
 800d148:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	89ba      	ldrh	r2, [r7, #12]
 800d14e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800d152:	e030      	b.n	800d1b6 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d154:	23fc      	movs	r3, #252	; 0xfc
 800d156:	77fb      	strb	r3, [r7, #31]
 800d158:	e02d      	b.n	800d1b6 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800d15a:	7cfb      	ldrb	r3, [r7, #19]
 800d15c:	2b04      	cmp	r3, #4
 800d15e:	d828      	bhi.n	800d1b2 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	683a      	ldr	r2, [r7, #0]
 800d164:	4413      	add	r3, r2
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	74bb      	strb	r3, [r7, #18]
			Index++;
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	3301      	adds	r3, #1
 800d16e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800d170:	2300      	movs	r3, #0
 800d172:	61bb      	str	r3, [r7, #24]
 800d174:	e00f      	b.n	800d196 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	683a      	ldr	r2, [r7, #0]
 800d17a:	4413      	add	r3, r2
 800d17c:	7819      	ldrb	r1, [r3, #0]
 800d17e:	f107 0208 	add.w	r2, r7, #8
 800d182:	69bb      	ldr	r3, [r7, #24]
 800d184:	4413      	add	r3, r2
 800d186:	460a      	mov	r2, r1
 800d188:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	3301      	adds	r3, #1
 800d18e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800d190:	69bb      	ldr	r3, [r7, #24]
 800d192:	3301      	adds	r3, #1
 800d194:	61bb      	str	r3, [r7, #24]
 800d196:	7cfb      	ldrb	r3, [r7, #19]
 800d198:	69ba      	ldr	r2, [r7, #24]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	dbeb      	blt.n	800d176 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800d19e:	7cfb      	ldrb	r3, [r7, #19]
 800d1a0:	f107 0208 	add.w	r2, r7, #8
 800d1a4:	7cb9      	ldrb	r1, [r7, #18]
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f001 f95a 	bl	800e460 <VL53L0X_WriteMulti>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	77fb      	strb	r3, [r7, #31]
 800d1b0:	e001      	b.n	800d1b6 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d1b2:	23fc      	movs	r3, #252	; 0xfc
 800d1b4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	683a      	ldr	r2, [r7, #0]
 800d1ba:	4413      	add	r3, r2
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d004      	beq.n	800d1cc <VL53L0X_load_tuning_settings+0x1b8>
 800d1c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	f43f af2e 	beq.w	800d028 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d1cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3720      	adds	r7, #32
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b088      	sub	sp, #32
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	60f8      	str	r0, [r7, #12]
 800d1e0:	60b9      	str	r1, [r7, #8]
 800d1e2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800d1ee:	f107 0313 	add.w	r3, r7, #19
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	68f8      	ldr	r0, [r7, #12]
 800d1f6:	f7fc ff3d 	bl	800a074 <VL53L0X_GetXTalkCompensationEnable>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800d1fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d111      	bne.n	800d22a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800d206:	7cfb      	ldrb	r3, [r7, #19]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d00e      	beq.n	800d22a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	6a1b      	ldr	r3, [r3, #32]
 800d210:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	8a9b      	ldrh	r3, [r3, #20]
 800d216:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800d218:	69bb      	ldr	r3, [r7, #24]
 800d21a:	fb02 f303 	mul.w	r3, r2, r3
 800d21e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	3380      	adds	r3, #128	; 0x80
 800d224:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800d22a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3720      	adds	r7, #32
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}

0800d236 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800d236:	b580      	push	{r7, lr}
 800d238:	b086      	sub	sp, #24
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	60f8      	str	r0, [r7, #12]
 800d23e:	60b9      	str	r1, [r7, #8]
 800d240:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d242:	2300      	movs	r3, #0
 800d244:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800d24e:	f107 0310 	add.w	r3, r7, #16
 800d252:	461a      	mov	r2, r3
 800d254:	68b9      	ldr	r1, [r7, #8]
 800d256:	68f8      	ldr	r0, [r7, #12]
 800d258:	f7ff ffbe 	bl	800d1d8 <VL53L0X_get_total_xtalk_rate>
 800d25c:	4603      	mov	r3, r0
 800d25e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800d260:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d105      	bne.n	800d274 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681a      	ldr	r2, [r3, #0]
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	441a      	add	r2, r3
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	601a      	str	r2, [r3, #0]

	return Status;
 800d274:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3718      	adds	r7, #24
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b09a      	sub	sp, #104	; 0x68
 800d284:	af00      	add	r7, sp, #0
 800d286:	60f8      	str	r0, [r7, #12]
 800d288:	60b9      	str	r1, [r7, #8]
 800d28a:	607a      	str	r2, [r7, #4]
 800d28c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800d28e:	2312      	movs	r3, #18
 800d290:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800d292:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d296:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800d298:	2342      	movs	r3, #66	; 0x42
 800d29a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800d29c:	2306      	movs	r3, #6
 800d29e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800d2a0:	2307      	movs	r3, #7
 800d2a2:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800d2b0:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800d2b8:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800d2ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2be:	fb02 f303 	mul.w	r3, r2, r3
 800d2c2:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800d2c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2c6:	3380      	adds	r3, #128	; 0x80
 800d2c8:	0a1b      	lsrs	r3, r3, #8
 800d2ca:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800d2cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d2d0:	fb02 f303 	mul.w	r3, r2, r3
 800d2d4:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d01a      	beq.n	800d316 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	029b      	lsls	r3, r3, #10
 800d2e4:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800d2ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2ec:	4413      	add	r3, r2
 800d2ee:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800d2f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2f8:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800d2fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d2fc:	4613      	mov	r3, r2
 800d2fe:	005b      	lsls	r3, r3, #1
 800d300:	4413      	add	r3, r2
 800d302:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800d304:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d306:	fb03 f303 	mul.w	r3, r3, r3
 800d30a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800d30c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d30e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d312:	0c1b      	lsrs	r3, r3, #16
 800d314:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d31a:	fb02 f303 	mul.w	r3, r2, r3
 800d31e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800d320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d322:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d326:	0c1b      	lsrs	r3, r3, #16
 800d328:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800d32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32c:	fb03 f303 	mul.w	r3, r3, r3
 800d330:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800d332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d334:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d338:	0c1b      	lsrs	r3, r3, #16
 800d33a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800d33c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d33e:	085a      	lsrs	r2, r3, #1
 800d340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d342:	441a      	add	r2, r3
 800d344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d346:	fbb2 f3f3 	udiv	r3, r2, r3
 800d34a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800d34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d34e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d350:	fb02 f303 	mul.w	r3, r2, r3
 800d354:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800d356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d35c:	d302      	bcc.n	800d364 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800d35e:	4b54      	ldr	r3, [pc, #336]	; (800d4b0 <VL53L0X_calc_dmax+0x230>)
 800d360:	663b      	str	r3, [r7, #96]	; 0x60
 800d362:	e015      	b.n	800d390 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800d364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d366:	085a      	lsrs	r2, r3, #1
 800d368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d36a:	441a      	add	r2, r3
 800d36c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d36e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d372:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800d374:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d376:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d378:	fb02 f303 	mul.w	r3, r2, r3
 800d37c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800d37e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d380:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d384:	0c1b      	lsrs	r3, r3, #16
 800d386:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800d388:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d38a:	fb03 f303 	mul.w	r3, r3, r3
 800d38e:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800d390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d392:	039b      	lsls	r3, r3, #14
 800d394:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d398:	4a46      	ldr	r2, [pc, #280]	; (800d4b4 <VL53L0X_calc_dmax+0x234>)
 800d39a:	fba2 2303 	umull	r2, r3, r2, r3
 800d39e:	099b      	lsrs	r3, r3, #6
 800d3a0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800d3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a4:	fb03 f303 	mul.w	r3, r3, r3
 800d3a8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800d3aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3ac:	fb03 f303 	mul.w	r3, r3, r3
 800d3b0:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800d3b2:	6a3b      	ldr	r3, [r7, #32]
 800d3b4:	3308      	adds	r3, #8
 800d3b6:	091b      	lsrs	r3, r3, #4
 800d3b8:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800d3ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3bc:	6a3b      	ldr	r3, [r7, #32]
 800d3be:	1ad3      	subs	r3, r2, r3
 800d3c0:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800d3c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3c4:	4613      	mov	r3, r2
 800d3c6:	005b      	lsls	r3, r3, #1
 800d3c8:	4413      	add	r3, r2
 800d3ca:	011b      	lsls	r3, r3, #4
 800d3cc:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800d3ce:	69fb      	ldr	r3, [r7, #28]
 800d3d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d3d4:	0b9b      	lsrs	r3, r3, #14
 800d3d6:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800d3d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d3dc:	4413      	add	r3, r2
 800d3de:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800d3e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3e2:	085b      	lsrs	r3, r3, #1
 800d3e4:	69ba      	ldr	r2, [r7, #24]
 800d3e6:	4413      	add	r3, r2
 800d3e8:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800d3ea:	69ba      	ldr	r2, [r7, #24]
 800d3ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3f2:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800d3f4:	69bb      	ldr	r3, [r7, #24]
 800d3f6:	039b      	lsls	r3, r3, #14
 800d3f8:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800d3fa:	69fb      	ldr	r3, [r7, #28]
 800d3fc:	085b      	lsrs	r3, r3, #1
 800d3fe:	69ba      	ldr	r2, [r7, #24]
 800d400:	4413      	add	r3, r2
 800d402:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800d404:	69ba      	ldr	r2, [r7, #24]
 800d406:	69fb      	ldr	r3, [r7, #28]
 800d408:	fbb2 f3f3 	udiv	r3, r2, r3
 800d40c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800d40e:	69bb      	ldr	r3, [r7, #24]
 800d410:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d412:	fb02 f303 	mul.w	r3, r2, r3
 800d416:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800d418:	69bb      	ldr	r3, [r7, #24]
 800d41a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d41e:	4a25      	ldr	r2, [pc, #148]	; (800d4b4 <VL53L0X_calc_dmax+0x234>)
 800d420:	fba2 2303 	umull	r2, r3, r2, r3
 800d424:	099b      	lsrs	r3, r3, #6
 800d426:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800d428:	69bb      	ldr	r3, [r7, #24]
 800d42a:	011b      	lsls	r3, r3, #4
 800d42c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800d42e:	69bb      	ldr	r3, [r7, #24]
 800d430:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d434:	4a1f      	ldr	r2, [pc, #124]	; (800d4b4 <VL53L0X_calc_dmax+0x234>)
 800d436:	fba2 2303 	umull	r2, r3, r2, r3
 800d43a:	099b      	lsrs	r3, r3, #6
 800d43c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800d43e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d440:	3380      	adds	r3, #128	; 0x80
 800d442:	0a1b      	lsrs	r3, r3, #8
 800d444:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d008      	beq.n	800d45e <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	085a      	lsrs	r2, r3, #1
 800d450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d452:	441a      	add	r2, r3
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	fbb2 f3f3 	udiv	r3, r2, r3
 800d45a:	65bb      	str	r3, [r7, #88]	; 0x58
 800d45c:	e001      	b.n	800d462 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800d45e:	2300      	movs	r3, #0
 800d460:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800d462:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d464:	f7fe fc41 	bl	800bcea <VL53L0X_isqrt>
 800d468:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800d46a:	69bb      	ldr	r3, [r7, #24]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d008      	beq.n	800d482 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800d470:	69bb      	ldr	r3, [r7, #24]
 800d472:	085a      	lsrs	r2, r3, #1
 800d474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d476:	441a      	add	r2, r3
 800d478:	69bb      	ldr	r3, [r7, #24]
 800d47a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d47e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d480:	e001      	b.n	800d486 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800d482:	2300      	movs	r3, #0
 800d484:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800d486:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d488:	f7fe fc2f 	bl	800bcea <VL53L0X_isqrt>
 800d48c:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800d48e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d490:	693a      	ldr	r2, [r7, #16]
 800d492:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800d494:	693a      	ldr	r2, [r7, #16]
 800d496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d498:	429a      	cmp	r2, r3
 800d49a:	d902      	bls.n	800d4a2 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800d49c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d49e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d4a0:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800d4a2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3768      	adds	r7, #104	; 0x68
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
 800d4ae:	bf00      	nop
 800d4b0:	fff00000 	.word	0xfff00000
 800d4b4:	10624dd3 	.word	0x10624dd3

0800d4b8 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b0b4      	sub	sp, #208	; 0xd0
 800d4bc:	af04      	add	r7, sp, #16
 800d4be:	60f8      	str	r0, [r7, #12]
 800d4c0:	60b9      	str	r1, [r7, #8]
 800d4c2:	607a      	str	r2, [r7, #4]
 800d4c4:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800d4c6:	f44f 7348 	mov.w	r3, #800	; 0x320
 800d4ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800d4ce:	f44f 7316 	mov.w	r3, #600	; 0x258
 800d4d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800d4d6:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800d4da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800d4de:	f241 235c 	movw	r3, #4700	; 0x125c
 800d4e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800d4e6:	4b9e      	ldr	r3, [pc, #632]	; (800d760 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800d4e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800d4ec:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800d4f0:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800d4f2:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800d4f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d4fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4fe:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800d500:	4b98      	ldr	r3, [pc, #608]	; (800d764 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800d502:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800d504:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d508:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800d50a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800d50e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800d510:	f240 6377 	movw	r3, #1655	; 0x677
 800d514:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d516:	2300      	movs	r3, #0
 800d518:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	6a1b      	ldr	r3, [r3, #32]
 800d520:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	691b      	ldr	r3, [r3, #16]
 800d526:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d52a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800d52e:	0c1b      	lsrs	r3, r3, #16
 800d530:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	68db      	ldr	r3, [r3, #12]
 800d536:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800d538:	f107 0310 	add.w	r3, r7, #16
 800d53c:	461a      	mov	r2, r3
 800d53e:	68b9      	ldr	r1, [r7, #8]
 800d540:	68f8      	ldr	r0, [r7, #12]
 800d542:	f7ff fe78 	bl	800d236 <VL53L0X_get_total_signal_rate>
 800d546:	4603      	mov	r3, r0
 800d548:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800d54c:	f107 0314 	add.w	r3, r7, #20
 800d550:	461a      	mov	r2, r3
 800d552:	68b9      	ldr	r1, [r7, #8]
 800d554:	68f8      	ldr	r0, [r7, #12]
 800d556:	f7ff fe3f 	bl	800d1d8 <VL53L0X_get_total_xtalk_rate>
 800d55a:	4603      	mov	r3, r0
 800d55c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d566:	fb02 f303 	mul.w	r3, r2, r3
 800d56a:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800d56c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d56e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d572:	0c1b      	lsrs	r3, r3, #16
 800d574:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d57c:	fb02 f303 	mul.w	r3, r2, r3
 800d580:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800d584:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d902      	bls.n	800d594 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800d58e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d590:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800d594:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d168      	bne.n	800d66e <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800d5a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800d5ac:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800d5b0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d5b4:	461a      	mov	r2, r3
 800d5b6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800d5ba:	68f8      	ldr	r0, [r7, #12]
 800d5bc:	f7ff f93a 	bl	800c834 <VL53L0X_calc_timeout_mclks>
 800d5c0:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d5c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800d5d2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800d5d6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800d5da:	461a      	mov	r2, r3
 800d5dc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800d5e0:	68f8      	ldr	r0, [r7, #12]
 800d5e2:	f7ff f927 	bl	800c834 <VL53L0X_calc_timeout_mclks>
 800d5e6:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800d5e8:	2303      	movs	r3, #3
 800d5ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800d5ee:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d5f2:	2b08      	cmp	r3, #8
 800d5f4:	d102      	bne.n	800d5fc <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800d5f6:	2302      	movs	r3, #2
 800d5f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800d5fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d5fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d600:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800d602:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d606:	fb02 f303 	mul.w	r3, r2, r3
 800d60a:	02db      	lsls	r3, r3, #11
 800d60c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800d610:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d614:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d618:	4a53      	ldr	r2, [pc, #332]	; (800d768 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d61a:	fba2 2303 	umull	r2, r3, r2, r3
 800d61e:	099b      	lsrs	r3, r3, #6
 800d620:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800d624:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d628:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d62a:	fb02 f303 	mul.w	r3, r2, r3
 800d62e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800d632:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d636:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d63a:	4a4b      	ldr	r2, [pc, #300]	; (800d768 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d63c:	fba2 2303 	umull	r2, r3, r2, r3
 800d640:	099b      	lsrs	r3, r3, #6
 800d642:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	3380      	adds	r3, #128	; 0x80
 800d64a:	0a1b      	lsrs	r3, r3, #8
 800d64c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800d64e:	693a      	ldr	r2, [r7, #16]
 800d650:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d654:	fb02 f303 	mul.w	r3, r2, r3
 800d658:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800d65c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d660:	3380      	adds	r3, #128	; 0x80
 800d662:	0a1b      	lsrs	r3, r3, #8
 800d664:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	021b      	lsls	r3, r3, #8
 800d66c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800d66e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d672:	2b00      	cmp	r3, #0
 800d674:	d002      	beq.n	800d67c <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800d676:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d67a:	e15e      	b.n	800d93a <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800d67c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d10c      	bne.n	800d69c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d688:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d690:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	2200      	movs	r2, #0
 800d698:	601a      	str	r2, [r3, #0]
 800d69a:	e14c      	b.n	800d936 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800d69c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d102      	bne.n	800d6aa <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800d6aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d6ae:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800d6b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6b2:	041a      	lsls	r2, r3, #16
 800d6b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800d6be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d6c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d902      	bls.n	800d6ce <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800d6c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d6ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800d6ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d6d2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d6d6:	fb02 f303 	mul.w	r3, r2, r3
 800d6da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800d6de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800d6e2:	4613      	mov	r3, r2
 800d6e4:	005b      	lsls	r3, r3, #1
 800d6e6:	4413      	add	r3, r2
 800d6e8:	009b      	lsls	r3, r3, #2
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7fe fafd 	bl	800bcea <VL53L0X_isqrt>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	005b      	lsls	r3, r3, #1
 800d6f4:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	891b      	ldrh	r3, [r3, #8]
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d6fe:	fb02 f303 	mul.w	r3, r2, r3
 800d702:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d706:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800d708:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d70c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d70e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800d710:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d714:	4a14      	ldr	r2, [pc, #80]	; (800d768 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d716:	fba2 2303 	umull	r2, r3, r2, r3
 800d71a:	099b      	lsrs	r3, r3, #6
 800d71c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800d71e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d720:	041b      	lsls	r3, r3, #16
 800d722:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d726:	4a10      	ldr	r2, [pc, #64]	; (800d768 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d728:	fba2 2303 	umull	r2, r3, r2, r3
 800d72c:	099b      	lsrs	r3, r3, #6
 800d72e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800d730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d732:	021b      	lsls	r3, r3, #8
 800d734:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800d736:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d73a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d73e:	2b00      	cmp	r3, #0
 800d740:	bfb8      	it	lt
 800d742:	425b      	neglt	r3, r3
 800d744:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800d746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d748:	021b      	lsls	r3, r3, #8
 800d74a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	7e1b      	ldrb	r3, [r3, #24]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d00b      	beq.n	800d76c <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800d754:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d758:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d75c:	e033      	b.n	800d7c6 <VL53L0X_calc_sigma_estimate+0x30e>
 800d75e:	bf00      	nop
 800d760:	028f87ae 	.word	0x028f87ae
 800d764:	0006999a 	.word	0x0006999a
 800d768:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800d76c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d76e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d772:	fbb2 f3f3 	udiv	r3, r2, r3
 800d776:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800d77a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d77c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800d780:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d784:	fb02 f303 	mul.w	r3, r2, r3
 800d788:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800d78c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d790:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d792:	4413      	add	r3, r2
 800d794:	0c1b      	lsrs	r3, r3, #16
 800d796:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800d79a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d79e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800d7a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800d7a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d7aa:	085b      	lsrs	r3, r3, #1
 800d7ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800d7b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d7b4:	fb03 f303 	mul.w	r3, r3, r3
 800d7b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800d7bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d7c0:	0b9b      	lsrs	r3, r3, #14
 800d7c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800d7c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d7ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7cc:	fb02 f303 	mul.w	r3, r2, r3
 800d7d0:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800d7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d7d8:	0c1b      	lsrs	r3, r3, #16
 800d7da:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800d7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7de:	fb03 f303 	mul.w	r3, r3, r3
 800d7e2:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800d7e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d7e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800d7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d7f0:	0c1b      	lsrs	r3, r3, #16
 800d7f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800d7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f6:	fb03 f303 	mul.w	r3, r3, r3
 800d7fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800d7fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d800:	4413      	add	r3, r2
 800d802:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800d804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d806:	f7fe fa70 	bl	800bcea <VL53L0X_isqrt>
 800d80a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800d80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80e:	041b      	lsls	r3, r3, #16
 800d810:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800d812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d814:	3332      	adds	r3, #50	; 0x32
 800d816:	4a4b      	ldr	r2, [pc, #300]	; (800d944 <VL53L0X_calc_sigma_estimate+0x48c>)
 800d818:	fba2 2303 	umull	r2, r3, r2, r3
 800d81c:	095a      	lsrs	r2, r3, #5
 800d81e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d820:	fbb2 f3f3 	udiv	r3, r2, r3
 800d824:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800d828:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d82c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800d830:	fb02 f303 	mul.w	r3, r2, r3
 800d834:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800d838:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d83c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800d840:	3308      	adds	r3, #8
 800d842:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800d846:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d84a:	4a3f      	ldr	r2, [pc, #252]	; (800d948 <VL53L0X_calc_sigma_estimate+0x490>)
 800d84c:	fba2 2303 	umull	r2, r3, r2, r3
 800d850:	0b5b      	lsrs	r3, r3, #13
 800d852:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800d856:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d85a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d902      	bls.n	800d866 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800d860:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d862:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800d866:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d86a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d86e:	4413      	add	r3, r2
 800d870:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800d874:	4a35      	ldr	r2, [pc, #212]	; (800d94c <VL53L0X_calc_sigma_estimate+0x494>)
 800d876:	fba2 2303 	umull	r2, r3, r2, r3
 800d87a:	099b      	lsrs	r3, r3, #6
 800d87c:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800d87e:	6a3b      	ldr	r3, [r7, #32]
 800d880:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800d882:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d886:	441a      	add	r2, r3
 800d888:	6a3b      	ldr	r3, [r7, #32]
 800d88a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d88e:	4618      	mov	r0, r3
 800d890:	f7fe fa2b 	bl	800bcea <VL53L0X_isqrt>
 800d894:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800d896:	69fb      	ldr	r3, [r7, #28]
 800d898:	021b      	lsls	r3, r3, #8
 800d89a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d8a2:	4a2a      	ldr	r2, [pc, #168]	; (800d94c <VL53L0X_calc_sigma_estimate+0x494>)
 800d8a4:	fba2 2303 	umull	r2, r3, r2, r3
 800d8a8:	099b      	lsrs	r3, r3, #6
 800d8aa:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800d8ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d8b0:	fb03 f303 	mul.w	r3, r3, r3
 800d8b4:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800d8b6:	69fb      	ldr	r3, [r7, #28]
 800d8b8:	fb03 f303 	mul.w	r3, r3, r3
 800d8bc:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800d8be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c2:	4413      	add	r3, r2
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f7fe fa10 	bl	800bcea <VL53L0X_isqrt>
 800d8ca:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800d8cc:	69bb      	ldr	r3, [r7, #24]
 800d8ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d8d2:	fb02 f303 	mul.w	r3, r2, r3
 800d8d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800d8da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d009      	beq.n	800d8f4 <VL53L0X_calc_sigma_estimate+0x43c>
 800d8e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d005      	beq.n	800d8f4 <VL53L0X_calc_sigma_estimate+0x43c>
 800d8e8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d8ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d903      	bls.n	800d8fc <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800d8f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d8f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d902:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800d90e:	6939      	ldr	r1, [r7, #16]
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	9303      	str	r3, [sp, #12]
 800d914:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d918:	9302      	str	r3, [sp, #8]
 800d91a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d91e:	9301      	str	r3, [sp, #4]
 800d920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d922:	9300      	str	r3, [sp, #0]
 800d924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d928:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d92a:	68f8      	ldr	r0, [r7, #12]
 800d92c:	f7ff fca8 	bl	800d280 <VL53L0X_calc_dmax>
 800d930:	4603      	mov	r3, r0
 800d932:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d936:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	37c0      	adds	r7, #192	; 0xc0
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}
 800d942:	bf00      	nop
 800d944:	51eb851f 	.word	0x51eb851f
 800d948:	d1b71759 	.word	0xd1b71759
 800d94c:	10624dd3 	.word	0x10624dd3

0800d950 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b090      	sub	sp, #64	; 0x40
 800d954:	af00      	add	r7, sp, #0
 800d956:	60f8      	str	r0, [r7, #12]
 800d958:	607a      	str	r2, [r7, #4]
 800d95a:	461a      	mov	r2, r3
 800d95c:	460b      	mov	r3, r1
 800d95e:	72fb      	strb	r3, [r7, #11]
 800d960:	4613      	mov	r3, r2
 800d962:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d964:	2300      	movs	r3, #0
 800d966:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800d96a:	2300      	movs	r3, #0
 800d96c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800d970:	2300      	movs	r3, #0
 800d972:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800d976:	2300      	movs	r3, #0
 800d978:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800d97c:	2300      	movs	r3, #0
 800d97e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800d982:	2300      	movs	r3, #0
 800d984:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800d988:	2300      	movs	r3, #0
 800d98a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800d98e:	2300      	movs	r3, #0
 800d990:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800d994:	2300      	movs	r3, #0
 800d996:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800d99a:	2300      	movs	r3, #0
 800d99c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800d9a2:	7afb      	ldrb	r3, [r7, #11]
 800d9a4:	10db      	asrs	r3, r3, #3
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	f003 030f 	and.w	r3, r3, #15
 800d9ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800d9b0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d017      	beq.n	800d9e8 <VL53L0X_get_pal_range_status+0x98>
 800d9b8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d9bc:	2b05      	cmp	r3, #5
 800d9be:	d013      	beq.n	800d9e8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800d9c0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d9c4:	2b07      	cmp	r3, #7
 800d9c6:	d00f      	beq.n	800d9e8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800d9c8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d9cc:	2b0c      	cmp	r3, #12
 800d9ce:	d00b      	beq.n	800d9e8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800d9d0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d9d4:	2b0d      	cmp	r3, #13
 800d9d6:	d007      	beq.n	800d9e8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800d9d8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d9dc:	2b0e      	cmp	r3, #14
 800d9de:	d003      	beq.n	800d9e8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800d9e0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d9e4:	2b0f      	cmp	r3, #15
 800d9e6:	d103      	bne.n	800d9f0 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800d9ee:	e002      	b.n	800d9f6 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800d9f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d109      	bne.n	800da12 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d9fe:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800da02:	461a      	mov	r2, r3
 800da04:	2100      	movs	r1, #0
 800da06:	68f8      	ldr	r0, [r7, #12]
 800da08:	f7fc fc08 	bl	800a21c <VL53L0X_GetLimitCheckEnable>
 800da0c:	4603      	mov	r3, r0
 800da0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800da12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800da16:	2b00      	cmp	r3, #0
 800da18:	d02e      	beq.n	800da78 <VL53L0X_get_pal_range_status+0x128>
 800da1a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d12a      	bne.n	800da78 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800da22:	f107 0310 	add.w	r3, r7, #16
 800da26:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800da2a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800da2c:	68f8      	ldr	r0, [r7, #12]
 800da2e:	f7ff fd43 	bl	800d4b8 <VL53L0X_calc_sigma_estimate>
 800da32:	4603      	mov	r3, r0
 800da34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800da38:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d103      	bne.n	800da48 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	b29a      	uxth	r2, r3
 800da44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da46:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800da48:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d113      	bne.n	800da78 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800da50:	f107 0320 	add.w	r3, r7, #32
 800da54:	461a      	mov	r2, r3
 800da56:	2100      	movs	r1, #0
 800da58:	68f8      	ldr	r0, [r7, #12]
 800da5a:	f7fc fc65 	bl	800a328 <VL53L0X_GetLimitCheckValue>
 800da5e:	4603      	mov	r3, r0
 800da60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800da64:	6a3b      	ldr	r3, [r7, #32]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d006      	beq.n	800da78 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800da6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da6c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800da6e:	429a      	cmp	r2, r3
 800da70:	d902      	bls.n	800da78 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800da72:	2301      	movs	r3, #1
 800da74:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800da78:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d109      	bne.n	800da94 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800da80:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800da84:	461a      	mov	r2, r3
 800da86:	2102      	movs	r1, #2
 800da88:	68f8      	ldr	r0, [r7, #12]
 800da8a:	f7fc fbc7 	bl	800a21c <VL53L0X_GetLimitCheckEnable>
 800da8e:	4603      	mov	r3, r0
 800da90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800da94:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d044      	beq.n	800db26 <VL53L0X_get_pal_range_status+0x1d6>
 800da9c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d140      	bne.n	800db26 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800daa4:	f107 031c 	add.w	r3, r7, #28
 800daa8:	461a      	mov	r2, r3
 800daaa:	2102      	movs	r1, #2
 800daac:	68f8      	ldr	r0, [r7, #12]
 800daae:	f7fc fc3b 	bl	800a328 <VL53L0X_GetLimitCheckValue>
 800dab2:	4603      	mov	r3, r0
 800dab4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800dab8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d107      	bne.n	800dad0 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800dac0:	2201      	movs	r2, #1
 800dac2:	21ff      	movs	r1, #255	; 0xff
 800dac4:	68f8      	ldr	r0, [r7, #12]
 800dac6:	f000 fd17 	bl	800e4f8 <VL53L0X_WrByte>
 800daca:	4603      	mov	r3, r0
 800dacc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800dad0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d109      	bne.n	800daec <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800dad8:	f107 0316 	add.w	r3, r7, #22
 800dadc:	461a      	mov	r2, r3
 800dade:	21b6      	movs	r1, #182	; 0xb6
 800dae0:	68f8      	ldr	r0, [r7, #12]
 800dae2:	f000 fda6 	bl	800e632 <VL53L0X_RdWord>
 800dae6:	4603      	mov	r3, r0
 800dae8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800daec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d107      	bne.n	800db04 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800daf4:	2200      	movs	r2, #0
 800daf6:	21ff      	movs	r1, #255	; 0xff
 800daf8:	68f8      	ldr	r0, [r7, #12]
 800dafa:	f000 fcfd 	bl	800e4f8 <VL53L0X_WrByte>
 800dafe:	4603      	mov	r3, r0
 800db00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800db04:	8afb      	ldrh	r3, [r7, #22]
 800db06:	025b      	lsls	r3, r3, #9
 800db08:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db0e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800db12:	69fb      	ldr	r3, [r7, #28]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d006      	beq.n	800db26 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800db18:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800db1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d902      	bls.n	800db26 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800db20:	2301      	movs	r3, #1
 800db22:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800db26:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d109      	bne.n	800db42 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800db2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800db32:	461a      	mov	r2, r3
 800db34:	2103      	movs	r1, #3
 800db36:	68f8      	ldr	r0, [r7, #12]
 800db38:	f7fc fb70 	bl	800a21c <VL53L0X_GetLimitCheckEnable>
 800db3c:	4603      	mov	r3, r0
 800db3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800db42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800db46:	2b00      	cmp	r3, #0
 800db48:	d023      	beq.n	800db92 <VL53L0X_get_pal_range_status+0x242>
 800db4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d11f      	bne.n	800db92 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800db52:	893b      	ldrh	r3, [r7, #8]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d102      	bne.n	800db5e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800db58:	2300      	movs	r3, #0
 800db5a:	637b      	str	r3, [r7, #52]	; 0x34
 800db5c:	e005      	b.n	800db6a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	021a      	lsls	r2, r3, #8
 800db62:	893b      	ldrh	r3, [r7, #8]
 800db64:	fbb2 f3f3 	udiv	r3, r2, r3
 800db68:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800db6a:	f107 0318 	add.w	r3, r7, #24
 800db6e:	461a      	mov	r2, r3
 800db70:	2103      	movs	r1, #3
 800db72:	68f8      	ldr	r0, [r7, #12]
 800db74:	f7fc fbd8 	bl	800a328 <VL53L0X_GetLimitCheckValue>
 800db78:	4603      	mov	r3, r0
 800db7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800db7e:	69bb      	ldr	r3, [r7, #24]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d006      	beq.n	800db92 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800db84:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800db86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db88:	429a      	cmp	r2, r3
 800db8a:	d202      	bcs.n	800db92 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800db8c:	2301      	movs	r3, #1
 800db8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800db92:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800db96:	2b00      	cmp	r3, #0
 800db98:	d14a      	bne.n	800dc30 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800db9a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800db9e:	2b01      	cmp	r3, #1
 800dba0:	d103      	bne.n	800dbaa <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800dba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dba4:	22ff      	movs	r2, #255	; 0xff
 800dba6:	701a      	strb	r2, [r3, #0]
 800dba8:	e042      	b.n	800dc30 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800dbaa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dbae:	2b01      	cmp	r3, #1
 800dbb0:	d007      	beq.n	800dbc2 <VL53L0X_get_pal_range_status+0x272>
 800dbb2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dbb6:	2b02      	cmp	r3, #2
 800dbb8:	d003      	beq.n	800dbc2 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800dbba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dbbe:	2b03      	cmp	r3, #3
 800dbc0:	d103      	bne.n	800dbca <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800dbc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbc4:	2205      	movs	r2, #5
 800dbc6:	701a      	strb	r2, [r3, #0]
 800dbc8:	e032      	b.n	800dc30 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800dbca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dbce:	2b06      	cmp	r3, #6
 800dbd0:	d003      	beq.n	800dbda <VL53L0X_get_pal_range_status+0x28a>
 800dbd2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dbd6:	2b09      	cmp	r3, #9
 800dbd8:	d103      	bne.n	800dbe2 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800dbda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbdc:	2204      	movs	r2, #4
 800dbde:	701a      	strb	r2, [r3, #0]
 800dbe0:	e026      	b.n	800dc30 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800dbe2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dbe6:	2b08      	cmp	r3, #8
 800dbe8:	d007      	beq.n	800dbfa <VL53L0X_get_pal_range_status+0x2aa>
 800dbea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dbee:	2b0a      	cmp	r3, #10
 800dbf0:	d003      	beq.n	800dbfa <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800dbf2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dbf6:	2b01      	cmp	r3, #1
 800dbf8:	d103      	bne.n	800dc02 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800dbfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbfc:	2203      	movs	r2, #3
 800dbfe:	701a      	strb	r2, [r3, #0]
 800dc00:	e016      	b.n	800dc30 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800dc02:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dc06:	2b04      	cmp	r3, #4
 800dc08:	d003      	beq.n	800dc12 <VL53L0X_get_pal_range_status+0x2c2>
 800dc0a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	d103      	bne.n	800dc1a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800dc12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc14:	2202      	movs	r2, #2
 800dc16:	701a      	strb	r2, [r3, #0]
 800dc18:	e00a      	b.n	800dc30 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800dc1a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800dc1e:	2b01      	cmp	r3, #1
 800dc20:	d103      	bne.n	800dc2a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800dc22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc24:	2201      	movs	r2, #1
 800dc26:	701a      	strb	r2, [r3, #0]
 800dc28:	e002      	b.n	800dc30 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800dc2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800dc30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d102      	bne.n	800dc3e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800dc38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800dc3e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800dc42:	461a      	mov	r2, r3
 800dc44:	2101      	movs	r1, #1
 800dc46:	68f8      	ldr	r0, [r7, #12]
 800dc48:	f7fc fae8 	bl	800a21c <VL53L0X_GetLimitCheckEnable>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800dc52:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d14f      	bne.n	800dcfa <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800dc5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d003      	beq.n	800dc6a <VL53L0X_get_pal_range_status+0x31a>
 800dc62:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	d103      	bne.n	800dc72 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc70:	e002      	b.n	800dc78 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800dc72:	2300      	movs	r3, #0
 800dc74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800dc7e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800dc82:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dc86:	2b04      	cmp	r3, #4
 800dc88:	d003      	beq.n	800dc92 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800dc8a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d103      	bne.n	800dc9a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800dc92:	2301      	movs	r3, #1
 800dc94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc98:	e002      	b.n	800dca0 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800dca6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800dcaa:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d003      	beq.n	800dcba <VL53L0X_get_pal_range_status+0x36a>
 800dcb2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dcb6:	2b01      	cmp	r3, #1
 800dcb8:	d103      	bne.n	800dcc2 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800dcba:	2301      	movs	r3, #1
 800dcbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dcc0:	e002      	b.n	800dcc8 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800dcce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800dcd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d003      	beq.n	800dce2 <VL53L0X_get_pal_range_status+0x392>
 800dcda:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	d103      	bne.n	800dcea <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800dce2:	2301      	movs	r3, #1
 800dce4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dce8:	e002      	b.n	800dcf0 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800dcea:	2300      	movs	r3, #0
 800dcec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800dcf6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800dcfa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3740      	adds	r7, #64	; 0x40
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
	...

0800dd08 <VL53L0X_get_range_status_string>:
	return Status;
}

VL53L0X_Error VL53L0X_get_range_status_string(uint8_t RangeStatus,
		char *pRangeStatusString)
{
 800dd08:	b490      	push	{r4, r7}
 800dd0a:	b084      	sub	sp, #16
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	4603      	mov	r3, r0
 800dd10:	6039      	str	r1, [r7, #0]
 800dd12:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dd14:	2300      	movs	r3, #0
 800dd16:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	switch (RangeStatus) {
 800dd18:	79fb      	ldrb	r3, [r7, #7]
 800dd1a:	2b05      	cmp	r3, #5
 800dd1c:	d850      	bhi.n	800ddc0 <VL53L0X_get_range_status_string+0xb8>
 800dd1e:	a201      	add	r2, pc, #4	; (adr r2, 800dd24 <VL53L0X_get_range_status_string+0x1c>)
 800dd20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd24:	0800dd3d 	.word	0x0800dd3d
 800dd28:	0800dd4f 	.word	0x0800dd4f
 800dd2c:	0800dd67 	.word	0x0800dd67
 800dd30:	0800dd79 	.word	0x0800dd79
 800dd34:	0800dd93 	.word	0x0800dd93
 800dd38:	0800ddab 	.word	0x0800ddab
	case 0:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	4a28      	ldr	r2, [pc, #160]	; (800dde0 <VL53L0X_get_range_status_string+0xd8>)
 800dd40:	461c      	mov	r4, r3
 800dd42:	4613      	mov	r3, r2
 800dd44:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dd46:	6020      	str	r0, [r4, #0]
 800dd48:	6061      	str	r1, [r4, #4]
 800dd4a:	60a2      	str	r2, [r4, #8]
			VL53L0X_STRING_RANGESTATUS_RANGEVALID);
	break;
 800dd4c:	e041      	b.n	800ddd2 <VL53L0X_get_range_status_string+0xca>
	case 1:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	4924      	ldr	r1, [pc, #144]	; (800dde4 <VL53L0X_get_range_status_string+0xdc>)
 800dd52:	461a      	mov	r2, r3
 800dd54:	460b      	mov	r3, r1
 800dd56:	cb03      	ldmia	r3!, {r0, r1}
 800dd58:	6010      	str	r0, [r2, #0]
 800dd5a:	6051      	str	r1, [r2, #4]
 800dd5c:	8819      	ldrh	r1, [r3, #0]
 800dd5e:	789b      	ldrb	r3, [r3, #2]
 800dd60:	8111      	strh	r1, [r2, #8]
 800dd62:	7293      	strb	r3, [r2, #10]
			VL53L0X_STRING_RANGESTATUS_SIGMA);
	break;
 800dd64:	e035      	b.n	800ddd2 <VL53L0X_get_range_status_string+0xca>
	case 2:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	4a1f      	ldr	r2, [pc, #124]	; (800dde8 <VL53L0X_get_range_status_string+0xe0>)
 800dd6a:	461c      	mov	r4, r3
 800dd6c:	4613      	mov	r3, r2
 800dd6e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dd70:	6020      	str	r0, [r4, #0]
 800dd72:	6061      	str	r1, [r4, #4]
 800dd74:	60a2      	str	r2, [r4, #8]
			VL53L0X_STRING_RANGESTATUS_SIGNAL);
	break;
 800dd76:	e02c      	b.n	800ddd2 <VL53L0X_get_range_status_string+0xca>
	case 3:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	4a1c      	ldr	r2, [pc, #112]	; (800ddec <VL53L0X_get_range_status_string+0xe4>)
 800dd7c:	461c      	mov	r4, r3
 800dd7e:	4613      	mov	r3, r2
 800dd80:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dd82:	6020      	str	r0, [r4, #0]
 800dd84:	6061      	str	r1, [r4, #4]
 800dd86:	60a2      	str	r2, [r4, #8]
 800dd88:	881a      	ldrh	r2, [r3, #0]
 800dd8a:	789b      	ldrb	r3, [r3, #2]
 800dd8c:	81a2      	strh	r2, [r4, #12]
 800dd8e:	73a3      	strb	r3, [r4, #14]
			VL53L0X_STRING_RANGESTATUS_MINRANGE);
	break;
 800dd90:	e01f      	b.n	800ddd2 <VL53L0X_get_range_status_string+0xca>
	case 4:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	4916      	ldr	r1, [pc, #88]	; (800ddf0 <VL53L0X_get_range_status_string+0xe8>)
 800dd96:	461a      	mov	r2, r3
 800dd98:	460b      	mov	r3, r1
 800dd9a:	cb03      	ldmia	r3!, {r0, r1}
 800dd9c:	6010      	str	r0, [r2, #0]
 800dd9e:	6051      	str	r1, [r2, #4]
 800dda0:	8819      	ldrh	r1, [r3, #0]
 800dda2:	789b      	ldrb	r3, [r3, #2]
 800dda4:	8111      	strh	r1, [r2, #8]
 800dda6:	7293      	strb	r3, [r2, #10]
			VL53L0X_STRING_RANGESTATUS_PHASE);
	break;
 800dda8:	e013      	b.n	800ddd2 <VL53L0X_get_range_status_string+0xca>
	case 5:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	4a11      	ldr	r2, [pc, #68]	; (800ddf4 <VL53L0X_get_range_status_string+0xec>)
 800ddae:	461c      	mov	r4, r3
 800ddb0:	4613      	mov	r3, r2
 800ddb2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ddb4:	6020      	str	r0, [r4, #0]
 800ddb6:	6061      	str	r1, [r4, #4]
 800ddb8:	60a2      	str	r2, [r4, #8]
 800ddba:	881b      	ldrh	r3, [r3, #0]
 800ddbc:	81a3      	strh	r3, [r4, #12]
			VL53L0X_STRING_RANGESTATUS_HW);
	break;
 800ddbe:	e008      	b.n	800ddd2 <VL53L0X_get_range_status_string+0xca>

	default: /**/
		VL53L0X_COPYSTRING(pRangeStatusString,
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	490d      	ldr	r1, [pc, #52]	; (800ddf8 <VL53L0X_get_range_status_string+0xf0>)
 800ddc4:	461a      	mov	r2, r3
 800ddc6:	460b      	mov	r3, r1
 800ddc8:	cb03      	ldmia	r3!, {r0, r1}
 800ddca:	6010      	str	r0, [r2, #0]
 800ddcc:	6051      	str	r1, [r2, #4]
 800ddce:	881b      	ldrh	r3, [r3, #0]
 800ddd0:	8113      	strh	r3, [r2, #8]
				VL53L0X_STRING_RANGESTATUS_NONE);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ddd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3710      	adds	r7, #16
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bc90      	pop	{r4, r7}
 800ddde:	4770      	bx	lr
 800dde0:	080148d8 	.word	0x080148d8
 800dde4:	080148e4 	.word	0x080148e4
 800dde8:	080148f0 	.word	0x080148f0
 800ddec:	080148fc 	.word	0x080148fc
 800ddf0:	0801490c 	.word	0x0801490c
 800ddf4:	08014918 	.word	0x08014918
 800ddf8:	08014770 	.word	0x08014770

0800ddfc <VL53L0X_get_pal_error_string>:

VL53L0X_Error VL53L0X_get_pal_error_string(VL53L0X_Error PalErrorCode,
		char *pPalErrorString)
{
 800ddfc:	b4b0      	push	{r4, r5, r7}
 800ddfe:	b085      	sub	sp, #20
 800de00:	af00      	add	r7, sp, #0
 800de02:	4603      	mov	r3, r0
 800de04:	6039      	str	r1, [r7, #0]
 800de06:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800de08:	2300      	movs	r3, #0
 800de0a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	switch (PalErrorCode) {
 800de0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de10:	3363      	adds	r3, #99	; 0x63
 800de12:	2b63      	cmp	r3, #99	; 0x63
 800de14:	f200 81b9 	bhi.w	800e18a <VL53L0X_get_pal_error_string+0x38e>
 800de18:	a201      	add	r2, pc, #4	; (adr r2, 800de20 <VL53L0X_get_pal_error_string+0x24>)
 800de1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de1e:	bf00      	nop
 800de20:	0800e16f 	.word	0x0800e16f
 800de24:	0800e18b 	.word	0x0800e18b
 800de28:	0800e18b 	.word	0x0800e18b
 800de2c:	0800e18b 	.word	0x0800e18b
 800de30:	0800e18b 	.word	0x0800e18b
 800de34:	0800e18b 	.word	0x0800e18b
 800de38:	0800e18b 	.word	0x0800e18b
 800de3c:	0800e18b 	.word	0x0800e18b
 800de40:	0800e18b 	.word	0x0800e18b
 800de44:	0800e18b 	.word	0x0800e18b
 800de48:	0800e18b 	.word	0x0800e18b
 800de4c:	0800e18b 	.word	0x0800e18b
 800de50:	0800e18b 	.word	0x0800e18b
 800de54:	0800e18b 	.word	0x0800e18b
 800de58:	0800e18b 	.word	0x0800e18b
 800de5c:	0800e18b 	.word	0x0800e18b
 800de60:	0800e18b 	.word	0x0800e18b
 800de64:	0800e18b 	.word	0x0800e18b
 800de68:	0800e18b 	.word	0x0800e18b
 800de6c:	0800e18b 	.word	0x0800e18b
 800de70:	0800e18b 	.word	0x0800e18b
 800de74:	0800e18b 	.word	0x0800e18b
 800de78:	0800e18b 	.word	0x0800e18b
 800de7c:	0800e18b 	.word	0x0800e18b
 800de80:	0800e18b 	.word	0x0800e18b
 800de84:	0800e18b 	.word	0x0800e18b
 800de88:	0800e18b 	.word	0x0800e18b
 800de8c:	0800e18b 	.word	0x0800e18b
 800de90:	0800e18b 	.word	0x0800e18b
 800de94:	0800e18b 	.word	0x0800e18b
 800de98:	0800e18b 	.word	0x0800e18b
 800de9c:	0800e18b 	.word	0x0800e18b
 800dea0:	0800e18b 	.word	0x0800e18b
 800dea4:	0800e18b 	.word	0x0800e18b
 800dea8:	0800e18b 	.word	0x0800e18b
 800deac:	0800e18b 	.word	0x0800e18b
 800deb0:	0800e18b 	.word	0x0800e18b
 800deb4:	0800e18b 	.word	0x0800e18b
 800deb8:	0800e18b 	.word	0x0800e18b
 800debc:	0800e18b 	.word	0x0800e18b
 800dec0:	0800e18b 	.word	0x0800e18b
 800dec4:	0800e18b 	.word	0x0800e18b
 800dec8:	0800e18b 	.word	0x0800e18b
 800decc:	0800e18b 	.word	0x0800e18b
 800ded0:	0800e18b 	.word	0x0800e18b
 800ded4:	0800e18b 	.word	0x0800e18b
 800ded8:	0800e18b 	.word	0x0800e18b
 800dedc:	0800e18b 	.word	0x0800e18b
 800dee0:	0800e18b 	.word	0x0800e18b
 800dee4:	0800e151 	.word	0x0800e151
 800dee8:	0800e18b 	.word	0x0800e18b
 800deec:	0800e18b 	.word	0x0800e18b
 800def0:	0800e18b 	.word	0x0800e18b
 800def4:	0800e18b 	.word	0x0800e18b
 800def8:	0800e18b 	.word	0x0800e18b
 800defc:	0800e18b 	.word	0x0800e18b
 800df00:	0800e18b 	.word	0x0800e18b
 800df04:	0800e18b 	.word	0x0800e18b
 800df08:	0800e18b 	.word	0x0800e18b
 800df0c:	0800e12f 	.word	0x0800e12f
 800df10:	0800e18b 	.word	0x0800e18b
 800df14:	0800e18b 	.word	0x0800e18b
 800df18:	0800e18b 	.word	0x0800e18b
 800df1c:	0800e18b 	.word	0x0800e18b
 800df20:	0800e18b 	.word	0x0800e18b
 800df24:	0800e18b 	.word	0x0800e18b
 800df28:	0800e18b 	.word	0x0800e18b
 800df2c:	0800e18b 	.word	0x0800e18b
 800df30:	0800e18b 	.word	0x0800e18b
 800df34:	0800e113 	.word	0x0800e113
 800df38:	0800e18b 	.word	0x0800e18b
 800df3c:	0800e18b 	.word	0x0800e18b
 800df40:	0800e18b 	.word	0x0800e18b
 800df44:	0800e18b 	.word	0x0800e18b
 800df48:	0800e18b 	.word	0x0800e18b
 800df4c:	0800e18b 	.word	0x0800e18b
 800df50:	0800e18b 	.word	0x0800e18b
 800df54:	0800e18b 	.word	0x0800e18b
 800df58:	0800e18b 	.word	0x0800e18b
 800df5c:	0800e0f9 	.word	0x0800e0f9
 800df60:	0800e18b 	.word	0x0800e18b
 800df64:	0800e18b 	.word	0x0800e18b
 800df68:	0800e18b 	.word	0x0800e18b
 800df6c:	0800e18b 	.word	0x0800e18b
 800df70:	0800e18b 	.word	0x0800e18b
 800df74:	0800e18b 	.word	0x0800e18b
 800df78:	0800e18b 	.word	0x0800e18b
 800df7c:	0800e045 	.word	0x0800e045
 800df80:	0800e0db 	.word	0x0800e0db
 800df84:	0800e0c3 	.word	0x0800e0c3
 800df88:	0800e0ab 	.word	0x0800e0ab
 800df8c:	0800e08d 	.word	0x0800e08d
 800df90:	0800e073 	.word	0x0800e073
 800df94:	0800e061 	.word	0x0800e061
 800df98:	0800e02d 	.word	0x0800e02d
 800df9c:	0800e00f 	.word	0x0800e00f
 800dfa0:	0800dffb 	.word	0x0800dffb
 800dfa4:	0800dfe3 	.word	0x0800dfe3
 800dfa8:	0800dfc5 	.word	0x0800dfc5
 800dfac:	0800dfb1 	.word	0x0800dfb1
	case VL53L0X_ERROR_NONE:
		VL53L0X_COPYSTRING(pPalErrorString,
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	4980      	ldr	r1, [pc, #512]	; (800e1b4 <VL53L0X_get_pal_error_string+0x3b8>)
 800dfb4:	461a      	mov	r2, r3
 800dfb6:	460b      	mov	r3, r1
 800dfb8:	cb03      	ldmia	r3!, {r0, r1}
 800dfba:	6010      	str	r0, [r2, #0]
 800dfbc:	6051      	str	r1, [r2, #4]
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	7213      	strb	r3, [r2, #8]
			VL53L0X_STRING_ERROR_NONE);
	break;
 800dfc2:	e0f0      	b.n	800e1a6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_CALIBRATION_WARNING:
		VL53L0X_COPYSTRING(pPalErrorString,
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	4a7c      	ldr	r2, [pc, #496]	; (800e1b8 <VL53L0X_get_pal_error_string+0x3bc>)
 800dfc8:	461d      	mov	r5, r3
 800dfca:	4614      	mov	r4, r2
 800dfcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dfce:	6028      	str	r0, [r5, #0]
 800dfd0:	6069      	str	r1, [r5, #4]
 800dfd2:	60aa      	str	r2, [r5, #8]
 800dfd4:	60eb      	str	r3, [r5, #12]
 800dfd6:	cc03      	ldmia	r4!, {r0, r1}
 800dfd8:	6128      	str	r0, [r5, #16]
 800dfda:	6169      	str	r1, [r5, #20]
 800dfdc:	8823      	ldrh	r3, [r4, #0]
 800dfde:	832b      	strh	r3, [r5, #24]
			VL53L0X_STRING_ERROR_CALIBRATION_WARNING);
	break;
 800dfe0:	e0e1      	b.n	800e1a6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_MIN_CLIPPED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	4a75      	ldr	r2, [pc, #468]	; (800e1bc <VL53L0X_get_pal_error_string+0x3c0>)
 800dfe6:	461d      	mov	r5, r3
 800dfe8:	4614      	mov	r4, r2
 800dfea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dfec:	6028      	str	r0, [r5, #0]
 800dfee:	6069      	str	r1, [r5, #4]
 800dff0:	60aa      	str	r2, [r5, #8]
 800dff2:	60eb      	str	r3, [r5, #12]
 800dff4:	8823      	ldrh	r3, [r4, #0]
 800dff6:	822b      	strh	r3, [r5, #16]
			VL53L0X_STRING_ERROR_MIN_CLIPPED);
	break;
 800dff8:	e0d5      	b.n	800e1a6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_UNDEFINED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	4a70      	ldr	r2, [pc, #448]	; (800e1c0 <VL53L0X_get_pal_error_string+0x3c4>)
 800dffe:	461c      	mov	r4, r3
 800e000:	4615      	mov	r5, r2
 800e002:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e004:	6020      	str	r0, [r4, #0]
 800e006:	6061      	str	r1, [r4, #4]
 800e008:	60a2      	str	r2, [r4, #8]
 800e00a:	60e3      	str	r3, [r4, #12]
			VL53L0X_STRING_ERROR_UNDEFINED);
	break;
 800e00c:	e0cb      	b.n	800e1a6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INVALID_PARAMS:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	4a6c      	ldr	r2, [pc, #432]	; (800e1c4 <VL53L0X_get_pal_error_string+0x3c8>)
 800e012:	461d      	mov	r5, r3
 800e014:	4614      	mov	r4, r2
 800e016:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e018:	6028      	str	r0, [r5, #0]
 800e01a:	6069      	str	r1, [r5, #4]
 800e01c:	60aa      	str	r2, [r5, #8]
 800e01e:	60eb      	str	r3, [r5, #12]
 800e020:	cc03      	ldmia	r4!, {r0, r1}
 800e022:	6128      	str	r0, [r5, #16]
 800e024:	6169      	str	r1, [r5, #20]
 800e026:	7823      	ldrb	r3, [r4, #0]
 800e028:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_INVALID_PARAMS);
	break;
 800e02a:	e0bc      	b.n	800e1a6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	4a66      	ldr	r2, [pc, #408]	; (800e1c8 <VL53L0X_get_pal_error_string+0x3cc>)
 800e030:	461d      	mov	r5, r3
 800e032:	4614      	mov	r4, r2
 800e034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e036:	6028      	str	r0, [r5, #0]
 800e038:	6069      	str	r1, [r5, #4]
 800e03a:	60aa      	str	r2, [r5, #8]
 800e03c:	60eb      	str	r3, [r5, #12]
 800e03e:	6820      	ldr	r0, [r4, #0]
 800e040:	6128      	str	r0, [r5, #16]
			VL53L0X_STRING_ERROR_NOT_SUPPORTED);
	break;
 800e042:	e0b0      	b.n	800e1a6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INTERRUPT_NOT_CLEARED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	4a61      	ldr	r2, [pc, #388]	; (800e1cc <VL53L0X_get_pal_error_string+0x3d0>)
 800e048:	461d      	mov	r5, r3
 800e04a:	4614      	mov	r4, r2
 800e04c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e04e:	6028      	str	r0, [r5, #0]
 800e050:	6069      	str	r1, [r5, #4]
 800e052:	60aa      	str	r2, [r5, #8]
 800e054:	60eb      	str	r3, [r5, #12]
 800e056:	6820      	ldr	r0, [r4, #0]
 800e058:	6128      	str	r0, [r5, #16]
 800e05a:	88a3      	ldrh	r3, [r4, #4]
 800e05c:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_INTERRUPT_NOT_CLEARED);
	break;
 800e05e:	e0a2      	b.n	800e1a6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_RANGE_ERROR:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	4a5b      	ldr	r2, [pc, #364]	; (800e1d0 <VL53L0X_get_pal_error_string+0x3d4>)
 800e064:	461c      	mov	r4, r3
 800e066:	4613      	mov	r3, r2
 800e068:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e06a:	6020      	str	r0, [r4, #0]
 800e06c:	6061      	str	r1, [r4, #4]
 800e06e:	60a2      	str	r2, [r4, #8]
			VL53L0X_STRING_ERROR_RANGE_ERROR);
	break;
 800e070:	e099      	b.n	800e1a6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_TIME_OUT:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	4a57      	ldr	r2, [pc, #348]	; (800e1d4 <VL53L0X_get_pal_error_string+0x3d8>)
 800e076:	461c      	mov	r4, r3
 800e078:	4613      	mov	r3, r2
 800e07a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e07c:	6020      	str	r0, [r4, #0]
 800e07e:	6061      	str	r1, [r4, #4]
 800e080:	60a2      	str	r2, [r4, #8]
 800e082:	881a      	ldrh	r2, [r3, #0]
 800e084:	789b      	ldrb	r3, [r3, #2]
 800e086:	81a2      	strh	r2, [r4, #12]
 800e088:	73a3      	strb	r3, [r4, #14]
			VL53L0X_STRING_ERROR_TIME_OUT);
	break;
 800e08a:	e08c      	b.n	800e1a6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_MODE_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	4a52      	ldr	r2, [pc, #328]	; (800e1d8 <VL53L0X_get_pal_error_string+0x3dc>)
 800e090:	461d      	mov	r5, r3
 800e092:	4614      	mov	r4, r2
 800e094:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e096:	6028      	str	r0, [r5, #0]
 800e098:	6069      	str	r1, [r5, #4]
 800e09a:	60aa      	str	r2, [r5, #8]
 800e09c:	60eb      	str	r3, [r5, #12]
 800e09e:	cc03      	ldmia	r4!, {r0, r1}
 800e0a0:	6128      	str	r0, [r5, #16]
 800e0a2:	6169      	str	r1, [r5, #20]
 800e0a4:	7823      	ldrb	r3, [r4, #0]
 800e0a6:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_MODE_NOT_SUPPORTED);
	break;
 800e0a8:	e07d      	b.n	800e1a6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_BUFFER_TOO_SMALL:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	4a4b      	ldr	r2, [pc, #300]	; (800e1dc <VL53L0X_get_pal_error_string+0x3e0>)
 800e0ae:	461d      	mov	r5, r3
 800e0b0:	4614      	mov	r4, r2
 800e0b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e0b4:	6028      	str	r0, [r5, #0]
 800e0b6:	6069      	str	r1, [r5, #4]
 800e0b8:	60aa      	str	r2, [r5, #8]
 800e0ba:	60eb      	str	r3, [r5, #12]
 800e0bc:	7823      	ldrb	r3, [r4, #0]
 800e0be:	742b      	strb	r3, [r5, #16]
			VL53L0X_STRING_ERROR_BUFFER_TOO_SMALL);
	break;
 800e0c0:	e071      	b.n	800e1a6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_GPIO_NOT_EXISTING:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	4a46      	ldr	r2, [pc, #280]	; (800e1e0 <VL53L0X_get_pal_error_string+0x3e4>)
 800e0c6:	461d      	mov	r5, r3
 800e0c8:	4614      	mov	r4, r2
 800e0ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e0cc:	6028      	str	r0, [r5, #0]
 800e0ce:	6069      	str	r1, [r5, #4]
 800e0d0:	60aa      	str	r2, [r5, #8]
 800e0d2:	60eb      	str	r3, [r5, #12]
 800e0d4:	8823      	ldrh	r3, [r4, #0]
 800e0d6:	822b      	strh	r3, [r5, #16]
			VL53L0X_STRING_ERROR_GPIO_NOT_EXISTING);
	break;
 800e0d8:	e065      	b.n	800e1a6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	4a41      	ldr	r2, [pc, #260]	; (800e1e4 <VL53L0X_get_pal_error_string+0x3e8>)
 800e0de:	461d      	mov	r5, r3
 800e0e0:	4614      	mov	r4, r2
 800e0e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e0e4:	6028      	str	r0, [r5, #0]
 800e0e6:	6069      	str	r1, [r5, #4]
 800e0e8:	60aa      	str	r2, [r5, #8]
 800e0ea:	60eb      	str	r3, [r5, #12]
 800e0ec:	cc03      	ldmia	r4!, {r0, r1}
 800e0ee:	6128      	str	r0, [r5, #16]
 800e0f0:	6169      	str	r1, [r5, #20]
 800e0f2:	7823      	ldrb	r3, [r4, #0]
 800e0f4:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED);
	break;
 800e0f6:	e056      	b.n	800e1a6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_CONTROL_INTERFACE:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	4a3b      	ldr	r2, [pc, #236]	; (800e1e8 <VL53L0X_get_pal_error_string+0x3ec>)
 800e0fc:	461d      	mov	r5, r3
 800e0fe:	4614      	mov	r4, r2
 800e100:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e102:	6028      	str	r0, [r5, #0]
 800e104:	6069      	str	r1, [r5, #4]
 800e106:	60aa      	str	r2, [r5, #8]
 800e108:	60eb      	str	r3, [r5, #12]
 800e10a:	cc03      	ldmia	r4!, {r0, r1}
 800e10c:	6128      	str	r0, [r5, #16]
 800e10e:	6169      	str	r1, [r5, #20]
			VL53L0X_STRING_ERROR_CONTROL_INTERFACE);
	break;
 800e110:	e049      	b.n	800e1a6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INVALID_COMMAND:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	4a35      	ldr	r2, [pc, #212]	; (800e1ec <VL53L0X_get_pal_error_string+0x3f0>)
 800e116:	461d      	mov	r5, r3
 800e118:	4614      	mov	r4, r2
 800e11a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e11c:	6028      	str	r0, [r5, #0]
 800e11e:	6069      	str	r1, [r5, #4]
 800e120:	60aa      	str	r2, [r5, #8]
 800e122:	60eb      	str	r3, [r5, #12]
 800e124:	6820      	ldr	r0, [r4, #0]
 800e126:	6128      	str	r0, [r5, #16]
 800e128:	88a3      	ldrh	r3, [r4, #4]
 800e12a:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_INVALID_COMMAND);
	break;
 800e12c:	e03b      	b.n	800e1a6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_DIVISION_BY_ZERO:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	4a2f      	ldr	r2, [pc, #188]	; (800e1f0 <VL53L0X_get_pal_error_string+0x3f4>)
 800e132:	461c      	mov	r4, r3
 800e134:	4615      	mov	r5, r2
 800e136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e138:	6020      	str	r0, [r4, #0]
 800e13a:	6061      	str	r1, [r4, #4]
 800e13c:	60a2      	str	r2, [r4, #8]
 800e13e:	60e3      	str	r3, [r4, #12]
 800e140:	6828      	ldr	r0, [r5, #0]
 800e142:	6120      	str	r0, [r4, #16]
 800e144:	88ab      	ldrh	r3, [r5, #4]
 800e146:	79aa      	ldrb	r2, [r5, #6]
 800e148:	82a3      	strh	r3, [r4, #20]
 800e14a:	4613      	mov	r3, r2
 800e14c:	75a3      	strb	r3, [r4, #22]
			VL53L0X_STRING_ERROR_DIVISION_BY_ZERO);
	break;
 800e14e:	e02a      	b.n	800e1a6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_REF_SPAD_INIT:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	4a28      	ldr	r2, [pc, #160]	; (800e1f4 <VL53L0X_get_pal_error_string+0x3f8>)
 800e154:	461d      	mov	r5, r3
 800e156:	4614      	mov	r4, r2
 800e158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e15a:	6028      	str	r0, [r5, #0]
 800e15c:	6069      	str	r1, [r5, #4]
 800e15e:	60aa      	str	r2, [r5, #8]
 800e160:	60eb      	str	r3, [r5, #12]
 800e162:	cc03      	ldmia	r4!, {r0, r1}
 800e164:	6128      	str	r0, [r5, #16]
 800e166:	6169      	str	r1, [r5, #20]
 800e168:	8823      	ldrh	r3, [r4, #0]
 800e16a:	832b      	strh	r3, [r5, #24]
			VL53L0X_STRING_ERROR_REF_SPAD_INIT);
	break;
 800e16c:	e01b      	b.n	800e1a6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_NOT_IMPLEMENTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	4a21      	ldr	r2, [pc, #132]	; (800e1f8 <VL53L0X_get_pal_error_string+0x3fc>)
 800e172:	461d      	mov	r5, r3
 800e174:	4614      	mov	r4, r2
 800e176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e178:	6028      	str	r0, [r5, #0]
 800e17a:	6069      	str	r1, [r5, #4]
 800e17c:	60aa      	str	r2, [r5, #8]
 800e17e:	60eb      	str	r3, [r5, #12]
 800e180:	6820      	ldr	r0, [r4, #0]
 800e182:	6128      	str	r0, [r5, #16]
 800e184:	88a3      	ldrh	r3, [r4, #4]
 800e186:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_NOT_IMPLEMENTED);
	break;
 800e188:	e00d      	b.n	800e1a6 <VL53L0X_get_pal_error_string+0x3aa>

	default:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	4a1b      	ldr	r2, [pc, #108]	; (800e1fc <VL53L0X_get_pal_error_string+0x400>)
 800e18e:	461d      	mov	r5, r3
 800e190:	4614      	mov	r4, r2
 800e192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e194:	6028      	str	r0, [r5, #0]
 800e196:	6069      	str	r1, [r5, #4]
 800e198:	60aa      	str	r2, [r5, #8]
 800e19a:	60eb      	str	r3, [r5, #12]
 800e19c:	8823      	ldrh	r3, [r4, #0]
 800e19e:	78a2      	ldrb	r2, [r4, #2]
 800e1a0:	822b      	strh	r3, [r5, #16]
 800e1a2:	4613      	mov	r3, r2
 800e1a4:	74ab      	strb	r3, [r5, #18]
				VL53L0X_STRING_UNKNOW_ERROR_CODE);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e1a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3714      	adds	r7, #20
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bcb0      	pop	{r4, r5, r7}
 800e1b2:	4770      	bx	lr
 800e1b4:	08014928 	.word	0x08014928
 800e1b8:	08014934 	.word	0x08014934
 800e1bc:	08014950 	.word	0x08014950
 800e1c0:	08014964 	.word	0x08014964
 800e1c4:	08014974 	.word	0x08014974
 800e1c8:	08014990 	.word	0x08014990
 800e1cc:	080149a4 	.word	0x080149a4
 800e1d0:	080149bc 	.word	0x080149bc
 800e1d4:	080149c8 	.word	0x080149c8
 800e1d8:	080149d8 	.word	0x080149d8
 800e1dc:	080149f4 	.word	0x080149f4
 800e1e0:	08014a08 	.word	0x08014a08
 800e1e4:	08014a1c 	.word	0x08014a1c
 800e1e8:	08014a38 	.word	0x08014a38
 800e1ec:	08014a50 	.word	0x08014a50
 800e1f0:	08014a68 	.word	0x08014a68
 800e1f4:	08014a80 	.word	0x08014a80
 800e1f8:	08014a9c 	.word	0x08014a9c
 800e1fc:	080148c4 	.word	0x080148c4

0800e200 <VL53L0X_write_multi>:
{
    return VL53L0X_ERROR_NONE;
}
 
int VL53L0X_write_multi(uint8_t deviceAddress, uint8_t index, uint8_t *pdata, uint32_t count)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b088      	sub	sp, #32
 800e204:	af02      	add	r7, sp, #8
 800e206:	60ba      	str	r2, [r7, #8]
 800e208:	607b      	str	r3, [r7, #4]
 800e20a:	4603      	mov	r3, r0
 800e20c:	73fb      	strb	r3, [r7, #15]
 800e20e:	460b      	mov	r3, r1
 800e210:	73bb      	strb	r3, [r7, #14]
    static uint8_t data[32];
 
    if (count >=(sizeof (data)-1) )
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2b1e      	cmp	r3, #30
 800e216:	d902      	bls.n	800e21e <VL53L0X_write_multi+0x1e>
    {
        return  VL53L0X_ERROR_UNDEFINED;
 800e218:	f06f 0302 	mvn.w	r3, #2
 800e21c:	e01e      	b.n	800e25c <VL53L0X_write_multi+0x5c>
    }
   
    data[0] = index;
 800e21e:	4a11      	ldr	r2, [pc, #68]	; (800e264 <VL53L0X_write_multi+0x64>)
 800e220:	7bbb      	ldrb	r3, [r7, #14]
 800e222:	7013      	strb	r3, [r2, #0]
    memcpy(data+1,pdata,count);
 800e224:	4b10      	ldr	r3, [pc, #64]	; (800e268 <VL53L0X_write_multi+0x68>)
 800e226:	687a      	ldr	r2, [r7, #4]
 800e228:	68b9      	ldr	r1, [r7, #8]
 800e22a:	4618      	mov	r0, r3
 800e22c:	f005 fdb2 	bl	8013d94 <memcpy>
 
//    HAL_StatusTypeDef status= HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)deviceAddress << 1, data, count+1, 1000);
    HAL_StatusTypeDef status= HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)deviceAddress, data, count+1, 1000);
 800e230:	7bfb      	ldrb	r3, [r7, #15]
 800e232:	b299      	uxth	r1, r3
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	b29b      	uxth	r3, r3
 800e238:	3301      	adds	r3, #1
 800e23a:	b29b      	uxth	r3, r3
 800e23c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e240:	9200      	str	r2, [sp, #0]
 800e242:	4a08      	ldr	r2, [pc, #32]	; (800e264 <VL53L0X_write_multi+0x64>)
 800e244:	4809      	ldr	r0, [pc, #36]	; (800e26c <VL53L0X_write_multi+0x6c>)
 800e246:	f7f4 f831 	bl	80022ac <HAL_I2C_Master_Transmit>
 800e24a:	4603      	mov	r3, r0
 800e24c:	75fb      	strb	r3, [r7, #23]
    return status == HAL_OK ? VL53L0X_ERROR_NONE : VL53L0X_ERROR_UNDEFINED;
 800e24e:	7dfb      	ldrb	r3, [r7, #23]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d101      	bne.n	800e258 <VL53L0X_write_multi+0x58>
 800e254:	2300      	movs	r3, #0
 800e256:	e001      	b.n	800e25c <VL53L0X_write_multi+0x5c>
 800e258:	f06f 0302 	mvn.w	r3, #2
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3718      	adds	r7, #24
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}
 800e264:	200007dc 	.word	0x200007dc
 800e268:	200007dd 	.word	0x200007dd
 800e26c:	20000658 	.word	0x20000658

0800e270 <VL53L0X_read_multi>:
 
int VL53L0X_read_multi(uint8_t deviceAddress, uint8_t index, uint8_t *pdata, uint32_t count)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b08a      	sub	sp, #40	; 0x28
 800e274:	af04      	add	r7, sp, #16
 800e276:	60ba      	str	r2, [r7, #8]
 800e278:	607b      	str	r3, [r7, #4]
 800e27a:	4603      	mov	r3, r0
 800e27c:	73fb      	strb	r3, [r7, #15]
 800e27e:	460b      	mov	r3, r1
 800e280:	73bb      	strb	r3, [r7, #14]
//    HAL_StatusTypeDef status= HAL_I2C_Mem_Read(&hi2c2, (uint16_t)deviceAddress << 1, index, 1, pdata, count, 1000);
	HAL_StatusTypeDef status= HAL_I2C_Mem_Read(&hi2c1, (uint16_t)deviceAddress, index, 1, pdata, count, 1000);
 800e282:	7bfb      	ldrb	r3, [r7, #15]
 800e284:	b299      	uxth	r1, r3
 800e286:	7bbb      	ldrb	r3, [r7, #14]
 800e288:	b29a      	uxth	r2, r3
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	b29b      	uxth	r3, r3
 800e28e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e292:	9002      	str	r0, [sp, #8]
 800e294:	9301      	str	r3, [sp, #4]
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	9300      	str	r3, [sp, #0]
 800e29a:	2301      	movs	r3, #1
 800e29c:	4807      	ldr	r0, [pc, #28]	; (800e2bc <VL53L0X_read_multi+0x4c>)
 800e29e:	f7f4 f8f9 	bl	8002494 <HAL_I2C_Mem_Read>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	75fb      	strb	r3, [r7, #23]
    return status == HAL_OK ? VL53L0X_ERROR_NONE : VL53L0X_ERROR_UNDEFINED;
 800e2a6:	7dfb      	ldrb	r3, [r7, #23]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d101      	bne.n	800e2b0 <VL53L0X_read_multi+0x40>
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	e001      	b.n	800e2b4 <VL53L0X_read_multi+0x44>
 800e2b0:	f06f 0302 	mvn.w	r3, #2
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	3718      	adds	r7, #24
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}
 800e2bc:	20000658 	.word	0x20000658

0800e2c0 <VL53L0X_write_byte>:
 
int VL53L0X_write_byte(uint8_t deviceAddress, uint8_t index, uint8_t data)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b086      	sub	sp, #24
 800e2c4:	af02      	add	r7, sp, #8
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	71fb      	strb	r3, [r7, #7]
 800e2ca:	460b      	mov	r3, r1
 800e2cc:	71bb      	strb	r3, [r7, #6]
 800e2ce:	4613      	mov	r3, r2
 800e2d0:	717b      	strb	r3, [r7, #5]
    uint8_t buff[2];
    buff[0] = index;
 800e2d2:	79bb      	ldrb	r3, [r7, #6]
 800e2d4:	733b      	strb	r3, [r7, #12]
    buff[1] = data;
 800e2d6:	797b      	ldrb	r3, [r7, #5]
 800e2d8:	737b      	strb	r3, [r7, #13]
 
//    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)deviceAddress << 1, buff, 2, 1000);
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)deviceAddress, buff, 2, 1000);
 800e2da:	79fb      	ldrb	r3, [r7, #7]
 800e2dc:	b299      	uxth	r1, r3
 800e2de:	f107 020c 	add.w	r2, r7, #12
 800e2e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e2e6:	9300      	str	r3, [sp, #0]
 800e2e8:	2302      	movs	r3, #2
 800e2ea:	4808      	ldr	r0, [pc, #32]	; (800e30c <VL53L0X_write_byte+0x4c>)
 800e2ec:	f7f3 ffde 	bl	80022ac <HAL_I2C_Master_Transmit>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	73fb      	strb	r3, [r7, #15]
    return status == HAL_OK ? VL53L0X_ERROR_NONE : VL53L0X_ERROR_UNDEFINED;
 800e2f4:	7bfb      	ldrb	r3, [r7, #15]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d101      	bne.n	800e2fe <VL53L0X_write_byte+0x3e>
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	e001      	b.n	800e302 <VL53L0X_write_byte+0x42>
 800e2fe:	f06f 0302 	mvn.w	r3, #2
 
}
 800e302:	4618      	mov	r0, r3
 800e304:	3710      	adds	r7, #16
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}
 800e30a:	bf00      	nop
 800e30c:	20000658 	.word	0x20000658

0800e310 <VL53L0X_write_word>:
 
int VL53L0X_write_word(uint8_t deviceAddress, uint8_t index, uint16_t data)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b086      	sub	sp, #24
 800e314:	af02      	add	r7, sp, #8
 800e316:	4603      	mov	r3, r0
 800e318:	71fb      	strb	r3, [r7, #7]
 800e31a:	460b      	mov	r3, r1
 800e31c:	71bb      	strb	r3, [r7, #6]
 800e31e:	4613      	mov	r3, r2
 800e320:	80bb      	strh	r3, [r7, #4]
    uint8_t buff[3];
    buff[2] = data & 0xFF;
 800e322:	88bb      	ldrh	r3, [r7, #4]
 800e324:	b2db      	uxtb	r3, r3
 800e326:	73bb      	strb	r3, [r7, #14]
    buff[1] = data >> 8;
 800e328:	88bb      	ldrh	r3, [r7, #4]
 800e32a:	0a1b      	lsrs	r3, r3, #8
 800e32c:	b29b      	uxth	r3, r3
 800e32e:	b2db      	uxtb	r3, r3
 800e330:	737b      	strb	r3, [r7, #13]
    buff[0] = index;
 800e332:	79bb      	ldrb	r3, [r7, #6]
 800e334:	733b      	strb	r3, [r7, #12]
 
//    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)deviceAddress << 1, buff, 3, 1000);
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)deviceAddress, buff, 3, 1000);
 800e336:	79fb      	ldrb	r3, [r7, #7]
 800e338:	b299      	uxth	r1, r3
 800e33a:	f107 020c 	add.w	r2, r7, #12
 800e33e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e342:	9300      	str	r3, [sp, #0]
 800e344:	2303      	movs	r3, #3
 800e346:	4808      	ldr	r0, [pc, #32]	; (800e368 <VL53L0X_write_word+0x58>)
 800e348:	f7f3 ffb0 	bl	80022ac <HAL_I2C_Master_Transmit>
 800e34c:	4603      	mov	r3, r0
 800e34e:	73fb      	strb	r3, [r7, #15]
    return status == HAL_OK ? VL53L0X_ERROR_NONE : VL53L0X_ERROR_UNDEFINED;
 800e350:	7bfb      	ldrb	r3, [r7, #15]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d101      	bne.n	800e35a <VL53L0X_write_word+0x4a>
 800e356:	2300      	movs	r3, #0
 800e358:	e001      	b.n	800e35e <VL53L0X_write_word+0x4e>
 800e35a:	f06f 0302 	mvn.w	r3, #2
 
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3710      	adds	r7, #16
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}
 800e366:	bf00      	nop
 800e368:	20000658 	.word	0x20000658

0800e36c <VL53L0X_read_byte>:
    return status == HAL_OK ? VL53L0X_ERROR_NONE : VL53L0X_ERROR_UNDEFINED;
 
}
 
int VL53L0X_read_byte(uint8_t deviceAddress, uint8_t index, uint8_t *data)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b088      	sub	sp, #32
 800e370:	af04      	add	r7, sp, #16
 800e372:	4603      	mov	r3, r0
 800e374:	603a      	str	r2, [r7, #0]
 800e376:	71fb      	strb	r3, [r7, #7]
 800e378:	460b      	mov	r3, r1
 800e37a:	71bb      	strb	r3, [r7, #6]
//   HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c2, (uint16_t)deviceAddress << 1, index, 1, data, 1, 1000);
   HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, (uint16_t)deviceAddress, index, 1, data, 1, 1000);
 800e37c:	79fb      	ldrb	r3, [r7, #7]
 800e37e:	b299      	uxth	r1, r3
 800e380:	79bb      	ldrb	r3, [r7, #6]
 800e382:	b29a      	uxth	r2, r3
 800e384:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e388:	9302      	str	r3, [sp, #8]
 800e38a:	2301      	movs	r3, #1
 800e38c:	9301      	str	r3, [sp, #4]
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	9300      	str	r3, [sp, #0]
 800e392:	2301      	movs	r3, #1
 800e394:	4807      	ldr	r0, [pc, #28]	; (800e3b4 <VL53L0X_read_byte+0x48>)
 800e396:	f7f4 f87d 	bl	8002494 <HAL_I2C_Mem_Read>
 800e39a:	4603      	mov	r3, r0
 800e39c:	73fb      	strb	r3, [r7, #15]
   return status == HAL_OK ? VL53L0X_ERROR_NONE : VL53L0X_ERROR_UNDEFINED;
 800e39e:	7bfb      	ldrb	r3, [r7, #15]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d101      	bne.n	800e3a8 <VL53L0X_read_byte+0x3c>
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	e001      	b.n	800e3ac <VL53L0X_read_byte+0x40>
 800e3a8:	f06f 0302 	mvn.w	r3, #2
 
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3710      	adds	r7, #16
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}
 800e3b4:	20000658 	.word	0x20000658

0800e3b8 <VL53L0X_read_word>:
 
int VL53L0X_read_word(uint8_t deviceAddress, uint8_t index, uint16_t *data)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b084      	sub	sp, #16
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	4603      	mov	r3, r0
 800e3c0:	603a      	str	r2, [r7, #0]
 800e3c2:	71fb      	strb	r3, [r7, #7]
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	71bb      	strb	r3, [r7, #6]
    uint8_t buff[2];
    int r = VL53L0X_read_multi(deviceAddress, index, buff, 2);
 800e3c8:	f107 0208 	add.w	r2, r7, #8
 800e3cc:	79b9      	ldrb	r1, [r7, #6]
 800e3ce:	79f8      	ldrb	r0, [r7, #7]
 800e3d0:	2302      	movs	r3, #2
 800e3d2:	f7ff ff4d 	bl	800e270 <VL53L0X_read_multi>
 800e3d6:	60f8      	str	r0, [r7, #12]
 
    uint16_t tmp;
    tmp = buff[0];
 800e3d8:	7a3b      	ldrb	r3, [r7, #8]
 800e3da:	817b      	strh	r3, [r7, #10]
    tmp <<= 8;
 800e3dc:	897b      	ldrh	r3, [r7, #10]
 800e3de:	021b      	lsls	r3, r3, #8
 800e3e0:	817b      	strh	r3, [r7, #10]
    tmp |= buff[1];
 800e3e2:	7a7b      	ldrb	r3, [r7, #9]
 800e3e4:	b29a      	uxth	r2, r3
 800e3e6:	897b      	ldrh	r3, [r7, #10]
 800e3e8:	4313      	orrs	r3, r2
 800e3ea:	817b      	strh	r3, [r7, #10]
    *data = tmp;
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	897a      	ldrh	r2, [r7, #10]
 800e3f0:	801a      	strh	r2, [r3, #0]
 
    return r;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3710      	adds	r7, #16
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <VL53L0X_read_dword>:
 
int VL53L0X_read_dword(uint8_t deviceAddress, uint8_t index, uint32_t *data)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b086      	sub	sp, #24
 800e400:	af00      	add	r7, sp, #0
 800e402:	4603      	mov	r3, r0
 800e404:	603a      	str	r2, [r7, #0]
 800e406:	71fb      	strb	r3, [r7, #7]
 800e408:	460b      	mov	r3, r1
 800e40a:	71bb      	strb	r3, [r7, #6]
    uint8_t buff[4];
    int r = VL53L0X_read_multi(deviceAddress, index, buff, 4);
 800e40c:	f107 020c 	add.w	r2, r7, #12
 800e410:	79b9      	ldrb	r1, [r7, #6]
 800e412:	79f8      	ldrb	r0, [r7, #7]
 800e414:	2304      	movs	r3, #4
 800e416:	f7ff ff2b 	bl	800e270 <VL53L0X_read_multi>
 800e41a:	6178      	str	r0, [r7, #20]
 
    uint32_t tmp;
    tmp = buff[0];
 800e41c:	7b3b      	ldrb	r3, [r7, #12]
 800e41e:	613b      	str	r3, [r7, #16]
    tmp <<= 8;
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	021b      	lsls	r3, r3, #8
 800e424:	613b      	str	r3, [r7, #16]
    tmp |= buff[1];
 800e426:	7b7b      	ldrb	r3, [r7, #13]
 800e428:	461a      	mov	r2, r3
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	4313      	orrs	r3, r2
 800e42e:	613b      	str	r3, [r7, #16]
    tmp <<= 8;
 800e430:	693b      	ldr	r3, [r7, #16]
 800e432:	021b      	lsls	r3, r3, #8
 800e434:	613b      	str	r3, [r7, #16]
    tmp |= buff[2];
 800e436:	7bbb      	ldrb	r3, [r7, #14]
 800e438:	461a      	mov	r2, r3
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	4313      	orrs	r3, r2
 800e43e:	613b      	str	r3, [r7, #16]
    tmp <<= 8;
 800e440:	693b      	ldr	r3, [r7, #16]
 800e442:	021b      	lsls	r3, r3, #8
 800e444:	613b      	str	r3, [r7, #16]
    tmp |= buff[3];
 800e446:	7bfb      	ldrb	r3, [r7, #15]
 800e448:	461a      	mov	r2, r3
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	4313      	orrs	r3, r2
 800e44e:	613b      	str	r3, [r7, #16]
 
    *data = tmp;
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	693a      	ldr	r2, [r7, #16]
 800e454:	601a      	str	r2, [r3, #0]
 
    return r;
 800e456:	697b      	ldr	r3, [r7, #20]
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3718      	adds	r7, #24
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <VL53L0X_WriteMulti>:

    return Status;
}

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 800e460:	b580      	push	{r7, lr}
 800e462:	b088      	sub	sp, #32
 800e464:	af00      	add	r7, sp, #0
 800e466:	60f8      	str	r0, [r7, #12]
 800e468:	607a      	str	r2, [r7, #4]
 800e46a:	603b      	str	r3, [r7, #0]
 800e46c:	460b      	mov	r3, r1
 800e46e:	72fb      	strb	r3, [r7, #11]

    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e470:	2300      	movs	r3, #0
 800e472:	77fb      	strb	r3, [r7, #31]
    int32_t status_int = 0;
 800e474:	2300      	movs	r3, #0
 800e476:	61bb      	str	r3, [r7, #24]
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	2b3f      	cmp	r3, #63	; 0x3f
 800e47c:	d901      	bls.n	800e482 <VL53L0X_WriteMulti+0x22>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e47e:	23fc      	movs	r3, #252	; 0xfc
 800e480:	77fb      	strb	r3, [r7, #31]
    }

	deviceAddress = Dev->I2cDevAddr;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800e488:	75fb      	strb	r3, [r7, #23]

	status_int = VL53L0X_write_multi(deviceAddress, index, pdata, count);
 800e48a:	7af9      	ldrb	r1, [r7, #11]
 800e48c:	7df8      	ldrb	r0, [r7, #23]
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	687a      	ldr	r2, [r7, #4]
 800e492:	f7ff feb5 	bl	800e200 <VL53L0X_write_multi>
 800e496:	61b8      	str	r0, [r7, #24]

	if (status_int != 0)
 800e498:	69bb      	ldr	r3, [r7, #24]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d001      	beq.n	800e4a2 <VL53L0X_WriteMulti+0x42>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e49e:	23ec      	movs	r3, #236	; 0xec
 800e4a0:	77fb      	strb	r3, [r7, #31]

    return Status;
 800e4a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3720      	adds	r7, #32
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}

0800e4ae <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 800e4ae:	b580      	push	{r7, lr}
 800e4b0:	b086      	sub	sp, #24
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	60f8      	str	r0, [r7, #12]
 800e4b6:	607a      	str	r2, [r7, #4]
 800e4b8:	603b      	str	r3, [r7, #0]
 800e4ba:	460b      	mov	r3, r1
 800e4bc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_I2C_USER_VAR
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	2b3f      	cmp	r3, #63	; 0x3f
 800e4c6:	d901      	bls.n	800e4cc <VL53L0X_ReadMulti+0x1e>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e4c8:	23fc      	movs	r3, #252	; 0xfc
 800e4ca:	75fb      	strb	r3, [r7, #23]
    }

    deviceAddress = Dev->I2cDevAddr;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800e4d2:	75bb      	strb	r3, [r7, #22]

	status_int = VL53L0X_read_multi(deviceAddress, index, pdata, count);
 800e4d4:	7af9      	ldrb	r1, [r7, #11]
 800e4d6:	7db8      	ldrb	r0, [r7, #22]
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	687a      	ldr	r2, [r7, #4]
 800e4dc:	f7ff fec8 	bl	800e270 <VL53L0X_read_multi>
 800e4e0:	6138      	str	r0, [r7, #16]

	if (status_int != 0)
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d001      	beq.n	800e4ec <VL53L0X_ReadMulti+0x3e>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e4e8:	23ec      	movs	r3, #236	; 0xec
 800e4ea:	75fb      	strb	r3, [r7, #23]

    return Status;
 800e4ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	3718      	adds	r7, #24
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}

0800e4f8 <VL53L0X_WrByte>:


VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data){
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b084      	sub	sp, #16
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	460b      	mov	r3, r1
 800e502:	70fb      	strb	r3, [r7, #3]
 800e504:	4613      	mov	r3, r2
 800e506:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e508:	2300      	movs	r3, #0
 800e50a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800e512:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_byte(deviceAddress, index, data);
 800e514:	78ba      	ldrb	r2, [r7, #2]
 800e516:	78f9      	ldrb	r1, [r7, #3]
 800e518:	7bbb      	ldrb	r3, [r7, #14]
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7ff fed0 	bl	800e2c0 <VL53L0X_write_byte>
 800e520:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d001      	beq.n	800e52c <VL53L0X_WrByte+0x34>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e528:	23ec      	movs	r3, #236	; 0xec
 800e52a:	73fb      	strb	r3, [r7, #15]

    return Status;
 800e52c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e530:	4618      	mov	r0, r3
 800e532:	3710      	adds	r7, #16
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}

0800e538 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data){
 800e538:	b580      	push	{r7, lr}
 800e53a:	b084      	sub	sp, #16
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
 800e540:	460b      	mov	r3, r1
 800e542:	70fb      	strb	r3, [r7, #3]
 800e544:	4613      	mov	r3, r2
 800e546:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e548:	2300      	movs	r3, #0
 800e54a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800e552:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_word(deviceAddress, index, data);
 800e554:	883a      	ldrh	r2, [r7, #0]
 800e556:	78f9      	ldrb	r1, [r7, #3]
 800e558:	7bbb      	ldrb	r3, [r7, #14]
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7ff fed8 	bl	800e310 <VL53L0X_write_word>
 800e560:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d001      	beq.n	800e56c <VL53L0X_WrWord+0x34>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e568:	23ec      	movs	r3, #236	; 0xec
 800e56a:	73fb      	strb	r3, [r7, #15]

    return Status;
 800e56c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e570:	4618      	mov	r0, r3
 800e572:	3710      	adds	r7, #16
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}

0800e578 <VL53L0X_UpdateByte>:
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData){
 800e578:	b580      	push	{r7, lr}
 800e57a:	b086      	sub	sp, #24
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	4608      	mov	r0, r1
 800e582:	4611      	mov	r1, r2
 800e584:	461a      	mov	r2, r3
 800e586:	4603      	mov	r3, r0
 800e588:	70fb      	strb	r3, [r7, #3]
 800e58a:	460b      	mov	r3, r1
 800e58c:	70bb      	strb	r3, [r7, #2]
 800e58e:	4613      	mov	r3, r2
 800e590:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e592:	2300      	movs	r3, #0
 800e594:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;
    uint8_t data;

    deviceAddress = Dev->I2cDevAddr;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800e59c:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(deviceAddress, index, &data);
 800e59e:	f107 020f 	add.w	r2, r7, #15
 800e5a2:	78f9      	ldrb	r1, [r7, #3]
 800e5a4:	7dbb      	ldrb	r3, [r7, #22]
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7ff fee0 	bl	800e36c <VL53L0X_read_byte>
 800e5ac:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d001      	beq.n	800e5b8 <VL53L0X_UpdateByte+0x40>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e5b4:	23ec      	movs	r3, #236	; 0xec
 800e5b6:	75fb      	strb	r3, [r7, #23]

    if (Status == VL53L0X_ERROR_NONE) {
 800e5b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d113      	bne.n	800e5e8 <VL53L0X_UpdateByte+0x70>
        data = (data & AndData) | OrData;
 800e5c0:	7bfa      	ldrb	r2, [r7, #15]
 800e5c2:	78bb      	ldrb	r3, [r7, #2]
 800e5c4:	4013      	ands	r3, r2
 800e5c6:	b2da      	uxtb	r2, r3
 800e5c8:	787b      	ldrb	r3, [r7, #1]
 800e5ca:	4313      	orrs	r3, r2
 800e5cc:	b2db      	uxtb	r3, r3
 800e5ce:	73fb      	strb	r3, [r7, #15]
        status_int = VL53L0X_write_byte(deviceAddress, index, data);
 800e5d0:	7bfa      	ldrb	r2, [r7, #15]
 800e5d2:	78f9      	ldrb	r1, [r7, #3]
 800e5d4:	7dbb      	ldrb	r3, [r7, #22]
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7ff fe72 	bl	800e2c0 <VL53L0X_write_byte>
 800e5dc:	6138      	str	r0, [r7, #16]

        if (status_int != 0)
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d001      	beq.n	800e5e8 <VL53L0X_UpdateByte+0x70>
            Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e5e4:	23ec      	movs	r3, #236	; 0xec
 800e5e6:	75fb      	strb	r3, [r7, #23]
    }

    return Status;
 800e5e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3718      	adds	r7, #24
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data){
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b086      	sub	sp, #24
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	60f8      	str	r0, [r7, #12]
 800e5fc:	460b      	mov	r3, r1
 800e5fe:	607a      	str	r2, [r7, #4]
 800e600:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e602:	2300      	movs	r3, #0
 800e604:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800e60c:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(deviceAddress, index, data);
 800e60e:	7af9      	ldrb	r1, [r7, #11]
 800e610:	7dbb      	ldrb	r3, [r7, #22]
 800e612:	687a      	ldr	r2, [r7, #4]
 800e614:	4618      	mov	r0, r3
 800e616:	f7ff fea9 	bl	800e36c <VL53L0X_read_byte>
 800e61a:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d001      	beq.n	800e626 <VL53L0X_RdByte+0x32>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e622:	23ec      	movs	r3, #236	; 0xec
 800e624:	75fb      	strb	r3, [r7, #23]

    return Status;
 800e626:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	3718      	adds	r7, #24
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}

0800e632 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data){
 800e632:	b580      	push	{r7, lr}
 800e634:	b086      	sub	sp, #24
 800e636:	af00      	add	r7, sp, #0
 800e638:	60f8      	str	r0, [r7, #12]
 800e63a:	460b      	mov	r3, r1
 800e63c:	607a      	str	r2, [r7, #4]
 800e63e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e640:	2300      	movs	r3, #0
 800e642:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800e64a:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_word(deviceAddress, index, data);
 800e64c:	7af9      	ldrb	r1, [r7, #11]
 800e64e:	7dbb      	ldrb	r3, [r7, #22]
 800e650:	687a      	ldr	r2, [r7, #4]
 800e652:	4618      	mov	r0, r3
 800e654:	f7ff feb0 	bl	800e3b8 <VL53L0X_read_word>
 800e658:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d001      	beq.n	800e664 <VL53L0X_RdWord+0x32>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e660:	23ec      	movs	r3, #236	; 0xec
 800e662:	75fb      	strb	r3, [r7, #23]

    return Status;
 800e664:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3718      	adds	r7, #24
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <VL53L0X_RdDWord>:

VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data){
 800e670:	b580      	push	{r7, lr}
 800e672:	b086      	sub	sp, #24
 800e674:	af00      	add	r7, sp, #0
 800e676:	60f8      	str	r0, [r7, #12]
 800e678:	460b      	mov	r3, r1
 800e67a:	607a      	str	r2, [r7, #4]
 800e67c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e67e:	2300      	movs	r3, #0
 800e680:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800e688:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_dword(deviceAddress, index, data);
 800e68a:	7af9      	ldrb	r1, [r7, #11]
 800e68c:	7dbb      	ldrb	r3, [r7, #22]
 800e68e:	687a      	ldr	r2, [r7, #4]
 800e690:	4618      	mov	r0, r3
 800e692:	f7ff feb3 	bl	800e3fc <VL53L0X_read_dword>
 800e696:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800e698:	693b      	ldr	r3, [r7, #16]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d001      	beq.n	800e6a2 <VL53L0X_RdDWord+0x32>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e69e:	23ec      	movs	r3, #236	; 0xec
 800e6a0:	75fb      	strb	r3, [r7, #23]

    return Status;
 800e6a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3718      	adds	r7, #24
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}

0800e6ae <VL53L0X_PollingDelay>:

#define VL53L0X_POLLINGDELAY_LOOPNB  250
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev){
 800e6ae:	b480      	push	{r7}
 800e6b0:	b083      	sub	sp, #12
 800e6b2:	af00      	add	r7, sp, #0
 800e6b4:	6078      	str	r0, [r7, #4]
//        WaitForSingleObject(hEvent,cTimeout_ms);
//    }
//
//    LOG_FUNCTION_END(status);
//	HAL_Delay(2);
    return VL53L0X_ERROR_NONE;
 800e6b6:	2300      	movs	r3, #0
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	370c      	adds	r7, #12
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c2:	4770      	bx	lr

0800e6c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b084      	sub	sp, #16
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
 800e6cc:	460b      	mov	r3, r1
 800e6ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e6d0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e6d4:	f005 f868 	bl	80137a8 <USBD_static_malloc>
 800e6d8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d105      	bne.n	800e6ec <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e6e8:	2302      	movs	r3, #2
 800e6ea:	e066      	b.n	800e7ba <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	68fa      	ldr	r2, [r7, #12]
 800e6f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	7c1b      	ldrb	r3, [r3, #16]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d119      	bne.n	800e730 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e6fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e700:	2202      	movs	r2, #2
 800e702:	2181      	movs	r1, #129	; 0x81
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f004 fef4 	bl	80134f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2201      	movs	r2, #1
 800e70e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e710:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e714:	2202      	movs	r2, #2
 800e716:	2101      	movs	r1, #1
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f004 feea 	bl	80134f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2201      	movs	r2, #1
 800e722:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2210      	movs	r2, #16
 800e72a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e72e:	e016      	b.n	800e75e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e730:	2340      	movs	r3, #64	; 0x40
 800e732:	2202      	movs	r2, #2
 800e734:	2181      	movs	r1, #129	; 0x81
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f004 fedb 	bl	80134f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2201      	movs	r2, #1
 800e740:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e742:	2340      	movs	r3, #64	; 0x40
 800e744:	2202      	movs	r2, #2
 800e746:	2101      	movs	r1, #1
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f004 fed2 	bl	80134f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2201      	movs	r2, #1
 800e752:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2210      	movs	r2, #16
 800e75a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e75e:	2308      	movs	r3, #8
 800e760:	2203      	movs	r2, #3
 800e762:	2182      	movs	r1, #130	; 0x82
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f004 fec4 	bl	80134f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2201      	movs	r2, #1
 800e76e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	2200      	movs	r2, #0
 800e780:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	2200      	movs	r2, #0
 800e788:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	7c1b      	ldrb	r3, [r3, #16]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d109      	bne.n	800e7a8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e79a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e79e:	2101      	movs	r1, #1
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f004 ff96 	bl	80136d2 <USBD_LL_PrepareReceive>
 800e7a6:	e007      	b.n	800e7b8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e7ae:	2340      	movs	r3, #64	; 0x40
 800e7b0:	2101      	movs	r1, #1
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f004 ff8d 	bl	80136d2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e7b8:	2300      	movs	r3, #0
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3710      	adds	r7, #16
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}

0800e7c2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e7c2:	b580      	push	{r7, lr}
 800e7c4:	b082      	sub	sp, #8
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
 800e7ca:	460b      	mov	r3, r1
 800e7cc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e7ce:	2181      	movs	r1, #129	; 0x81
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f004 feb4 	bl	801353e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e7dc:	2101      	movs	r1, #1
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f004 fead 	bl	801353e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e7ec:	2182      	movs	r1, #130	; 0x82
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f004 fea5 	bl	801353e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2200      	movs	r2, #0
 800e800:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d00e      	beq.n	800e82c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e814:	685b      	ldr	r3, [r3, #4]
 800e816:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e81e:	4618      	mov	r0, r3
 800e820:	f004 ffd0 	bl	80137c4 <USBD_static_free>
    pdev->pClassData = NULL;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2200      	movs	r2, #0
 800e828:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e82c:	2300      	movs	r3, #0
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3708      	adds	r7, #8
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}
	...

0800e838 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b086      	sub	sp, #24
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
 800e840:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e848:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e84a:	2300      	movs	r3, #0
 800e84c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e84e:	2300      	movs	r3, #0
 800e850:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e852:	2300      	movs	r3, #0
 800e854:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e856:	693b      	ldr	r3, [r7, #16]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d101      	bne.n	800e860 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e85c:	2303      	movs	r3, #3
 800e85e:	e0af      	b.n	800e9c0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	781b      	ldrb	r3, [r3, #0]
 800e864:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d03f      	beq.n	800e8ec <USBD_CDC_Setup+0xb4>
 800e86c:	2b20      	cmp	r3, #32
 800e86e:	f040 809f 	bne.w	800e9b0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	88db      	ldrh	r3, [r3, #6]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d02e      	beq.n	800e8d8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	781b      	ldrb	r3, [r3, #0]
 800e87e:	b25b      	sxtb	r3, r3
 800e880:	2b00      	cmp	r3, #0
 800e882:	da16      	bge.n	800e8b2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e88a:	689b      	ldr	r3, [r3, #8]
 800e88c:	683a      	ldr	r2, [r7, #0]
 800e88e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e890:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e892:	683a      	ldr	r2, [r7, #0]
 800e894:	88d2      	ldrh	r2, [r2, #6]
 800e896:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	88db      	ldrh	r3, [r3, #6]
 800e89c:	2b07      	cmp	r3, #7
 800e89e:	bf28      	it	cs
 800e8a0:	2307      	movcs	r3, #7
 800e8a2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	89fa      	ldrh	r2, [r7, #14]
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f001 facf 	bl	800fe4e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e8b0:	e085      	b.n	800e9be <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	785a      	ldrb	r2, [r3, #1]
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	88db      	ldrh	r3, [r3, #6]
 800e8c0:	b2da      	uxtb	r2, r3
 800e8c2:	693b      	ldr	r3, [r7, #16]
 800e8c4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e8c8:	6939      	ldr	r1, [r7, #16]
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	88db      	ldrh	r3, [r3, #6]
 800e8ce:	461a      	mov	r2, r3
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f001 fae8 	bl	800fea6 <USBD_CtlPrepareRx>
      break;
 800e8d6:	e072      	b.n	800e9be <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e8de:	689b      	ldr	r3, [r3, #8]
 800e8e0:	683a      	ldr	r2, [r7, #0]
 800e8e2:	7850      	ldrb	r0, [r2, #1]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	6839      	ldr	r1, [r7, #0]
 800e8e8:	4798      	blx	r3
      break;
 800e8ea:	e068      	b.n	800e9be <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	785b      	ldrb	r3, [r3, #1]
 800e8f0:	2b0b      	cmp	r3, #11
 800e8f2:	d852      	bhi.n	800e99a <USBD_CDC_Setup+0x162>
 800e8f4:	a201      	add	r2, pc, #4	; (adr r2, 800e8fc <USBD_CDC_Setup+0xc4>)
 800e8f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8fa:	bf00      	nop
 800e8fc:	0800e92d 	.word	0x0800e92d
 800e900:	0800e9a9 	.word	0x0800e9a9
 800e904:	0800e99b 	.word	0x0800e99b
 800e908:	0800e99b 	.word	0x0800e99b
 800e90c:	0800e99b 	.word	0x0800e99b
 800e910:	0800e99b 	.word	0x0800e99b
 800e914:	0800e99b 	.word	0x0800e99b
 800e918:	0800e99b 	.word	0x0800e99b
 800e91c:	0800e99b 	.word	0x0800e99b
 800e920:	0800e99b 	.word	0x0800e99b
 800e924:	0800e957 	.word	0x0800e957
 800e928:	0800e981 	.word	0x0800e981
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e932:	b2db      	uxtb	r3, r3
 800e934:	2b03      	cmp	r3, #3
 800e936:	d107      	bne.n	800e948 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e938:	f107 030a 	add.w	r3, r7, #10
 800e93c:	2202      	movs	r2, #2
 800e93e:	4619      	mov	r1, r3
 800e940:	6878      	ldr	r0, [r7, #4]
 800e942:	f001 fa84 	bl	800fe4e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e946:	e032      	b.n	800e9ae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e948:	6839      	ldr	r1, [r7, #0]
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f001 fa0e 	bl	800fd6c <USBD_CtlError>
            ret = USBD_FAIL;
 800e950:	2303      	movs	r3, #3
 800e952:	75fb      	strb	r3, [r7, #23]
          break;
 800e954:	e02b      	b.n	800e9ae <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e95c:	b2db      	uxtb	r3, r3
 800e95e:	2b03      	cmp	r3, #3
 800e960:	d107      	bne.n	800e972 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e962:	f107 030d 	add.w	r3, r7, #13
 800e966:	2201      	movs	r2, #1
 800e968:	4619      	mov	r1, r3
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f001 fa6f 	bl	800fe4e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e970:	e01d      	b.n	800e9ae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e972:	6839      	ldr	r1, [r7, #0]
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f001 f9f9 	bl	800fd6c <USBD_CtlError>
            ret = USBD_FAIL;
 800e97a:	2303      	movs	r3, #3
 800e97c:	75fb      	strb	r3, [r7, #23]
          break;
 800e97e:	e016      	b.n	800e9ae <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e986:	b2db      	uxtb	r3, r3
 800e988:	2b03      	cmp	r3, #3
 800e98a:	d00f      	beq.n	800e9ac <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e98c:	6839      	ldr	r1, [r7, #0]
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f001 f9ec 	bl	800fd6c <USBD_CtlError>
            ret = USBD_FAIL;
 800e994:	2303      	movs	r3, #3
 800e996:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e998:	e008      	b.n	800e9ac <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e99a:	6839      	ldr	r1, [r7, #0]
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f001 f9e5 	bl	800fd6c <USBD_CtlError>
          ret = USBD_FAIL;
 800e9a2:	2303      	movs	r3, #3
 800e9a4:	75fb      	strb	r3, [r7, #23]
          break;
 800e9a6:	e002      	b.n	800e9ae <USBD_CDC_Setup+0x176>
          break;
 800e9a8:	bf00      	nop
 800e9aa:	e008      	b.n	800e9be <USBD_CDC_Setup+0x186>
          break;
 800e9ac:	bf00      	nop
      }
      break;
 800e9ae:	e006      	b.n	800e9be <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e9b0:	6839      	ldr	r1, [r7, #0]
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f001 f9da 	bl	800fd6c <USBD_CtlError>
      ret = USBD_FAIL;
 800e9b8:	2303      	movs	r3, #3
 800e9ba:	75fb      	strb	r3, [r7, #23]
      break;
 800e9bc:	bf00      	nop
  }

  return (uint8_t)ret;
 800e9be:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3718      	adds	r7, #24
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b084      	sub	sp, #16
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	460b      	mov	r3, r1
 800e9d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e9da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d101      	bne.n	800e9ea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e9e6:	2303      	movs	r3, #3
 800e9e8:	e04f      	b.n	800ea8a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e9f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e9f2:	78fa      	ldrb	r2, [r7, #3]
 800e9f4:	6879      	ldr	r1, [r7, #4]
 800e9f6:	4613      	mov	r3, r2
 800e9f8:	009b      	lsls	r3, r3, #2
 800e9fa:	4413      	add	r3, r2
 800e9fc:	009b      	lsls	r3, r3, #2
 800e9fe:	440b      	add	r3, r1
 800ea00:	3318      	adds	r3, #24
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d029      	beq.n	800ea5c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ea08:	78fa      	ldrb	r2, [r7, #3]
 800ea0a:	6879      	ldr	r1, [r7, #4]
 800ea0c:	4613      	mov	r3, r2
 800ea0e:	009b      	lsls	r3, r3, #2
 800ea10:	4413      	add	r3, r2
 800ea12:	009b      	lsls	r3, r3, #2
 800ea14:	440b      	add	r3, r1
 800ea16:	3318      	adds	r3, #24
 800ea18:	681a      	ldr	r2, [r3, #0]
 800ea1a:	78f9      	ldrb	r1, [r7, #3]
 800ea1c:	68f8      	ldr	r0, [r7, #12]
 800ea1e:	460b      	mov	r3, r1
 800ea20:	009b      	lsls	r3, r3, #2
 800ea22:	440b      	add	r3, r1
 800ea24:	00db      	lsls	r3, r3, #3
 800ea26:	4403      	add	r3, r0
 800ea28:	333c      	adds	r3, #60	; 0x3c
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	fbb2 f1f3 	udiv	r1, r2, r3
 800ea30:	fb01 f303 	mul.w	r3, r1, r3
 800ea34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d110      	bne.n	800ea5c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ea3a:	78fa      	ldrb	r2, [r7, #3]
 800ea3c:	6879      	ldr	r1, [r7, #4]
 800ea3e:	4613      	mov	r3, r2
 800ea40:	009b      	lsls	r3, r3, #2
 800ea42:	4413      	add	r3, r2
 800ea44:	009b      	lsls	r3, r3, #2
 800ea46:	440b      	add	r3, r1
 800ea48:	3318      	adds	r3, #24
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ea4e:	78f9      	ldrb	r1, [r7, #3]
 800ea50:	2300      	movs	r3, #0
 800ea52:	2200      	movs	r2, #0
 800ea54:	6878      	ldr	r0, [r7, #4]
 800ea56:	f004 fe1b 	bl	8013690 <USBD_LL_Transmit>
 800ea5a:	e015      	b.n	800ea88 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ea6a:	691b      	ldr	r3, [r3, #16]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d00b      	beq.n	800ea88 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ea76:	691b      	ldr	r3, [r3, #16]
 800ea78:	68ba      	ldr	r2, [r7, #8]
 800ea7a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ea7e:	68ba      	ldr	r2, [r7, #8]
 800ea80:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ea84:	78fa      	ldrb	r2, [r7, #3]
 800ea86:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ea88:	2300      	movs	r3, #0
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	3710      	adds	r7, #16
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}

0800ea92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ea92:	b580      	push	{r7, lr}
 800ea94:	b084      	sub	sp, #16
 800ea96:	af00      	add	r7, sp, #0
 800ea98:	6078      	str	r0, [r7, #4]
 800ea9a:	460b      	mov	r3, r1
 800ea9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eaa4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d101      	bne.n	800eab4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800eab0:	2303      	movs	r3, #3
 800eab2:	e015      	b.n	800eae0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800eab4:	78fb      	ldrb	r3, [r7, #3]
 800eab6:	4619      	mov	r1, r3
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f004 fe2b 	bl	8013714 <USBD_LL_GetRxDataSize>
 800eabe:	4602      	mov	r2, r0
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eacc:	68db      	ldr	r3, [r3, #12]
 800eace:	68fa      	ldr	r2, [r7, #12]
 800ead0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ead4:	68fa      	ldr	r2, [r7, #12]
 800ead6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800eada:	4611      	mov	r1, r2
 800eadc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800eade:	2300      	movs	r3, #0
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	3710      	adds	r7, #16
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd80      	pop	{r7, pc}

0800eae8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b084      	sub	sp, #16
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eaf6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d101      	bne.n	800eb02 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800eafe:	2303      	movs	r3, #3
 800eb00:	e01b      	b.n	800eb3a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d015      	beq.n	800eb38 <USBD_CDC_EP0_RxReady+0x50>
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800eb12:	2bff      	cmp	r3, #255	; 0xff
 800eb14:	d010      	beq.n	800eb38 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eb1c:	689b      	ldr	r3, [r3, #8]
 800eb1e:	68fa      	ldr	r2, [r7, #12]
 800eb20:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800eb24:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800eb26:	68fa      	ldr	r2, [r7, #12]
 800eb28:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800eb2c:	b292      	uxth	r2, r2
 800eb2e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	22ff      	movs	r2, #255	; 0xff
 800eb34:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800eb38:	2300      	movs	r3, #0
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3710      	adds	r7, #16
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd80      	pop	{r7, pc}
	...

0800eb44 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800eb44:	b480      	push	{r7}
 800eb46:	b083      	sub	sp, #12
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2243      	movs	r2, #67	; 0x43
 800eb50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800eb52:	4b03      	ldr	r3, [pc, #12]	; (800eb60 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	370c      	adds	r7, #12
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5e:	4770      	bx	lr
 800eb60:	20000358 	.word	0x20000358

0800eb64 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800eb64:	b480      	push	{r7}
 800eb66:	b083      	sub	sp, #12
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2243      	movs	r2, #67	; 0x43
 800eb70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800eb72:	4b03      	ldr	r3, [pc, #12]	; (800eb80 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	370c      	adds	r7, #12
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7e:	4770      	bx	lr
 800eb80:	20000314 	.word	0x20000314

0800eb84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b083      	sub	sp, #12
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2243      	movs	r2, #67	; 0x43
 800eb90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800eb92:	4b03      	ldr	r3, [pc, #12]	; (800eba0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	370c      	adds	r7, #12
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9e:	4770      	bx	lr
 800eba0:	2000039c 	.word	0x2000039c

0800eba4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800eba4:	b480      	push	{r7}
 800eba6:	b083      	sub	sp, #12
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	220a      	movs	r2, #10
 800ebb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ebb2:	4b03      	ldr	r3, [pc, #12]	; (800ebc0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	370c      	adds	r7, #12
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr
 800ebc0:	200002d0 	.word	0x200002d0

0800ebc4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b083      	sub	sp, #12
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d101      	bne.n	800ebd8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ebd4:	2303      	movs	r3, #3
 800ebd6:	e004      	b.n	800ebe2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	683a      	ldr	r2, [r7, #0]
 800ebdc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800ebe0:	2300      	movs	r3, #0
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	370c      	adds	r7, #12
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebec:	4770      	bx	lr

0800ebee <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ebee:	b480      	push	{r7}
 800ebf0:	b087      	sub	sp, #28
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	60f8      	str	r0, [r7, #12]
 800ebf6:	60b9      	str	r1, [r7, #8]
 800ebf8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec00:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d101      	bne.n	800ec0c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ec08:	2303      	movs	r3, #3
 800ec0a:	e008      	b.n	800ec1e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	68ba      	ldr	r2, [r7, #8]
 800ec10:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ec14:	697b      	ldr	r3, [r7, #20]
 800ec16:	687a      	ldr	r2, [r7, #4]
 800ec18:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ec1c:	2300      	movs	r3, #0
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	371c      	adds	r7, #28
 800ec22:	46bd      	mov	sp, r7
 800ec24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec28:	4770      	bx	lr

0800ec2a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ec2a:	b480      	push	{r7}
 800ec2c:	b085      	sub	sp, #20
 800ec2e:	af00      	add	r7, sp, #0
 800ec30:	6078      	str	r0, [r7, #4]
 800ec32:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec3a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d101      	bne.n	800ec46 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ec42:	2303      	movs	r3, #3
 800ec44:	e004      	b.n	800ec50 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	683a      	ldr	r2, [r7, #0]
 800ec4a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ec4e:	2300      	movs	r3, #0
}
 800ec50:	4618      	mov	r0, r3
 800ec52:	3714      	adds	r7, #20
 800ec54:	46bd      	mov	sp, r7
 800ec56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5a:	4770      	bx	lr

0800ec5c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b084      	sub	sp, #16
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec6a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d101      	bne.n	800ec7e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ec7a:	2303      	movs	r3, #3
 800ec7c:	e01a      	b.n	800ecb4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d114      	bne.n	800ecb2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	2201      	movs	r2, #1
 800ec8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800eca6:	2181      	movs	r1, #129	; 0x81
 800eca8:	6878      	ldr	r0, [r7, #4]
 800ecaa:	f004 fcf1 	bl	8013690 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ecb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	3710      	adds	r7, #16
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}

0800ecbc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b084      	sub	sp, #16
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ecca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d101      	bne.n	800ecda <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ecd6:	2303      	movs	r3, #3
 800ecd8:	e016      	b.n	800ed08 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	7c1b      	ldrb	r3, [r3, #16]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d109      	bne.n	800ecf6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ece8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ecec:	2101      	movs	r1, #1
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f004 fcef 	bl	80136d2 <USBD_LL_PrepareReceive>
 800ecf4:	e007      	b.n	800ed06 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ecfc:	2340      	movs	r3, #64	; 0x40
 800ecfe:	2101      	movs	r1, #1
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f004 fce6 	bl	80136d2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ed06:	2300      	movs	r3, #0
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3710      	adds	r7, #16
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b086      	sub	sp, #24
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	60f8      	str	r0, [r7, #12]
 800ed18:	60b9      	str	r1, [r7, #8]
 800ed1a:	4613      	mov	r3, r2
 800ed1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d101      	bne.n	800ed28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ed24:	2303      	movs	r3, #3
 800ed26:	e01f      	b.n	800ed68 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	2200      	movs	r2, #0
 800ed34:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d003      	beq.n	800ed4e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	68ba      	ldr	r2, [r7, #8]
 800ed4a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	2201      	movs	r2, #1
 800ed52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	79fa      	ldrb	r2, [r7, #7]
 800ed5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ed5c:	68f8      	ldr	r0, [r7, #12]
 800ed5e:	f004 fb4b 	bl	80133f8 <USBD_LL_Init>
 800ed62:	4603      	mov	r3, r0
 800ed64:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ed66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3718      	adds	r7, #24
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}

0800ed70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b084      	sub	sp, #16
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d101      	bne.n	800ed88 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ed84:	2303      	movs	r3, #3
 800ed86:	e016      	b.n	800edb6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	683a      	ldr	r2, [r7, #0]
 800ed8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d00b      	beq.n	800edb4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eda4:	f107 020e 	add.w	r2, r7, #14
 800eda8:	4610      	mov	r0, r2
 800edaa:	4798      	blx	r3
 800edac:	4602      	mov	r2, r0
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800edb4:	2300      	movs	r3, #0
}
 800edb6:	4618      	mov	r0, r3
 800edb8:	3710      	adds	r7, #16
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}

0800edbe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800edbe:	b580      	push	{r7, lr}
 800edc0:	b082      	sub	sp, #8
 800edc2:	af00      	add	r7, sp, #0
 800edc4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f004 fb78 	bl	80134bc <USBD_LL_Start>
 800edcc:	4603      	mov	r3, r0
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3708      	adds	r7, #8
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}

0800edd6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800edd6:	b480      	push	{r7}
 800edd8:	b083      	sub	sp, #12
 800edda:	af00      	add	r7, sp, #0
 800eddc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800edde:	2300      	movs	r3, #0
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	370c      	adds	r7, #12
 800ede4:	46bd      	mov	sp, r7
 800ede6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edea:	4770      	bx	lr

0800edec <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b084      	sub	sp, #16
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	460b      	mov	r3, r1
 800edf6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800edf8:	2303      	movs	r3, #3
 800edfa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d009      	beq.n	800ee1a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	78fa      	ldrb	r2, [r7, #3]
 800ee10:	4611      	mov	r1, r2
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	4798      	blx	r3
 800ee16:	4603      	mov	r3, r0
 800ee18:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ee1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3710      	adds	r7, #16
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}

0800ee24 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b082      	sub	sp, #8
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
 800ee2c:	460b      	mov	r3, r1
 800ee2e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d007      	beq.n	800ee4a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee40:	685b      	ldr	r3, [r3, #4]
 800ee42:	78fa      	ldrb	r2, [r7, #3]
 800ee44:	4611      	mov	r1, r2
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	4798      	blx	r3
  }

  return USBD_OK;
 800ee4a:	2300      	movs	r3, #0
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3708      	adds	r7, #8
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}

0800ee54 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b084      	sub	sp, #16
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ee64:	6839      	ldr	r1, [r7, #0]
 800ee66:	4618      	mov	r0, r3
 800ee68:	f000 ff46 	bl	800fcf8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2201      	movs	r2, #1
 800ee70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ee7a:	461a      	mov	r2, r3
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ee88:	f003 031f 	and.w	r3, r3, #31
 800ee8c:	2b02      	cmp	r3, #2
 800ee8e:	d01a      	beq.n	800eec6 <USBD_LL_SetupStage+0x72>
 800ee90:	2b02      	cmp	r3, #2
 800ee92:	d822      	bhi.n	800eeda <USBD_LL_SetupStage+0x86>
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d002      	beq.n	800ee9e <USBD_LL_SetupStage+0x4a>
 800ee98:	2b01      	cmp	r3, #1
 800ee9a:	d00a      	beq.n	800eeb2 <USBD_LL_SetupStage+0x5e>
 800ee9c:	e01d      	b.n	800eeda <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eea4:	4619      	mov	r1, r3
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	f000 f9ee 	bl	800f288 <USBD_StdDevReq>
 800eeac:	4603      	mov	r3, r0
 800eeae:	73fb      	strb	r3, [r7, #15]
      break;
 800eeb0:	e020      	b.n	800eef4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eeb8:	4619      	mov	r1, r3
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f000 fa52 	bl	800f364 <USBD_StdItfReq>
 800eec0:	4603      	mov	r3, r0
 800eec2:	73fb      	strb	r3, [r7, #15]
      break;
 800eec4:	e016      	b.n	800eef4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eecc:	4619      	mov	r1, r3
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f000 fa91 	bl	800f3f6 <USBD_StdEPReq>
 800eed4:	4603      	mov	r3, r0
 800eed6:	73fb      	strb	r3, [r7, #15]
      break;
 800eed8:	e00c      	b.n	800eef4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eee0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800eee4:	b2db      	uxtb	r3, r3
 800eee6:	4619      	mov	r1, r3
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f004 fb47 	bl	801357c <USBD_LL_StallEP>
 800eeee:	4603      	mov	r3, r0
 800eef0:	73fb      	strb	r3, [r7, #15]
      break;
 800eef2:	bf00      	nop
  }

  return ret;
 800eef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3710      	adds	r7, #16
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}

0800eefe <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800eefe:	b580      	push	{r7, lr}
 800ef00:	b086      	sub	sp, #24
 800ef02:	af00      	add	r7, sp, #0
 800ef04:	60f8      	str	r0, [r7, #12]
 800ef06:	460b      	mov	r3, r1
 800ef08:	607a      	str	r2, [r7, #4]
 800ef0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ef0c:	7afb      	ldrb	r3, [r7, #11]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d138      	bne.n	800ef84 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ef18:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ef20:	2b03      	cmp	r3, #3
 800ef22:	d14a      	bne.n	800efba <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ef24:	693b      	ldr	r3, [r7, #16]
 800ef26:	689a      	ldr	r2, [r3, #8]
 800ef28:	693b      	ldr	r3, [r7, #16]
 800ef2a:	68db      	ldr	r3, [r3, #12]
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d913      	bls.n	800ef58 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ef30:	693b      	ldr	r3, [r7, #16]
 800ef32:	689a      	ldr	r2, [r3, #8]
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	68db      	ldr	r3, [r3, #12]
 800ef38:	1ad2      	subs	r2, r2, r3
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	68da      	ldr	r2, [r3, #12]
 800ef42:	693b      	ldr	r3, [r7, #16]
 800ef44:	689b      	ldr	r3, [r3, #8]
 800ef46:	4293      	cmp	r3, r2
 800ef48:	bf28      	it	cs
 800ef4a:	4613      	movcs	r3, r2
 800ef4c:	461a      	mov	r2, r3
 800ef4e:	6879      	ldr	r1, [r7, #4]
 800ef50:	68f8      	ldr	r0, [r7, #12]
 800ef52:	f000 ffc5 	bl	800fee0 <USBD_CtlContinueRx>
 800ef56:	e030      	b.n	800efba <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef5e:	b2db      	uxtb	r3, r3
 800ef60:	2b03      	cmp	r3, #3
 800ef62:	d10b      	bne.n	800ef7c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef6a:	691b      	ldr	r3, [r3, #16]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d005      	beq.n	800ef7c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef76:	691b      	ldr	r3, [r3, #16]
 800ef78:	68f8      	ldr	r0, [r7, #12]
 800ef7a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ef7c:	68f8      	ldr	r0, [r7, #12]
 800ef7e:	f000 ffc0 	bl	800ff02 <USBD_CtlSendStatus>
 800ef82:	e01a      	b.n	800efba <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef8a:	b2db      	uxtb	r3, r3
 800ef8c:	2b03      	cmp	r3, #3
 800ef8e:	d114      	bne.n	800efba <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef96:	699b      	ldr	r3, [r3, #24]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d00e      	beq.n	800efba <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efa2:	699b      	ldr	r3, [r3, #24]
 800efa4:	7afa      	ldrb	r2, [r7, #11]
 800efa6:	4611      	mov	r1, r2
 800efa8:	68f8      	ldr	r0, [r7, #12]
 800efaa:	4798      	blx	r3
 800efac:	4603      	mov	r3, r0
 800efae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800efb0:	7dfb      	ldrb	r3, [r7, #23]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d001      	beq.n	800efba <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800efb6:	7dfb      	ldrb	r3, [r7, #23]
 800efb8:	e000      	b.n	800efbc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800efba:	2300      	movs	r3, #0
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	3718      	adds	r7, #24
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}

0800efc4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b086      	sub	sp, #24
 800efc8:	af00      	add	r7, sp, #0
 800efca:	60f8      	str	r0, [r7, #12]
 800efcc:	460b      	mov	r3, r1
 800efce:	607a      	str	r2, [r7, #4]
 800efd0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800efd2:	7afb      	ldrb	r3, [r7, #11]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d16b      	bne.n	800f0b0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	3314      	adds	r3, #20
 800efdc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800efe4:	2b02      	cmp	r3, #2
 800efe6:	d156      	bne.n	800f096 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	689a      	ldr	r2, [r3, #8]
 800efec:	693b      	ldr	r3, [r7, #16]
 800efee:	68db      	ldr	r3, [r3, #12]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d914      	bls.n	800f01e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800eff4:	693b      	ldr	r3, [r7, #16]
 800eff6:	689a      	ldr	r2, [r3, #8]
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	68db      	ldr	r3, [r3, #12]
 800effc:	1ad2      	subs	r2, r2, r3
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f002:	693b      	ldr	r3, [r7, #16]
 800f004:	689b      	ldr	r3, [r3, #8]
 800f006:	461a      	mov	r2, r3
 800f008:	6879      	ldr	r1, [r7, #4]
 800f00a:	68f8      	ldr	r0, [r7, #12]
 800f00c:	f000 ff3a 	bl	800fe84 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f010:	2300      	movs	r3, #0
 800f012:	2200      	movs	r2, #0
 800f014:	2100      	movs	r1, #0
 800f016:	68f8      	ldr	r0, [r7, #12]
 800f018:	f004 fb5b 	bl	80136d2 <USBD_LL_PrepareReceive>
 800f01c:	e03b      	b.n	800f096 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f01e:	693b      	ldr	r3, [r7, #16]
 800f020:	68da      	ldr	r2, [r3, #12]
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	689b      	ldr	r3, [r3, #8]
 800f026:	429a      	cmp	r2, r3
 800f028:	d11c      	bne.n	800f064 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f02a:	693b      	ldr	r3, [r7, #16]
 800f02c:	685a      	ldr	r2, [r3, #4]
 800f02e:	693b      	ldr	r3, [r7, #16]
 800f030:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f032:	429a      	cmp	r2, r3
 800f034:	d316      	bcc.n	800f064 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f036:	693b      	ldr	r3, [r7, #16]
 800f038:	685a      	ldr	r2, [r3, #4]
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f040:	429a      	cmp	r2, r3
 800f042:	d20f      	bcs.n	800f064 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f044:	2200      	movs	r2, #0
 800f046:	2100      	movs	r1, #0
 800f048:	68f8      	ldr	r0, [r7, #12]
 800f04a:	f000 ff1b 	bl	800fe84 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	2200      	movs	r2, #0
 800f052:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f056:	2300      	movs	r3, #0
 800f058:	2200      	movs	r2, #0
 800f05a:	2100      	movs	r1, #0
 800f05c:	68f8      	ldr	r0, [r7, #12]
 800f05e:	f004 fb38 	bl	80136d2 <USBD_LL_PrepareReceive>
 800f062:	e018      	b.n	800f096 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f06a:	b2db      	uxtb	r3, r3
 800f06c:	2b03      	cmp	r3, #3
 800f06e:	d10b      	bne.n	800f088 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f076:	68db      	ldr	r3, [r3, #12]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d005      	beq.n	800f088 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f082:	68db      	ldr	r3, [r3, #12]
 800f084:	68f8      	ldr	r0, [r7, #12]
 800f086:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f088:	2180      	movs	r1, #128	; 0x80
 800f08a:	68f8      	ldr	r0, [r7, #12]
 800f08c:	f004 fa76 	bl	801357c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f090:	68f8      	ldr	r0, [r7, #12]
 800f092:	f000 ff49 	bl	800ff28 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	d122      	bne.n	800f0e6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f0a0:	68f8      	ldr	r0, [r7, #12]
 800f0a2:	f7ff fe98 	bl	800edd6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f0ae:	e01a      	b.n	800f0e6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0b6:	b2db      	uxtb	r3, r3
 800f0b8:	2b03      	cmp	r3, #3
 800f0ba:	d114      	bne.n	800f0e6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0c2:	695b      	ldr	r3, [r3, #20]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d00e      	beq.n	800f0e6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0ce:	695b      	ldr	r3, [r3, #20]
 800f0d0:	7afa      	ldrb	r2, [r7, #11]
 800f0d2:	4611      	mov	r1, r2
 800f0d4:	68f8      	ldr	r0, [r7, #12]
 800f0d6:	4798      	blx	r3
 800f0d8:	4603      	mov	r3, r0
 800f0da:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f0dc:	7dfb      	ldrb	r3, [r7, #23]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d001      	beq.n	800f0e6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800f0e2:	7dfb      	ldrb	r3, [r7, #23]
 800f0e4:	e000      	b.n	800f0e8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800f0e6:	2300      	movs	r3, #0
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3718      	adds	r7, #24
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}

0800f0f0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b082      	sub	sp, #8
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2200      	movs	r2, #0
 800f104:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2200      	movs	r2, #0
 800f10c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2200      	movs	r2, #0
 800f112:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d101      	bne.n	800f124 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800f120:	2303      	movs	r3, #3
 800f122:	e02f      	b.n	800f184 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d00f      	beq.n	800f14e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f134:	685b      	ldr	r3, [r3, #4]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d009      	beq.n	800f14e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f140:	685b      	ldr	r3, [r3, #4]
 800f142:	687a      	ldr	r2, [r7, #4]
 800f144:	6852      	ldr	r2, [r2, #4]
 800f146:	b2d2      	uxtb	r2, r2
 800f148:	4611      	mov	r1, r2
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f14e:	2340      	movs	r3, #64	; 0x40
 800f150:	2200      	movs	r2, #0
 800f152:	2100      	movs	r1, #0
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f004 f9cc 	bl	80134f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	2201      	movs	r2, #1
 800f15e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2240      	movs	r2, #64	; 0x40
 800f166:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f16a:	2340      	movs	r3, #64	; 0x40
 800f16c:	2200      	movs	r2, #0
 800f16e:	2180      	movs	r1, #128	; 0x80
 800f170:	6878      	ldr	r0, [r7, #4]
 800f172:	f004 f9be 	bl	80134f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2201      	movs	r2, #1
 800f17a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2240      	movs	r2, #64	; 0x40
 800f180:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f182:	2300      	movs	r3, #0
}
 800f184:	4618      	mov	r0, r3
 800f186:	3708      	adds	r7, #8
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}

0800f18c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f18c:	b480      	push	{r7}
 800f18e:	b083      	sub	sp, #12
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
 800f194:	460b      	mov	r3, r1
 800f196:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	78fa      	ldrb	r2, [r7, #3]
 800f19c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f19e:	2300      	movs	r3, #0
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	370c      	adds	r7, #12
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1aa:	4770      	bx	lr

0800f1ac <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b083      	sub	sp, #12
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1ba:	b2da      	uxtb	r2, r3
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2204      	movs	r2, #4
 800f1c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f1ca:	2300      	movs	r3, #0
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	370c      	adds	r7, #12
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d6:	4770      	bx	lr

0800f1d8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f1d8:	b480      	push	{r7}
 800f1da:	b083      	sub	sp, #12
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1e6:	b2db      	uxtb	r3, r3
 800f1e8:	2b04      	cmp	r3, #4
 800f1ea:	d106      	bne.n	800f1fa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f1f2:	b2da      	uxtb	r2, r3
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f1fa:	2300      	movs	r3, #0
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	370c      	adds	r7, #12
 800f200:	46bd      	mov	sp, r7
 800f202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f206:	4770      	bx	lr

0800f208 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b082      	sub	sp, #8
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f216:	2b00      	cmp	r3, #0
 800f218:	d101      	bne.n	800f21e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f21a:	2303      	movs	r3, #3
 800f21c:	e012      	b.n	800f244 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f224:	b2db      	uxtb	r3, r3
 800f226:	2b03      	cmp	r3, #3
 800f228:	d10b      	bne.n	800f242 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f230:	69db      	ldr	r3, [r3, #28]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d005      	beq.n	800f242 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f23c:	69db      	ldr	r3, [r3, #28]
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f242:	2300      	movs	r3, #0
}
 800f244:	4618      	mov	r0, r3
 800f246:	3708      	adds	r7, #8
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f24c:	b480      	push	{r7}
 800f24e:	b087      	sub	sp, #28
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	781b      	ldrb	r3, [r3, #0]
 800f25c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f25e:	697b      	ldr	r3, [r7, #20]
 800f260:	3301      	adds	r3, #1
 800f262:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	781b      	ldrb	r3, [r3, #0]
 800f268:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f26a:	8a3b      	ldrh	r3, [r7, #16]
 800f26c:	021b      	lsls	r3, r3, #8
 800f26e:	b21a      	sxth	r2, r3
 800f270:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f274:	4313      	orrs	r3, r2
 800f276:	b21b      	sxth	r3, r3
 800f278:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f27a:	89fb      	ldrh	r3, [r7, #14]
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	371c      	adds	r7, #28
 800f280:	46bd      	mov	sp, r7
 800f282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f286:	4770      	bx	lr

0800f288 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b084      	sub	sp, #16
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
 800f290:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f292:	2300      	movs	r3, #0
 800f294:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f29e:	2b40      	cmp	r3, #64	; 0x40
 800f2a0:	d005      	beq.n	800f2ae <USBD_StdDevReq+0x26>
 800f2a2:	2b40      	cmp	r3, #64	; 0x40
 800f2a4:	d853      	bhi.n	800f34e <USBD_StdDevReq+0xc6>
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d00b      	beq.n	800f2c2 <USBD_StdDevReq+0x3a>
 800f2aa:	2b20      	cmp	r3, #32
 800f2ac:	d14f      	bne.n	800f34e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2b4:	689b      	ldr	r3, [r3, #8]
 800f2b6:	6839      	ldr	r1, [r7, #0]
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	4798      	blx	r3
 800f2bc:	4603      	mov	r3, r0
 800f2be:	73fb      	strb	r3, [r7, #15]
      break;
 800f2c0:	e04a      	b.n	800f358 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	785b      	ldrb	r3, [r3, #1]
 800f2c6:	2b09      	cmp	r3, #9
 800f2c8:	d83b      	bhi.n	800f342 <USBD_StdDevReq+0xba>
 800f2ca:	a201      	add	r2, pc, #4	; (adr r2, 800f2d0 <USBD_StdDevReq+0x48>)
 800f2cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2d0:	0800f325 	.word	0x0800f325
 800f2d4:	0800f339 	.word	0x0800f339
 800f2d8:	0800f343 	.word	0x0800f343
 800f2dc:	0800f32f 	.word	0x0800f32f
 800f2e0:	0800f343 	.word	0x0800f343
 800f2e4:	0800f303 	.word	0x0800f303
 800f2e8:	0800f2f9 	.word	0x0800f2f9
 800f2ec:	0800f343 	.word	0x0800f343
 800f2f0:	0800f31b 	.word	0x0800f31b
 800f2f4:	0800f30d 	.word	0x0800f30d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f2f8:	6839      	ldr	r1, [r7, #0]
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f000 f9de 	bl	800f6bc <USBD_GetDescriptor>
          break;
 800f300:	e024      	b.n	800f34c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f302:	6839      	ldr	r1, [r7, #0]
 800f304:	6878      	ldr	r0, [r7, #4]
 800f306:	f000 fb6d 	bl	800f9e4 <USBD_SetAddress>
          break;
 800f30a:	e01f      	b.n	800f34c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f30c:	6839      	ldr	r1, [r7, #0]
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f000 fbac 	bl	800fa6c <USBD_SetConfig>
 800f314:	4603      	mov	r3, r0
 800f316:	73fb      	strb	r3, [r7, #15]
          break;
 800f318:	e018      	b.n	800f34c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f31a:	6839      	ldr	r1, [r7, #0]
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f000 fc4b 	bl	800fbb8 <USBD_GetConfig>
          break;
 800f322:	e013      	b.n	800f34c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f324:	6839      	ldr	r1, [r7, #0]
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f000 fc7c 	bl	800fc24 <USBD_GetStatus>
          break;
 800f32c:	e00e      	b.n	800f34c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f32e:	6839      	ldr	r1, [r7, #0]
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f000 fcab 	bl	800fc8c <USBD_SetFeature>
          break;
 800f336:	e009      	b.n	800f34c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f338:	6839      	ldr	r1, [r7, #0]
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f000 fcba 	bl	800fcb4 <USBD_ClrFeature>
          break;
 800f340:	e004      	b.n	800f34c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f342:	6839      	ldr	r1, [r7, #0]
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f000 fd11 	bl	800fd6c <USBD_CtlError>
          break;
 800f34a:	bf00      	nop
      }
      break;
 800f34c:	e004      	b.n	800f358 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f34e:	6839      	ldr	r1, [r7, #0]
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f000 fd0b 	bl	800fd6c <USBD_CtlError>
      break;
 800f356:	bf00      	nop
  }

  return ret;
 800f358:	7bfb      	ldrb	r3, [r7, #15]
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	3710      	adds	r7, #16
 800f35e:	46bd      	mov	sp, r7
 800f360:	bd80      	pop	{r7, pc}
 800f362:	bf00      	nop

0800f364 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b084      	sub	sp, #16
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f36e:	2300      	movs	r3, #0
 800f370:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f37a:	2b40      	cmp	r3, #64	; 0x40
 800f37c:	d005      	beq.n	800f38a <USBD_StdItfReq+0x26>
 800f37e:	2b40      	cmp	r3, #64	; 0x40
 800f380:	d82f      	bhi.n	800f3e2 <USBD_StdItfReq+0x7e>
 800f382:	2b00      	cmp	r3, #0
 800f384:	d001      	beq.n	800f38a <USBD_StdItfReq+0x26>
 800f386:	2b20      	cmp	r3, #32
 800f388:	d12b      	bne.n	800f3e2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f390:	b2db      	uxtb	r3, r3
 800f392:	3b01      	subs	r3, #1
 800f394:	2b02      	cmp	r3, #2
 800f396:	d81d      	bhi.n	800f3d4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	889b      	ldrh	r3, [r3, #4]
 800f39c:	b2db      	uxtb	r3, r3
 800f39e:	2b01      	cmp	r3, #1
 800f3a0:	d813      	bhi.n	800f3ca <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3a8:	689b      	ldr	r3, [r3, #8]
 800f3aa:	6839      	ldr	r1, [r7, #0]
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	4798      	blx	r3
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	88db      	ldrh	r3, [r3, #6]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d110      	bne.n	800f3de <USBD_StdItfReq+0x7a>
 800f3bc:	7bfb      	ldrb	r3, [r7, #15]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d10d      	bne.n	800f3de <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f000 fd9d 	bl	800ff02 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f3c8:	e009      	b.n	800f3de <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f3ca:	6839      	ldr	r1, [r7, #0]
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f000 fccd 	bl	800fd6c <USBD_CtlError>
          break;
 800f3d2:	e004      	b.n	800f3de <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f3d4:	6839      	ldr	r1, [r7, #0]
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f000 fcc8 	bl	800fd6c <USBD_CtlError>
          break;
 800f3dc:	e000      	b.n	800f3e0 <USBD_StdItfReq+0x7c>
          break;
 800f3de:	bf00      	nop
      }
      break;
 800f3e0:	e004      	b.n	800f3ec <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f3e2:	6839      	ldr	r1, [r7, #0]
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f000 fcc1 	bl	800fd6c <USBD_CtlError>
      break;
 800f3ea:	bf00      	nop
  }

  return ret;
 800f3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	3710      	adds	r7, #16
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}

0800f3f6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3f6:	b580      	push	{r7, lr}
 800f3f8:	b084      	sub	sp, #16
 800f3fa:	af00      	add	r7, sp, #0
 800f3fc:	6078      	str	r0, [r7, #4]
 800f3fe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f400:	2300      	movs	r3, #0
 800f402:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	889b      	ldrh	r3, [r3, #4]
 800f408:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	781b      	ldrb	r3, [r3, #0]
 800f40e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f412:	2b40      	cmp	r3, #64	; 0x40
 800f414:	d007      	beq.n	800f426 <USBD_StdEPReq+0x30>
 800f416:	2b40      	cmp	r3, #64	; 0x40
 800f418:	f200 8145 	bhi.w	800f6a6 <USBD_StdEPReq+0x2b0>
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d00c      	beq.n	800f43a <USBD_StdEPReq+0x44>
 800f420:	2b20      	cmp	r3, #32
 800f422:	f040 8140 	bne.w	800f6a6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f42c:	689b      	ldr	r3, [r3, #8]
 800f42e:	6839      	ldr	r1, [r7, #0]
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	4798      	blx	r3
 800f434:	4603      	mov	r3, r0
 800f436:	73fb      	strb	r3, [r7, #15]
      break;
 800f438:	e13a      	b.n	800f6b0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	785b      	ldrb	r3, [r3, #1]
 800f43e:	2b03      	cmp	r3, #3
 800f440:	d007      	beq.n	800f452 <USBD_StdEPReq+0x5c>
 800f442:	2b03      	cmp	r3, #3
 800f444:	f300 8129 	bgt.w	800f69a <USBD_StdEPReq+0x2a4>
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d07f      	beq.n	800f54c <USBD_StdEPReq+0x156>
 800f44c:	2b01      	cmp	r3, #1
 800f44e:	d03c      	beq.n	800f4ca <USBD_StdEPReq+0xd4>
 800f450:	e123      	b.n	800f69a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f458:	b2db      	uxtb	r3, r3
 800f45a:	2b02      	cmp	r3, #2
 800f45c:	d002      	beq.n	800f464 <USBD_StdEPReq+0x6e>
 800f45e:	2b03      	cmp	r3, #3
 800f460:	d016      	beq.n	800f490 <USBD_StdEPReq+0x9a>
 800f462:	e02c      	b.n	800f4be <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f464:	7bbb      	ldrb	r3, [r7, #14]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d00d      	beq.n	800f486 <USBD_StdEPReq+0x90>
 800f46a:	7bbb      	ldrb	r3, [r7, #14]
 800f46c:	2b80      	cmp	r3, #128	; 0x80
 800f46e:	d00a      	beq.n	800f486 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f470:	7bbb      	ldrb	r3, [r7, #14]
 800f472:	4619      	mov	r1, r3
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f004 f881 	bl	801357c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f47a:	2180      	movs	r1, #128	; 0x80
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f004 f87d 	bl	801357c <USBD_LL_StallEP>
 800f482:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f484:	e020      	b.n	800f4c8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f486:	6839      	ldr	r1, [r7, #0]
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f000 fc6f 	bl	800fd6c <USBD_CtlError>
              break;
 800f48e:	e01b      	b.n	800f4c8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	885b      	ldrh	r3, [r3, #2]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d10e      	bne.n	800f4b6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f498:	7bbb      	ldrb	r3, [r7, #14]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d00b      	beq.n	800f4b6 <USBD_StdEPReq+0xc0>
 800f49e:	7bbb      	ldrb	r3, [r7, #14]
 800f4a0:	2b80      	cmp	r3, #128	; 0x80
 800f4a2:	d008      	beq.n	800f4b6 <USBD_StdEPReq+0xc0>
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	88db      	ldrh	r3, [r3, #6]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d104      	bne.n	800f4b6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f4ac:	7bbb      	ldrb	r3, [r7, #14]
 800f4ae:	4619      	mov	r1, r3
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f004 f863 	bl	801357c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f000 fd23 	bl	800ff02 <USBD_CtlSendStatus>

              break;
 800f4bc:	e004      	b.n	800f4c8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f4be:	6839      	ldr	r1, [r7, #0]
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f000 fc53 	bl	800fd6c <USBD_CtlError>
              break;
 800f4c6:	bf00      	nop
          }
          break;
 800f4c8:	e0ec      	b.n	800f6a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4d0:	b2db      	uxtb	r3, r3
 800f4d2:	2b02      	cmp	r3, #2
 800f4d4:	d002      	beq.n	800f4dc <USBD_StdEPReq+0xe6>
 800f4d6:	2b03      	cmp	r3, #3
 800f4d8:	d016      	beq.n	800f508 <USBD_StdEPReq+0x112>
 800f4da:	e030      	b.n	800f53e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f4dc:	7bbb      	ldrb	r3, [r7, #14]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d00d      	beq.n	800f4fe <USBD_StdEPReq+0x108>
 800f4e2:	7bbb      	ldrb	r3, [r7, #14]
 800f4e4:	2b80      	cmp	r3, #128	; 0x80
 800f4e6:	d00a      	beq.n	800f4fe <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f4e8:	7bbb      	ldrb	r3, [r7, #14]
 800f4ea:	4619      	mov	r1, r3
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f004 f845 	bl	801357c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f4f2:	2180      	movs	r1, #128	; 0x80
 800f4f4:	6878      	ldr	r0, [r7, #4]
 800f4f6:	f004 f841 	bl	801357c <USBD_LL_StallEP>
 800f4fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f4fc:	e025      	b.n	800f54a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f4fe:	6839      	ldr	r1, [r7, #0]
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f000 fc33 	bl	800fd6c <USBD_CtlError>
              break;
 800f506:	e020      	b.n	800f54a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	885b      	ldrh	r3, [r3, #2]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d11b      	bne.n	800f548 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f510:	7bbb      	ldrb	r3, [r7, #14]
 800f512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f516:	2b00      	cmp	r3, #0
 800f518:	d004      	beq.n	800f524 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f51a:	7bbb      	ldrb	r3, [r7, #14]
 800f51c:	4619      	mov	r1, r3
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	f004 f84b 	bl	80135ba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f000 fcec 	bl	800ff02 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f530:	689b      	ldr	r3, [r3, #8]
 800f532:	6839      	ldr	r1, [r7, #0]
 800f534:	6878      	ldr	r0, [r7, #4]
 800f536:	4798      	blx	r3
 800f538:	4603      	mov	r3, r0
 800f53a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f53c:	e004      	b.n	800f548 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f53e:	6839      	ldr	r1, [r7, #0]
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f000 fc13 	bl	800fd6c <USBD_CtlError>
              break;
 800f546:	e000      	b.n	800f54a <USBD_StdEPReq+0x154>
              break;
 800f548:	bf00      	nop
          }
          break;
 800f54a:	e0ab      	b.n	800f6a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f552:	b2db      	uxtb	r3, r3
 800f554:	2b02      	cmp	r3, #2
 800f556:	d002      	beq.n	800f55e <USBD_StdEPReq+0x168>
 800f558:	2b03      	cmp	r3, #3
 800f55a:	d032      	beq.n	800f5c2 <USBD_StdEPReq+0x1cc>
 800f55c:	e097      	b.n	800f68e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f55e:	7bbb      	ldrb	r3, [r7, #14]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d007      	beq.n	800f574 <USBD_StdEPReq+0x17e>
 800f564:	7bbb      	ldrb	r3, [r7, #14]
 800f566:	2b80      	cmp	r3, #128	; 0x80
 800f568:	d004      	beq.n	800f574 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f56a:	6839      	ldr	r1, [r7, #0]
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f000 fbfd 	bl	800fd6c <USBD_CtlError>
                break;
 800f572:	e091      	b.n	800f698 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	da0b      	bge.n	800f594 <USBD_StdEPReq+0x19e>
 800f57c:	7bbb      	ldrb	r3, [r7, #14]
 800f57e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f582:	4613      	mov	r3, r2
 800f584:	009b      	lsls	r3, r3, #2
 800f586:	4413      	add	r3, r2
 800f588:	009b      	lsls	r3, r3, #2
 800f58a:	3310      	adds	r3, #16
 800f58c:	687a      	ldr	r2, [r7, #4]
 800f58e:	4413      	add	r3, r2
 800f590:	3304      	adds	r3, #4
 800f592:	e00b      	b.n	800f5ac <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f594:	7bbb      	ldrb	r3, [r7, #14]
 800f596:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f59a:	4613      	mov	r3, r2
 800f59c:	009b      	lsls	r3, r3, #2
 800f59e:	4413      	add	r3, r2
 800f5a0:	009b      	lsls	r3, r3, #2
 800f5a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f5a6:	687a      	ldr	r2, [r7, #4]
 800f5a8:	4413      	add	r3, r2
 800f5aa:	3304      	adds	r3, #4
 800f5ac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	2202      	movs	r2, #2
 800f5b8:	4619      	mov	r1, r3
 800f5ba:	6878      	ldr	r0, [r7, #4]
 800f5bc:	f000 fc47 	bl	800fe4e <USBD_CtlSendData>
              break;
 800f5c0:	e06a      	b.n	800f698 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f5c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	da11      	bge.n	800f5ee <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f5ca:	7bbb      	ldrb	r3, [r7, #14]
 800f5cc:	f003 020f 	and.w	r2, r3, #15
 800f5d0:	6879      	ldr	r1, [r7, #4]
 800f5d2:	4613      	mov	r3, r2
 800f5d4:	009b      	lsls	r3, r3, #2
 800f5d6:	4413      	add	r3, r2
 800f5d8:	009b      	lsls	r3, r3, #2
 800f5da:	440b      	add	r3, r1
 800f5dc:	3324      	adds	r3, #36	; 0x24
 800f5de:	881b      	ldrh	r3, [r3, #0]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d117      	bne.n	800f614 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f5e4:	6839      	ldr	r1, [r7, #0]
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	f000 fbc0 	bl	800fd6c <USBD_CtlError>
                  break;
 800f5ec:	e054      	b.n	800f698 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f5ee:	7bbb      	ldrb	r3, [r7, #14]
 800f5f0:	f003 020f 	and.w	r2, r3, #15
 800f5f4:	6879      	ldr	r1, [r7, #4]
 800f5f6:	4613      	mov	r3, r2
 800f5f8:	009b      	lsls	r3, r3, #2
 800f5fa:	4413      	add	r3, r2
 800f5fc:	009b      	lsls	r3, r3, #2
 800f5fe:	440b      	add	r3, r1
 800f600:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f604:	881b      	ldrh	r3, [r3, #0]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d104      	bne.n	800f614 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f60a:	6839      	ldr	r1, [r7, #0]
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	f000 fbad 	bl	800fd6c <USBD_CtlError>
                  break;
 800f612:	e041      	b.n	800f698 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f614:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	da0b      	bge.n	800f634 <USBD_StdEPReq+0x23e>
 800f61c:	7bbb      	ldrb	r3, [r7, #14]
 800f61e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f622:	4613      	mov	r3, r2
 800f624:	009b      	lsls	r3, r3, #2
 800f626:	4413      	add	r3, r2
 800f628:	009b      	lsls	r3, r3, #2
 800f62a:	3310      	adds	r3, #16
 800f62c:	687a      	ldr	r2, [r7, #4]
 800f62e:	4413      	add	r3, r2
 800f630:	3304      	adds	r3, #4
 800f632:	e00b      	b.n	800f64c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f634:	7bbb      	ldrb	r3, [r7, #14]
 800f636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f63a:	4613      	mov	r3, r2
 800f63c:	009b      	lsls	r3, r3, #2
 800f63e:	4413      	add	r3, r2
 800f640:	009b      	lsls	r3, r3, #2
 800f642:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f646:	687a      	ldr	r2, [r7, #4]
 800f648:	4413      	add	r3, r2
 800f64a:	3304      	adds	r3, #4
 800f64c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f64e:	7bbb      	ldrb	r3, [r7, #14]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d002      	beq.n	800f65a <USBD_StdEPReq+0x264>
 800f654:	7bbb      	ldrb	r3, [r7, #14]
 800f656:	2b80      	cmp	r3, #128	; 0x80
 800f658:	d103      	bne.n	800f662 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	2200      	movs	r2, #0
 800f65e:	601a      	str	r2, [r3, #0]
 800f660:	e00e      	b.n	800f680 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f662:	7bbb      	ldrb	r3, [r7, #14]
 800f664:	4619      	mov	r1, r3
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f003 ffc6 	bl	80135f8 <USBD_LL_IsStallEP>
 800f66c:	4603      	mov	r3, r0
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d003      	beq.n	800f67a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	2201      	movs	r2, #1
 800f676:	601a      	str	r2, [r3, #0]
 800f678:	e002      	b.n	800f680 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	2200      	movs	r2, #0
 800f67e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	2202      	movs	r2, #2
 800f684:	4619      	mov	r1, r3
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	f000 fbe1 	bl	800fe4e <USBD_CtlSendData>
              break;
 800f68c:	e004      	b.n	800f698 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f68e:	6839      	ldr	r1, [r7, #0]
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f000 fb6b 	bl	800fd6c <USBD_CtlError>
              break;
 800f696:	bf00      	nop
          }
          break;
 800f698:	e004      	b.n	800f6a4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f69a:	6839      	ldr	r1, [r7, #0]
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	f000 fb65 	bl	800fd6c <USBD_CtlError>
          break;
 800f6a2:	bf00      	nop
      }
      break;
 800f6a4:	e004      	b.n	800f6b0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f6a6:	6839      	ldr	r1, [r7, #0]
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	f000 fb5f 	bl	800fd6c <USBD_CtlError>
      break;
 800f6ae:	bf00      	nop
  }

  return ret;
 800f6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	3710      	adds	r7, #16
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}
	...

0800f6bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b084      	sub	sp, #16
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
 800f6c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	885b      	ldrh	r3, [r3, #2]
 800f6d6:	0a1b      	lsrs	r3, r3, #8
 800f6d8:	b29b      	uxth	r3, r3
 800f6da:	3b01      	subs	r3, #1
 800f6dc:	2b0e      	cmp	r3, #14
 800f6de:	f200 8152 	bhi.w	800f986 <USBD_GetDescriptor+0x2ca>
 800f6e2:	a201      	add	r2, pc, #4	; (adr r2, 800f6e8 <USBD_GetDescriptor+0x2c>)
 800f6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6e8:	0800f759 	.word	0x0800f759
 800f6ec:	0800f771 	.word	0x0800f771
 800f6f0:	0800f7b1 	.word	0x0800f7b1
 800f6f4:	0800f987 	.word	0x0800f987
 800f6f8:	0800f987 	.word	0x0800f987
 800f6fc:	0800f927 	.word	0x0800f927
 800f700:	0800f953 	.word	0x0800f953
 800f704:	0800f987 	.word	0x0800f987
 800f708:	0800f987 	.word	0x0800f987
 800f70c:	0800f987 	.word	0x0800f987
 800f710:	0800f987 	.word	0x0800f987
 800f714:	0800f987 	.word	0x0800f987
 800f718:	0800f987 	.word	0x0800f987
 800f71c:	0800f987 	.word	0x0800f987
 800f720:	0800f725 	.word	0x0800f725
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f72a:	69db      	ldr	r3, [r3, #28]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d00b      	beq.n	800f748 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f736:	69db      	ldr	r3, [r3, #28]
 800f738:	687a      	ldr	r2, [r7, #4]
 800f73a:	7c12      	ldrb	r2, [r2, #16]
 800f73c:	f107 0108 	add.w	r1, r7, #8
 800f740:	4610      	mov	r0, r2
 800f742:	4798      	blx	r3
 800f744:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f746:	e126      	b.n	800f996 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f748:	6839      	ldr	r1, [r7, #0]
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f000 fb0e 	bl	800fd6c <USBD_CtlError>
        err++;
 800f750:	7afb      	ldrb	r3, [r7, #11]
 800f752:	3301      	adds	r3, #1
 800f754:	72fb      	strb	r3, [r7, #11]
      break;
 800f756:	e11e      	b.n	800f996 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	687a      	ldr	r2, [r7, #4]
 800f762:	7c12      	ldrb	r2, [r2, #16]
 800f764:	f107 0108 	add.w	r1, r7, #8
 800f768:	4610      	mov	r0, r2
 800f76a:	4798      	blx	r3
 800f76c:	60f8      	str	r0, [r7, #12]
      break;
 800f76e:	e112      	b.n	800f996 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	7c1b      	ldrb	r3, [r3, #16]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d10d      	bne.n	800f794 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f77e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f780:	f107 0208 	add.w	r2, r7, #8
 800f784:	4610      	mov	r0, r2
 800f786:	4798      	blx	r3
 800f788:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	3301      	adds	r3, #1
 800f78e:	2202      	movs	r2, #2
 800f790:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f792:	e100      	b.n	800f996 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f79c:	f107 0208 	add.w	r2, r7, #8
 800f7a0:	4610      	mov	r0, r2
 800f7a2:	4798      	blx	r3
 800f7a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	3301      	adds	r3, #1
 800f7aa:	2202      	movs	r2, #2
 800f7ac:	701a      	strb	r2, [r3, #0]
      break;
 800f7ae:	e0f2      	b.n	800f996 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	885b      	ldrh	r3, [r3, #2]
 800f7b4:	b2db      	uxtb	r3, r3
 800f7b6:	2b05      	cmp	r3, #5
 800f7b8:	f200 80ac 	bhi.w	800f914 <USBD_GetDescriptor+0x258>
 800f7bc:	a201      	add	r2, pc, #4	; (adr r2, 800f7c4 <USBD_GetDescriptor+0x108>)
 800f7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7c2:	bf00      	nop
 800f7c4:	0800f7dd 	.word	0x0800f7dd
 800f7c8:	0800f811 	.word	0x0800f811
 800f7cc:	0800f845 	.word	0x0800f845
 800f7d0:	0800f879 	.word	0x0800f879
 800f7d4:	0800f8ad 	.word	0x0800f8ad
 800f7d8:	0800f8e1 	.word	0x0800f8e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d00b      	beq.n	800f800 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7ee:	685b      	ldr	r3, [r3, #4]
 800f7f0:	687a      	ldr	r2, [r7, #4]
 800f7f2:	7c12      	ldrb	r2, [r2, #16]
 800f7f4:	f107 0108 	add.w	r1, r7, #8
 800f7f8:	4610      	mov	r0, r2
 800f7fa:	4798      	blx	r3
 800f7fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7fe:	e091      	b.n	800f924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f800:	6839      	ldr	r1, [r7, #0]
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f000 fab2 	bl	800fd6c <USBD_CtlError>
            err++;
 800f808:	7afb      	ldrb	r3, [r7, #11]
 800f80a:	3301      	adds	r3, #1
 800f80c:	72fb      	strb	r3, [r7, #11]
          break;
 800f80e:	e089      	b.n	800f924 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f816:	689b      	ldr	r3, [r3, #8]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d00b      	beq.n	800f834 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f822:	689b      	ldr	r3, [r3, #8]
 800f824:	687a      	ldr	r2, [r7, #4]
 800f826:	7c12      	ldrb	r2, [r2, #16]
 800f828:	f107 0108 	add.w	r1, r7, #8
 800f82c:	4610      	mov	r0, r2
 800f82e:	4798      	blx	r3
 800f830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f832:	e077      	b.n	800f924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f834:	6839      	ldr	r1, [r7, #0]
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f000 fa98 	bl	800fd6c <USBD_CtlError>
            err++;
 800f83c:	7afb      	ldrb	r3, [r7, #11]
 800f83e:	3301      	adds	r3, #1
 800f840:	72fb      	strb	r3, [r7, #11]
          break;
 800f842:	e06f      	b.n	800f924 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f84a:	68db      	ldr	r3, [r3, #12]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d00b      	beq.n	800f868 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f856:	68db      	ldr	r3, [r3, #12]
 800f858:	687a      	ldr	r2, [r7, #4]
 800f85a:	7c12      	ldrb	r2, [r2, #16]
 800f85c:	f107 0108 	add.w	r1, r7, #8
 800f860:	4610      	mov	r0, r2
 800f862:	4798      	blx	r3
 800f864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f866:	e05d      	b.n	800f924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f868:	6839      	ldr	r1, [r7, #0]
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f000 fa7e 	bl	800fd6c <USBD_CtlError>
            err++;
 800f870:	7afb      	ldrb	r3, [r7, #11]
 800f872:	3301      	adds	r3, #1
 800f874:	72fb      	strb	r3, [r7, #11]
          break;
 800f876:	e055      	b.n	800f924 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f87e:	691b      	ldr	r3, [r3, #16]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d00b      	beq.n	800f89c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f88a:	691b      	ldr	r3, [r3, #16]
 800f88c:	687a      	ldr	r2, [r7, #4]
 800f88e:	7c12      	ldrb	r2, [r2, #16]
 800f890:	f107 0108 	add.w	r1, r7, #8
 800f894:	4610      	mov	r0, r2
 800f896:	4798      	blx	r3
 800f898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f89a:	e043      	b.n	800f924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f89c:	6839      	ldr	r1, [r7, #0]
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	f000 fa64 	bl	800fd6c <USBD_CtlError>
            err++;
 800f8a4:	7afb      	ldrb	r3, [r7, #11]
 800f8a6:	3301      	adds	r3, #1
 800f8a8:	72fb      	strb	r3, [r7, #11]
          break;
 800f8aa:	e03b      	b.n	800f924 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8b2:	695b      	ldr	r3, [r3, #20]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d00b      	beq.n	800f8d0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8be:	695b      	ldr	r3, [r3, #20]
 800f8c0:	687a      	ldr	r2, [r7, #4]
 800f8c2:	7c12      	ldrb	r2, [r2, #16]
 800f8c4:	f107 0108 	add.w	r1, r7, #8
 800f8c8:	4610      	mov	r0, r2
 800f8ca:	4798      	blx	r3
 800f8cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f8ce:	e029      	b.n	800f924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f8d0:	6839      	ldr	r1, [r7, #0]
 800f8d2:	6878      	ldr	r0, [r7, #4]
 800f8d4:	f000 fa4a 	bl	800fd6c <USBD_CtlError>
            err++;
 800f8d8:	7afb      	ldrb	r3, [r7, #11]
 800f8da:	3301      	adds	r3, #1
 800f8dc:	72fb      	strb	r3, [r7, #11]
          break;
 800f8de:	e021      	b.n	800f924 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8e6:	699b      	ldr	r3, [r3, #24]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d00b      	beq.n	800f904 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8f2:	699b      	ldr	r3, [r3, #24]
 800f8f4:	687a      	ldr	r2, [r7, #4]
 800f8f6:	7c12      	ldrb	r2, [r2, #16]
 800f8f8:	f107 0108 	add.w	r1, r7, #8
 800f8fc:	4610      	mov	r0, r2
 800f8fe:	4798      	blx	r3
 800f900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f902:	e00f      	b.n	800f924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f904:	6839      	ldr	r1, [r7, #0]
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f000 fa30 	bl	800fd6c <USBD_CtlError>
            err++;
 800f90c:	7afb      	ldrb	r3, [r7, #11]
 800f90e:	3301      	adds	r3, #1
 800f910:	72fb      	strb	r3, [r7, #11]
          break;
 800f912:	e007      	b.n	800f924 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f914:	6839      	ldr	r1, [r7, #0]
 800f916:	6878      	ldr	r0, [r7, #4]
 800f918:	f000 fa28 	bl	800fd6c <USBD_CtlError>
          err++;
 800f91c:	7afb      	ldrb	r3, [r7, #11]
 800f91e:	3301      	adds	r3, #1
 800f920:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f922:	bf00      	nop
      }
      break;
 800f924:	e037      	b.n	800f996 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	7c1b      	ldrb	r3, [r3, #16]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d109      	bne.n	800f942 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f936:	f107 0208 	add.w	r2, r7, #8
 800f93a:	4610      	mov	r0, r2
 800f93c:	4798      	blx	r3
 800f93e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f940:	e029      	b.n	800f996 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f942:	6839      	ldr	r1, [r7, #0]
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f000 fa11 	bl	800fd6c <USBD_CtlError>
        err++;
 800f94a:	7afb      	ldrb	r3, [r7, #11]
 800f94c:	3301      	adds	r3, #1
 800f94e:	72fb      	strb	r3, [r7, #11]
      break;
 800f950:	e021      	b.n	800f996 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	7c1b      	ldrb	r3, [r3, #16]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d10d      	bne.n	800f976 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f962:	f107 0208 	add.w	r2, r7, #8
 800f966:	4610      	mov	r0, r2
 800f968:	4798      	blx	r3
 800f96a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	3301      	adds	r3, #1
 800f970:	2207      	movs	r2, #7
 800f972:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f974:	e00f      	b.n	800f996 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f976:	6839      	ldr	r1, [r7, #0]
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	f000 f9f7 	bl	800fd6c <USBD_CtlError>
        err++;
 800f97e:	7afb      	ldrb	r3, [r7, #11]
 800f980:	3301      	adds	r3, #1
 800f982:	72fb      	strb	r3, [r7, #11]
      break;
 800f984:	e007      	b.n	800f996 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f986:	6839      	ldr	r1, [r7, #0]
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f000 f9ef 	bl	800fd6c <USBD_CtlError>
      err++;
 800f98e:	7afb      	ldrb	r3, [r7, #11]
 800f990:	3301      	adds	r3, #1
 800f992:	72fb      	strb	r3, [r7, #11]
      break;
 800f994:	bf00      	nop
  }

  if (err != 0U)
 800f996:	7afb      	ldrb	r3, [r7, #11]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d11e      	bne.n	800f9da <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	88db      	ldrh	r3, [r3, #6]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d016      	beq.n	800f9d2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f9a4:	893b      	ldrh	r3, [r7, #8]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d00e      	beq.n	800f9c8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	88da      	ldrh	r2, [r3, #6]
 800f9ae:	893b      	ldrh	r3, [r7, #8]
 800f9b0:	4293      	cmp	r3, r2
 800f9b2:	bf28      	it	cs
 800f9b4:	4613      	movcs	r3, r2
 800f9b6:	b29b      	uxth	r3, r3
 800f9b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f9ba:	893b      	ldrh	r3, [r7, #8]
 800f9bc:	461a      	mov	r2, r3
 800f9be:	68f9      	ldr	r1, [r7, #12]
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f000 fa44 	bl	800fe4e <USBD_CtlSendData>
 800f9c6:	e009      	b.n	800f9dc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f9c8:	6839      	ldr	r1, [r7, #0]
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f000 f9ce 	bl	800fd6c <USBD_CtlError>
 800f9d0:	e004      	b.n	800f9dc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f000 fa95 	bl	800ff02 <USBD_CtlSendStatus>
 800f9d8:	e000      	b.n	800f9dc <USBD_GetDescriptor+0x320>
    return;
 800f9da:	bf00      	nop
  }
}
 800f9dc:	3710      	adds	r7, #16
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd80      	pop	{r7, pc}
 800f9e2:	bf00      	nop

0800f9e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b084      	sub	sp, #16
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
 800f9ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	889b      	ldrh	r3, [r3, #4]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d131      	bne.n	800fa5a <USBD_SetAddress+0x76>
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	88db      	ldrh	r3, [r3, #6]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d12d      	bne.n	800fa5a <USBD_SetAddress+0x76>
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	885b      	ldrh	r3, [r3, #2]
 800fa02:	2b7f      	cmp	r3, #127	; 0x7f
 800fa04:	d829      	bhi.n	800fa5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	885b      	ldrh	r3, [r3, #2]
 800fa0a:	b2db      	uxtb	r3, r3
 800fa0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa18:	b2db      	uxtb	r3, r3
 800fa1a:	2b03      	cmp	r3, #3
 800fa1c:	d104      	bne.n	800fa28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fa1e:	6839      	ldr	r1, [r7, #0]
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f000 f9a3 	bl	800fd6c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa26:	e01d      	b.n	800fa64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	7bfa      	ldrb	r2, [r7, #15]
 800fa2c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fa30:	7bfb      	ldrb	r3, [r7, #15]
 800fa32:	4619      	mov	r1, r3
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	f003 fe0c 	bl	8013652 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f000 fa61 	bl	800ff02 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fa40:	7bfb      	ldrb	r3, [r7, #15]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d004      	beq.n	800fa50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	2202      	movs	r2, #2
 800fa4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa4e:	e009      	b.n	800fa64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2201      	movs	r2, #1
 800fa54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa58:	e004      	b.n	800fa64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fa5a:	6839      	ldr	r1, [r7, #0]
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f000 f985 	bl	800fd6c <USBD_CtlError>
  }
}
 800fa62:	bf00      	nop
 800fa64:	bf00      	nop
 800fa66:	3710      	adds	r7, #16
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}

0800fa6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b084      	sub	sp, #16
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
 800fa74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fa76:	2300      	movs	r3, #0
 800fa78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	885b      	ldrh	r3, [r3, #2]
 800fa7e:	b2da      	uxtb	r2, r3
 800fa80:	4b4c      	ldr	r3, [pc, #304]	; (800fbb4 <USBD_SetConfig+0x148>)
 800fa82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fa84:	4b4b      	ldr	r3, [pc, #300]	; (800fbb4 <USBD_SetConfig+0x148>)
 800fa86:	781b      	ldrb	r3, [r3, #0]
 800fa88:	2b01      	cmp	r3, #1
 800fa8a:	d905      	bls.n	800fa98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fa8c:	6839      	ldr	r1, [r7, #0]
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f000 f96c 	bl	800fd6c <USBD_CtlError>
    return USBD_FAIL;
 800fa94:	2303      	movs	r3, #3
 800fa96:	e088      	b.n	800fbaa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa9e:	b2db      	uxtb	r3, r3
 800faa0:	2b02      	cmp	r3, #2
 800faa2:	d002      	beq.n	800faaa <USBD_SetConfig+0x3e>
 800faa4:	2b03      	cmp	r3, #3
 800faa6:	d025      	beq.n	800faf4 <USBD_SetConfig+0x88>
 800faa8:	e071      	b.n	800fb8e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800faaa:	4b42      	ldr	r3, [pc, #264]	; (800fbb4 <USBD_SetConfig+0x148>)
 800faac:	781b      	ldrb	r3, [r3, #0]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d01c      	beq.n	800faec <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800fab2:	4b40      	ldr	r3, [pc, #256]	; (800fbb4 <USBD_SetConfig+0x148>)
 800fab4:	781b      	ldrb	r3, [r3, #0]
 800fab6:	461a      	mov	r2, r3
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fabc:	4b3d      	ldr	r3, [pc, #244]	; (800fbb4 <USBD_SetConfig+0x148>)
 800fabe:	781b      	ldrb	r3, [r3, #0]
 800fac0:	4619      	mov	r1, r3
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	f7ff f992 	bl	800edec <USBD_SetClassConfig>
 800fac8:	4603      	mov	r3, r0
 800faca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800facc:	7bfb      	ldrb	r3, [r7, #15]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d004      	beq.n	800fadc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800fad2:	6839      	ldr	r1, [r7, #0]
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f000 f949 	bl	800fd6c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fada:	e065      	b.n	800fba8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f000 fa10 	bl	800ff02 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2203      	movs	r2, #3
 800fae6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800faea:	e05d      	b.n	800fba8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f000 fa08 	bl	800ff02 <USBD_CtlSendStatus>
      break;
 800faf2:	e059      	b.n	800fba8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800faf4:	4b2f      	ldr	r3, [pc, #188]	; (800fbb4 <USBD_SetConfig+0x148>)
 800faf6:	781b      	ldrb	r3, [r3, #0]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d112      	bne.n	800fb22 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2202      	movs	r2, #2
 800fb00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800fb04:	4b2b      	ldr	r3, [pc, #172]	; (800fbb4 <USBD_SetConfig+0x148>)
 800fb06:	781b      	ldrb	r3, [r3, #0]
 800fb08:	461a      	mov	r2, r3
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fb0e:	4b29      	ldr	r3, [pc, #164]	; (800fbb4 <USBD_SetConfig+0x148>)
 800fb10:	781b      	ldrb	r3, [r3, #0]
 800fb12:	4619      	mov	r1, r3
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f7ff f985 	bl	800ee24 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	f000 f9f1 	bl	800ff02 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fb20:	e042      	b.n	800fba8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800fb22:	4b24      	ldr	r3, [pc, #144]	; (800fbb4 <USBD_SetConfig+0x148>)
 800fb24:	781b      	ldrb	r3, [r3, #0]
 800fb26:	461a      	mov	r2, r3
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	685b      	ldr	r3, [r3, #4]
 800fb2c:	429a      	cmp	r2, r3
 800fb2e:	d02a      	beq.n	800fb86 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	685b      	ldr	r3, [r3, #4]
 800fb34:	b2db      	uxtb	r3, r3
 800fb36:	4619      	mov	r1, r3
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f7ff f973 	bl	800ee24 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fb3e:	4b1d      	ldr	r3, [pc, #116]	; (800fbb4 <USBD_SetConfig+0x148>)
 800fb40:	781b      	ldrb	r3, [r3, #0]
 800fb42:	461a      	mov	r2, r3
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fb48:	4b1a      	ldr	r3, [pc, #104]	; (800fbb4 <USBD_SetConfig+0x148>)
 800fb4a:	781b      	ldrb	r3, [r3, #0]
 800fb4c:	4619      	mov	r1, r3
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f7ff f94c 	bl	800edec <USBD_SetClassConfig>
 800fb54:	4603      	mov	r3, r0
 800fb56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fb58:	7bfb      	ldrb	r3, [r7, #15]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d00f      	beq.n	800fb7e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800fb5e:	6839      	ldr	r1, [r7, #0]
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f000 f903 	bl	800fd6c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	685b      	ldr	r3, [r3, #4]
 800fb6a:	b2db      	uxtb	r3, r3
 800fb6c:	4619      	mov	r1, r3
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f7ff f958 	bl	800ee24 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2202      	movs	r2, #2
 800fb78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fb7c:	e014      	b.n	800fba8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800fb7e:	6878      	ldr	r0, [r7, #4]
 800fb80:	f000 f9bf 	bl	800ff02 <USBD_CtlSendStatus>
      break;
 800fb84:	e010      	b.n	800fba8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f000 f9bb 	bl	800ff02 <USBD_CtlSendStatus>
      break;
 800fb8c:	e00c      	b.n	800fba8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800fb8e:	6839      	ldr	r1, [r7, #0]
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f000 f8eb 	bl	800fd6c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fb96:	4b07      	ldr	r3, [pc, #28]	; (800fbb4 <USBD_SetConfig+0x148>)
 800fb98:	781b      	ldrb	r3, [r3, #0]
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f7ff f941 	bl	800ee24 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fba2:	2303      	movs	r3, #3
 800fba4:	73fb      	strb	r3, [r7, #15]
      break;
 800fba6:	bf00      	nop
  }

  return ret;
 800fba8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3710      	adds	r7, #16
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}
 800fbb2:	bf00      	nop
 800fbb4:	200007fc 	.word	0x200007fc

0800fbb8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
 800fbc0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	88db      	ldrh	r3, [r3, #6]
 800fbc6:	2b01      	cmp	r3, #1
 800fbc8:	d004      	beq.n	800fbd4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fbca:	6839      	ldr	r1, [r7, #0]
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f000 f8cd 	bl	800fd6c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fbd2:	e023      	b.n	800fc1c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbda:	b2db      	uxtb	r3, r3
 800fbdc:	2b02      	cmp	r3, #2
 800fbde:	dc02      	bgt.n	800fbe6 <USBD_GetConfig+0x2e>
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	dc03      	bgt.n	800fbec <USBD_GetConfig+0x34>
 800fbe4:	e015      	b.n	800fc12 <USBD_GetConfig+0x5a>
 800fbe6:	2b03      	cmp	r3, #3
 800fbe8:	d00b      	beq.n	800fc02 <USBD_GetConfig+0x4a>
 800fbea:	e012      	b.n	800fc12 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2200      	movs	r2, #0
 800fbf0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	3308      	adds	r3, #8
 800fbf6:	2201      	movs	r2, #1
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f000 f927 	bl	800fe4e <USBD_CtlSendData>
        break;
 800fc00:	e00c      	b.n	800fc1c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	3304      	adds	r3, #4
 800fc06:	2201      	movs	r2, #1
 800fc08:	4619      	mov	r1, r3
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	f000 f91f 	bl	800fe4e <USBD_CtlSendData>
        break;
 800fc10:	e004      	b.n	800fc1c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fc12:	6839      	ldr	r1, [r7, #0]
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	f000 f8a9 	bl	800fd6c <USBD_CtlError>
        break;
 800fc1a:	bf00      	nop
}
 800fc1c:	bf00      	nop
 800fc1e:	3708      	adds	r7, #8
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}

0800fc24 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b082      	sub	sp, #8
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
 800fc2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc34:	b2db      	uxtb	r3, r3
 800fc36:	3b01      	subs	r3, #1
 800fc38:	2b02      	cmp	r3, #2
 800fc3a:	d81e      	bhi.n	800fc7a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	88db      	ldrh	r3, [r3, #6]
 800fc40:	2b02      	cmp	r3, #2
 800fc42:	d004      	beq.n	800fc4e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fc44:	6839      	ldr	r1, [r7, #0]
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f000 f890 	bl	800fd6c <USBD_CtlError>
        break;
 800fc4c:	e01a      	b.n	800fc84 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2201      	movs	r2, #1
 800fc52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d005      	beq.n	800fc6a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	68db      	ldr	r3, [r3, #12]
 800fc62:	f043 0202 	orr.w	r2, r3, #2
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	330c      	adds	r3, #12
 800fc6e:	2202      	movs	r2, #2
 800fc70:	4619      	mov	r1, r3
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f000 f8eb 	bl	800fe4e <USBD_CtlSendData>
      break;
 800fc78:	e004      	b.n	800fc84 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fc7a:	6839      	ldr	r1, [r7, #0]
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f000 f875 	bl	800fd6c <USBD_CtlError>
      break;
 800fc82:	bf00      	nop
  }
}
 800fc84:	bf00      	nop
 800fc86:	3708      	adds	r7, #8
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}

0800fc8c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b082      	sub	sp, #8
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
 800fc94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	885b      	ldrh	r3, [r3, #2]
 800fc9a:	2b01      	cmp	r3, #1
 800fc9c:	d106      	bne.n	800fcac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	2201      	movs	r2, #1
 800fca2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fca6:	6878      	ldr	r0, [r7, #4]
 800fca8:	f000 f92b 	bl	800ff02 <USBD_CtlSendStatus>
  }
}
 800fcac:	bf00      	nop
 800fcae:	3708      	adds	r7, #8
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}

0800fcb4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b082      	sub	sp, #8
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
 800fcbc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fcc4:	b2db      	uxtb	r3, r3
 800fcc6:	3b01      	subs	r3, #1
 800fcc8:	2b02      	cmp	r3, #2
 800fcca:	d80b      	bhi.n	800fce4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	885b      	ldrh	r3, [r3, #2]
 800fcd0:	2b01      	cmp	r3, #1
 800fcd2:	d10c      	bne.n	800fcee <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f000 f910 	bl	800ff02 <USBD_CtlSendStatus>
      }
      break;
 800fce2:	e004      	b.n	800fcee <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fce4:	6839      	ldr	r1, [r7, #0]
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f000 f840 	bl	800fd6c <USBD_CtlError>
      break;
 800fcec:	e000      	b.n	800fcf0 <USBD_ClrFeature+0x3c>
      break;
 800fcee:	bf00      	nop
  }
}
 800fcf0:	bf00      	nop
 800fcf2:	3708      	adds	r7, #8
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}

0800fcf8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b084      	sub	sp, #16
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
 800fd00:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	781a      	ldrb	r2, [r3, #0]
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	3301      	adds	r3, #1
 800fd12:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	781a      	ldrb	r2, [r3, #0]
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	3301      	adds	r3, #1
 800fd20:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fd22:	68f8      	ldr	r0, [r7, #12]
 800fd24:	f7ff fa92 	bl	800f24c <SWAPBYTE>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	461a      	mov	r2, r3
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	3301      	adds	r3, #1
 800fd34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	3301      	adds	r3, #1
 800fd3a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fd3c:	68f8      	ldr	r0, [r7, #12]
 800fd3e:	f7ff fa85 	bl	800f24c <SWAPBYTE>
 800fd42:	4603      	mov	r3, r0
 800fd44:	461a      	mov	r2, r3
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	3301      	adds	r3, #1
 800fd4e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	3301      	adds	r3, #1
 800fd54:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fd56:	68f8      	ldr	r0, [r7, #12]
 800fd58:	f7ff fa78 	bl	800f24c <SWAPBYTE>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	461a      	mov	r2, r3
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	80da      	strh	r2, [r3, #6]
}
 800fd64:	bf00      	nop
 800fd66:	3710      	adds	r7, #16
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}

0800fd6c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b082      	sub	sp, #8
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
 800fd74:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fd76:	2180      	movs	r1, #128	; 0x80
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f003 fbff 	bl	801357c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fd7e:	2100      	movs	r1, #0
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	f003 fbfb 	bl	801357c <USBD_LL_StallEP>
}
 800fd86:	bf00      	nop
 800fd88:	3708      	adds	r7, #8
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}

0800fd8e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fd8e:	b580      	push	{r7, lr}
 800fd90:	b086      	sub	sp, #24
 800fd92:	af00      	add	r7, sp, #0
 800fd94:	60f8      	str	r0, [r7, #12]
 800fd96:	60b9      	str	r1, [r7, #8]
 800fd98:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d036      	beq.n	800fe12 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fda8:	6938      	ldr	r0, [r7, #16]
 800fdaa:	f000 f836 	bl	800fe1a <USBD_GetLen>
 800fdae:	4603      	mov	r3, r0
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	b29b      	uxth	r3, r3
 800fdb4:	005b      	lsls	r3, r3, #1
 800fdb6:	b29a      	uxth	r2, r3
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fdbc:	7dfb      	ldrb	r3, [r7, #23]
 800fdbe:	68ba      	ldr	r2, [r7, #8]
 800fdc0:	4413      	add	r3, r2
 800fdc2:	687a      	ldr	r2, [r7, #4]
 800fdc4:	7812      	ldrb	r2, [r2, #0]
 800fdc6:	701a      	strb	r2, [r3, #0]
  idx++;
 800fdc8:	7dfb      	ldrb	r3, [r7, #23]
 800fdca:	3301      	adds	r3, #1
 800fdcc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fdce:	7dfb      	ldrb	r3, [r7, #23]
 800fdd0:	68ba      	ldr	r2, [r7, #8]
 800fdd2:	4413      	add	r3, r2
 800fdd4:	2203      	movs	r2, #3
 800fdd6:	701a      	strb	r2, [r3, #0]
  idx++;
 800fdd8:	7dfb      	ldrb	r3, [r7, #23]
 800fdda:	3301      	adds	r3, #1
 800fddc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fdde:	e013      	b.n	800fe08 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fde0:	7dfb      	ldrb	r3, [r7, #23]
 800fde2:	68ba      	ldr	r2, [r7, #8]
 800fde4:	4413      	add	r3, r2
 800fde6:	693a      	ldr	r2, [r7, #16]
 800fde8:	7812      	ldrb	r2, [r2, #0]
 800fdea:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fdec:	693b      	ldr	r3, [r7, #16]
 800fdee:	3301      	adds	r3, #1
 800fdf0:	613b      	str	r3, [r7, #16]
    idx++;
 800fdf2:	7dfb      	ldrb	r3, [r7, #23]
 800fdf4:	3301      	adds	r3, #1
 800fdf6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fdf8:	7dfb      	ldrb	r3, [r7, #23]
 800fdfa:	68ba      	ldr	r2, [r7, #8]
 800fdfc:	4413      	add	r3, r2
 800fdfe:	2200      	movs	r2, #0
 800fe00:	701a      	strb	r2, [r3, #0]
    idx++;
 800fe02:	7dfb      	ldrb	r3, [r7, #23]
 800fe04:	3301      	adds	r3, #1
 800fe06:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	781b      	ldrb	r3, [r3, #0]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d1e7      	bne.n	800fde0 <USBD_GetString+0x52>
 800fe10:	e000      	b.n	800fe14 <USBD_GetString+0x86>
    return;
 800fe12:	bf00      	nop
  }
}
 800fe14:	3718      	adds	r7, #24
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}

0800fe1a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fe1a:	b480      	push	{r7}
 800fe1c:	b085      	sub	sp, #20
 800fe1e:	af00      	add	r7, sp, #0
 800fe20:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fe22:	2300      	movs	r3, #0
 800fe24:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fe2a:	e005      	b.n	800fe38 <USBD_GetLen+0x1e>
  {
    len++;
 800fe2c:	7bfb      	ldrb	r3, [r7, #15]
 800fe2e:	3301      	adds	r3, #1
 800fe30:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	3301      	adds	r3, #1
 800fe36:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	781b      	ldrb	r3, [r3, #0]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d1f5      	bne.n	800fe2c <USBD_GetLen+0x12>
  }

  return len;
 800fe40:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe42:	4618      	mov	r0, r3
 800fe44:	3714      	adds	r7, #20
 800fe46:	46bd      	mov	sp, r7
 800fe48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4c:	4770      	bx	lr

0800fe4e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fe4e:	b580      	push	{r7, lr}
 800fe50:	b084      	sub	sp, #16
 800fe52:	af00      	add	r7, sp, #0
 800fe54:	60f8      	str	r0, [r7, #12]
 800fe56:	60b9      	str	r1, [r7, #8]
 800fe58:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	2202      	movs	r2, #2
 800fe5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	687a      	ldr	r2, [r7, #4]
 800fe66:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	687a      	ldr	r2, [r7, #4]
 800fe6c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	68ba      	ldr	r2, [r7, #8]
 800fe72:	2100      	movs	r1, #0
 800fe74:	68f8      	ldr	r0, [r7, #12]
 800fe76:	f003 fc0b 	bl	8013690 <USBD_LL_Transmit>

  return USBD_OK;
 800fe7a:	2300      	movs	r3, #0
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3710      	adds	r7, #16
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b084      	sub	sp, #16
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	60f8      	str	r0, [r7, #12]
 800fe8c:	60b9      	str	r1, [r7, #8]
 800fe8e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	68ba      	ldr	r2, [r7, #8]
 800fe94:	2100      	movs	r1, #0
 800fe96:	68f8      	ldr	r0, [r7, #12]
 800fe98:	f003 fbfa 	bl	8013690 <USBD_LL_Transmit>

  return USBD_OK;
 800fe9c:	2300      	movs	r3, #0
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	3710      	adds	r7, #16
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}

0800fea6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fea6:	b580      	push	{r7, lr}
 800fea8:	b084      	sub	sp, #16
 800feaa:	af00      	add	r7, sp, #0
 800feac:	60f8      	str	r0, [r7, #12]
 800feae:	60b9      	str	r1, [r7, #8]
 800feb0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	2203      	movs	r2, #3
 800feb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	687a      	ldr	r2, [r7, #4]
 800febe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	687a      	ldr	r2, [r7, #4]
 800fec6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	68ba      	ldr	r2, [r7, #8]
 800fece:	2100      	movs	r1, #0
 800fed0:	68f8      	ldr	r0, [r7, #12]
 800fed2:	f003 fbfe 	bl	80136d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fed6:	2300      	movs	r3, #0
}
 800fed8:	4618      	mov	r0, r3
 800feda:	3710      	adds	r7, #16
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}

0800fee0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b084      	sub	sp, #16
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	60f8      	str	r0, [r7, #12]
 800fee8:	60b9      	str	r1, [r7, #8]
 800feea:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	68ba      	ldr	r2, [r7, #8]
 800fef0:	2100      	movs	r1, #0
 800fef2:	68f8      	ldr	r0, [r7, #12]
 800fef4:	f003 fbed 	bl	80136d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fef8:	2300      	movs	r3, #0
}
 800fefa:	4618      	mov	r0, r3
 800fefc:	3710      	adds	r7, #16
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd80      	pop	{r7, pc}

0800ff02 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ff02:	b580      	push	{r7, lr}
 800ff04:	b082      	sub	sp, #8
 800ff06:	af00      	add	r7, sp, #0
 800ff08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2204      	movs	r2, #4
 800ff0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ff12:	2300      	movs	r3, #0
 800ff14:	2200      	movs	r2, #0
 800ff16:	2100      	movs	r1, #0
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f003 fbb9 	bl	8013690 <USBD_LL_Transmit>

  return USBD_OK;
 800ff1e:	2300      	movs	r3, #0
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3708      	adds	r7, #8
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}

0800ff28 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b082      	sub	sp, #8
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2205      	movs	r2, #5
 800ff34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ff38:	2300      	movs	r3, #0
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	2100      	movs	r1, #0
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	f003 fbc7 	bl	80136d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ff44:	2300      	movs	r3, #0
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	3708      	adds	r7, #8
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}

0800ff4e <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800ff4e:	b580      	push	{r7, lr}
 800ff50:	b088      	sub	sp, #32
 800ff52:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ff54:	2300      	movs	r3, #0
 800ff56:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ff58:	f107 0308 	add.w	r3, r7, #8
 800ff5c:	2218      	movs	r2, #24
 800ff5e:	2100      	movs	r1, #0
 800ff60:	4618      	mov	r0, r3
 800ff62:	f001 f8d8 	bl	8011116 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ff66:	233f      	movs	r3, #63	; 0x3f
 800ff68:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800ff6a:	2381      	movs	r3, #129	; 0x81
 800ff6c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ff6e:	1dfb      	adds	r3, r7, #7
 800ff70:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ff72:	2301      	movs	r3, #1
 800ff74:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ff76:	f107 0308 	add.w	r3, r7, #8
 800ff7a:	2100      	movs	r1, #0
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f001 fb53 	bl	8011628 <hci_send_req>
 800ff82:	4603      	mov	r3, r0
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	da01      	bge.n	800ff8c <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ff88:	23ff      	movs	r3, #255	; 0xff
 800ff8a:	e000      	b.n	800ff8e <aci_gap_set_non_discoverable+0x40>
  return status;
 800ff8c:	79fb      	ldrb	r3, [r7, #7]
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	3720      	adds	r7, #32
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd80      	pop	{r7, pc}

0800ff96 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800ff96:	b5b0      	push	{r4, r5, r7, lr}
 800ff98:	b0ce      	sub	sp, #312	; 0x138
 800ff9a:	af00      	add	r7, sp, #0
 800ff9c:	4605      	mov	r5, r0
 800ff9e:	460c      	mov	r4, r1
 800ffa0:	4610      	mov	r0, r2
 800ffa2:	4619      	mov	r1, r3
 800ffa4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ffa8:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800ffac:	462a      	mov	r2, r5
 800ffae:	701a      	strb	r2, [r3, #0]
 800ffb0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ffb4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ffb8:	4622      	mov	r2, r4
 800ffba:	801a      	strh	r2, [r3, #0]
 800ffbc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ffc0:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800ffc4:	4602      	mov	r2, r0
 800ffc6:	801a      	strh	r2, [r3, #0]
 800ffc8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ffcc:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800ffd0:	460a      	mov	r2, r1
 800ffd2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800ffd4:	f107 0310 	add.w	r3, r7, #16
 800ffd8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800ffdc:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800ffe0:	3308      	adds	r3, #8
 800ffe2:	f107 0210 	add.w	r2, r7, #16
 800ffe6:	4413      	add	r3, r2
 800ffe8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800ffec:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800fff0:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800fff4:	4413      	add	r3, r2
 800fff6:	3309      	adds	r3, #9
 800fff8:	f107 0210 	add.w	r2, r7, #16
 800fffc:	4413      	add	r3, r2
 800fffe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8010002:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8010006:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 801000a:	2200      	movs	r2, #0
 801000c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801000e:	2300      	movs	r3, #0
 8010010:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8010014:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010018:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801001c:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8010020:	7812      	ldrb	r2, [r2, #0]
 8010022:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010024:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010028:	3301      	adds	r3, #1
 801002a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 801002e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010032:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8010036:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 801003a:	8812      	ldrh	r2, [r2, #0]
 801003c:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8010040:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010044:	3302      	adds	r3, #2
 8010046:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 801004a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801004e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8010052:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8010056:	8812      	ldrh	r2, [r2, #0]
 8010058:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 801005c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010060:	3302      	adds	r3, #2
 8010062:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8010066:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801006a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801006e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8010072:	7812      	ldrb	r2, [r2, #0]
 8010074:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8010076:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801007a:	3301      	adds	r3, #1
 801007c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8010080:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010084:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8010088:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 801008a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801008e:	3301      	adds	r3, #1
 8010090:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8010094:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010098:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 801009c:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 801009e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80100a2:	3301      	adds	r3, #1
 80100a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80100a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80100ac:	3308      	adds	r3, #8
 80100ae:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80100b2:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80100b6:	4618      	mov	r0, r3
 80100b8:	f001 f81d 	bl	80110f6 <Osal_MemCpy>
    index_input += Local_Name_Length;
 80100bc:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80100c0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80100c4:	4413      	add	r3, r2
 80100c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80100ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80100ce:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80100d2:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80100d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80100d8:	3301      	adds	r3, #1
 80100da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80100de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80100e2:	3301      	adds	r3, #1
 80100e4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80100e8:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80100ec:	4618      	mov	r0, r3
 80100ee:	f001 f802 	bl	80110f6 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80100f2:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80100f6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80100fa:	4413      	add	r3, r2
 80100fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8010100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010104:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8010108:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 801010a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801010e:	3302      	adds	r3, #2
 8010110:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8010114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010118:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 801011c:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 801011e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010122:	3302      	adds	r3, #2
 8010124:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010128:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801012c:	2218      	movs	r2, #24
 801012e:	2100      	movs	r1, #0
 8010130:	4618      	mov	r0, r3
 8010132:	f000 fff0 	bl	8011116 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010136:	233f      	movs	r3, #63	; 0x3f
 8010138:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 801013c:	2383      	movs	r3, #131	; 0x83
 801013e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8010142:	f107 0310 	add.w	r3, r7, #16
 8010146:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801014a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801014e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8010152:	f107 030f 	add.w	r3, r7, #15
 8010156:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 801015a:	2301      	movs	r3, #1
 801015c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010160:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010164:	2100      	movs	r1, #0
 8010166:	4618      	mov	r0, r3
 8010168:	f001 fa5e 	bl	8011628 <hci_send_req>
 801016c:	4603      	mov	r3, r0
 801016e:	2b00      	cmp	r3, #0
 8010170:	da01      	bge.n	8010176 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8010172:	23ff      	movs	r3, #255	; 0xff
 8010174:	e004      	b.n	8010180 <aci_gap_set_discoverable+0x1ea>
  return status;
 8010176:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801017a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 801017e:	781b      	ldrb	r3, [r3, #0]
}
 8010180:	4618      	mov	r0, r3
 8010182:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8010186:	46bd      	mov	sp, r7
 8010188:	bdb0      	pop	{r4, r5, r7, pc}

0801018a <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 801018a:	b580      	push	{r7, lr}
 801018c:	b0cc      	sub	sp, #304	; 0x130
 801018e:	af00      	add	r7, sp, #0
 8010190:	4602      	mov	r2, r0
 8010192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010196:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 801019a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 801019c:	f107 0310 	add.w	r3, r7, #16
 80101a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80101a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80101a8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80101ac:	2200      	movs	r2, #0
 80101ae:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80101b0:	2300      	movs	r3, #0
 80101b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80101b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80101ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80101be:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80101c2:	7812      	ldrb	r2, [r2, #0]
 80101c4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80101c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80101ca:	3301      	adds	r3, #1
 80101cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80101d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80101d4:	2218      	movs	r2, #24
 80101d6:	2100      	movs	r1, #0
 80101d8:	4618      	mov	r0, r3
 80101da:	f000 ff9c 	bl	8011116 <Osal_MemSet>
  rq.ogf = 0x3f;
 80101de:	233f      	movs	r3, #63	; 0x3f
 80101e0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80101e4:	2385      	movs	r3, #133	; 0x85
 80101e6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80101ea:	f107 0310 	add.w	r3, r7, #16
 80101ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80101f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80101f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80101fa:	f107 030f 	add.w	r3, r7, #15
 80101fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8010202:	2301      	movs	r3, #1
 8010204:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010208:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801020c:	2100      	movs	r1, #0
 801020e:	4618      	mov	r0, r3
 8010210:	f001 fa0a 	bl	8011628 <hci_send_req>
 8010214:	4603      	mov	r3, r0
 8010216:	2b00      	cmp	r3, #0
 8010218:	da01      	bge.n	801021e <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 801021a:	23ff      	movs	r3, #255	; 0xff
 801021c:	e004      	b.n	8010228 <aci_gap_set_io_capability+0x9e>
  return status;
 801021e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010222:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010226:	781b      	ldrb	r3, [r3, #0]
}
 8010228:	4618      	mov	r0, r3
 801022a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}

08010232 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8010232:	b5b0      	push	{r4, r5, r7, lr}
 8010234:	b0cc      	sub	sp, #304	; 0x130
 8010236:	af00      	add	r7, sp, #0
 8010238:	4605      	mov	r5, r0
 801023a:	460c      	mov	r4, r1
 801023c:	4610      	mov	r0, r2
 801023e:	4619      	mov	r1, r3
 8010240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010244:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8010248:	462a      	mov	r2, r5
 801024a:	701a      	strb	r2, [r3, #0]
 801024c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010250:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8010254:	4622      	mov	r2, r4
 8010256:	701a      	strb	r2, [r3, #0]
 8010258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801025c:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8010260:	4602      	mov	r2, r0
 8010262:	701a      	strb	r2, [r3, #0]
 8010264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010268:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801026c:	460a      	mov	r2, r1
 801026e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8010270:	f107 0310 	add.w	r3, r7, #16
 8010274:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8010278:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801027c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010280:	2200      	movs	r2, #0
 8010282:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010284:	2300      	movs	r3, #0
 8010286:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 801028a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801028e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010292:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8010296:	7812      	ldrb	r2, [r2, #0]
 8010298:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801029a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801029e:	3301      	adds	r3, #1
 80102a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80102a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80102a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80102ac:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80102b0:	7812      	ldrb	r2, [r2, #0]
 80102b2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80102b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80102b8:	3301      	adds	r3, #1
 80102ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80102be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80102c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80102c6:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80102ca:	7812      	ldrb	r2, [r2, #0]
 80102cc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80102ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80102d2:	3301      	adds	r3, #1
 80102d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80102d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80102dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80102e0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80102e4:	7812      	ldrb	r2, [r2, #0]
 80102e6:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80102e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80102ec:	3301      	adds	r3, #1
 80102ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80102f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80102f6:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80102fa:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80102fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010300:	3301      	adds	r3, #1
 8010302:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8010306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801030a:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 801030e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8010310:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010314:	3301      	adds	r3, #1
 8010316:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 801031a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801031e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8010322:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8010324:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010328:	3301      	adds	r3, #1
 801032a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 801032e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010332:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8010336:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 801033a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801033e:	3304      	adds	r3, #4
 8010340:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8010344:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010348:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 801034c:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 801034e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010352:	3301      	adds	r3, #1
 8010354:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010358:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801035c:	2218      	movs	r2, #24
 801035e:	2100      	movs	r1, #0
 8010360:	4618      	mov	r0, r3
 8010362:	f000 fed8 	bl	8011116 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010366:	233f      	movs	r3, #63	; 0x3f
 8010368:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 801036c:	2386      	movs	r3, #134	; 0x86
 801036e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8010372:	f107 0310 	add.w	r3, r7, #16
 8010376:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801037a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801037e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8010382:	f107 030f 	add.w	r3, r7, #15
 8010386:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 801038a:	2301      	movs	r3, #1
 801038c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010390:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010394:	2100      	movs	r1, #0
 8010396:	4618      	mov	r0, r3
 8010398:	f001 f946 	bl	8011628 <hci_send_req>
 801039c:	4603      	mov	r3, r0
 801039e:	2b00      	cmp	r3, #0
 80103a0:	da01      	bge.n	80103a6 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80103a2:	23ff      	movs	r3, #255	; 0xff
 80103a4:	e004      	b.n	80103b0 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80103a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80103aa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80103ae:	781b      	ldrb	r3, [r3, #0]
}
 80103b0:	4618      	mov	r0, r3
 80103b2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bdb0      	pop	{r4, r5, r7, pc}

080103ba <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80103ba:	b580      	push	{r7, lr}
 80103bc:	b0cc      	sub	sp, #304	; 0x130
 80103be:	af00      	add	r7, sp, #0
 80103c0:	4602      	mov	r2, r0
 80103c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80103c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80103ca:	6019      	str	r1, [r3, #0]
 80103cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80103d0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80103d4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80103d6:	f107 0310 	add.w	r3, r7, #16
 80103da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80103de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80103e2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80103e6:	2200      	movs	r2, #0
 80103e8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80103ea:	2300      	movs	r3, #0
 80103ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80103f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80103f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80103f8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80103fc:	8812      	ldrh	r2, [r2, #0]
 80103fe:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010400:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010404:	3302      	adds	r3, #2
 8010406:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 801040a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801040e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010412:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8010416:	6812      	ldr	r2, [r2, #0]
 8010418:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 801041c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010420:	3304      	adds	r3, #4
 8010422:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010426:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801042a:	2218      	movs	r2, #24
 801042c:	2100      	movs	r1, #0
 801042e:	4618      	mov	r0, r3
 8010430:	f000 fe71 	bl	8011116 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010434:	233f      	movs	r3, #63	; 0x3f
 8010436:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 801043a:	2388      	movs	r3, #136	; 0x88
 801043c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8010440:	f107 0310 	add.w	r3, r7, #16
 8010444:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8010448:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801044c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8010450:	f107 030f 	add.w	r3, r7, #15
 8010454:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8010458:	2301      	movs	r3, #1
 801045a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801045e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010462:	2100      	movs	r1, #0
 8010464:	4618      	mov	r0, r3
 8010466:	f001 f8df 	bl	8011628 <hci_send_req>
 801046a:	4603      	mov	r3, r0
 801046c:	2b00      	cmp	r3, #0
 801046e:	da01      	bge.n	8010474 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8010470:	23ff      	movs	r3, #255	; 0xff
 8010472:	e004      	b.n	801047e <aci_gap_pass_key_resp+0xc4>
  return status;
 8010474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010478:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801047c:	781b      	ldrb	r3, [r3, #0]
}
 801047e:	4618      	mov	r0, r3
 8010480:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8010488:	b590      	push	{r4, r7, lr}
 801048a:	b0cd      	sub	sp, #308	; 0x134
 801048c:	af00      	add	r7, sp, #0
 801048e:	4604      	mov	r4, r0
 8010490:	4608      	mov	r0, r1
 8010492:	4611      	mov	r1, r2
 8010494:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010498:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 801049c:	6013      	str	r3, [r2, #0]
 801049e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80104a2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80104a6:	4622      	mov	r2, r4
 80104a8:	701a      	strb	r2, [r3, #0]
 80104aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80104ae:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80104b2:	4602      	mov	r2, r0
 80104b4:	701a      	strb	r2, [r3, #0]
 80104b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80104ba:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80104be:	460a      	mov	r2, r1
 80104c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80104c2:	f107 0310 	add.w	r3, r7, #16
 80104c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80104ca:	f107 0308 	add.w	r3, r7, #8
 80104ce:	2207      	movs	r2, #7
 80104d0:	2100      	movs	r1, #0
 80104d2:	4618      	mov	r0, r3
 80104d4:	f000 fe1f 	bl	8011116 <Osal_MemSet>
  int index_input = 0;
 80104d8:	2300      	movs	r3, #0
 80104da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80104de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80104e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80104e6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80104ea:	7812      	ldrb	r2, [r2, #0]
 80104ec:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80104ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80104f2:	3301      	adds	r3, #1
 80104f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80104f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80104fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010500:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8010504:	7812      	ldrb	r2, [r2, #0]
 8010506:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8010508:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801050c:	3301      	adds	r3, #1
 801050e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8010512:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010516:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801051a:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 801051e:	7812      	ldrb	r2, [r2, #0]
 8010520:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8010522:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010526:	3301      	adds	r3, #1
 8010528:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801052c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010530:	2218      	movs	r2, #24
 8010532:	2100      	movs	r1, #0
 8010534:	4618      	mov	r0, r3
 8010536:	f000 fdee 	bl	8011116 <Osal_MemSet>
  rq.ogf = 0x3f;
 801053a:	233f      	movs	r3, #63	; 0x3f
 801053c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8010540:	238a      	movs	r3, #138	; 0x8a
 8010542:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8010546:	f107 0310 	add.w	r3, r7, #16
 801054a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801054e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010552:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8010556:	f107 0308 	add.w	r3, r7, #8
 801055a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 801055e:	2307      	movs	r3, #7
 8010560:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010564:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010568:	2100      	movs	r1, #0
 801056a:	4618      	mov	r0, r3
 801056c:	f001 f85c 	bl	8011628 <hci_send_req>
 8010570:	4603      	mov	r3, r0
 8010572:	2b00      	cmp	r3, #0
 8010574:	da01      	bge.n	801057a <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8010576:	23ff      	movs	r3, #255	; 0xff
 8010578:	e02e      	b.n	80105d8 <aci_gap_init+0x150>
  if ( resp.Status )
 801057a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801057e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010582:	781b      	ldrb	r3, [r3, #0]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d005      	beq.n	8010594 <aci_gap_init+0x10c>
    return resp.Status;
 8010588:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801058c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010590:	781b      	ldrb	r3, [r3, #0]
 8010592:	e021      	b.n	80105d8 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8010594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010598:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801059c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80105a0:	b29a      	uxth	r2, r3
 80105a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80105a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80105ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80105b2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80105b6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80105ba:	b29a      	uxth	r2, r3
 80105bc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80105c0:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80105c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80105c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80105ca:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80105ce:	b29a      	uxth	r2, r3
 80105d0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80105d4:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80105d6:	2300      	movs	r3, #0
}
 80105d8:	4618      	mov	r0, r3
 80105da:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd90      	pop	{r4, r7, pc}

080105e2 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80105e2:	b580      	push	{r7, lr}
 80105e4:	b0cc      	sub	sp, #304	; 0x130
 80105e6:	af00      	add	r7, sp, #0
 80105e8:	4602      	mov	r2, r0
 80105ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80105ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80105f2:	6019      	str	r1, [r3, #0]
 80105f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80105f8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80105fc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80105fe:	f107 0310 	add.w	r3, r7, #16
 8010602:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8010606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801060a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801060e:	2200      	movs	r2, #0
 8010610:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010612:	2300      	movs	r3, #0
 8010614:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8010618:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801061c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010620:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8010624:	7812      	ldrb	r2, [r2, #0]
 8010626:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010628:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801062c:	3301      	adds	r3, #1
 801062e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8010632:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010636:	1c58      	adds	r0, r3, #1
 8010638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801063c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8010640:	781a      	ldrb	r2, [r3, #0]
 8010642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010646:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801064a:	6819      	ldr	r1, [r3, #0]
 801064c:	f000 fd53 	bl	80110f6 <Osal_MemCpy>
  index_input += AdvDataLen;
 8010650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010654:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8010658:	781b      	ldrb	r3, [r3, #0]
 801065a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801065e:	4413      	add	r3, r2
 8010660:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010664:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010668:	2218      	movs	r2, #24
 801066a:	2100      	movs	r1, #0
 801066c:	4618      	mov	r0, r3
 801066e:	f000 fd52 	bl	8011116 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010672:	233f      	movs	r3, #63	; 0x3f
 8010674:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8010678:	238e      	movs	r3, #142	; 0x8e
 801067a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 801067e:	f107 0310 	add.w	r3, r7, #16
 8010682:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8010686:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801068a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 801068e:	f107 030f 	add.w	r3, r7, #15
 8010692:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8010696:	2301      	movs	r3, #1
 8010698:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801069c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80106a0:	2100      	movs	r1, #0
 80106a2:	4618      	mov	r0, r3
 80106a4:	f000 ffc0 	bl	8011628 <hci_send_req>
 80106a8:	4603      	mov	r3, r0
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	da01      	bge.n	80106b2 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80106ae:	23ff      	movs	r3, #255	; 0xff
 80106b0:	e004      	b.n	80106bc <aci_gap_update_adv_data+0xda>
  return status;
 80106b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80106b6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80106ba:	781b      	ldrb	r3, [r3, #0]
}
 80106bc:	4618      	mov	r0, r3
 80106be:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}

080106c6 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80106c6:	b580      	push	{r7, lr}
 80106c8:	b088      	sub	sp, #32
 80106ca:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80106cc:	2300      	movs	r3, #0
 80106ce:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80106d0:	f107 0308 	add.w	r3, r7, #8
 80106d4:	2218      	movs	r2, #24
 80106d6:	2100      	movs	r1, #0
 80106d8:	4618      	mov	r0, r3
 80106da:	f000 fd1c 	bl	8011116 <Osal_MemSet>
  rq.ogf = 0x3f;
 80106de:	233f      	movs	r3, #63	; 0x3f
 80106e0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80106e2:	2392      	movs	r3, #146	; 0x92
 80106e4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80106e6:	1dfb      	adds	r3, r7, #7
 80106e8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80106ea:	2301      	movs	r3, #1
 80106ec:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80106ee:	f107 0308 	add.w	r3, r7, #8
 80106f2:	2100      	movs	r1, #0
 80106f4:	4618      	mov	r0, r3
 80106f6:	f000 ff97 	bl	8011628 <hci_send_req>
 80106fa:	4603      	mov	r3, r0
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	da01      	bge.n	8010704 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8010700:	23ff      	movs	r3, #255	; 0xff
 8010702:	e000      	b.n	8010706 <aci_gap_configure_whitelist+0x40>
  return status;
 8010704:	79fb      	ldrb	r3, [r7, #7]
}
 8010706:	4618      	mov	r0, r3
 8010708:	3720      	adds	r7, #32
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}

0801070e <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 801070e:	b580      	push	{r7, lr}
 8010710:	b0cc      	sub	sp, #304	; 0x130
 8010712:	af00      	add	r7, sp, #0
 8010714:	4602      	mov	r2, r0
 8010716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801071a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801071e:	801a      	strh	r2, [r3, #0]
 8010720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010724:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8010728:	460a      	mov	r2, r1
 801072a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 801072c:	f107 0310 	add.w	r3, r7, #16
 8010730:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8010734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010738:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801073c:	2200      	movs	r2, #0
 801073e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010740:	2300      	movs	r3, #0
 8010742:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8010746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801074a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801074e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8010752:	8812      	ldrh	r2, [r2, #0]
 8010754:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010756:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801075a:	3302      	adds	r3, #2
 801075c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8010760:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010764:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010768:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 801076c:	7812      	ldrb	r2, [r2, #0]
 801076e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8010770:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010774:	3301      	adds	r3, #1
 8010776:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801077a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801077e:	2218      	movs	r2, #24
 8010780:	2100      	movs	r1, #0
 8010782:	4618      	mov	r0, r3
 8010784:	f000 fcc7 	bl	8011116 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010788:	233f      	movs	r3, #63	; 0x3f
 801078a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 801078e:	23a5      	movs	r3, #165	; 0xa5
 8010790:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8010794:	f107 0310 	add.w	r3, r7, #16
 8010798:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801079c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80107a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80107a4:	f107 030f 	add.w	r3, r7, #15
 80107a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80107ac:	2301      	movs	r3, #1
 80107ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80107b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80107b6:	2100      	movs	r1, #0
 80107b8:	4618      	mov	r0, r3
 80107ba:	f000 ff35 	bl	8011628 <hci_send_req>
 80107be:	4603      	mov	r3, r0
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	da01      	bge.n	80107c8 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80107c4:	23ff      	movs	r3, #255	; 0xff
 80107c6:	e004      	b.n	80107d2 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80107c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80107cc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80107d0:	781b      	ldrb	r3, [r3, #0]
}
 80107d2:	4618      	mov	r0, r3
 80107d4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}

080107dc <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b088      	sub	sp, #32
 80107e0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80107e2:	2300      	movs	r3, #0
 80107e4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80107e6:	f107 0308 	add.w	r3, r7, #8
 80107ea:	2218      	movs	r2, #24
 80107ec:	2100      	movs	r1, #0
 80107ee:	4618      	mov	r0, r3
 80107f0:	f000 fc91 	bl	8011116 <Osal_MemSet>
  rq.ogf = 0x3f;
 80107f4:	233f      	movs	r3, #63	; 0x3f
 80107f6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80107f8:	f240 1301 	movw	r3, #257	; 0x101
 80107fc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80107fe:	1dfb      	adds	r3, r7, #7
 8010800:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8010802:	2301      	movs	r3, #1
 8010804:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010806:	f107 0308 	add.w	r3, r7, #8
 801080a:	2100      	movs	r1, #0
 801080c:	4618      	mov	r0, r3
 801080e:	f000 ff0b 	bl	8011628 <hci_send_req>
 8010812:	4603      	mov	r3, r0
 8010814:	2b00      	cmp	r3, #0
 8010816:	da01      	bge.n	801081c <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8010818:	23ff      	movs	r3, #255	; 0xff
 801081a:	e000      	b.n	801081e <aci_gatt_init+0x42>
  return status;
 801081c:	79fb      	ldrb	r3, [r7, #7]
}
 801081e:	4618      	mov	r0, r3
 8010820:	3720      	adds	r7, #32
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}

08010826 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8010826:	b590      	push	{r4, r7, lr}
 8010828:	b0cf      	sub	sp, #316	; 0x13c
 801082a:	af00      	add	r7, sp, #0
 801082c:	4604      	mov	r4, r0
 801082e:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8010832:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8010836:	6001      	str	r1, [r0, #0]
 8010838:	4610      	mov	r0, r2
 801083a:	4619      	mov	r1, r3
 801083c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8010840:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8010844:	4622      	mov	r2, r4
 8010846:	701a      	strb	r2, [r3, #0]
 8010848:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801084c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8010850:	4602      	mov	r2, r0
 8010852:	701a      	strb	r2, [r3, #0]
 8010854:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8010858:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 801085c:	460a      	mov	r2, r1
 801085e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8010860:	f107 0310 	add.w	r3, r7, #16
 8010864:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8010868:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801086c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8010870:	781b      	ldrb	r3, [r3, #0]
 8010872:	2b01      	cmp	r3, #1
 8010874:	d00a      	beq.n	801088c <aci_gatt_add_service+0x66>
 8010876:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801087a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 801087e:	781b      	ldrb	r3, [r3, #0]
 8010880:	2b02      	cmp	r3, #2
 8010882:	d101      	bne.n	8010888 <aci_gatt_add_service+0x62>
 8010884:	2311      	movs	r3, #17
 8010886:	e002      	b.n	801088e <aci_gatt_add_service+0x68>
 8010888:	2301      	movs	r3, #1
 801088a:	e000      	b.n	801088e <aci_gatt_add_service+0x68>
 801088c:	2303      	movs	r3, #3
 801088e:	f107 0210 	add.w	r2, r7, #16
 8010892:	4413      	add	r3, r2
 8010894:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8010898:	f107 030c 	add.w	r3, r7, #12
 801089c:	2203      	movs	r2, #3
 801089e:	2100      	movs	r1, #0
 80108a0:	4618      	mov	r0, r3
 80108a2:	f000 fc38 	bl	8011116 <Osal_MemSet>
  int index_input = 0;
 80108a6:	2300      	movs	r3, #0
 80108a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80108ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80108b0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80108b4:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80108b8:	7812      	ldrb	r2, [r2, #0]
 80108ba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80108bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80108c0:	3301      	adds	r3, #1
 80108c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80108c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80108ca:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	2b01      	cmp	r3, #1
 80108d2:	d002      	beq.n	80108da <aci_gatt_add_service+0xb4>
 80108d4:	2b02      	cmp	r3, #2
 80108d6:	d004      	beq.n	80108e2 <aci_gatt_add_service+0xbc>
 80108d8:	e007      	b.n	80108ea <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80108da:	2302      	movs	r3, #2
 80108dc:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80108e0:	e005      	b.n	80108ee <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80108e2:	2310      	movs	r3, #16
 80108e4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80108e8:	e001      	b.n	80108ee <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80108ea:	2397      	movs	r3, #151	; 0x97
 80108ec:	e06c      	b.n	80109c8 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80108ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80108f2:	1c58      	adds	r0, r3, #1
 80108f4:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80108f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80108fc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8010900:	6819      	ldr	r1, [r3, #0]
 8010902:	f000 fbf8 	bl	80110f6 <Osal_MemCpy>
    index_input += size;
 8010906:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 801090a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801090e:	4413      	add	r3, r2
 8010910:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8010914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010918:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801091c:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8010920:	7812      	ldrb	r2, [r2, #0]
 8010922:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8010924:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010928:	3301      	adds	r3, #1
 801092a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 801092e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010932:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8010936:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 801093a:	7812      	ldrb	r2, [r2, #0]
 801093c:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 801093e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010942:	3301      	adds	r3, #1
 8010944:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010948:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801094c:	2218      	movs	r2, #24
 801094e:	2100      	movs	r1, #0
 8010950:	4618      	mov	r0, r3
 8010952:	f000 fbe0 	bl	8011116 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010956:	233f      	movs	r3, #63	; 0x3f
 8010958:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 801095c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8010960:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8010964:	f107 0310 	add.w	r3, r7, #16
 8010968:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801096c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010970:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8010974:	f107 030c 	add.w	r3, r7, #12
 8010978:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 801097c:	2303      	movs	r3, #3
 801097e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010982:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010986:	2100      	movs	r1, #0
 8010988:	4618      	mov	r0, r3
 801098a:	f000 fe4d 	bl	8011628 <hci_send_req>
 801098e:	4603      	mov	r3, r0
 8010990:	2b00      	cmp	r3, #0
 8010992:	da01      	bge.n	8010998 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8010994:	23ff      	movs	r3, #255	; 0xff
 8010996:	e017      	b.n	80109c8 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8010998:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801099c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80109a0:	781b      	ldrb	r3, [r3, #0]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d005      	beq.n	80109b2 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80109a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80109aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80109ae:	781b      	ldrb	r3, [r3, #0]
 80109b0:	e00a      	b.n	80109c8 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80109b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80109b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80109ba:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80109be:	b29a      	uxth	r2, r3
 80109c0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80109c4:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80109c6:	2300      	movs	r3, #0
}
 80109c8:	4618      	mov	r0, r3
 80109ca:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd90      	pop	{r4, r7, pc}

080109d2 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80109d2:	b590      	push	{r4, r7, lr}
 80109d4:	b0d1      	sub	sp, #324	; 0x144
 80109d6:	af00      	add	r7, sp, #0
 80109d8:	4604      	mov	r4, r0
 80109da:	4608      	mov	r0, r1
 80109dc:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80109e0:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 80109e4:	600a      	str	r2, [r1, #0]
 80109e6:	4619      	mov	r1, r3
 80109e8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80109ec:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80109f0:	4622      	mov	r2, r4
 80109f2:	801a      	strh	r2, [r3, #0]
 80109f4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80109f8:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80109fc:	4602      	mov	r2, r0
 80109fe:	701a      	strb	r2, [r3, #0]
 8010a00:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010a04:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8010a08:	460a      	mov	r2, r1
 8010a0a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8010a0c:	f107 0318 	add.w	r3, r7, #24
 8010a10:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8010a14:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010a18:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8010a1c:	781b      	ldrb	r3, [r3, #0]
 8010a1e:	2b01      	cmp	r3, #1
 8010a20:	d00a      	beq.n	8010a38 <aci_gatt_add_char+0x66>
 8010a22:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010a26:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8010a2a:	781b      	ldrb	r3, [r3, #0]
 8010a2c:	2b02      	cmp	r3, #2
 8010a2e:	d101      	bne.n	8010a34 <aci_gatt_add_char+0x62>
 8010a30:	2313      	movs	r3, #19
 8010a32:	e002      	b.n	8010a3a <aci_gatt_add_char+0x68>
 8010a34:	2303      	movs	r3, #3
 8010a36:	e000      	b.n	8010a3a <aci_gatt_add_char+0x68>
 8010a38:	2305      	movs	r3, #5
 8010a3a:	f107 0218 	add.w	r2, r7, #24
 8010a3e:	4413      	add	r3, r2
 8010a40:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8010a44:	f107 0314 	add.w	r3, r7, #20
 8010a48:	2203      	movs	r2, #3
 8010a4a:	2100      	movs	r1, #0
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f000 fb62 	bl	8011116 <Osal_MemSet>
  int index_input = 0;
 8010a52:	2300      	movs	r3, #0
 8010a54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8010a58:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8010a5c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8010a60:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8010a64:	8812      	ldrh	r2, [r2, #0]
 8010a66:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010a68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010a6c:	3302      	adds	r3, #2
 8010a6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8010a72:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8010a76:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8010a7a:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8010a7e:	7812      	ldrb	r2, [r2, #0]
 8010a80:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8010a82:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010a86:	3301      	adds	r3, #1
 8010a88:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8010a8c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010a90:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8010a94:	781b      	ldrb	r3, [r3, #0]
 8010a96:	2b01      	cmp	r3, #1
 8010a98:	d002      	beq.n	8010aa0 <aci_gatt_add_char+0xce>
 8010a9a:	2b02      	cmp	r3, #2
 8010a9c:	d004      	beq.n	8010aa8 <aci_gatt_add_char+0xd6>
 8010a9e:	e007      	b.n	8010ab0 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8010aa0:	2302      	movs	r3, #2
 8010aa2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8010aa6:	e005      	b.n	8010ab4 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8010aa8:	2310      	movs	r3, #16
 8010aaa:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8010aae:	e001      	b.n	8010ab4 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8010ab0:	2397      	movs	r3, #151	; 0x97
 8010ab2:	e091      	b.n	8010bd8 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8010ab4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8010ab8:	1cd8      	adds	r0, r3, #3
 8010aba:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8010abe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010ac2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8010ac6:	6819      	ldr	r1, [r3, #0]
 8010ac8:	f000 fb15 	bl	80110f6 <Osal_MemCpy>
    index_input += size;
 8010acc:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8010ad0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8010ad4:	4413      	add	r3, r2
 8010ad6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8010ada:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010ade:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8010ae2:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8010ae6:	8812      	ldrh	r2, [r2, #0]
 8010ae8:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8010aea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010aee:	3302      	adds	r3, #2
 8010af0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8010af4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010af8:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8010afc:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8010afe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010b02:	3301      	adds	r3, #1
 8010b04:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8010b08:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010b0c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8010b10:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8010b12:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010b16:	3301      	adds	r3, #1
 8010b18:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8010b1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010b20:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8010b24:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8010b26:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010b2a:	3301      	adds	r3, #1
 8010b2c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8010b30:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010b34:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8010b38:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8010b3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010b3e:	3301      	adds	r3, #1
 8010b40:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8010b44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010b48:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8010b4c:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8010b4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010b52:	3301      	adds	r3, #1
 8010b54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010b58:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8010b5c:	2218      	movs	r2, #24
 8010b5e:	2100      	movs	r1, #0
 8010b60:	4618      	mov	r0, r3
 8010b62:	f000 fad8 	bl	8011116 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010b66:	233f      	movs	r3, #63	; 0x3f
 8010b68:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8010b6c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8010b70:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8010b74:	f107 0318 	add.w	r3, r7, #24
 8010b78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8010b7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010b80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8010b84:	f107 0314 	add.w	r3, r7, #20
 8010b88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8010b8c:	2303      	movs	r3, #3
 8010b8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010b92:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8010b96:	2100      	movs	r1, #0
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f000 fd45 	bl	8011628 <hci_send_req>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	da01      	bge.n	8010ba8 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8010ba4:	23ff      	movs	r3, #255	; 0xff
 8010ba6:	e017      	b.n	8010bd8 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8010ba8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010bac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010bb0:	781b      	ldrb	r3, [r3, #0]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d005      	beq.n	8010bc2 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8010bb6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010bba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010bbe:	781b      	ldrb	r3, [r3, #0]
 8010bc0:	e00a      	b.n	8010bd8 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8010bc2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010bc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010bca:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010bce:	b29a      	uxth	r2, r3
 8010bd0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8010bd4:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8010bd6:	2300      	movs	r3, #0
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bd90      	pop	{r4, r7, pc}

08010be2 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8010be2:	b5b0      	push	{r4, r5, r7, lr}
 8010be4:	b0cc      	sub	sp, #304	; 0x130
 8010be6:	af00      	add	r7, sp, #0
 8010be8:	4605      	mov	r5, r0
 8010bea:	460c      	mov	r4, r1
 8010bec:	4610      	mov	r0, r2
 8010bee:	4619      	mov	r1, r3
 8010bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010bf4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8010bf8:	462a      	mov	r2, r5
 8010bfa:	801a      	strh	r2, [r3, #0]
 8010bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010c00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010c04:	4622      	mov	r2, r4
 8010c06:	801a      	strh	r2, [r3, #0]
 8010c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010c0c:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8010c10:	4602      	mov	r2, r0
 8010c12:	701a      	strb	r2, [r3, #0]
 8010c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010c18:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8010c1c:	460a      	mov	r2, r1
 8010c1e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8010c20:	f107 0310 	add.w	r3, r7, #16
 8010c24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8010c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010c2c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010c30:	2200      	movs	r2, #0
 8010c32:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010c34:	2300      	movs	r3, #0
 8010c36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8010c3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010c3e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010c42:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8010c46:	8812      	ldrh	r2, [r2, #0]
 8010c48:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010c4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010c4e:	3302      	adds	r3, #2
 8010c50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8010c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010c58:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010c5c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8010c60:	8812      	ldrh	r2, [r2, #0]
 8010c62:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8010c64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010c68:	3302      	adds	r3, #2
 8010c6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8010c6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010c72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010c76:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8010c7a:	7812      	ldrb	r2, [r2, #0]
 8010c7c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8010c7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010c82:	3301      	adds	r3, #1
 8010c84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8010c88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010c8c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010c90:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8010c94:	7812      	ldrb	r2, [r2, #0]
 8010c96:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8010c98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010c9c:	3301      	adds	r3, #1
 8010c9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8010ca2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010ca6:	1d98      	adds	r0, r3, #6
 8010ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010cac:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8010cb0:	781b      	ldrb	r3, [r3, #0]
 8010cb2:	461a      	mov	r2, r3
 8010cb4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8010cb8:	f000 fa1d 	bl	80110f6 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8010cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010cc0:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8010cc4:	781b      	ldrb	r3, [r3, #0]
 8010cc6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8010cca:	4413      	add	r3, r2
 8010ccc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010cd0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010cd4:	2218      	movs	r2, #24
 8010cd6:	2100      	movs	r1, #0
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f000 fa1c 	bl	8011116 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010cde:	233f      	movs	r3, #63	; 0x3f
 8010ce0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8010ce4:	f44f 7383 	mov.w	r3, #262	; 0x106
 8010ce8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8010cec:	f107 0310 	add.w	r3, r7, #16
 8010cf0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8010cf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010cf8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8010cfc:	f107 030f 	add.w	r3, r7, #15
 8010d00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8010d04:	2301      	movs	r3, #1
 8010d06:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010d0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010d0e:	2100      	movs	r1, #0
 8010d10:	4618      	mov	r0, r3
 8010d12:	f000 fc89 	bl	8011628 <hci_send_req>
 8010d16:	4603      	mov	r3, r0
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	da01      	bge.n	8010d20 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8010d1c:	23ff      	movs	r3, #255	; 0xff
 8010d1e:	e004      	b.n	8010d2a <aci_gatt_update_char_value+0x148>
  return status;
 8010d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010d24:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010d28:	781b      	ldrb	r3, [r3, #0]
}
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bdb0      	pop	{r4, r5, r7, pc}

08010d34 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b0cc      	sub	sp, #304	; 0x130
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010d3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8010d42:	601a      	str	r2, [r3, #0]
 8010d44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010d48:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8010d4c:	4602      	mov	r2, r0
 8010d4e:	701a      	strb	r2, [r3, #0]
 8010d50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010d54:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8010d58:	460a      	mov	r2, r1
 8010d5a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8010d5c:	f107 0310 	add.w	r3, r7, #16
 8010d60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8010d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010d68:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010d70:	2300      	movs	r3, #0
 8010d72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8010d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010d7a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010d7e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8010d82:	7812      	ldrb	r2, [r2, #0]
 8010d84:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010d86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010d8a:	3301      	adds	r3, #1
 8010d8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8010d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010d94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010d98:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8010d9c:	7812      	ldrb	r2, [r2, #0]
 8010d9e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8010da0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010da4:	3301      	adds	r3, #1
 8010da6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8010daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010dae:	1c98      	adds	r0, r3, #2
 8010db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010db4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8010db8:	781a      	ldrb	r2, [r3, #0]
 8010dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010dbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8010dc2:	6819      	ldr	r1, [r3, #0]
 8010dc4:	f000 f997 	bl	80110f6 <Osal_MemCpy>
  index_input += Length;
 8010dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010dcc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8010dd0:	781b      	ldrb	r3, [r3, #0]
 8010dd2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8010dd6:	4413      	add	r3, r2
 8010dd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010ddc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010de0:	2218      	movs	r2, #24
 8010de2:	2100      	movs	r1, #0
 8010de4:	4618      	mov	r0, r3
 8010de6:	f000 f996 	bl	8011116 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010dea:	233f      	movs	r3, #63	; 0x3f
 8010dec:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8010df0:	230c      	movs	r3, #12
 8010df2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8010df6:	f107 0310 	add.w	r3, r7, #16
 8010dfa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8010dfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010e02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8010e06:	f107 030f 	add.w	r3, r7, #15
 8010e0a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8010e0e:	2301      	movs	r3, #1
 8010e10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010e14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010e18:	2100      	movs	r1, #0
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f000 fc04 	bl	8011628 <hci_send_req>
 8010e20:	4603      	mov	r3, r0
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	da01      	bge.n	8010e2a <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8010e26:	23ff      	movs	r3, #255	; 0xff
 8010e28:	e004      	b.n	8010e34 <aci_hal_write_config_data+0x100>
  return status;
 8010e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010e2e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010e32:	781b      	ldrb	r3, [r3, #0]
}
 8010e34:	4618      	mov	r0, r3
 8010e36:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	bd80      	pop	{r7, pc}

08010e3e <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8010e3e:	b580      	push	{r7, lr}
 8010e40:	b0cc      	sub	sp, #304	; 0x130
 8010e42:	af00      	add	r7, sp, #0
 8010e44:	4602      	mov	r2, r0
 8010e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010e4a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8010e4e:	701a      	strb	r2, [r3, #0]
 8010e50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010e54:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8010e58:	460a      	mov	r2, r1
 8010e5a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8010e5c:	f107 0310 	add.w	r3, r7, #16
 8010e60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8010e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010e68:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010e70:	2300      	movs	r3, #0
 8010e72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8010e76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010e7a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010e7e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8010e82:	7812      	ldrb	r2, [r2, #0]
 8010e84:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010e86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010e8a:	3301      	adds	r3, #1
 8010e8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8010e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010e94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010e98:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8010e9c:	7812      	ldrb	r2, [r2, #0]
 8010e9e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8010ea0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010ea4:	3301      	adds	r3, #1
 8010ea6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010eaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010eae:	2218      	movs	r2, #24
 8010eb0:	2100      	movs	r1, #0
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f000 f92f 	bl	8011116 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010eb8:	233f      	movs	r3, #63	; 0x3f
 8010eba:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8010ebe:	230f      	movs	r3, #15
 8010ec0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8010ec4:	f107 0310 	add.w	r3, r7, #16
 8010ec8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8010ecc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010ed0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8010ed4:	f107 030f 	add.w	r3, r7, #15
 8010ed8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8010edc:	2301      	movs	r3, #1
 8010ede:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010ee2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010ee6:	2100      	movs	r1, #0
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f000 fb9d 	bl	8011628 <hci_send_req>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	da01      	bge.n	8010ef8 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8010ef4:	23ff      	movs	r3, #255	; 0xff
 8010ef6:	e004      	b.n	8010f02 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8010ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010efc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010f00:	781b      	ldrb	r3, [r3, #0]
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}

08010f0c <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b0cc      	sub	sp, #304	; 0x130
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	4602      	mov	r2, r0
 8010f14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010f18:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8010f1c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8010f1e:	f107 0310 	add.w	r3, r7, #16
 8010f22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8010f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010f2a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010f2e:	2200      	movs	r2, #0
 8010f30:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010f32:	2300      	movs	r3, #0
 8010f34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8010f38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010f3c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010f40:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8010f44:	8812      	ldrh	r2, [r2, #0]
 8010f46:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010f48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010f4c:	3302      	adds	r3, #2
 8010f4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010f52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010f56:	2218      	movs	r2, #24
 8010f58:	2100      	movs	r1, #0
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f000 f8db 	bl	8011116 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010f60:	233f      	movs	r3, #63	; 0x3f
 8010f62:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8010f66:	2318      	movs	r3, #24
 8010f68:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8010f6c:	f107 0310 	add.w	r3, r7, #16
 8010f70:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8010f74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010f78:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8010f7c:	f107 030f 	add.w	r3, r7, #15
 8010f80:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8010f84:	2301      	movs	r3, #1
 8010f86:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010f8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010f8e:	2100      	movs	r1, #0
 8010f90:	4618      	mov	r0, r3
 8010f92:	f000 fb49 	bl	8011628 <hci_send_req>
 8010f96:	4603      	mov	r3, r0
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	da01      	bge.n	8010fa0 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8010f9c:	23ff      	movs	r3, #255	; 0xff
 8010f9e:	e004      	b.n	8010faa <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8010fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010fa4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010fa8:	781b      	ldrb	r3, [r3, #0]
}
 8010faa:	4618      	mov	r0, r3
 8010fac:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}

08010fb4 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b088      	sub	sp, #32
 8010fb8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010fbe:	f107 0308 	add.w	r3, r7, #8
 8010fc2:	2218      	movs	r2, #24
 8010fc4:	2100      	movs	r1, #0
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f000 f8a5 	bl	8011116 <Osal_MemSet>
  rq.ogf = 0x03;
 8010fcc:	2303      	movs	r3, #3
 8010fce:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8010fd0:	2303      	movs	r3, #3
 8010fd2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8010fd4:	1dfb      	adds	r3, r7, #7
 8010fd6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8010fd8:	2301      	movs	r3, #1
 8010fda:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010fdc:	f107 0308 	add.w	r3, r7, #8
 8010fe0:	2100      	movs	r1, #0
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f000 fb20 	bl	8011628 <hci_send_req>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	da01      	bge.n	8010ff2 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8010fee:	23ff      	movs	r3, #255	; 0xff
 8010ff0:	e000      	b.n	8010ff4 <hci_reset+0x40>
  return status;
 8010ff2:	79fb      	ldrb	r3, [r7, #7]
}
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	3720      	adds	r7, #32
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}

08010ffc <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8010ffc:	b590      	push	{r4, r7, lr}
 8010ffe:	b0cd      	sub	sp, #308	; 0x134
 8011000:	af00      	add	r7, sp, #0
 8011002:	4604      	mov	r4, r0
 8011004:	4608      	mov	r0, r1
 8011006:	4611      	mov	r1, r2
 8011008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801100c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8011010:	4622      	mov	r2, r4
 8011012:	701a      	strb	r2, [r3, #0]
 8011014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011018:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801101c:	4602      	mov	r2, r0
 801101e:	701a      	strb	r2, [r3, #0]
 8011020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011024:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8011028:	460a      	mov	r2, r1
 801102a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 801102c:	f107 0310 	add.w	r3, r7, #16
 8011030:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8011034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011038:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801103c:	2200      	movs	r2, #0
 801103e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8011040:	2300      	movs	r3, #0
 8011042:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8011046:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801104a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801104e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8011052:	7812      	ldrb	r2, [r2, #0]
 8011054:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8011056:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801105a:	3301      	adds	r3, #1
 801105c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8011060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011064:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8011068:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 801106c:	7812      	ldrb	r2, [r2, #0]
 801106e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8011070:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011074:	3301      	adds	r3, #1
 8011076:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 801107a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801107e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8011082:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8011086:	7812      	ldrb	r2, [r2, #0]
 8011088:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801108a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801108e:	3301      	adds	r3, #1
 8011090:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011094:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011098:	2218      	movs	r2, #24
 801109a:	2100      	movs	r1, #0
 801109c:	4618      	mov	r0, r3
 801109e:	f000 f83a 	bl	8011116 <Osal_MemSet>
  rq.ogf = 0x08;
 80110a2:	2308      	movs	r3, #8
 80110a4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 80110a8:	2331      	movs	r3, #49	; 0x31
 80110aa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80110ae:	f107 0310 	add.w	r3, r7, #16
 80110b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80110b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80110ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80110be:	f107 030f 	add.w	r3, r7, #15
 80110c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80110c6:	2301      	movs	r3, #1
 80110c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80110cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80110d0:	2100      	movs	r1, #0
 80110d2:	4618      	mov	r0, r3
 80110d4:	f000 faa8 	bl	8011628 <hci_send_req>
 80110d8:	4603      	mov	r3, r0
 80110da:	2b00      	cmp	r3, #0
 80110dc:	da01      	bge.n	80110e2 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80110de:	23ff      	movs	r3, #255	; 0xff
 80110e0:	e004      	b.n	80110ec <hci_le_set_default_phy+0xf0>
  return status;
 80110e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80110e6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80110ea:	781b      	ldrb	r3, [r3, #0]
}
 80110ec:	4618      	mov	r0, r3
 80110ee:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80110f2:	46bd      	mov	sp, r7
 80110f4:	bd90      	pop	{r4, r7, pc}

080110f6 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80110f6:	b580      	push	{r7, lr}
 80110f8:	b084      	sub	sp, #16
 80110fa:	af00      	add	r7, sp, #0
 80110fc:	60f8      	str	r0, [r7, #12]
 80110fe:	60b9      	str	r1, [r7, #8]
 8011100:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8011102:	687a      	ldr	r2, [r7, #4]
 8011104:	68b9      	ldr	r1, [r7, #8]
 8011106:	68f8      	ldr	r0, [r7, #12]
 8011108:	f002 fe44 	bl	8013d94 <memcpy>
 801110c:	4603      	mov	r3, r0
}
 801110e:	4618      	mov	r0, r3
 8011110:	3710      	adds	r7, #16
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}

08011116 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8011116:	b580      	push	{r7, lr}
 8011118:	b084      	sub	sp, #16
 801111a:	af00      	add	r7, sp, #0
 801111c:	60f8      	str	r0, [r7, #12]
 801111e:	60b9      	str	r1, [r7, #8]
 8011120:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8011122:	687a      	ldr	r2, [r7, #4]
 8011124:	68b9      	ldr	r1, [r7, #8]
 8011126:	68f8      	ldr	r0, [r7, #12]
 8011128:	f002 fe42 	bl	8013db0 <memset>
 801112c:	4603      	mov	r3, r0
}
 801112e:	4618      	mov	r0, r3
 8011130:	3710      	adds	r7, #16
 8011132:	46bd      	mov	sp, r7
 8011134:	bd80      	pop	{r7, pc}

08011136 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8011136:	b480      	push	{r7}
 8011138:	af00      	add	r7, sp, #0
  return;
 801113a:	bf00      	nop
}
 801113c:	46bd      	mov	sp, r7
 801113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011142:	4770      	bx	lr

08011144 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8011144:	b480      	push	{r7}
 8011146:	af00      	add	r7, sp, #0
  return;
 8011148:	bf00      	nop
}
 801114a:	46bd      	mov	sp, r7
 801114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011150:	4770      	bx	lr

08011152 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8011152:	b480      	push	{r7}
 8011154:	af00      	add	r7, sp, #0
  return;
 8011156:	bf00      	nop
}
 8011158:	46bd      	mov	sp, r7
 801115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115e:	4770      	bx	lr

08011160 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8011160:	b480      	push	{r7}
 8011162:	af00      	add	r7, sp, #0
  return;
 8011164:	bf00      	nop
}
 8011166:	46bd      	mov	sp, r7
 8011168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116c:	4770      	bx	lr

0801116e <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 801116e:	b480      	push	{r7}
 8011170:	af00      	add	r7, sp, #0
  return;
 8011172:	bf00      	nop
}
 8011174:	46bd      	mov	sp, r7
 8011176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117a:	4770      	bx	lr

0801117c <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 801117c:	b480      	push	{r7}
 801117e:	af00      	add	r7, sp, #0
  return;
 8011180:	bf00      	nop
}
 8011182:	46bd      	mov	sp, r7
 8011184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011188:	4770      	bx	lr

0801118a <HRS_Init>:
__WEAK void HRS_Init( void )
{
 801118a:	b480      	push	{r7}
 801118c:	af00      	add	r7, sp, #0
  return;
 801118e:	bf00      	nop
}
 8011190:	46bd      	mov	sp, r7
 8011192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011196:	4770      	bx	lr

08011198 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8011198:	b480      	push	{r7}
 801119a:	af00      	add	r7, sp, #0
  return;
 801119c:	bf00      	nop
}
 801119e:	46bd      	mov	sp, r7
 80111a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a4:	4770      	bx	lr

080111a6 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80111a6:	b480      	push	{r7}
 80111a8:	af00      	add	r7, sp, #0
  return;
 80111aa:	bf00      	nop
}
 80111ac:	46bd      	mov	sp, r7
 80111ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b2:	4770      	bx	lr

080111b4 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80111b4:	b480      	push	{r7}
 80111b6:	af00      	add	r7, sp, #0
  return;
 80111b8:	bf00      	nop
}
 80111ba:	46bd      	mov	sp, r7
 80111bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c0:	4770      	bx	lr

080111c2 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80111c2:	b480      	push	{r7}
 80111c4:	af00      	add	r7, sp, #0
  return;
 80111c6:	bf00      	nop
}
 80111c8:	46bd      	mov	sp, r7
 80111ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ce:	4770      	bx	lr

080111d0 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80111d0:	b480      	push	{r7}
 80111d2:	af00      	add	r7, sp, #0
  return;
 80111d4:	bf00      	nop
}
 80111d6:	46bd      	mov	sp, r7
 80111d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111dc:	4770      	bx	lr

080111de <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80111de:	b480      	push	{r7}
 80111e0:	af00      	add	r7, sp, #0
  return;
 80111e2:	bf00      	nop
}
 80111e4:	46bd      	mov	sp, r7
 80111e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ea:	4770      	bx	lr

080111ec <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80111ec:	b480      	push	{r7}
 80111ee:	af00      	add	r7, sp, #0
  return;
 80111f0:	bf00      	nop
}
 80111f2:	46bd      	mov	sp, r7
 80111f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f8:	4770      	bx	lr

080111fa <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80111fa:	b480      	push	{r7}
 80111fc:	af00      	add	r7, sp, #0
  return;
 80111fe:	bf00      	nop
}
 8011200:	46bd      	mov	sp, r7
 8011202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011206:	4770      	bx	lr

08011208 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8011208:	b480      	push	{r7}
 801120a:	af00      	add	r7, sp, #0
  return;
 801120c:	bf00      	nop
}
 801120e:	46bd      	mov	sp, r7
 8011210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011214:	4770      	bx	lr

08011216 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8011216:	b480      	push	{r7}
 8011218:	af00      	add	r7, sp, #0
  return;
 801121a:	bf00      	nop
}
 801121c:	46bd      	mov	sp, r7
 801121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011222:	4770      	bx	lr

08011224 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8011224:	b580      	push	{r7, lr}
 8011226:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8011228:	4b04      	ldr	r3, [pc, #16]	; (801123c <SVCCTL_Init+0x18>)
 801122a:	2200      	movs	r2, #0
 801122c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 801122e:	4b04      	ldr	r3, [pc, #16]	; (8011240 <SVCCTL_Init+0x1c>)
 8011230:	2200      	movs	r2, #0
 8011232:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8011234:	f000 f806 	bl	8011244 <SVCCTL_SvcInit>

  return;
 8011238:	bf00      	nop
}
 801123a:	bd80      	pop	{r7, pc}
 801123c:	2000055c 	.word	0x2000055c
 8011240:	2000057c 	.word	0x2000057c

08011244 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	af00      	add	r7, sp, #0
  BAS_Init();
 8011248:	f7ff ff75 	bl	8011136 <BAS_Init>

  BLS_Init();
 801124c:	f7ff ff7a 	bl	8011144 <BLS_Init>

  CRS_STM_Init();
 8011250:	f7ff ff7f 	bl	8011152 <CRS_STM_Init>

  DIS_Init();
 8011254:	f7ff ff84 	bl	8011160 <DIS_Init>

  EDS_STM_Init();
 8011258:	f7ff ff89 	bl	801116e <EDS_STM_Init>

  HIDS_Init();
 801125c:	f7ff ff8e 	bl	801117c <HIDS_Init>

  HRS_Init();
 8011260:	f7ff ff93 	bl	801118a <HRS_Init>

  HTS_Init();
 8011264:	f7ff ff98 	bl	8011198 <HTS_Init>

  IAS_Init();
 8011268:	f7ff ff9d 	bl	80111a6 <IAS_Init>

  LLS_Init();
 801126c:	f7ff ffa2 	bl	80111b4 <LLS_Init>

  TPS_Init();
 8011270:	f7ff ffa7 	bl	80111c2 <TPS_Init>

  MOTENV_STM_Init();
 8011274:	f7ff ffac 	bl	80111d0 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8011278:	f7ff ffb1 	bl	80111de <P2PS_STM_Init>

  ZDD_STM_Init();
 801127c:	f7ff ffb6 	bl	80111ec <ZDD_STM_Init>

  OTAS_STM_Init();
 8011280:	f7ff ffbb 	bl	80111fa <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8011284:	f7ff ffc7 	bl	8011216 <BVOPUS_STM_Init>

  MESH_Init();
 8011288:	f7ff ffbe 	bl	8011208 <MESH_Init>

  SVCCTL_InitCustomSvc();
 801128c:	f001 fac0 	bl	8012810 <SVCCTL_InitCustomSvc>
  
  return;
 8011290:	bf00      	nop
}
 8011292:	bd80      	pop	{r7, pc}

08011294 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8011294:	b480      	push	{r7}
 8011296:	b083      	sub	sp, #12
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 801129c:	4b09      	ldr	r3, [pc, #36]	; (80112c4 <SVCCTL_RegisterSvcHandler+0x30>)
 801129e:	7f1b      	ldrb	r3, [r3, #28]
 80112a0:	4619      	mov	r1, r3
 80112a2:	4a08      	ldr	r2, [pc, #32]	; (80112c4 <SVCCTL_RegisterSvcHandler+0x30>)
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80112aa:	4b06      	ldr	r3, [pc, #24]	; (80112c4 <SVCCTL_RegisterSvcHandler+0x30>)
 80112ac:	7f1b      	ldrb	r3, [r3, #28]
 80112ae:	3301      	adds	r3, #1
 80112b0:	b2da      	uxtb	r2, r3
 80112b2:	4b04      	ldr	r3, [pc, #16]	; (80112c4 <SVCCTL_RegisterSvcHandler+0x30>)
 80112b4:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80112b6:	bf00      	nop
}
 80112b8:	370c      	adds	r7, #12
 80112ba:	46bd      	mov	sp, r7
 80112bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c0:	4770      	bx	lr
 80112c2:	bf00      	nop
 80112c4:	2000055c 	.word	0x2000055c

080112c8 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b086      	sub	sp, #24
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	3301      	adds	r3, #1
 80112d4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80112d6:	2300      	movs	r3, #0
 80112d8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	781b      	ldrb	r3, [r3, #0]
 80112de:	2bff      	cmp	r3, #255	; 0xff
 80112e0:	d125      	bne.n	801132e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80112e2:	693b      	ldr	r3, [r7, #16]
 80112e4:	3302      	adds	r3, #2
 80112e6:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	881b      	ldrh	r3, [r3, #0]
 80112ec:	b29b      	uxth	r3, r3
 80112ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80112f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80112f6:	d118      	bne.n	801132a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80112f8:	2300      	movs	r3, #0
 80112fa:	757b      	strb	r3, [r7, #21]
 80112fc:	e00d      	b.n	801131a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80112fe:	7d7b      	ldrb	r3, [r7, #21]
 8011300:	4a1a      	ldr	r2, [pc, #104]	; (801136c <SVCCTL_UserEvtRx+0xa4>)
 8011302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	4798      	blx	r3
 801130a:	4603      	mov	r3, r0
 801130c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 801130e:	7dfb      	ldrb	r3, [r7, #23]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d108      	bne.n	8011326 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8011314:	7d7b      	ldrb	r3, [r7, #21]
 8011316:	3301      	adds	r3, #1
 8011318:	757b      	strb	r3, [r7, #21]
 801131a:	4b14      	ldr	r3, [pc, #80]	; (801136c <SVCCTL_UserEvtRx+0xa4>)
 801131c:	7f1b      	ldrb	r3, [r3, #28]
 801131e:	7d7a      	ldrb	r2, [r7, #21]
 8011320:	429a      	cmp	r2, r3
 8011322:	d3ec      	bcc.n	80112fe <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8011324:	e002      	b.n	801132c <SVCCTL_UserEvtRx+0x64>
              break;
 8011326:	bf00      	nop
          break;
 8011328:	e000      	b.n	801132c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 801132a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 801132c:	e000      	b.n	8011330 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 801132e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8011330:	7dfb      	ldrb	r3, [r7, #23]
 8011332:	2b02      	cmp	r3, #2
 8011334:	d00f      	beq.n	8011356 <SVCCTL_UserEvtRx+0x8e>
 8011336:	2b02      	cmp	r3, #2
 8011338:	dc10      	bgt.n	801135c <SVCCTL_UserEvtRx+0x94>
 801133a:	2b00      	cmp	r3, #0
 801133c:	d002      	beq.n	8011344 <SVCCTL_UserEvtRx+0x7c>
 801133e:	2b01      	cmp	r3, #1
 8011340:	d006      	beq.n	8011350 <SVCCTL_UserEvtRx+0x88>
 8011342:	e00b      	b.n	801135c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8011344:	6878      	ldr	r0, [r7, #4]
 8011346:	f000 ff7b 	bl	8012240 <SVCCTL_App_Notification>
 801134a:	4603      	mov	r3, r0
 801134c:	75bb      	strb	r3, [r7, #22]
      break;
 801134e:	e008      	b.n	8011362 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8011350:	2301      	movs	r3, #1
 8011352:	75bb      	strb	r3, [r7, #22]
      break;
 8011354:	e005      	b.n	8011362 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8011356:	2300      	movs	r3, #0
 8011358:	75bb      	strb	r3, [r7, #22]
      break;
 801135a:	e002      	b.n	8011362 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 801135c:	2301      	movs	r3, #1
 801135e:	75bb      	strb	r3, [r7, #22]
      break;
 8011360:	bf00      	nop
  }

  return (return_status);
 8011362:	7dbb      	ldrb	r3, [r7, #22]
}
 8011364:	4618      	mov	r0, r3
 8011366:	3718      	adds	r7, #24
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}
 801136c:	2000055c 	.word	0x2000055c

08011370 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b088      	sub	sp, #32
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8011378:	f107 030c 	add.w	r3, r7, #12
 801137c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8011384:	69fb      	ldr	r3, [r7, #28]
 8011386:	212c      	movs	r1, #44	; 0x2c
 8011388:	f64f 4066 	movw	r0, #64614	; 0xfc66
 801138c:	f000 fae2 	bl	8011954 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8011390:	69fb      	ldr	r3, [r7, #28]
 8011392:	330b      	adds	r3, #11
 8011394:	78db      	ldrb	r3, [r3, #3]
}
 8011396:	4618      	mov	r0, r3
 8011398:	3720      	adds	r7, #32
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}

0801139e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 801139e:	b580      	push	{r7, lr}
 80113a0:	b088      	sub	sp, #32
 80113a2:	af00      	add	r7, sp, #0
 80113a4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80113a6:	f107 030c 	add.w	r3, r7, #12
 80113aa:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80113b2:	69fb      	ldr	r3, [r7, #28]
 80113b4:	210f      	movs	r1, #15
 80113b6:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80113ba:	f000 facb 	bl	8011954 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80113be:	69fb      	ldr	r3, [r7, #28]
 80113c0:	330b      	adds	r3, #11
 80113c2:	78db      	ldrb	r3, [r3, #3]
}
 80113c4:	4618      	mov	r0, r3
 80113c6:	3720      	adds	r7, #32
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd80      	pop	{r7, pc}

080113cc <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b088      	sub	sp, #32
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80113d4:	f107 030c 	add.w	r3, r7, #12
 80113d8:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80113da:	69fb      	ldr	r3, [r7, #28]
 80113dc:	687a      	ldr	r2, [r7, #4]
 80113de:	210e      	movs	r1, #14
 80113e0:	f64f 4075 	movw	r0, #64629	; 0xfc75
 80113e4:	f000 fab6 	bl	8011954 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80113e8:	69fb      	ldr	r3, [r7, #28]
 80113ea:	330b      	adds	r3, #11
 80113ec:	78db      	ldrb	r3, [r3, #3]
}
 80113ee:	4618      	mov	r0, r3
 80113f0:	3720      	adds	r7, #32
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bd80      	pop	{r7, pc}
	...

080113f8 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80113f8:	b480      	push	{r7}
 80113fa:	b08b      	sub	sp, #44	; 0x2c
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8011400:	2300      	movs	r3, #0
 8011402:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8011404:	2300      	movs	r3, #0
 8011406:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8011408:	2300      	movs	r3, #0
 801140a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 801140c:	2300      	movs	r3, #0
 801140e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8011410:	2300      	movs	r3, #0
 8011412:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8011414:	2300      	movs	r3, #0
 8011416:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8011418:	2300      	movs	r3, #0
 801141a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 801141c:	2300      	movs	r3, #0
 801141e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8011420:	4b4a      	ldr	r3, [pc, #296]	; (801154c <SHCI_GetWirelessFwInfo+0x154>)
 8011422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011424:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011428:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 801142a:	693b      	ldr	r3, [r7, #16]
 801142c:	009b      	lsls	r3, r3, #2
 801142e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8011432:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 801143a:	68bb      	ldr	r3, [r7, #8]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	4a44      	ldr	r2, [pc, #272]	; (8011550 <SHCI_GetWirelessFwInfo+0x158>)
 8011440:	4293      	cmp	r3, r2
 8011442:	d10f      	bne.n	8011464 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8011444:	68bb      	ldr	r3, [r7, #8]
 8011446:	695b      	ldr	r3, [r3, #20]
 8011448:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 801144a:	68bb      	ldr	r3, [r7, #8]
 801144c:	699b      	ldr	r3, [r3, #24]
 801144e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	69db      	ldr	r3, [r3, #28]
 8011454:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	68db      	ldr	r3, [r3, #12]
 801145a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 801145c:	68bb      	ldr	r3, [r7, #8]
 801145e:	691b      	ldr	r3, [r3, #16]
 8011460:	617b      	str	r3, [r7, #20]
 8011462:	e01a      	b.n	801149a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	009b      	lsls	r3, r3, #2
 8011468:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801146c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8011470:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	691b      	ldr	r3, [r3, #16]
 8011478:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	695b      	ldr	r3, [r3, #20]
 8011480:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	699b      	ldr	r3, [r3, #24]
 8011488:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	685b      	ldr	r3, [r3, #4]
 8011490:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	689b      	ldr	r3, [r3, #8]
 8011498:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 801149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801149c:	0e1b      	lsrs	r3, r3, #24
 801149e:	b2da      	uxtb	r2, r3
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80114a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a6:	0c1b      	lsrs	r3, r3, #16
 80114a8:	b2da      	uxtb	r2, r3
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80114ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b0:	0a1b      	lsrs	r3, r3, #8
 80114b2:	b2da      	uxtb	r2, r3
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80114b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ba:	091b      	lsrs	r3, r3, #4
 80114bc:	b2db      	uxtb	r3, r3
 80114be:	f003 030f 	and.w	r3, r3, #15
 80114c2:	b2da      	uxtb	r2, r3
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80114c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ca:	b2db      	uxtb	r3, r3
 80114cc:	f003 030f 	and.w	r3, r3, #15
 80114d0:	b2da      	uxtb	r2, r3
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80114d6:	6a3b      	ldr	r3, [r7, #32]
 80114d8:	0e1b      	lsrs	r3, r3, #24
 80114da:	b2da      	uxtb	r2, r3
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80114e0:	6a3b      	ldr	r3, [r7, #32]
 80114e2:	0c1b      	lsrs	r3, r3, #16
 80114e4:	b2da      	uxtb	r2, r3
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80114ea:	6a3b      	ldr	r3, [r7, #32]
 80114ec:	0a1b      	lsrs	r3, r3, #8
 80114ee:	b2da      	uxtb	r2, r3
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80114f4:	6a3b      	ldr	r3, [r7, #32]
 80114f6:	b2da      	uxtb	r2, r3
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80114fc:	69fb      	ldr	r3, [r7, #28]
 80114fe:	b2da      	uxtb	r2, r3
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8011504:	69bb      	ldr	r3, [r7, #24]
 8011506:	0e1b      	lsrs	r3, r3, #24
 8011508:	b2da      	uxtb	r2, r3
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801150e:	69bb      	ldr	r3, [r7, #24]
 8011510:	0c1b      	lsrs	r3, r3, #16
 8011512:	b2da      	uxtb	r2, r3
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8011518:	69bb      	ldr	r3, [r7, #24]
 801151a:	0a1b      	lsrs	r3, r3, #8
 801151c:	b2da      	uxtb	r2, r3
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8011522:	697b      	ldr	r3, [r7, #20]
 8011524:	0e1b      	lsrs	r3, r3, #24
 8011526:	b2da      	uxtb	r2, r3
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 801152c:	697b      	ldr	r3, [r7, #20]
 801152e:	0c1b      	lsrs	r3, r3, #16
 8011530:	b2da      	uxtb	r2, r3
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8011536:	697b      	ldr	r3, [r7, #20]
 8011538:	b2da      	uxtb	r2, r3
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 801153e:	2300      	movs	r3, #0
}
 8011540:	4618      	mov	r0, r3
 8011542:	372c      	adds	r7, #44	; 0x2c
 8011544:	46bd      	mov	sp, r7
 8011546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154a:	4770      	bx	lr
 801154c:	58004000 	.word	0x58004000
 8011550:	a94656b9 	.word	0xa94656b9

08011554 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b082      	sub	sp, #8
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
 801155c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801155e:	683b      	ldr	r3, [r7, #0]
 8011560:	685b      	ldr	r3, [r3, #4]
 8011562:	4a08      	ldr	r2, [pc, #32]	; (8011584 <hci_init+0x30>)
 8011564:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8011566:	4a08      	ldr	r2, [pc, #32]	; (8011588 <hci_init+0x34>)
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 801156c:	4806      	ldr	r0, [pc, #24]	; (8011588 <hci_init+0x34>)
 801156e:	f000 f973 	bl	8011858 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8011572:	683b      	ldr	r3, [r7, #0]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	4618      	mov	r0, r3
 8011578:	f000 f8d4 	bl	8011724 <TlInit>

  return;
 801157c:	bf00      	nop
}
 801157e:	3708      	adds	r7, #8
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}
 8011584:	20000828 	.word	0x20000828
 8011588:	20000800 	.word	0x20000800

0801158c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b084      	sub	sp, #16
 8011590:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8011592:	4822      	ldr	r0, [pc, #136]	; (801161c <hci_user_evt_proc+0x90>)
 8011594:	f000 fd28 	bl	8011fe8 <LST_is_empty>
 8011598:	4603      	mov	r3, r0
 801159a:	2b00      	cmp	r3, #0
 801159c:	d12b      	bne.n	80115f6 <hci_user_evt_proc+0x6a>
 801159e:	4b20      	ldr	r3, [pc, #128]	; (8011620 <hci_user_evt_proc+0x94>)
 80115a0:	781b      	ldrb	r3, [r3, #0]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d027      	beq.n	80115f6 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80115a6:	f107 030c 	add.w	r3, r7, #12
 80115aa:	4619      	mov	r1, r3
 80115ac:	481b      	ldr	r0, [pc, #108]	; (801161c <hci_user_evt_proc+0x90>)
 80115ae:	f000 fdaa 	bl	8012106 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80115b2:	4b1c      	ldr	r3, [pc, #112]	; (8011624 <hci_user_evt_proc+0x98>)
 80115b4:	69db      	ldr	r3, [r3, #28]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d00c      	beq.n	80115d4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80115be:	2301      	movs	r3, #1
 80115c0:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80115c2:	4b18      	ldr	r3, [pc, #96]	; (8011624 <hci_user_evt_proc+0x98>)
 80115c4:	69db      	ldr	r3, [r3, #28]
 80115c6:	1d3a      	adds	r2, r7, #4
 80115c8:	4610      	mov	r0, r2
 80115ca:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80115cc:	793a      	ldrb	r2, [r7, #4]
 80115ce:	4b14      	ldr	r3, [pc, #80]	; (8011620 <hci_user_evt_proc+0x94>)
 80115d0:	701a      	strb	r2, [r3, #0]
 80115d2:	e002      	b.n	80115da <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80115d4:	4b12      	ldr	r3, [pc, #72]	; (8011620 <hci_user_evt_proc+0x94>)
 80115d6:	2201      	movs	r2, #1
 80115d8:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80115da:	4b11      	ldr	r3, [pc, #68]	; (8011620 <hci_user_evt_proc+0x94>)
 80115dc:	781b      	ldrb	r3, [r3, #0]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d004      	beq.n	80115ec <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	4618      	mov	r0, r3
 80115e6:	f000 fc03 	bl	8011df0 <TL_MM_EvtDone>
 80115ea:	e004      	b.n	80115f6 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	4619      	mov	r1, r3
 80115f0:	480a      	ldr	r0, [pc, #40]	; (801161c <hci_user_evt_proc+0x90>)
 80115f2:	f000 fd1b 	bl	801202c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80115f6:	4809      	ldr	r0, [pc, #36]	; (801161c <hci_user_evt_proc+0x90>)
 80115f8:	f000 fcf6 	bl	8011fe8 <LST_is_empty>
 80115fc:	4603      	mov	r3, r0
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d107      	bne.n	8011612 <hci_user_evt_proc+0x86>
 8011602:	4b07      	ldr	r3, [pc, #28]	; (8011620 <hci_user_evt_proc+0x94>)
 8011604:	781b      	ldrb	r3, [r3, #0]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d003      	beq.n	8011612 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 801160a:	4804      	ldr	r0, [pc, #16]	; (801161c <hci_user_evt_proc+0x90>)
 801160c:	f001 f830 	bl	8012670 <hci_notify_asynch_evt>
  }


  return;
 8011610:	bf00      	nop
 8011612:	bf00      	nop
}
 8011614:	3710      	adds	r7, #16
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}
 801161a:	bf00      	nop
 801161c:	20000584 	.word	0x20000584
 8011620:	20000590 	.word	0x20000590
 8011624:	20000800 	.word	0x20000800

08011628 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b088      	sub	sp, #32
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
 8011630:	460b      	mov	r3, r1
 8011632:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8011634:	2000      	movs	r0, #0
 8011636:	f000 f8cb 	bl	80117d0 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 801163a:	2300      	movs	r3, #0
 801163c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	885b      	ldrh	r3, [r3, #2]
 8011642:	b21b      	sxth	r3, r3
 8011644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011648:	b21a      	sxth	r2, r3
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	881b      	ldrh	r3, [r3, #0]
 801164e:	029b      	lsls	r3, r3, #10
 8011650:	b21b      	sxth	r3, r3
 8011652:	4313      	orrs	r3, r2
 8011654:	b21b      	sxth	r3, r3
 8011656:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	68db      	ldr	r3, [r3, #12]
 801165c:	b2d9      	uxtb	r1, r3
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	689a      	ldr	r2, [r3, #8]
 8011662:	8bbb      	ldrh	r3, [r7, #28]
 8011664:	4618      	mov	r0, r3
 8011666:	f000 f88d 	bl	8011784 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 801166a:	e04e      	b.n	801170a <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 801166c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8011670:	f001 f815 	bl	801269e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8011674:	e043      	b.n	80116fe <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8011676:	f107 030c 	add.w	r3, r7, #12
 801167a:	4619      	mov	r1, r3
 801167c:	4828      	ldr	r0, [pc, #160]	; (8011720 <hci_send_req+0xf8>)
 801167e:	f000 fd42 	bl	8012106 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	7a5b      	ldrb	r3, [r3, #9]
 8011686:	2b0f      	cmp	r3, #15
 8011688:	d114      	bne.n	80116b4 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	330b      	adds	r3, #11
 801168e:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8011690:	693b      	ldr	r3, [r7, #16]
 8011692:	885b      	ldrh	r3, [r3, #2]
 8011694:	b29b      	uxth	r3, r3
 8011696:	8bba      	ldrh	r2, [r7, #28]
 8011698:	429a      	cmp	r2, r3
 801169a:	d104      	bne.n	80116a6 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	691b      	ldr	r3, [r3, #16]
 80116a0:	693a      	ldr	r2, [r7, #16]
 80116a2:	7812      	ldrb	r2, [r2, #0]
 80116a4:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80116a6:	693b      	ldr	r3, [r7, #16]
 80116a8:	785b      	ldrb	r3, [r3, #1]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d027      	beq.n	80116fe <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80116ae:	2301      	movs	r3, #1
 80116b0:	77fb      	strb	r3, [r7, #31]
 80116b2:	e024      	b.n	80116fe <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	330b      	adds	r3, #11
 80116b8:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80116ba:	69bb      	ldr	r3, [r7, #24]
 80116bc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80116c0:	b29b      	uxth	r3, r3
 80116c2:	8bba      	ldrh	r2, [r7, #28]
 80116c4:	429a      	cmp	r2, r3
 80116c6:	d114      	bne.n	80116f2 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	7a9b      	ldrb	r3, [r3, #10]
 80116cc:	3b03      	subs	r3, #3
 80116ce:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	695a      	ldr	r2, [r3, #20]
 80116d4:	7dfb      	ldrb	r3, [r7, #23]
 80116d6:	429a      	cmp	r2, r3
 80116d8:	bfa8      	it	ge
 80116da:	461a      	movge	r2, r3
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	6918      	ldr	r0, [r3, #16]
 80116e4:	69bb      	ldr	r3, [r7, #24]
 80116e6:	1cd9      	adds	r1, r3, #3
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	695b      	ldr	r3, [r3, #20]
 80116ec:	461a      	mov	r2, r3
 80116ee:	f002 fb51 	bl	8013d94 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80116f2:	69bb      	ldr	r3, [r7, #24]
 80116f4:	781b      	ldrb	r3, [r3, #0]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d001      	beq.n	80116fe <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80116fa:	2301      	movs	r3, #1
 80116fc:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80116fe:	4808      	ldr	r0, [pc, #32]	; (8011720 <hci_send_req+0xf8>)
 8011700:	f000 fc72 	bl	8011fe8 <LST_is_empty>
 8011704:	4603      	mov	r3, r0
 8011706:	2b00      	cmp	r3, #0
 8011708:	d0b5      	beq.n	8011676 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 801170a:	7ffb      	ldrb	r3, [r7, #31]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d0ad      	beq.n	801166c <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8011710:	2001      	movs	r0, #1
 8011712:	f000 f85d 	bl	80117d0 <NotifyCmdStatus>

  return 0;
 8011716:	2300      	movs	r3, #0
}
 8011718:	4618      	mov	r0, r3
 801171a:	3720      	adds	r7, #32
 801171c:	46bd      	mov	sp, r7
 801171e:	bd80      	pop	{r7, pc}
 8011720:	20000820 	.word	0x20000820

08011724 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b086      	sub	sp, #24
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 801172c:	480f      	ldr	r0, [pc, #60]	; (801176c <TlInit+0x48>)
 801172e:	f000 fc4b 	bl	8011fc8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8011732:	4a0f      	ldr	r2, [pc, #60]	; (8011770 <TlInit+0x4c>)
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8011738:	480e      	ldr	r0, [pc, #56]	; (8011774 <TlInit+0x50>)
 801173a:	f000 fc45 	bl	8011fc8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 801173e:	4b0e      	ldr	r3, [pc, #56]	; (8011778 <TlInit+0x54>)
 8011740:	2201      	movs	r2, #1
 8011742:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8011744:	4b0d      	ldr	r3, [pc, #52]	; (801177c <TlInit+0x58>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d00a      	beq.n	8011762 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8011750:	4b0b      	ldr	r3, [pc, #44]	; (8011780 <TlInit+0x5c>)
 8011752:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8011754:	4b09      	ldr	r3, [pc, #36]	; (801177c <TlInit+0x58>)
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	f107 0208 	add.w	r2, r7, #8
 801175c:	4610      	mov	r0, r2
 801175e:	4798      	blx	r3
  }

  return;
 8011760:	bf00      	nop
 8011762:	bf00      	nop
}
 8011764:	3718      	adds	r7, #24
 8011766:	46bd      	mov	sp, r7
 8011768:	bd80      	pop	{r7, pc}
 801176a:	bf00      	nop
 801176c:	20000820 	.word	0x20000820
 8011770:	2000058c 	.word	0x2000058c
 8011774:	20000584 	.word	0x20000584
 8011778:	20000590 	.word	0x20000590
 801177c:	20000800 	.word	0x20000800
 8011780:	08011811 	.word	0x08011811

08011784 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
 801178a:	4603      	mov	r3, r0
 801178c:	603a      	str	r2, [r7, #0]
 801178e:	80fb      	strh	r3, [r7, #6]
 8011790:	460b      	mov	r3, r1
 8011792:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8011794:	4b0c      	ldr	r3, [pc, #48]	; (80117c8 <SendCmd+0x44>)
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	88fa      	ldrh	r2, [r7, #6]
 801179a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 801179e:	4b0a      	ldr	r3, [pc, #40]	; (80117c8 <SendCmd+0x44>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	797a      	ldrb	r2, [r7, #5]
 80117a4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80117a6:	4b08      	ldr	r3, [pc, #32]	; (80117c8 <SendCmd+0x44>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	330c      	adds	r3, #12
 80117ac:	797a      	ldrb	r2, [r7, #5]
 80117ae:	6839      	ldr	r1, [r7, #0]
 80117b0:	4618      	mov	r0, r3
 80117b2:	f002 faef 	bl	8013d94 <memcpy>

  hciContext.io.Send(0,0);
 80117b6:	4b05      	ldr	r3, [pc, #20]	; (80117cc <SendCmd+0x48>)
 80117b8:	691b      	ldr	r3, [r3, #16]
 80117ba:	2100      	movs	r1, #0
 80117bc:	2000      	movs	r0, #0
 80117be:	4798      	blx	r3

  return;
 80117c0:	bf00      	nop
}
 80117c2:	3708      	adds	r7, #8
 80117c4:	46bd      	mov	sp, r7
 80117c6:	bd80      	pop	{r7, pc}
 80117c8:	2000058c 	.word	0x2000058c
 80117cc:	20000800 	.word	0x20000800

080117d0 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b082      	sub	sp, #8
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	4603      	mov	r3, r0
 80117d8:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80117da:	79fb      	ldrb	r3, [r7, #7]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d108      	bne.n	80117f2 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80117e0:	4b0a      	ldr	r3, [pc, #40]	; (801180c <NotifyCmdStatus+0x3c>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d00d      	beq.n	8011804 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80117e8:	4b08      	ldr	r3, [pc, #32]	; (801180c <NotifyCmdStatus+0x3c>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	2000      	movs	r0, #0
 80117ee:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80117f0:	e008      	b.n	8011804 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80117f2:	4b06      	ldr	r3, [pc, #24]	; (801180c <NotifyCmdStatus+0x3c>)
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d004      	beq.n	8011804 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80117fa:	4b04      	ldr	r3, [pc, #16]	; (801180c <NotifyCmdStatus+0x3c>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	2001      	movs	r0, #1
 8011800:	4798      	blx	r3
  return;
 8011802:	bf00      	nop
 8011804:	bf00      	nop
}
 8011806:	3708      	adds	r7, #8
 8011808:	46bd      	mov	sp, r7
 801180a:	bd80      	pop	{r7, pc}
 801180c:	20000828 	.word	0x20000828

08011810 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b082      	sub	sp, #8
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	7a5b      	ldrb	r3, [r3, #9]
 801181c:	2b0f      	cmp	r3, #15
 801181e:	d003      	beq.n	8011828 <TlEvtReceived+0x18>
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	7a5b      	ldrb	r3, [r3, #9]
 8011824:	2b0e      	cmp	r3, #14
 8011826:	d107      	bne.n	8011838 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8011828:	6879      	ldr	r1, [r7, #4]
 801182a:	4809      	ldr	r0, [pc, #36]	; (8011850 <TlEvtReceived+0x40>)
 801182c:	f000 fc24 	bl	8012078 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8011830:	2000      	movs	r0, #0
 8011832:	f000 ff29 	bl	8012688 <hci_cmd_resp_release>
 8011836:	e006      	b.n	8011846 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8011838:	6879      	ldr	r1, [r7, #4]
 801183a:	4806      	ldr	r0, [pc, #24]	; (8011854 <TlEvtReceived+0x44>)
 801183c:	f000 fc1c 	bl	8012078 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8011840:	4804      	ldr	r0, [pc, #16]	; (8011854 <TlEvtReceived+0x44>)
 8011842:	f000 ff15 	bl	8012670 <hci_notify_asynch_evt>
  }

  return;
 8011846:	bf00      	nop
}
 8011848:	3708      	adds	r7, #8
 801184a:	46bd      	mov	sp, r7
 801184c:	bd80      	pop	{r7, pc}
 801184e:	bf00      	nop
 8011850:	20000820 	.word	0x20000820
 8011854:	20000584 	.word	0x20000584

08011858 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8011858:	b480      	push	{r7}
 801185a:	b083      	sub	sp, #12
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	4a05      	ldr	r2, [pc, #20]	; (8011878 <hci_register_io_bus+0x20>)
 8011864:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	4a04      	ldr	r2, [pc, #16]	; (801187c <hci_register_io_bus+0x24>)
 801186a:	611a      	str	r2, [r3, #16]

  return;
 801186c:	bf00      	nop
}
 801186e:	370c      	adds	r7, #12
 8011870:	46bd      	mov	sp, r7
 8011872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011876:	4770      	bx	lr
 8011878:	08011b69 	.word	0x08011b69
 801187c:	08011bd1 	.word	0x08011bd1

08011880 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b082      	sub	sp, #8
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
 8011888:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801188a:	683b      	ldr	r3, [r7, #0]
 801188c:	685b      	ldr	r3, [r3, #4]
 801188e:	4a08      	ldr	r2, [pc, #32]	; (80118b0 <shci_init+0x30>)
 8011890:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8011892:	4a08      	ldr	r2, [pc, #32]	; (80118b4 <shci_init+0x34>)
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8011898:	4806      	ldr	r0, [pc, #24]	; (80118b4 <shci_init+0x34>)
 801189a:	f000 f911 	bl	8011ac0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801189e:	683b      	ldr	r3, [r7, #0]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	4618      	mov	r0, r3
 80118a4:	f000 f894 	bl	80119d0 <TlInit>

  return;
 80118a8:	bf00      	nop
}
 80118aa:	3708      	adds	r7, #8
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}
 80118b0:	2000084c 	.word	0x2000084c
 80118b4:	2000082c 	.word	0x2000082c

080118b8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b084      	sub	sp, #16
 80118bc:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80118be:	4822      	ldr	r0, [pc, #136]	; (8011948 <shci_user_evt_proc+0x90>)
 80118c0:	f000 fb92 	bl	8011fe8 <LST_is_empty>
 80118c4:	4603      	mov	r3, r0
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d12b      	bne.n	8011922 <shci_user_evt_proc+0x6a>
 80118ca:	4b20      	ldr	r3, [pc, #128]	; (801194c <shci_user_evt_proc+0x94>)
 80118cc:	781b      	ldrb	r3, [r3, #0]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d027      	beq.n	8011922 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80118d2:	f107 030c 	add.w	r3, r7, #12
 80118d6:	4619      	mov	r1, r3
 80118d8:	481b      	ldr	r0, [pc, #108]	; (8011948 <shci_user_evt_proc+0x90>)
 80118da:	f000 fc14 	bl	8012106 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80118de:	4b1c      	ldr	r3, [pc, #112]	; (8011950 <shci_user_evt_proc+0x98>)
 80118e0:	69db      	ldr	r3, [r3, #28]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d00c      	beq.n	8011900 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80118ea:	2301      	movs	r3, #1
 80118ec:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80118ee:	4b18      	ldr	r3, [pc, #96]	; (8011950 <shci_user_evt_proc+0x98>)
 80118f0:	69db      	ldr	r3, [r3, #28]
 80118f2:	1d3a      	adds	r2, r7, #4
 80118f4:	4610      	mov	r0, r2
 80118f6:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80118f8:	793a      	ldrb	r2, [r7, #4]
 80118fa:	4b14      	ldr	r3, [pc, #80]	; (801194c <shci_user_evt_proc+0x94>)
 80118fc:	701a      	strb	r2, [r3, #0]
 80118fe:	e002      	b.n	8011906 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8011900:	4b12      	ldr	r3, [pc, #72]	; (801194c <shci_user_evt_proc+0x94>)
 8011902:	2201      	movs	r2, #1
 8011904:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8011906:	4b11      	ldr	r3, [pc, #68]	; (801194c <shci_user_evt_proc+0x94>)
 8011908:	781b      	ldrb	r3, [r3, #0]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d004      	beq.n	8011918 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	4618      	mov	r0, r3
 8011912:	f000 fa6d 	bl	8011df0 <TL_MM_EvtDone>
 8011916:	e004      	b.n	8011922 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	4619      	mov	r1, r3
 801191c:	480a      	ldr	r0, [pc, #40]	; (8011948 <shci_user_evt_proc+0x90>)
 801191e:	f000 fb85 	bl	801202c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8011922:	4809      	ldr	r0, [pc, #36]	; (8011948 <shci_user_evt_proc+0x90>)
 8011924:	f000 fb60 	bl	8011fe8 <LST_is_empty>
 8011928:	4603      	mov	r3, r0
 801192a:	2b00      	cmp	r3, #0
 801192c:	d107      	bne.n	801193e <shci_user_evt_proc+0x86>
 801192e:	4b07      	ldr	r3, [pc, #28]	; (801194c <shci_user_evt_proc+0x94>)
 8011930:	781b      	ldrb	r3, [r3, #0]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d003      	beq.n	801193e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8011936:	4804      	ldr	r0, [pc, #16]	; (8011948 <shci_user_evt_proc+0x90>)
 8011938:	f7ef f8ff 	bl	8000b3a <shci_notify_asynch_evt>
  }


  return;
 801193c:	bf00      	nop
 801193e:	bf00      	nop
}
 8011940:	3710      	adds	r7, #16
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}
 8011946:	bf00      	nop
 8011948:	20000598 	.word	0x20000598
 801194c:	200005a8 	.word	0x200005a8
 8011950:	2000082c 	.word	0x2000082c

08011954 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b084      	sub	sp, #16
 8011958:	af00      	add	r7, sp, #0
 801195a:	60ba      	str	r2, [r7, #8]
 801195c:	607b      	str	r3, [r7, #4]
 801195e:	4603      	mov	r3, r0
 8011960:	81fb      	strh	r3, [r7, #14]
 8011962:	460b      	mov	r3, r1
 8011964:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8011966:	2000      	movs	r0, #0
 8011968:	f000 f864 	bl	8011a34 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 801196c:	4b16      	ldr	r3, [pc, #88]	; (80119c8 <shci_send+0x74>)
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	89fa      	ldrh	r2, [r7, #14]
 8011972:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8011976:	4b14      	ldr	r3, [pc, #80]	; (80119c8 <shci_send+0x74>)
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	7b7a      	ldrb	r2, [r7, #13]
 801197c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 801197e:	4b12      	ldr	r3, [pc, #72]	; (80119c8 <shci_send+0x74>)
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	330c      	adds	r3, #12
 8011984:	7b7a      	ldrb	r2, [r7, #13]
 8011986:	68b9      	ldr	r1, [r7, #8]
 8011988:	4618      	mov	r0, r3
 801198a:	f002 fa03 	bl	8013d94 <memcpy>

  shciContext.io.Send(0,0);
 801198e:	4b0f      	ldr	r3, [pc, #60]	; (80119cc <shci_send+0x78>)
 8011990:	691b      	ldr	r3, [r3, #16]
 8011992:	2100      	movs	r1, #0
 8011994:	2000      	movs	r0, #0
 8011996:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8011998:	f248 00e8 	movw	r0, #33000	; 0x80e8
 801199c:	f7ef f8e4 	bl	8000b68 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	f103 0008 	add.w	r0, r3, #8
 80119a6:	4b08      	ldr	r3, [pc, #32]	; (80119c8 <shci_send+0x74>)
 80119a8:	6819      	ldr	r1, [r3, #0]
 80119aa:	4b07      	ldr	r3, [pc, #28]	; (80119c8 <shci_send+0x74>)
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	789b      	ldrb	r3, [r3, #2]
 80119b0:	3303      	adds	r3, #3
 80119b2:	461a      	mov	r2, r3
 80119b4:	f002 f9ee 	bl	8013d94 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80119b8:	2001      	movs	r0, #1
 80119ba:	f000 f83b 	bl	8011a34 <Cmd_SetStatus>

  return;
 80119be:	bf00      	nop
}
 80119c0:	3710      	adds	r7, #16
 80119c2:	46bd      	mov	sp, r7
 80119c4:	bd80      	pop	{r7, pc}
 80119c6:	bf00      	nop
 80119c8:	200005a4 	.word	0x200005a4
 80119cc:	2000082c 	.word	0x2000082c

080119d0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b086      	sub	sp, #24
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80119d8:	4a10      	ldr	r2, [pc, #64]	; (8011a1c <TlInit+0x4c>)
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80119de:	4810      	ldr	r0, [pc, #64]	; (8011a20 <TlInit+0x50>)
 80119e0:	f000 faf2 	bl	8011fc8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80119e4:	2001      	movs	r0, #1
 80119e6:	f000 f825 	bl	8011a34 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80119ea:	4b0e      	ldr	r3, [pc, #56]	; (8011a24 <TlInit+0x54>)
 80119ec:	2201      	movs	r2, #1
 80119ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80119f0:	4b0d      	ldr	r3, [pc, #52]	; (8011a28 <TlInit+0x58>)
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d00c      	beq.n	8011a12 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80119fc:	4b0b      	ldr	r3, [pc, #44]	; (8011a2c <TlInit+0x5c>)
 80119fe:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8011a00:	4b0b      	ldr	r3, [pc, #44]	; (8011a30 <TlInit+0x60>)
 8011a02:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8011a04:	4b08      	ldr	r3, [pc, #32]	; (8011a28 <TlInit+0x58>)
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	f107 020c 	add.w	r2, r7, #12
 8011a0c:	4610      	mov	r0, r2
 8011a0e:	4798      	blx	r3
  }

  return;
 8011a10:	bf00      	nop
 8011a12:	bf00      	nop
}
 8011a14:	3718      	adds	r7, #24
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}
 8011a1a:	bf00      	nop
 8011a1c:	200005a4 	.word	0x200005a4
 8011a20:	20000598 	.word	0x20000598
 8011a24:	200005a8 	.word	0x200005a8
 8011a28:	2000082c 	.word	0x2000082c
 8011a2c:	08011a85 	.word	0x08011a85
 8011a30:	08011a9d 	.word	0x08011a9d

08011a34 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b082      	sub	sp, #8
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8011a3e:	79fb      	ldrb	r3, [r7, #7]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d10b      	bne.n	8011a5c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8011a44:	4b0d      	ldr	r3, [pc, #52]	; (8011a7c <Cmd_SetStatus+0x48>)
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d003      	beq.n	8011a54 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8011a4c:	4b0b      	ldr	r3, [pc, #44]	; (8011a7c <Cmd_SetStatus+0x48>)
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	2000      	movs	r0, #0
 8011a52:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8011a54:	4b0a      	ldr	r3, [pc, #40]	; (8011a80 <Cmd_SetStatus+0x4c>)
 8011a56:	2200      	movs	r2, #0
 8011a58:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8011a5a:	e00b      	b.n	8011a74 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8011a5c:	4b08      	ldr	r3, [pc, #32]	; (8011a80 <Cmd_SetStatus+0x4c>)
 8011a5e:	2201      	movs	r2, #1
 8011a60:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8011a62:	4b06      	ldr	r3, [pc, #24]	; (8011a7c <Cmd_SetStatus+0x48>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d004      	beq.n	8011a74 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8011a6a:	4b04      	ldr	r3, [pc, #16]	; (8011a7c <Cmd_SetStatus+0x48>)
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	2001      	movs	r0, #1
 8011a70:	4798      	blx	r3
  return;
 8011a72:	bf00      	nop
 8011a74:	bf00      	nop
}
 8011a76:	3708      	adds	r7, #8
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}
 8011a7c:	2000084c 	.word	0x2000084c
 8011a80:	200005a0 	.word	0x200005a0

08011a84 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b082      	sub	sp, #8
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8011a8c:	2000      	movs	r0, #0
 8011a8e:	f7ef f860 	bl	8000b52 <shci_cmd_resp_release>

  return;
 8011a92:	bf00      	nop
}
 8011a94:	3708      	adds	r7, #8
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}
	...

08011a9c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b082      	sub	sp, #8
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8011aa4:	6879      	ldr	r1, [r7, #4]
 8011aa6:	4805      	ldr	r0, [pc, #20]	; (8011abc <TlUserEvtReceived+0x20>)
 8011aa8:	f000 fae6 	bl	8012078 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8011aac:	4803      	ldr	r0, [pc, #12]	; (8011abc <TlUserEvtReceived+0x20>)
 8011aae:	f7ef f844 	bl	8000b3a <shci_notify_asynch_evt>

  return;
 8011ab2:	bf00      	nop
}
 8011ab4:	3708      	adds	r7, #8
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}
 8011aba:	bf00      	nop
 8011abc:	20000598 	.word	0x20000598

08011ac0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8011ac0:	b480      	push	{r7}
 8011ac2:	b083      	sub	sp, #12
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	4a05      	ldr	r2, [pc, #20]	; (8011ae0 <shci_register_io_bus+0x20>)
 8011acc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	4a04      	ldr	r2, [pc, #16]	; (8011ae4 <shci_register_io_bus+0x24>)
 8011ad2:	611a      	str	r2, [r3, #16]

  return;
 8011ad4:	bf00      	nop
}
 8011ad6:	370c      	adds	r7, #12
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ade:	4770      	bx	lr
 8011ae0:	08011c7d 	.word	0x08011c7d
 8011ae4:	08011cd1 	.word	0x08011cd1

08011ae8 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8011aec:	f001 f882 	bl	8012bf4 <HW_IPCC_Enable>

  return;
 8011af0:	bf00      	nop
}
 8011af2:	bd80      	pop	{r7, pc}

08011af4 <TL_Init>:


void TL_Init( void )
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8011af8:	4b10      	ldr	r3, [pc, #64]	; (8011b3c <TL_Init+0x48>)
 8011afa:	4a11      	ldr	r2, [pc, #68]	; (8011b40 <TL_Init+0x4c>)
 8011afc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8011afe:	4b0f      	ldr	r3, [pc, #60]	; (8011b3c <TL_Init+0x48>)
 8011b00:	4a10      	ldr	r2, [pc, #64]	; (8011b44 <TL_Init+0x50>)
 8011b02:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8011b04:	4b0d      	ldr	r3, [pc, #52]	; (8011b3c <TL_Init+0x48>)
 8011b06:	4a10      	ldr	r2, [pc, #64]	; (8011b48 <TL_Init+0x54>)
 8011b08:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8011b0a:	4b0c      	ldr	r3, [pc, #48]	; (8011b3c <TL_Init+0x48>)
 8011b0c:	4a0f      	ldr	r2, [pc, #60]	; (8011b4c <TL_Init+0x58>)
 8011b0e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8011b10:	4b0a      	ldr	r3, [pc, #40]	; (8011b3c <TL_Init+0x48>)
 8011b12:	4a0f      	ldr	r2, [pc, #60]	; (8011b50 <TL_Init+0x5c>)
 8011b14:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8011b16:	4b09      	ldr	r3, [pc, #36]	; (8011b3c <TL_Init+0x48>)
 8011b18:	4a0e      	ldr	r2, [pc, #56]	; (8011b54 <TL_Init+0x60>)
 8011b1a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8011b1c:	4b07      	ldr	r3, [pc, #28]	; (8011b3c <TL_Init+0x48>)
 8011b1e:	4a0e      	ldr	r2, [pc, #56]	; (8011b58 <TL_Init+0x64>)
 8011b20:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8011b22:	4b06      	ldr	r3, [pc, #24]	; (8011b3c <TL_Init+0x48>)
 8011b24:	4a0d      	ldr	r2, [pc, #52]	; (8011b5c <TL_Init+0x68>)
 8011b26:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8011b28:	4b04      	ldr	r3, [pc, #16]	; (8011b3c <TL_Init+0x48>)
 8011b2a:	4a0d      	ldr	r2, [pc, #52]	; (8011b60 <TL_Init+0x6c>)
 8011b2c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8011b2e:	4b03      	ldr	r3, [pc, #12]	; (8011b3c <TL_Init+0x48>)
 8011b30:	4a0c      	ldr	r2, [pc, #48]	; (8011b64 <TL_Init+0x70>)
 8011b32:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8011b34:	f001 f872 	bl	8012c1c <HW_IPCC_Init>

  return;
 8011b38:	bf00      	nop
}
 8011b3a:	bd80      	pop	{r7, pc}
 8011b3c:	20030000 	.word	0x20030000
 8011b40:	20030028 	.word	0x20030028
 8011b44:	20030048 	.word	0x20030048
 8011b48:	20030058 	.word	0x20030058
 8011b4c:	20030068 	.word	0x20030068
 8011b50:	20030070 	.word	0x20030070
 8011b54:	20030078 	.word	0x20030078
 8011b58:	20030080 	.word	0x20030080
 8011b5c:	2003009c 	.word	0x2003009c
 8011b60:	200300a0 	.word	0x200300a0
 8011b64:	200300ac 	.word	0x200300ac

08011b68 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b084      	sub	sp, #16
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8011b74:	4811      	ldr	r0, [pc, #68]	; (8011bbc <TL_BLE_Init+0x54>)
 8011b76:	f000 fa27 	bl	8011fc8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8011b7a:	4b11      	ldr	r3, [pc, #68]	; (8011bc0 <TL_BLE_Init+0x58>)
 8011b7c:	685b      	ldr	r3, [r3, #4]
 8011b7e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	689a      	ldr	r2, [r3, #8]
 8011b84:	68bb      	ldr	r3, [r7, #8]
 8011b86:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	68da      	ldr	r2, [r3, #12]
 8011b8c:	68bb      	ldr	r3, [r7, #8]
 8011b8e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8011b90:	68bb      	ldr	r3, [r7, #8]
 8011b92:	4a0c      	ldr	r2, [pc, #48]	; (8011bc4 <TL_BLE_Init+0x5c>)
 8011b94:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8011b96:	68bb      	ldr	r3, [r7, #8]
 8011b98:	4a08      	ldr	r2, [pc, #32]	; (8011bbc <TL_BLE_Init+0x54>)
 8011b9a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8011b9c:	f001 f854 	bl	8012c48 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	4a08      	ldr	r2, [pc, #32]	; (8011bc8 <TL_BLE_Init+0x60>)
 8011ba6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	685b      	ldr	r3, [r3, #4]
 8011bac:	4a07      	ldr	r2, [pc, #28]	; (8011bcc <TL_BLE_Init+0x64>)
 8011bae:	6013      	str	r3, [r2, #0]

  return 0;
 8011bb0:	2300      	movs	r3, #0
}
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	3710      	adds	r7, #16
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	bd80      	pop	{r7, pc}
 8011bba:	bf00      	nop
 8011bbc:	200300c8 	.word	0x200300c8
 8011bc0:	20030000 	.word	0x20030000
 8011bc4:	20030a58 	.word	0x20030a58
 8011bc8:	20000858 	.word	0x20000858
 8011bcc:	2000085c 	.word	0x2000085c

08011bd0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b082      	sub	sp, #8
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
 8011bd8:	460b      	mov	r3, r1
 8011bda:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8011bdc:	4b09      	ldr	r3, [pc, #36]	; (8011c04 <TL_BLE_SendCmd+0x34>)
 8011bde:	685b      	ldr	r3, [r3, #4]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	2201      	movs	r2, #1
 8011be4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8011be6:	4b07      	ldr	r3, [pc, #28]	; (8011c04 <TL_BLE_SendCmd+0x34>)
 8011be8:	685b      	ldr	r3, [r3, #4]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	4619      	mov	r1, r3
 8011bee:	2001      	movs	r0, #1
 8011bf0:	f000 f96c 	bl	8011ecc <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8011bf4:	f001 f832 	bl	8012c5c <HW_IPCC_BLE_SendCmd>

  return 0;
 8011bf8:	2300      	movs	r3, #0
}
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	3708      	adds	r7, #8
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bd80      	pop	{r7, pc}
 8011c02:	bf00      	nop
 8011c04:	20030000 	.word	0x20030000

08011c08 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b082      	sub	sp, #8
 8011c0c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8011c0e:	e01c      	b.n	8011c4a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8011c10:	1d3b      	adds	r3, r7, #4
 8011c12:	4619      	mov	r1, r3
 8011c14:	4812      	ldr	r0, [pc, #72]	; (8011c60 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8011c16:	f000 fa76 	bl	8012106 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	7a5b      	ldrb	r3, [r3, #9]
 8011c1e:	2b0f      	cmp	r3, #15
 8011c20:	d003      	beq.n	8011c2a <HW_IPCC_BLE_RxEvtNot+0x22>
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	7a5b      	ldrb	r3, [r3, #9]
 8011c26:	2b0e      	cmp	r3, #14
 8011c28:	d105      	bne.n	8011c36 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	4619      	mov	r1, r3
 8011c2e:	2002      	movs	r0, #2
 8011c30:	f000 f94c 	bl	8011ecc <OutputDbgTrace>
 8011c34:	e004      	b.n	8011c40 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	4619      	mov	r1, r3
 8011c3a:	2003      	movs	r0, #3
 8011c3c:	f000 f946 	bl	8011ecc <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8011c40:	4b08      	ldr	r3, [pc, #32]	; (8011c64 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	687a      	ldr	r2, [r7, #4]
 8011c46:	4610      	mov	r0, r2
 8011c48:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8011c4a:	4805      	ldr	r0, [pc, #20]	; (8011c60 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8011c4c:	f000 f9cc 	bl	8011fe8 <LST_is_empty>
 8011c50:	4603      	mov	r3, r0
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d0dc      	beq.n	8011c10 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8011c56:	bf00      	nop
}
 8011c58:	3708      	adds	r7, #8
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd80      	pop	{r7, pc}
 8011c5e:	bf00      	nop
 8011c60:	200300c8 	.word	0x200300c8
 8011c64:	20000858 	.word	0x20000858

08011c68 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8011c6c:	4b02      	ldr	r3, [pc, #8]	; (8011c78 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	4798      	blx	r3

  return;
 8011c72:	bf00      	nop
}
 8011c74:	bd80      	pop	{r7, pc}
 8011c76:	bf00      	nop
 8011c78:	2000085c 	.word	0x2000085c

08011c7c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b084      	sub	sp, #16
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8011c88:	480d      	ldr	r0, [pc, #52]	; (8011cc0 <TL_SYS_Init+0x44>)
 8011c8a:	f000 f99d 	bl	8011fc8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8011c8e:	4b0d      	ldr	r3, [pc, #52]	; (8011cc4 <TL_SYS_Init+0x48>)
 8011c90:	68db      	ldr	r3, [r3, #12]
 8011c92:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	689a      	ldr	r2, [r3, #8]
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8011c9c:	68bb      	ldr	r3, [r7, #8]
 8011c9e:	4a08      	ldr	r2, [pc, #32]	; (8011cc0 <TL_SYS_Init+0x44>)
 8011ca0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8011ca2:	f000 fffd 	bl	8012ca0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	4a07      	ldr	r2, [pc, #28]	; (8011cc8 <TL_SYS_Init+0x4c>)
 8011cac:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	685b      	ldr	r3, [r3, #4]
 8011cb2:	4a06      	ldr	r2, [pc, #24]	; (8011ccc <TL_SYS_Init+0x50>)
 8011cb4:	6013      	str	r3, [r2, #0]

  return 0;
 8011cb6:	2300      	movs	r3, #0
}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	3710      	adds	r7, #16
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd80      	pop	{r7, pc}
 8011cc0:	200300d0 	.word	0x200300d0
 8011cc4:	20030000 	.word	0x20030000
 8011cc8:	20000860 	.word	0x20000860
 8011ccc:	20000864 	.word	0x20000864

08011cd0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b082      	sub	sp, #8
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
 8011cd8:	460b      	mov	r3, r1
 8011cda:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8011cdc:	4b09      	ldr	r3, [pc, #36]	; (8011d04 <TL_SYS_SendCmd+0x34>)
 8011cde:	68db      	ldr	r3, [r3, #12]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	2210      	movs	r2, #16
 8011ce4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8011ce6:	4b07      	ldr	r3, [pc, #28]	; (8011d04 <TL_SYS_SendCmd+0x34>)
 8011ce8:	68db      	ldr	r3, [r3, #12]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	4619      	mov	r1, r3
 8011cee:	2004      	movs	r0, #4
 8011cf0:	f000 f8ec 	bl	8011ecc <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8011cf4:	f000 ffde 	bl	8012cb4 <HW_IPCC_SYS_SendCmd>

  return 0;
 8011cf8:	2300      	movs	r3, #0
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3708      	adds	r7, #8
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}
 8011d02:	bf00      	nop
 8011d04:	20030000 	.word	0x20030000

08011d08 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8011d0c:	4b07      	ldr	r3, [pc, #28]	; (8011d2c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8011d0e:	68db      	ldr	r3, [r3, #12]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	4619      	mov	r1, r3
 8011d14:	2005      	movs	r0, #5
 8011d16:	f000 f8d9 	bl	8011ecc <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8011d1a:	4b05      	ldr	r3, [pc, #20]	; (8011d30 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	4a03      	ldr	r2, [pc, #12]	; (8011d2c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8011d20:	68d2      	ldr	r2, [r2, #12]
 8011d22:	6812      	ldr	r2, [r2, #0]
 8011d24:	4610      	mov	r0, r2
 8011d26:	4798      	blx	r3

  return;
 8011d28:	bf00      	nop
}
 8011d2a:	bd80      	pop	{r7, pc}
 8011d2c:	20030000 	.word	0x20030000
 8011d30:	20000860 	.word	0x20000860

08011d34 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b082      	sub	sp, #8
 8011d38:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8011d3a:	e00e      	b.n	8011d5a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8011d3c:	1d3b      	adds	r3, r7, #4
 8011d3e:	4619      	mov	r1, r3
 8011d40:	480b      	ldr	r0, [pc, #44]	; (8011d70 <HW_IPCC_SYS_EvtNot+0x3c>)
 8011d42:	f000 f9e0 	bl	8012106 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	4619      	mov	r1, r3
 8011d4a:	2006      	movs	r0, #6
 8011d4c:	f000 f8be 	bl	8011ecc <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8011d50:	4b08      	ldr	r3, [pc, #32]	; (8011d74 <HW_IPCC_SYS_EvtNot+0x40>)
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	687a      	ldr	r2, [r7, #4]
 8011d56:	4610      	mov	r0, r2
 8011d58:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8011d5a:	4805      	ldr	r0, [pc, #20]	; (8011d70 <HW_IPCC_SYS_EvtNot+0x3c>)
 8011d5c:	f000 f944 	bl	8011fe8 <LST_is_empty>
 8011d60:	4603      	mov	r3, r0
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d0ea      	beq.n	8011d3c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8011d66:	bf00      	nop
}
 8011d68:	3708      	adds	r7, #8
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	bd80      	pop	{r7, pc}
 8011d6e:	bf00      	nop
 8011d70:	200300d0 	.word	0x200300d0
 8011d74:	20000864 	.word	0x20000864

08011d78 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b082      	sub	sp, #8
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8011d80:	4817      	ldr	r0, [pc, #92]	; (8011de0 <TL_MM_Init+0x68>)
 8011d82:	f000 f921 	bl	8011fc8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8011d86:	4817      	ldr	r0, [pc, #92]	; (8011de4 <TL_MM_Init+0x6c>)
 8011d88:	f000 f91e 	bl	8011fc8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8011d8c:	4b16      	ldr	r3, [pc, #88]	; (8011de8 <TL_MM_Init+0x70>)
 8011d8e:	691b      	ldr	r3, [r3, #16]
 8011d90:	4a16      	ldr	r2, [pc, #88]	; (8011dec <TL_MM_Init+0x74>)
 8011d92:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8011d94:	4b15      	ldr	r3, [pc, #84]	; (8011dec <TL_MM_Init+0x74>)
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	687a      	ldr	r2, [r7, #4]
 8011d9a:	6892      	ldr	r2, [r2, #8]
 8011d9c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8011d9e:	4b13      	ldr	r3, [pc, #76]	; (8011dec <TL_MM_Init+0x74>)
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	687a      	ldr	r2, [r7, #4]
 8011da4:	68d2      	ldr	r2, [r2, #12]
 8011da6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8011da8:	4b10      	ldr	r3, [pc, #64]	; (8011dec <TL_MM_Init+0x74>)
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	4a0c      	ldr	r2, [pc, #48]	; (8011de0 <TL_MM_Init+0x68>)
 8011dae:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8011db0:	4b0e      	ldr	r3, [pc, #56]	; (8011dec <TL_MM_Init+0x74>)
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	687a      	ldr	r2, [r7, #4]
 8011db6:	6812      	ldr	r2, [r2, #0]
 8011db8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8011dba:	4b0c      	ldr	r3, [pc, #48]	; (8011dec <TL_MM_Init+0x74>)
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	687a      	ldr	r2, [r7, #4]
 8011dc0:	6852      	ldr	r2, [r2, #4]
 8011dc2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8011dc4:	4b09      	ldr	r3, [pc, #36]	; (8011dec <TL_MM_Init+0x74>)
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	687a      	ldr	r2, [r7, #4]
 8011dca:	6912      	ldr	r2, [r2, #16]
 8011dcc:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8011dce:	4b07      	ldr	r3, [pc, #28]	; (8011dec <TL_MM_Init+0x74>)
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	687a      	ldr	r2, [r7, #4]
 8011dd4:	6952      	ldr	r2, [r2, #20]
 8011dd6:	619a      	str	r2, [r3, #24]

  return;
 8011dd8:	bf00      	nop
}
 8011dda:	3708      	adds	r7, #8
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bd80      	pop	{r7, pc}
 8011de0:	200300b8 	.word	0x200300b8
 8011de4:	20000850 	.word	0x20000850
 8011de8:	20030000 	.word	0x20030000
 8011dec:	20000868 	.word	0x20000868

08011df0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b082      	sub	sp, #8
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8011df8:	6879      	ldr	r1, [r7, #4]
 8011dfa:	4807      	ldr	r0, [pc, #28]	; (8011e18 <TL_MM_EvtDone+0x28>)
 8011dfc:	f000 f93c 	bl	8012078 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8011e00:	6879      	ldr	r1, [r7, #4]
 8011e02:	2000      	movs	r0, #0
 8011e04:	f000 f862 	bl	8011ecc <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8011e08:	4804      	ldr	r0, [pc, #16]	; (8011e1c <TL_MM_EvtDone+0x2c>)
 8011e0a:	f000 ff79 	bl	8012d00 <HW_IPCC_MM_SendFreeBuf>

  return;
 8011e0e:	bf00      	nop
}
 8011e10:	3708      	adds	r7, #8
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}
 8011e16:	bf00      	nop
 8011e18:	20000850 	.word	0x20000850
 8011e1c:	08011e21 	.word	0x08011e21

08011e20 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b082      	sub	sp, #8
 8011e24:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8011e26:	e00c      	b.n	8011e42 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8011e28:	1d3b      	adds	r3, r7, #4
 8011e2a:	4619      	mov	r1, r3
 8011e2c:	480a      	ldr	r0, [pc, #40]	; (8011e58 <SendFreeBuf+0x38>)
 8011e2e:	f000 f96a 	bl	8012106 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8011e32:	4b0a      	ldr	r3, [pc, #40]	; (8011e5c <SendFreeBuf+0x3c>)
 8011e34:	691b      	ldr	r3, [r3, #16]
 8011e36:	691b      	ldr	r3, [r3, #16]
 8011e38:	687a      	ldr	r2, [r7, #4]
 8011e3a:	4611      	mov	r1, r2
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f000 f91b 	bl	8012078 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8011e42:	4805      	ldr	r0, [pc, #20]	; (8011e58 <SendFreeBuf+0x38>)
 8011e44:	f000 f8d0 	bl	8011fe8 <LST_is_empty>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d0ec      	beq.n	8011e28 <SendFreeBuf+0x8>
  }

  return;
 8011e4e:	bf00      	nop
}
 8011e50:	3708      	adds	r7, #8
 8011e52:	46bd      	mov	sp, r7
 8011e54:	bd80      	pop	{r7, pc}
 8011e56:	bf00      	nop
 8011e58:	20000850 	.word	0x20000850
 8011e5c:	20030000 	.word	0x20030000

08011e60 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8011e64:	4805      	ldr	r0, [pc, #20]	; (8011e7c <TL_TRACES_Init+0x1c>)
 8011e66:	f000 f8af 	bl	8011fc8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8011e6a:	4b05      	ldr	r3, [pc, #20]	; (8011e80 <TL_TRACES_Init+0x20>)
 8011e6c:	695b      	ldr	r3, [r3, #20]
 8011e6e:	4a03      	ldr	r2, [pc, #12]	; (8011e7c <TL_TRACES_Init+0x1c>)
 8011e70:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8011e72:	f000 ff7b 	bl	8012d6c <HW_IPCC_TRACES_Init>

  return;
 8011e76:	bf00      	nop
}
 8011e78:	bd80      	pop	{r7, pc}
 8011e7a:	bf00      	nop
 8011e7c:	200300c0 	.word	0x200300c0
 8011e80:	20030000 	.word	0x20030000

08011e84 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b082      	sub	sp, #8
 8011e88:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8011e8a:	e008      	b.n	8011e9e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8011e8c:	1d3b      	adds	r3, r7, #4
 8011e8e:	4619      	mov	r1, r3
 8011e90:	4808      	ldr	r0, [pc, #32]	; (8011eb4 <HW_IPCC_TRACES_EvtNot+0x30>)
 8011e92:	f000 f938 	bl	8012106 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f000 f80d 	bl	8011eb8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8011e9e:	4805      	ldr	r0, [pc, #20]	; (8011eb4 <HW_IPCC_TRACES_EvtNot+0x30>)
 8011ea0:	f000 f8a2 	bl	8011fe8 <LST_is_empty>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d0f0      	beq.n	8011e8c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8011eaa:	bf00      	nop
}
 8011eac:	3708      	adds	r7, #8
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	bd80      	pop	{r7, pc}
 8011eb2:	bf00      	nop
 8011eb4:	200300c0 	.word	0x200300c0

08011eb8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8011eb8:	b480      	push	{r7}
 8011eba:	b083      	sub	sp, #12
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8011ec0:	bf00      	nop
 8011ec2:	370c      	adds	r7, #12
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eca:	4770      	bx	lr

08011ecc <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8011ecc:	b480      	push	{r7}
 8011ece:	b085      	sub	sp, #20
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	6039      	str	r1, [r7, #0]
 8011ed6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8011ed8:	79fb      	ldrb	r3, [r7, #7]
 8011eda:	2b06      	cmp	r3, #6
 8011edc:	d845      	bhi.n	8011f6a <OutputDbgTrace+0x9e>
 8011ede:	a201      	add	r2, pc, #4	; (adr r2, 8011ee4 <OutputDbgTrace+0x18>)
 8011ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ee4:	08011f01 	.word	0x08011f01
 8011ee8:	08011f25 	.word	0x08011f25
 8011eec:	08011f2b 	.word	0x08011f2b
 8011ef0:	08011f3f 	.word	0x08011f3f
 8011ef4:	08011f4b 	.word	0x08011f4b
 8011ef8:	08011f51 	.word	0x08011f51
 8011efc:	08011f5f 	.word	0x08011f5f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011f00:	683b      	ldr	r3, [r7, #0]
 8011f02:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	7a5b      	ldrb	r3, [r3, #9]
 8011f08:	2bff      	cmp	r3, #255	; 0xff
 8011f0a:	d005      	beq.n	8011f18 <OutputDbgTrace+0x4c>
 8011f0c:	2bff      	cmp	r3, #255	; 0xff
 8011f0e:	dc05      	bgt.n	8011f1c <OutputDbgTrace+0x50>
 8011f10:	2b0e      	cmp	r3, #14
 8011f12:	d005      	beq.n	8011f20 <OutputDbgTrace+0x54>
 8011f14:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8011f16:	e001      	b.n	8011f1c <OutputDbgTrace+0x50>
          break;
 8011f18:	bf00      	nop
 8011f1a:	e027      	b.n	8011f6c <OutputDbgTrace+0xa0>
          break;
 8011f1c:	bf00      	nop
 8011f1e:	e025      	b.n	8011f6c <OutputDbgTrace+0xa0>
          break;
 8011f20:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8011f22:	e023      	b.n	8011f6c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8011f28:	e020      	b.n	8011f6c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	7a5b      	ldrb	r3, [r3, #9]
 8011f32:	2b0e      	cmp	r3, #14
 8011f34:	d001      	beq.n	8011f3a <OutputDbgTrace+0x6e>
 8011f36:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8011f38:	e000      	b.n	8011f3c <OutputDbgTrace+0x70>
          break;
 8011f3a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8011f3c:	e016      	b.n	8011f6c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011f3e:	683b      	ldr	r3, [r7, #0]
 8011f40:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	7a5b      	ldrb	r3, [r3, #9]
 8011f46:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8011f48:	e010      	b.n	8011f6c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8011f4a:	683b      	ldr	r3, [r7, #0]
 8011f4c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8011f4e:	e00d      	b.n	8011f6c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	7a5b      	ldrb	r3, [r3, #9]
 8011f58:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8011f5a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8011f5c:	e006      	b.n	8011f6c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	7a5b      	ldrb	r3, [r3, #9]
 8011f66:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8011f68:	e000      	b.n	8011f6c <OutputDbgTrace+0xa0>

    default:
      break;
 8011f6a:	bf00      	nop
  }

  return;
 8011f6c:	bf00      	nop
}
 8011f6e:	3714      	adds	r7, #20
 8011f70:	46bd      	mov	sp, r7
 8011f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f76:	4770      	bx	lr

08011f78 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8011f78:	b480      	push	{r7}
 8011f7a:	b085      	sub	sp, #20
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	4603      	mov	r3, r0
 8011f80:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8011f82:	4b0f      	ldr	r3, [pc, #60]	; (8011fc0 <OTP_Read+0x48>)
 8011f84:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8011f86:	e002      	b.n	8011f8e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	3b08      	subs	r3, #8
 8011f8c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	3307      	adds	r3, #7
 8011f92:	781b      	ldrb	r3, [r3, #0]
 8011f94:	79fa      	ldrb	r2, [r7, #7]
 8011f96:	429a      	cmp	r2, r3
 8011f98:	d003      	beq.n	8011fa2 <OTP_Read+0x2a>
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	4a09      	ldr	r2, [pc, #36]	; (8011fc4 <OTP_Read+0x4c>)
 8011f9e:	4293      	cmp	r3, r2
 8011fa0:	d1f2      	bne.n	8011f88 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	3307      	adds	r3, #7
 8011fa6:	781b      	ldrb	r3, [r3, #0]
 8011fa8:	79fa      	ldrb	r2, [r7, #7]
 8011faa:	429a      	cmp	r2, r3
 8011fac:	d001      	beq.n	8011fb2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8011fae:	2300      	movs	r3, #0
 8011fb0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8011fb2:	68fb      	ldr	r3, [r7, #12]
}
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	3714      	adds	r7, #20
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbe:	4770      	bx	lr
 8011fc0:	1fff73f8 	.word	0x1fff73f8
 8011fc4:	1fff7000 	.word	0x1fff7000

08011fc8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8011fc8:	b480      	push	{r7}
 8011fca:	b083      	sub	sp, #12
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	687a      	ldr	r2, [r7, #4]
 8011fd4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	687a      	ldr	r2, [r7, #4]
 8011fda:	605a      	str	r2, [r3, #4]
}
 8011fdc:	bf00      	nop
 8011fde:	370c      	adds	r7, #12
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe6:	4770      	bx	lr

08011fe8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8011fe8:	b480      	push	{r7}
 8011fea:	b087      	sub	sp, #28
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8011ff4:	60fb      	str	r3, [r7, #12]
  return(result);
 8011ff6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011ff8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8011ffa:	b672      	cpsid	i
}
 8011ffc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	687a      	ldr	r2, [r7, #4]
 8012004:	429a      	cmp	r2, r3
 8012006:	d102      	bne.n	801200e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8012008:	2301      	movs	r3, #1
 801200a:	75fb      	strb	r3, [r7, #23]
 801200c:	e001      	b.n	8012012 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 801200e:	2300      	movs	r3, #0
 8012010:	75fb      	strb	r3, [r7, #23]
 8012012:	693b      	ldr	r3, [r7, #16]
 8012014:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012016:	68bb      	ldr	r3, [r7, #8]
 8012018:	f383 8810 	msr	PRIMASK, r3
}
 801201c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 801201e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012020:	4618      	mov	r0, r3
 8012022:	371c      	adds	r7, #28
 8012024:	46bd      	mov	sp, r7
 8012026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202a:	4770      	bx	lr

0801202c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 801202c:	b480      	push	{r7}
 801202e:	b087      	sub	sp, #28
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
 8012034:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012036:	f3ef 8310 	mrs	r3, PRIMASK
 801203a:	60fb      	str	r3, [r7, #12]
  return(result);
 801203c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801203e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012040:	b672      	cpsid	i
}
 8012042:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	681a      	ldr	r2, [r3, #0]
 8012048:	683b      	ldr	r3, [r7, #0]
 801204a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 801204c:	683b      	ldr	r3, [r7, #0]
 801204e:	687a      	ldr	r2, [r7, #4]
 8012050:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	683a      	ldr	r2, [r7, #0]
 8012056:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	683a      	ldr	r2, [r7, #0]
 801205e:	605a      	str	r2, [r3, #4]
 8012060:	697b      	ldr	r3, [r7, #20]
 8012062:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012064:	693b      	ldr	r3, [r7, #16]
 8012066:	f383 8810 	msr	PRIMASK, r3
}
 801206a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801206c:	bf00      	nop
 801206e:	371c      	adds	r7, #28
 8012070:	46bd      	mov	sp, r7
 8012072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012076:	4770      	bx	lr

08012078 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8012078:	b480      	push	{r7}
 801207a:	b087      	sub	sp, #28
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
 8012080:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012082:	f3ef 8310 	mrs	r3, PRIMASK
 8012086:	60fb      	str	r3, [r7, #12]
  return(result);
 8012088:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801208a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801208c:	b672      	cpsid	i
}
 801208e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8012090:	683b      	ldr	r3, [r7, #0]
 8012092:	687a      	ldr	r2, [r7, #4]
 8012094:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	685a      	ldr	r2, [r3, #4]
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	683a      	ldr	r2, [r7, #0]
 80120a2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80120a4:	683b      	ldr	r3, [r7, #0]
 80120a6:	685b      	ldr	r3, [r3, #4]
 80120a8:	683a      	ldr	r2, [r7, #0]
 80120aa:	601a      	str	r2, [r3, #0]
 80120ac:	697b      	ldr	r3, [r7, #20]
 80120ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120b0:	693b      	ldr	r3, [r7, #16]
 80120b2:	f383 8810 	msr	PRIMASK, r3
}
 80120b6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80120b8:	bf00      	nop
 80120ba:	371c      	adds	r7, #28
 80120bc:	46bd      	mov	sp, r7
 80120be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c2:	4770      	bx	lr

080120c4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80120c4:	b480      	push	{r7}
 80120c6:	b087      	sub	sp, #28
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120cc:	f3ef 8310 	mrs	r3, PRIMASK
 80120d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80120d2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80120d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80120d6:	b672      	cpsid	i
}
 80120d8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	685b      	ldr	r3, [r3, #4]
 80120de:	687a      	ldr	r2, [r7, #4]
 80120e0:	6812      	ldr	r2, [r2, #0]
 80120e2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	687a      	ldr	r2, [r7, #4]
 80120ea:	6852      	ldr	r2, [r2, #4]
 80120ec:	605a      	str	r2, [r3, #4]
 80120ee:	697b      	ldr	r3, [r7, #20]
 80120f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120f2:	693b      	ldr	r3, [r7, #16]
 80120f4:	f383 8810 	msr	PRIMASK, r3
}
 80120f8:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80120fa:	bf00      	nop
 80120fc:	371c      	adds	r7, #28
 80120fe:	46bd      	mov	sp, r7
 8012100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012104:	4770      	bx	lr

08012106 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8012106:	b580      	push	{r7, lr}
 8012108:	b086      	sub	sp, #24
 801210a:	af00      	add	r7, sp, #0
 801210c:	6078      	str	r0, [r7, #4]
 801210e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012110:	f3ef 8310 	mrs	r3, PRIMASK
 8012114:	60fb      	str	r3, [r7, #12]
  return(result);
 8012116:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012118:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801211a:	b672      	cpsid	i
}
 801211c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	681a      	ldr	r2, [r3, #0]
 8012122:	683b      	ldr	r3, [r7, #0]
 8012124:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	4618      	mov	r0, r3
 801212c:	f7ff ffca 	bl	80120c4 <LST_remove_node>
 8012130:	697b      	ldr	r3, [r7, #20]
 8012132:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012134:	693b      	ldr	r3, [r7, #16]
 8012136:	f383 8810 	msr	PRIMASK, r3
}
 801213a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801213c:	bf00      	nop
 801213e:	3718      	adds	r7, #24
 8012140:	46bd      	mov	sp, r7
 8012142:	bd80      	pop	{r7, pc}

08012144 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8012144:	b480      	push	{r7}
 8012146:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8012148:	4b03      	ldr	r3, [pc, #12]	; (8012158 <LL_FLASH_GetUDN+0x14>)
 801214a:	681b      	ldr	r3, [r3, #0]
}
 801214c:	4618      	mov	r0, r3
 801214e:	46bd      	mov	sp, r7
 8012150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012154:	4770      	bx	lr
 8012156:	bf00      	nop
 8012158:	1fff7580 	.word	0x1fff7580

0801215c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 801215c:	b480      	push	{r7}
 801215e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8012160:	4b03      	ldr	r3, [pc, #12]	; (8012170 <LL_FLASH_GetDeviceID+0x14>)
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	b2db      	uxtb	r3, r3
}
 8012166:	4618      	mov	r0, r3
 8012168:	46bd      	mov	sp, r7
 801216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216e:	4770      	bx	lr
 8012170:	1fff7584 	.word	0x1fff7584

08012174 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8012174:	b480      	push	{r7}
 8012176:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8012178:	4b03      	ldr	r3, [pc, #12]	; (8012188 <LL_FLASH_GetSTCompanyID+0x14>)
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	0a1b      	lsrs	r3, r3, #8
}
 801217e:	4618      	mov	r0, r3
 8012180:	46bd      	mov	sp, r7
 8012182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012186:	4770      	bx	lr
 8012188:	1fff7584 	.word	0x1fff7584

0801218c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 801218c:	b5b0      	push	{r4, r5, r7, lr}
 801218e:	b090      	sub	sp, #64	; 0x40
 8012190:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8012192:	2392      	movs	r3, #146	; 0x92
 8012194:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8012198:	4b25      	ldr	r3, [pc, #148]	; (8012230 <APP_BLE_Init+0xa4>)
 801219a:	1d3c      	adds	r4, r7, #4
 801219c:	461d      	mov	r5, r3
 801219e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80121a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80121a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80121a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80121a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80121a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80121aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80121ae:	e884 0003 	stmia.w	r4, {r0, r1}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80121b2:	f000 f905 	bl	80123c0 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80121b6:	2101      	movs	r1, #1
 80121b8:	2002      	movs	r0, #2
 80121ba:	f001 fb51 	bl	8013860 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80121be:	4a1d      	ldr	r2, [pc, #116]	; (8012234 <APP_BLE_Init+0xa8>)
 80121c0:	2100      	movs	r1, #0
 80121c2:	2002      	movs	r0, #2
 80121c4:	f001 fc78 	bl	8013ab8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80121c8:	1d3b      	adds	r3, r7, #4
 80121ca:	4618      	mov	r0, r3
 80121cc:	f7ff f8d0 	bl	8011370 <SHCI_C2_BLE_Init>
 80121d0:	4603      	mov	r3, r0
 80121d2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 80121d6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d001      	beq.n	80121e2 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80121de:	f7ef f9cd 	bl	800157c <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80121e2:	f000 f903 	bl	80123ec <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80121e6:	f7ff f81d 	bl	8011224 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80121ea:	4b13      	ldr	r3, [pc, #76]	; (8012238 <APP_BLE_Init+0xac>)
 80121ec:	2200      	movs	r2, #0
 80121ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80121f2:	4b11      	ldr	r3, [pc, #68]	; (8012238 <APP_BLE_Init+0xac>)
 80121f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80121f8:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80121fa:	4a10      	ldr	r2, [pc, #64]	; (801223c <APP_BLE_Init+0xb0>)
 80121fc:	2100      	movs	r1, #0
 80121fe:	2001      	movs	r0, #1
 8012200:	f001 fc5a 	bl	8013ab8 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8012204:	2006      	movs	r0, #6
 8012206:	f7fe fe81 	bl	8010f0c <aci_hal_set_radio_activity_mask>
 801220a:	4603      	mov	r3, r0
 801220c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8012210:	f000 fa9b 	bl	801274a <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8012214:	4b08      	ldr	r3, [pc, #32]	; (8012238 <APP_BLE_Init+0xac>)
 8012216:	2200      	movs	r2, #0
 8012218:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 801221a:	4b07      	ldr	r3, [pc, #28]	; (8012238 <APP_BLE_Init+0xac>)
 801221c:	2200      	movs	r2, #0
 801221e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8012220:	2001      	movs	r0, #1
 8012222:	f000 f997 	bl	8012554 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8012226:	bf00      	nop
}
 8012228:	3740      	adds	r7, #64	; 0x40
 801222a:	46bd      	mov	sp, r7
 801222c:	bdb0      	pop	{r4, r5, r7, pc}
 801222e:	bf00      	nop
 8012230:	08014bd0 	.word	0x08014bd0
 8012234:	0801158d 	.word	0x0801158d
 8012238:	200005ac 	.word	0x200005ac
 801223c:	0801263d 	.word	0x0801263d

08012240 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b08a      	sub	sp, #40	; 0x28
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8012248:	2392      	movs	r3, #146	; 0x92
 801224a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	3301      	adds	r3, #1
 8012252:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8012254:	6a3b      	ldr	r3, [r7, #32]
 8012256:	781b      	ldrb	r3, [r3, #0]
 8012258:	2bff      	cmp	r3, #255	; 0xff
 801225a:	d053      	beq.n	8012304 <SVCCTL_App_Notification+0xc4>
 801225c:	2bff      	cmp	r3, #255	; 0xff
 801225e:	f300 80a1 	bgt.w	80123a4 <SVCCTL_App_Notification+0x164>
 8012262:	2b05      	cmp	r3, #5
 8012264:	d002      	beq.n	801226c <SVCCTL_App_Notification+0x2c>
 8012266:	2b3e      	cmp	r3, #62	; 0x3e
 8012268:	d020      	beq.n	80122ac <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 801226a:	e09b      	b.n	80123a4 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 801226c:	6a3b      	ldr	r3, [r7, #32]
 801226e:	3302      	adds	r3, #2
 8012270:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8012278:	b29a      	uxth	r2, r3
 801227a:	4b4e      	ldr	r3, [pc, #312]	; (80123b4 <SVCCTL_App_Notification+0x174>)
 801227c:	8adb      	ldrh	r3, [r3, #22]
 801227e:	429a      	cmp	r2, r3
 8012280:	d106      	bne.n	8012290 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8012282:	4b4c      	ldr	r3, [pc, #304]	; (80123b4 <SVCCTL_App_Notification+0x174>)
 8012284:	2200      	movs	r2, #0
 8012286:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8012288:	4b4a      	ldr	r3, [pc, #296]	; (80123b4 <SVCCTL_App_Notification+0x174>)
 801228a:	2200      	movs	r2, #0
 801228c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8012290:	2001      	movs	r0, #1
 8012292:	f000 f95f 	bl	8012554 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8012296:	4b48      	ldr	r3, [pc, #288]	; (80123b8 <SVCCTL_App_Notification+0x178>)
 8012298:	2201      	movs	r2, #1
 801229a:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 801229c:	4b45      	ldr	r3, [pc, #276]	; (80123b4 <SVCCTL_App_Notification+0x174>)
 801229e:	8ada      	ldrh	r2, [r3, #22]
 80122a0:	4b45      	ldr	r3, [pc, #276]	; (80123b8 <SVCCTL_App_Notification+0x178>)
 80122a2:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 80122a4:	4844      	ldr	r0, [pc, #272]	; (80123b8 <SVCCTL_App_Notification+0x178>)
 80122a6:	f000 fa3c 	bl	8012722 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80122aa:	e07e      	b.n	80123aa <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80122ac:	6a3b      	ldr	r3, [r7, #32]
 80122ae:	3302      	adds	r3, #2
 80122b0:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 80122b2:	697b      	ldr	r3, [r7, #20]
 80122b4:	781b      	ldrb	r3, [r3, #0]
 80122b6:	2b01      	cmp	r3, #1
 80122b8:	d001      	beq.n	80122be <SVCCTL_App_Notification+0x7e>
 80122ba:	2b03      	cmp	r3, #3
          break;
 80122bc:	e021      	b.n	8012302 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	3301      	adds	r3, #1
 80122c2:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80122c4:	4b3b      	ldr	r3, [pc, #236]	; (80123b4 <SVCCTL_App_Notification+0x174>)
 80122c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80122ca:	2b04      	cmp	r3, #4
 80122cc:	d104      	bne.n	80122d8 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80122ce:	4b39      	ldr	r3, [pc, #228]	; (80123b4 <SVCCTL_App_Notification+0x174>)
 80122d0:	2206      	movs	r2, #6
 80122d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80122d6:	e003      	b.n	80122e0 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80122d8:	4b36      	ldr	r3, [pc, #216]	; (80123b4 <SVCCTL_App_Notification+0x174>)
 80122da:	2205      	movs	r2, #5
 80122dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80122e0:	693b      	ldr	r3, [r7, #16]
 80122e2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80122e6:	b29a      	uxth	r2, r3
 80122e8:	4b32      	ldr	r3, [pc, #200]	; (80123b4 <SVCCTL_App_Notification+0x174>)
 80122ea:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80122ec:	4b32      	ldr	r3, [pc, #200]	; (80123b8 <SVCCTL_App_Notification+0x178>)
 80122ee:	2200      	movs	r2, #0
 80122f0:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80122f2:	4b30      	ldr	r3, [pc, #192]	; (80123b4 <SVCCTL_App_Notification+0x174>)
 80122f4:	8ada      	ldrh	r2, [r3, #22]
 80122f6:	4b30      	ldr	r3, [pc, #192]	; (80123b8 <SVCCTL_App_Notification+0x178>)
 80122f8:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 80122fa:	482f      	ldr	r0, [pc, #188]	; (80123b8 <SVCCTL_App_Notification+0x178>)
 80122fc:	f000 fa11 	bl	8012722 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8012300:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8012302:	e052      	b.n	80123aa <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8012304:	6a3b      	ldr	r3, [r7, #32]
 8012306:	3302      	adds	r3, #2
 8012308:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 801230a:	69fb      	ldr	r3, [r7, #28]
 801230c:	881b      	ldrh	r3, [r3, #0]
 801230e:	b29b      	uxth	r3, r3
 8012310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012314:	d040      	beq.n	8012398 <SVCCTL_App_Notification+0x158>
 8012316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801231a:	dc45      	bgt.n	80123a8 <SVCCTL_App_Notification+0x168>
 801231c:	2b04      	cmp	r3, #4
 801231e:	d03d      	beq.n	801239c <SVCCTL_App_Notification+0x15c>
 8012320:	2b04      	cmp	r3, #4
 8012322:	db41      	blt.n	80123a8 <SVCCTL_App_Notification+0x168>
 8012324:	f240 420a 	movw	r2, #1034	; 0x40a
 8012328:	4293      	cmp	r3, r2
 801232a:	dc3d      	bgt.n	80123a8 <SVCCTL_App_Notification+0x168>
 801232c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012330:	dd3a      	ble.n	80123a8 <SVCCTL_App_Notification+0x168>
 8012332:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8012336:	2b09      	cmp	r3, #9
 8012338:	d836      	bhi.n	80123a8 <SVCCTL_App_Notification+0x168>
 801233a:	a201      	add	r2, pc, #4	; (adr r2, 8012340 <SVCCTL_App_Notification+0x100>)
 801233c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012340:	08012391 	.word	0x08012391
 8012344:	08012369 	.word	0x08012369
 8012348:	080123a9 	.word	0x080123a9
 801234c:	080123a9 	.word	0x080123a9
 8012350:	080123a9 	.word	0x080123a9
 8012354:	080123a9 	.word	0x080123a9
 8012358:	080123a1 	.word	0x080123a1
 801235c:	080123a9 	.word	0x080123a9
 8012360:	0801237d 	.word	0x0801237d
 8012364:	080123a1 	.word	0x080123a1
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8012368:	4b12      	ldr	r3, [pc, #72]	; (80123b4 <SVCCTL_App_Notification+0x174>)
 801236a:	8adb      	ldrh	r3, [r3, #22]
 801236c:	4913      	ldr	r1, [pc, #76]	; (80123bc <SVCCTL_App_Notification+0x17c>)
 801236e:	4618      	mov	r0, r3
 8012370:	f7fe f823 	bl	80103ba <aci_gap_pass_key_resp>
 8012374:	4603      	mov	r3, r0
 8012376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 801237a:	e012      	b.n	80123a2 <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 801237c:	4b0d      	ldr	r3, [pc, #52]	; (80123b4 <SVCCTL_App_Notification+0x174>)
 801237e:	8adb      	ldrh	r3, [r3, #22]
 8012380:	2101      	movs	r1, #1
 8012382:	4618      	mov	r0, r3
 8012384:	f7fe f9c3 	bl	801070e <aci_gap_numeric_comparison_value_confirm_yesno>
 8012388:	4603      	mov	r3, r0
 801238a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 801238e:	e008      	b.n	80123a2 <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8012390:	69fb      	ldr	r3, [r7, #28]
 8012392:	3302      	adds	r3, #2
 8012394:	61bb      	str	r3, [r7, #24]
          break;
 8012396:	e004      	b.n	80123a2 <SVCCTL_App_Notification+0x162>
          break;
 8012398:	bf00      	nop
 801239a:	e005      	b.n	80123a8 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 801239c:	bf00      	nop
 801239e:	e003      	b.n	80123a8 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80123a0:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80123a2:	e001      	b.n	80123a8 <SVCCTL_App_Notification+0x168>
      break;
 80123a4:	bf00      	nop
 80123a6:	e000      	b.n	80123aa <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80123a8:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80123aa:	2301      	movs	r3, #1
}
 80123ac:	4618      	mov	r0, r3
 80123ae:	3728      	adds	r7, #40	; 0x28
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}
 80123b4:	200005ac 	.word	0x200005ac
 80123b8:	20000874 	.word	0x20000874
 80123bc:	0001b207 	.word	0x0001b207

080123c0 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b082      	sub	sp, #8
 80123c4:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80123c6:	4b06      	ldr	r3, [pc, #24]	; (80123e0 <Ble_Tl_Init+0x20>)
 80123c8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80123ca:	4b06      	ldr	r3, [pc, #24]	; (80123e4 <Ble_Tl_Init+0x24>)
 80123cc:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80123ce:	463b      	mov	r3, r7
 80123d0:	4619      	mov	r1, r3
 80123d2:	4805      	ldr	r0, [pc, #20]	; (80123e8 <Ble_Tl_Init+0x28>)
 80123d4:	f7ff f8be 	bl	8011554 <hci_init>

  return;
 80123d8:	bf00      	nop
}
 80123da:	3708      	adds	r7, #8
 80123dc:	46bd      	mov	sp, r7
 80123de:	bd80      	pop	{r7, pc}
 80123e0:	200300d8 	.word	0x200300d8
 80123e4:	080126ed 	.word	0x080126ed
 80123e8:	080126b5 	.word	0x080126b5

080123ec <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80123ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123ee:	b08d      	sub	sp, #52	; 0x34
 80123f0:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80123f2:	2300      	movs	r3, #0
 80123f4:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80123f6:	2392      	movs	r3, #146	; 0x92
 80123f8:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80123fa:	f7fe fddb 	bl	8010fb4 <hci_reset>
 80123fe:	4603      	mov	r3, r0
 8012400:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8012402:	f000 f8d7 	bl	80125b4 <BleGetBdAddress>
 8012406:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8012408:	693a      	ldr	r2, [r7, #16]
 801240a:	2106      	movs	r1, #6
 801240c:	2000      	movs	r0, #0
 801240e:	f7fe fc91 	bl	8010d34 <aci_hal_write_config_data>
 8012412:	4603      	mov	r3, r0
 8012414:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8012416:	4a4a      	ldr	r2, [pc, #296]	; (8012540 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8012418:	2110      	movs	r1, #16
 801241a:	2018      	movs	r0, #24
 801241c:	f7fe fc8a 	bl	8010d34 <aci_hal_write_config_data>
 8012420:	4603      	mov	r3, r0
 8012422:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8012424:	4a47      	ldr	r2, [pc, #284]	; (8012544 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8012426:	2110      	movs	r1, #16
 8012428:	2008      	movs	r0, #8
 801242a:	f7fe fc83 	bl	8010d34 <aci_hal_write_config_data>
 801242e:	4603      	mov	r3, r0
 8012430:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8012432:	2118      	movs	r1, #24
 8012434:	2001      	movs	r0, #1
 8012436:	f7fe fd02 	bl	8010e3e <aci_hal_set_tx_power_level>
 801243a:	4603      	mov	r3, r0
 801243c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 801243e:	f7fe f9cd 	bl	80107dc <aci_gatt_init>
 8012442:	4603      	mov	r3, r0
 8012444:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8012446:	2300      	movs	r3, #0
 8012448:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 801244a:	7bfb      	ldrb	r3, [r7, #15]
 801244c:	f043 0301 	orr.w	r3, r3, #1
 8012450:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif /* BLE_CFG_CENTRAL == 1 */

  if (role > 0)
 8012452:	7bfb      	ldrb	r3, [r7, #15]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d01f      	beq.n	8012498 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8012458:	4b3b      	ldr	r3, [pc, #236]	; (8012548 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 801245a:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 801245c:	1dba      	adds	r2, r7, #6
 801245e:	7bf8      	ldrb	r0, [r7, #15]
 8012460:	1cbb      	adds	r3, r7, #2
 8012462:	9301      	str	r3, [sp, #4]
 8012464:	1d3b      	adds	r3, r7, #4
 8012466:	9300      	str	r3, [sp, #0]
 8012468:	4613      	mov	r3, r2
 801246a:	2208      	movs	r2, #8
 801246c:	2100      	movs	r1, #0
 801246e:	f7fe f80b 	bl	8010488 <aci_gap_init>
 8012472:	4603      	mov	r3, r0
 8012474:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8012476:	88fc      	ldrh	r4, [r7, #6]
 8012478:	88bd      	ldrh	r5, [r7, #4]
 801247a:	68b8      	ldr	r0, [r7, #8]
 801247c:	f7ed fe80 	bl	8000180 <strlen>
 8012480:	4603      	mov	r3, r0
 8012482:	b2da      	uxtb	r2, r3
 8012484:	68bb      	ldr	r3, [r7, #8]
 8012486:	9300      	str	r3, [sp, #0]
 8012488:	4613      	mov	r3, r2
 801248a:	2200      	movs	r2, #0
 801248c:	4629      	mov	r1, r5
 801248e:	4620      	mov	r0, r4
 8012490:	f7fe fba7 	bl	8010be2 <aci_gatt_update_char_value>
 8012494:	4603      	mov	r3, r0
 8012496:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8012498:	88f8      	ldrh	r0, [r7, #6]
 801249a:	8879      	ldrh	r1, [r7, #2]
 801249c:	463b      	mov	r3, r7
 801249e:	9300      	str	r3, [sp, #0]
 80124a0:	2302      	movs	r3, #2
 80124a2:	2200      	movs	r2, #0
 80124a4:	f7fe fb9d 	bl	8010be2 <aci_gatt_update_char_value>
 80124a8:	4603      	mov	r3, r0
 80124aa:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80124ac:	2202      	movs	r2, #2
 80124ae:	2102      	movs	r1, #2
 80124b0:	2000      	movs	r0, #0
 80124b2:	f7fe fda3 	bl	8010ffc <hci_le_set_default_phy>
 80124b6:	4603      	mov	r3, r0
 80124b8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80124ba:	4b24      	ldr	r3, [pc, #144]	; (801254c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80124bc:	2201      	movs	r2, #1
 80124be:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80124c0:	4b22      	ldr	r3, [pc, #136]	; (801254c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80124c2:	781b      	ldrb	r3, [r3, #0]
 80124c4:	4618      	mov	r0, r3
 80124c6:	f7fd fe60 	bl	801018a <aci_gap_set_io_capability>
 80124ca:	4603      	mov	r3, r0
 80124cc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80124ce:	4b1f      	ldr	r3, [pc, #124]	; (801254c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80124d0:	2201      	movs	r2, #1
 80124d2:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80124d4:	4b1d      	ldr	r3, [pc, #116]	; (801254c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80124d6:	2208      	movs	r2, #8
 80124d8:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80124da:	4b1c      	ldr	r3, [pc, #112]	; (801254c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80124dc:	2210      	movs	r2, #16
 80124de:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80124e0:	4b1a      	ldr	r3, [pc, #104]	; (801254c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80124e2:	2200      	movs	r2, #0
 80124e4:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80124e6:	4b19      	ldr	r3, [pc, #100]	; (801254c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80124e8:	4a19      	ldr	r2, [pc, #100]	; (8012550 <Ble_Hci_Gap_Gatt_Init+0x164>)
 80124ea:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80124ec:	4b17      	ldr	r3, [pc, #92]	; (801254c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80124ee:	2200      	movs	r2, #0
 80124f0:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80124f2:	4b16      	ldr	r3, [pc, #88]	; (801254c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80124f4:	789c      	ldrb	r4, [r3, #2]
 80124f6:	4b15      	ldr	r3, [pc, #84]	; (801254c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80124f8:	785d      	ldrb	r5, [r3, #1]
 80124fa:	4b14      	ldr	r3, [pc, #80]	; (801254c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80124fc:	791b      	ldrb	r3, [r3, #4]
 80124fe:	4a13      	ldr	r2, [pc, #76]	; (801254c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8012500:	7952      	ldrb	r2, [r2, #5]
 8012502:	4912      	ldr	r1, [pc, #72]	; (801254c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8012504:	78c9      	ldrb	r1, [r1, #3]
 8012506:	4811      	ldr	r0, [pc, #68]	; (801254c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8012508:	6880      	ldr	r0, [r0, #8]
 801250a:	2600      	movs	r6, #0
 801250c:	9604      	str	r6, [sp, #16]
 801250e:	9003      	str	r0, [sp, #12]
 8012510:	9102      	str	r1, [sp, #8]
 8012512:	9201      	str	r2, [sp, #4]
 8012514:	9300      	str	r3, [sp, #0]
 8012516:	2300      	movs	r3, #0
 8012518:	2201      	movs	r2, #1
 801251a:	4629      	mov	r1, r5
 801251c:	4620      	mov	r0, r4
 801251e:	f7fd fe88 	bl	8010232 <aci_gap_set_authentication_requirement>
 8012522:	4603      	mov	r3, r0
 8012524:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8012526:	4b09      	ldr	r3, [pc, #36]	; (801254c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8012528:	789b      	ldrb	r3, [r3, #2]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d003      	beq.n	8012536 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 801252e:	f7fe f8ca 	bl	80106c6 <aci_gap_configure_whitelist>
 8012532:	4603      	mov	r3, r0
 8012534:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8012536:	bf00      	nop
 8012538:	371c      	adds	r7, #28
 801253a:	46bd      	mov	sp, r7
 801253c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801253e:	bf00      	nop
 8012540:	08014e60 	.word	0x08014e60
 8012544:	08014e70 	.word	0x08014e70
 8012548:	08014c08 	.word	0x08014c08
 801254c:	200005ac 	.word	0x200005ac
 8012550:	0001b207 	.word	0x0001b207

08012554 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b08c      	sub	sp, #48	; 0x30
 8012558:	af08      	add	r7, sp, #32
 801255a:	4603      	mov	r3, r0
 801255c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801255e:	2392      	movs	r3, #146	; 0x92
 8012560:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8012562:	4a12      	ldr	r2, [pc, #72]	; (80125ac <Adv_Request+0x58>)
 8012564:	79fb      	ldrb	r3, [r7, #7]
 8012566:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 801256a:	2300      	movs	r3, #0
 801256c:	9306      	str	r3, [sp, #24]
 801256e:	2300      	movs	r3, #0
 8012570:	9305      	str	r3, [sp, #20]
 8012572:	2300      	movs	r3, #0
 8012574:	9304      	str	r3, [sp, #16]
 8012576:	2300      	movs	r3, #0
 8012578:	9303      	str	r3, [sp, #12]
 801257a:	2300      	movs	r3, #0
 801257c:	9302      	str	r3, [sp, #8]
 801257e:	2300      	movs	r3, #0
 8012580:	9301      	str	r3, [sp, #4]
 8012582:	2300      	movs	r3, #0
 8012584:	9300      	str	r3, [sp, #0]
 8012586:	2300      	movs	r3, #0
 8012588:	22a0      	movs	r2, #160	; 0xa0
 801258a:	2180      	movs	r1, #128	; 0x80
 801258c:	2000      	movs	r0, #0
 801258e:	f7fd fd02 	bl	800ff96 <aci_gap_set_discoverable>
 8012592:	4603      	mov	r3, r0
 8012594:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8012596:	4906      	ldr	r1, [pc, #24]	; (80125b0 <Adv_Request+0x5c>)
 8012598:	2009      	movs	r0, #9
 801259a:	f7fe f822 	bl	80105e2 <aci_gap_update_adv_data>
 801259e:	4603      	mov	r3, r0
 80125a0:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80125a2:	bf00      	nop
}
 80125a4:	3710      	adds	r7, #16
 80125a6:	46bd      	mov	sp, r7
 80125a8:	bd80      	pop	{r7, pc}
 80125aa:	bf00      	nop
 80125ac:	200005ac 	.word	0x200005ac
 80125b0:	200003e0 	.word	0x200003e0

080125b4 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80125b4:	b580      	push	{r7, lr}
 80125b6:	b086      	sub	sp, #24
 80125b8:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80125ba:	f7ff fdc3 	bl	8012144 <LL_FLASH_GetUDN>
 80125be:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80125c0:	693b      	ldr	r3, [r7, #16]
 80125c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125c6:	d023      	beq.n	8012610 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80125c8:	f7ff fdd4 	bl	8012174 <LL_FLASH_GetSTCompanyID>
 80125cc:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80125ce:	f7ff fdc5 	bl	801215c <LL_FLASH_GetDeviceID>
 80125d2:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80125d4:	693b      	ldr	r3, [r7, #16]
 80125d6:	b2da      	uxtb	r2, r3
 80125d8:	4b16      	ldr	r3, [pc, #88]	; (8012634 <BleGetBdAddress+0x80>)
 80125da:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80125dc:	693b      	ldr	r3, [r7, #16]
 80125de:	0a1b      	lsrs	r3, r3, #8
 80125e0:	b2da      	uxtb	r2, r3
 80125e2:	4b14      	ldr	r3, [pc, #80]	; (8012634 <BleGetBdAddress+0x80>)
 80125e4:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	b2da      	uxtb	r2, r3
 80125ea:	4b12      	ldr	r3, [pc, #72]	; (8012634 <BleGetBdAddress+0x80>)
 80125ec:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80125ee:	68bb      	ldr	r3, [r7, #8]
 80125f0:	b2da      	uxtb	r2, r3
 80125f2:	4b10      	ldr	r3, [pc, #64]	; (8012634 <BleGetBdAddress+0x80>)
 80125f4:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80125f6:	68bb      	ldr	r3, [r7, #8]
 80125f8:	0a1b      	lsrs	r3, r3, #8
 80125fa:	b2da      	uxtb	r2, r3
 80125fc:	4b0d      	ldr	r3, [pc, #52]	; (8012634 <BleGetBdAddress+0x80>)
 80125fe:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8012600:	68bb      	ldr	r3, [r7, #8]
 8012602:	0c1b      	lsrs	r3, r3, #16
 8012604:	b2da      	uxtb	r2, r3
 8012606:	4b0b      	ldr	r3, [pc, #44]	; (8012634 <BleGetBdAddress+0x80>)
 8012608:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 801260a:	4b0a      	ldr	r3, [pc, #40]	; (8012634 <BleGetBdAddress+0x80>)
 801260c:	617b      	str	r3, [r7, #20]
 801260e:	e00b      	b.n	8012628 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8012610:	2000      	movs	r0, #0
 8012612:	f7ff fcb1 	bl	8011f78 <OTP_Read>
 8012616:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d002      	beq.n	8012624 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	617b      	str	r3, [r7, #20]
 8012622:	e001      	b.n	8012628 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8012624:	4b04      	ldr	r3, [pc, #16]	; (8012638 <BleGetBdAddress+0x84>)
 8012626:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8012628:	697b      	ldr	r3, [r7, #20]
}
 801262a:	4618      	mov	r0, r3
 801262c:	3718      	adds	r7, #24
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}
 8012632:	bf00      	nop
 8012634:	2000086c 	.word	0x2000086c
 8012638:	08014e58 	.word	0x08014e58

0801263c <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b082      	sub	sp, #8
 8012640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8012642:	4b0a      	ldr	r3, [pc, #40]	; (801266c <Adv_Cancel+0x30>)
 8012644:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8012648:	2b05      	cmp	r3, #5
 801264a:	d00a      	beq.n	8012662 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801264c:	2392      	movs	r3, #146	; 0x92
 801264e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8012650:	f7fd fc7d 	bl	800ff4e <aci_gap_set_non_discoverable>
 8012654:	4603      	mov	r3, r0
 8012656:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8012658:	4b04      	ldr	r3, [pc, #16]	; (801266c <Adv_Cancel+0x30>)
 801265a:	2200      	movs	r2, #0
 801265c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8012660:	bf00      	nop
 8012662:	bf00      	nop
}
 8012664:	3708      	adds	r7, #8
 8012666:	46bd      	mov	sp, r7
 8012668:	bd80      	pop	{r7, pc}
 801266a:	bf00      	nop
 801266c:	200005ac 	.word	0x200005ac

08012670 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8012670:	b580      	push	{r7, lr}
 8012672:	b082      	sub	sp, #8
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8012678:	2100      	movs	r1, #0
 801267a:	2002      	movs	r0, #2
 801267c:	f001 fa3e 	bl	8013afc <UTIL_SEQ_SetTask>

  return;
 8012680:	bf00      	nop
}
 8012682:	3708      	adds	r7, #8
 8012684:	46bd      	mov	sp, r7
 8012686:	bd80      	pop	{r7, pc}

08012688 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b082      	sub	sp, #8
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8012690:	2001      	movs	r0, #1
 8012692:	f001 fa9f 	bl	8013bd4 <UTIL_SEQ_SetEvt>

  return;
 8012696:	bf00      	nop
}
 8012698:	3708      	adds	r7, #8
 801269a:	46bd      	mov	sp, r7
 801269c:	bd80      	pop	{r7, pc}

0801269e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 801269e:	b580      	push	{r7, lr}
 80126a0:	b082      	sub	sp, #8
 80126a2:	af00      	add	r7, sp, #0
 80126a4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80126a6:	2001      	movs	r0, #1
 80126a8:	f001 fab4 	bl	8013c14 <UTIL_SEQ_WaitEvt>

  return;
 80126ac:	bf00      	nop
}
 80126ae:	3708      	adds	r7, #8
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd80      	pop	{r7, pc}

080126b4 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b084      	sub	sp, #16
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	685b      	ldr	r3, [r3, #4]
 80126c4:	3308      	adds	r3, #8
 80126c6:	4618      	mov	r0, r3
 80126c8:	f7fe fdfe 	bl	80112c8 <SVCCTL_UserEvtRx>
 80126cc:	4603      	mov	r3, r0
 80126ce:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80126d0:	7afb      	ldrb	r3, [r7, #11]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d003      	beq.n	80126de <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	2201      	movs	r2, #1
 80126da:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80126dc:	e003      	b.n	80126e6 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	2200      	movs	r2, #0
 80126e2:	701a      	strb	r2, [r3, #0]
  return;
 80126e4:	bf00      	nop
}
 80126e6:	3710      	adds	r7, #16
 80126e8:	46bd      	mov	sp, r7
 80126ea:	bd80      	pop	{r7, pc}

080126ec <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b084      	sub	sp, #16
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	4603      	mov	r3, r0
 80126f4:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80126f6:	79fb      	ldrb	r3, [r7, #7]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d002      	beq.n	8012702 <BLE_StatusNot+0x16>
 80126fc:	2b01      	cmp	r3, #1
 80126fe:	d006      	beq.n	801270e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8012700:	e00b      	b.n	801271a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8012702:	2303      	movs	r3, #3
 8012704:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8012706:	68f8      	ldr	r0, [r7, #12]
 8012708:	f001 fa24 	bl	8013b54 <UTIL_SEQ_PauseTask>
      break;
 801270c:	e005      	b.n	801271a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 801270e:	2303      	movs	r3, #3
 8012710:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8012712:	68f8      	ldr	r0, [r7, #12]
 8012714:	f001 fa3e 	bl	8013b94 <UTIL_SEQ_ResumeTask>
      break;
 8012718:	bf00      	nop
  }

  return;
 801271a:	bf00      	nop
}
 801271c:	3710      	adds	r7, #16
 801271e:	46bd      	mov	sp, r7
 8012720:	bd80      	pop	{r7, pc}

08012722 <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8012722:	b480      	push	{r7}
 8012724:	b083      	sub	sp, #12
 8012726:	af00      	add	r7, sp, #0
 8012728:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	781b      	ldrb	r3, [r3, #0]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d002      	beq.n	8012738 <Custom_APP_Notification+0x16>
 8012732:	2b01      	cmp	r3, #1
 8012734:	d002      	beq.n	801273c <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8012736:	e002      	b.n	801273e <Custom_APP_Notification+0x1c>
      break;
 8012738:	bf00      	nop
 801273a:	e000      	b.n	801273e <Custom_APP_Notification+0x1c>
      break;
 801273c:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 801273e:	bf00      	nop
}
 8012740:	370c      	adds	r7, #12
 8012742:	46bd      	mov	sp, r7
 8012744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012748:	4770      	bx	lr

0801274a <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 801274a:	b480      	push	{r7}
 801274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 801274e:	bf00      	nop
}
 8012750:	46bd      	mov	sp, r7
 8012752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012756:	4770      	bx	lr

08012758 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b08a      	sub	sp, #40	; 0x28
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8012760:	2300      	movs	r3, #0
 8012762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	3301      	adds	r3, #1
 801276a:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 801276c:	6a3b      	ldr	r3, [r7, #32]
 801276e:	781b      	ldrb	r3, [r3, #0]
 8012770:	2bff      	cmp	r3, #255	; 0xff
 8012772:	d13f      	bne.n	80127f4 <Custom_STM_Event_Handler+0x9c>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8012774:	6a3b      	ldr	r3, [r7, #32]
 8012776:	3302      	adds	r3, #2
 8012778:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 801277a:	69fb      	ldr	r3, [r7, #28]
 801277c:	881b      	ldrh	r3, [r3, #0]
 801277e:	b29b      	uxth	r3, r3
 8012780:	f640 4214 	movw	r2, #3092	; 0xc14
 8012784:	4293      	cmp	r3, r2
 8012786:	d02f      	beq.n	80127e8 <Custom_STM_Event_Handler+0x90>
 8012788:	f640 4214 	movw	r2, #3092	; 0xc14
 801278c:	4293      	cmp	r3, r2
 801278e:	dc2d      	bgt.n	80127ec <Custom_STM_Event_Handler+0x94>
 8012790:	f640 4201 	movw	r2, #3073	; 0xc01
 8012794:	4293      	cmp	r3, r2
 8012796:	d003      	beq.n	80127a0 <Custom_STM_Event_Handler+0x48>
 8012798:	f640 4213 	movw	r2, #3091	; 0xc13
 801279c:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 801279e:	e028      	b.n	80127f2 <Custom_STM_Event_Handler+0x9a>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80127a0:	69fb      	ldr	r3, [r7, #28]
 80127a2:	3302      	adds	r3, #2
 80127a4:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80127a6:	69bb      	ldr	r3, [r7, #24]
 80127a8:	885b      	ldrh	r3, [r3, #2]
 80127aa:	b29b      	uxth	r3, r3
 80127ac:	461a      	mov	r2, r3
 80127ae:	4b15      	ldr	r3, [pc, #84]	; (8012804 <Custom_STM_Event_Handler+0xac>)
 80127b0:	885b      	ldrh	r3, [r3, #2]
 80127b2:	3301      	adds	r3, #1
 80127b4:	429a      	cmp	r2, r3
 80127b6:	d11b      	bne.n	80127f0 <Custom_STM_Event_Handler+0x98>
            return_value = SVCCTL_EvtAckFlowEnable;
 80127b8:	2301      	movs	r3, #1
 80127ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if(attribute_modified->Attr_Data[0]>=0x30 && attribute_modified->Attr_Data[0]<=0x39){
 80127be:	69bb      	ldr	r3, [r7, #24]
 80127c0:	7a1b      	ldrb	r3, [r3, #8]
 80127c2:	2b2f      	cmp	r3, #47	; 0x2f
 80127c4:	d914      	bls.n	80127f0 <Custom_STM_Event_Handler+0x98>
 80127c6:	69bb      	ldr	r3, [r7, #24]
 80127c8:	7a1b      	ldrb	r3, [r3, #8]
 80127ca:	2b39      	cmp	r3, #57	; 0x39
 80127cc:	d810      	bhi.n	80127f0 <Custom_STM_Event_Handler+0x98>
            	sprintf(buf,"%d", attribute_modified->Attr_Data[0]-0x30);
 80127ce:	69bb      	ldr	r3, [r7, #24]
 80127d0:	7a1b      	ldrb	r3, [r3, #8]
 80127d2:	3b30      	subs	r3, #48	; 0x30
 80127d4:	461a      	mov	r2, r3
 80127d6:	490c      	ldr	r1, [pc, #48]	; (8012808 <Custom_STM_Event_Handler+0xb0>)
 80127d8:	480c      	ldr	r0, [pc, #48]	; (801280c <Custom_STM_Event_Handler+0xb4>)
 80127da:	f001 fd75 	bl	80142c8 <siprintf>
            	CDC_Transmit_FS((uint8_t *)buf,sizeof(buf));
 80127de:	2140      	movs	r1, #64	; 0x40
 80127e0:	480a      	ldr	r0, [pc, #40]	; (801280c <Custom_STM_Event_Handler+0xb4>)
 80127e2:	f000 fb97 	bl	8012f14 <CDC_Transmit_FS>
          break;
 80127e6:	e003      	b.n	80127f0 <Custom_STM_Event_Handler+0x98>
          break;
 80127e8:	bf00      	nop
 80127ea:	e004      	b.n	80127f6 <Custom_STM_Event_Handler+0x9e>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 80127ec:	bf00      	nop
 80127ee:	e002      	b.n	80127f6 <Custom_STM_Event_Handler+0x9e>
          break;
 80127f0:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80127f2:	e000      	b.n	80127f6 <Custom_STM_Event_Handler+0x9e>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 80127f4:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 80127f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 80127fa:	4618      	mov	r0, r3
 80127fc:	3728      	adds	r7, #40	; 0x28
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}
 8012802:	bf00      	nop
 8012804:	20000594 	.word	0x20000594
 8012808:	08014c14 	.word	0x08014c14
 801280c:	20000878 	.word	0x20000878

08012810 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8012810:	b580      	push	{r7, lr}
 8012812:	b08c      	sub	sp, #48	; 0x30
 8012814:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8012816:	2392      	movs	r3, #146	; 0x92
 8012818:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 801281a:	4834      	ldr	r0, [pc, #208]	; (80128ec <SVCCTL_InitCustomSvc+0xdc>)
 801281c:	f7fe fd3a 	bl	8011294 <SVCCTL_RegisterSvcHandler>
   * service_max_attribute_record = 1 for mySVC +
   *                                2 for myCharWrite +
   *                              = 3
   */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 8012820:	238f      	movs	r3, #143	; 0x8f
 8012822:	713b      	strb	r3, [r7, #4]
 8012824:	23e5      	movs	r3, #229	; 0xe5
 8012826:	717b      	strb	r3, [r7, #5]
 8012828:	23b3      	movs	r3, #179	; 0xb3
 801282a:	71bb      	strb	r3, [r7, #6]
 801282c:	23d5      	movs	r3, #213	; 0xd5
 801282e:	71fb      	strb	r3, [r7, #7]
 8012830:	232e      	movs	r3, #46	; 0x2e
 8012832:	723b      	strb	r3, [r7, #8]
 8012834:	237f      	movs	r3, #127	; 0x7f
 8012836:	727b      	strb	r3, [r7, #9]
 8012838:	234a      	movs	r3, #74	; 0x4a
 801283a:	72bb      	strb	r3, [r7, #10]
 801283c:	2398      	movs	r3, #152	; 0x98
 801283e:	72fb      	strb	r3, [r7, #11]
 8012840:	232a      	movs	r3, #42	; 0x2a
 8012842:	733b      	strb	r3, [r7, #12]
 8012844:	2348      	movs	r3, #72	; 0x48
 8012846:	737b      	strb	r3, [r7, #13]
 8012848:	237a      	movs	r3, #122	; 0x7a
 801284a:	73bb      	strb	r3, [r7, #14]
 801284c:	23cc      	movs	r3, #204	; 0xcc
 801284e:	73fb      	strb	r3, [r7, #15]
 8012850:	2300      	movs	r3, #0
 8012852:	743b      	strb	r3, [r7, #16]
 8012854:	2300      	movs	r3, #0
 8012856:	747b      	strb	r3, [r7, #17]
 8012858:	2300      	movs	r3, #0
 801285a:	74bb      	strb	r3, [r7, #18]
 801285c:	2300      	movs	r3, #0
 801285e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8012860:	1d39      	adds	r1, r7, #4
 8012862:	4b23      	ldr	r3, [pc, #140]	; (80128f0 <SVCCTL_InitCustomSvc+0xe0>)
 8012864:	9300      	str	r3, [sp, #0]
 8012866:	2303      	movs	r3, #3
 8012868:	2201      	movs	r2, #1
 801286a:	2002      	movs	r0, #2
 801286c:	f7fd ffdb 	bl	8010826 <aci_gatt_add_service>
 8012870:	4603      	mov	r3, r0
 8012872:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 8012874:	2319      	movs	r3, #25
 8012876:	713b      	strb	r3, [r7, #4]
 8012878:	23ed      	movs	r3, #237	; 0xed
 801287a:	717b      	strb	r3, [r7, #5]
 801287c:	2382      	movs	r3, #130	; 0x82
 801287e:	71bb      	strb	r3, [r7, #6]
 8012880:	23ae      	movs	r3, #174	; 0xae
 8012882:	71fb      	strb	r3, [r7, #7]
 8012884:	23ed      	movs	r3, #237	; 0xed
 8012886:	723b      	strb	r3, [r7, #8]
 8012888:	2321      	movs	r3, #33	; 0x21
 801288a:	727b      	strb	r3, [r7, #9]
 801288c:	234c      	movs	r3, #76	; 0x4c
 801288e:	72bb      	strb	r3, [r7, #10]
 8012890:	239d      	movs	r3, #157	; 0x9d
 8012892:	72fb      	strb	r3, [r7, #11]
 8012894:	2341      	movs	r3, #65	; 0x41
 8012896:	733b      	strb	r3, [r7, #12]
 8012898:	2345      	movs	r3, #69	; 0x45
 801289a:	737b      	strb	r3, [r7, #13]
 801289c:	2322      	movs	r3, #34	; 0x22
 801289e:	73bb      	strb	r3, [r7, #14]
 80128a0:	238e      	movs	r3, #142	; 0x8e
 80128a2:	73fb      	strb	r3, [r7, #15]
 80128a4:	2300      	movs	r3, #0
 80128a6:	743b      	strb	r3, [r7, #16]
 80128a8:	2300      	movs	r3, #0
 80128aa:	747b      	strb	r3, [r7, #17]
 80128ac:	2300      	movs	r3, #0
 80128ae:	74bb      	strb	r3, [r7, #18]
 80128b0:	2300      	movs	r3, #0
 80128b2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 80128b4:	4b0e      	ldr	r3, [pc, #56]	; (80128f0 <SVCCTL_InitCustomSvc+0xe0>)
 80128b6:	8818      	ldrh	r0, [r3, #0]
 80128b8:	4b0e      	ldr	r3, [pc, #56]	; (80128f4 <SVCCTL_InitCustomSvc+0xe4>)
 80128ba:	781b      	ldrb	r3, [r3, #0]
 80128bc:	b29b      	uxth	r3, r3
 80128be:	1d3a      	adds	r2, r7, #4
 80128c0:	490d      	ldr	r1, [pc, #52]	; (80128f8 <SVCCTL_InitCustomSvc+0xe8>)
 80128c2:	9105      	str	r1, [sp, #20]
 80128c4:	2100      	movs	r1, #0
 80128c6:	9104      	str	r1, [sp, #16]
 80128c8:	2110      	movs	r1, #16
 80128ca:	9103      	str	r1, [sp, #12]
 80128cc:	2101      	movs	r1, #1
 80128ce:	9102      	str	r1, [sp, #8]
 80128d0:	2100      	movs	r1, #0
 80128d2:	9101      	str	r1, [sp, #4]
 80128d4:	2108      	movs	r1, #8
 80128d6:	9100      	str	r1, [sp, #0]
 80128d8:	2102      	movs	r1, #2
 80128da:	f7fe f87a 	bl	80109d2 <aci_gatt_add_char>
 80128de:	4603      	mov	r3, r0
 80128e0:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 80128e2:	bf00      	nop
}
 80128e4:	3718      	adds	r7, #24
 80128e6:	46bd      	mov	sp, r7
 80128e8:	bd80      	pop	{r7, pc}
 80128ea:	bf00      	nop
 80128ec:	08012759 	.word	0x08012759
 80128f0:	20000594 	.word	0x20000594
 80128f4:	200003e9 	.word	0x200003e9
 80128f8:	20000596 	.word	0x20000596

080128fc <LL_PWR_EnableBootC2>:
{
 80128fc:	b480      	push	{r7}
 80128fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8012900:	4b05      	ldr	r3, [pc, #20]	; (8012918 <LL_PWR_EnableBootC2+0x1c>)
 8012902:	68db      	ldr	r3, [r3, #12]
 8012904:	4a04      	ldr	r2, [pc, #16]	; (8012918 <LL_PWR_EnableBootC2+0x1c>)
 8012906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801290a:	60d3      	str	r3, [r2, #12]
}
 801290c:	bf00      	nop
 801290e:	46bd      	mov	sp, r7
 8012910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012914:	4770      	bx	lr
 8012916:	bf00      	nop
 8012918:	58000400 	.word	0x58000400

0801291c <LL_C2_EXTI_EnableEvent_32_63>:
{
 801291c:	b480      	push	{r7}
 801291e:	b083      	sub	sp, #12
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8012924:	4b06      	ldr	r3, [pc, #24]	; (8012940 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8012926:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 801292a:	4905      	ldr	r1, [pc, #20]	; (8012940 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	4313      	orrs	r3, r2
 8012930:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8012934:	bf00      	nop
 8012936:	370c      	adds	r7, #12
 8012938:	46bd      	mov	sp, r7
 801293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293e:	4770      	bx	lr
 8012940:	58000800 	.word	0x58000800

08012944 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8012944:	b480      	push	{r7}
 8012946:	b083      	sub	sp, #12
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 801294c:	4b05      	ldr	r3, [pc, #20]	; (8012964 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801294e:	6a1a      	ldr	r2, [r3, #32]
 8012950:	4904      	ldr	r1, [pc, #16]	; (8012964 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	4313      	orrs	r3, r2
 8012956:	620b      	str	r3, [r1, #32]
}
 8012958:	bf00      	nop
 801295a:	370c      	adds	r7, #12
 801295c:	46bd      	mov	sp, r7
 801295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012962:	4770      	bx	lr
 8012964:	58000800 	.word	0x58000800

08012968 <LL_AHB3_GRP1_EnableClock>:
{
 8012968:	b480      	push	{r7}
 801296a:	b085      	sub	sp, #20
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8012970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012974:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012976:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	4313      	orrs	r3, r2
 801297e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8012980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012984:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	4013      	ands	r3, r2
 801298a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801298c:	68fb      	ldr	r3, [r7, #12]
}
 801298e:	bf00      	nop
 8012990:	3714      	adds	r7, #20
 8012992:	46bd      	mov	sp, r7
 8012994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012998:	4770      	bx	lr

0801299a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 801299a:	b480      	push	{r7}
 801299c:	b085      	sub	sp, #20
 801299e:	af00      	add	r7, sp, #0
 80129a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80129a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80129a6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80129aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	4313      	orrs	r3, r2
 80129b2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80129b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80129ba:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	4013      	ands	r3, r2
 80129c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80129c4:	68fb      	ldr	r3, [r7, #12]
}
 80129c6:	bf00      	nop
 80129c8:	3714      	adds	r7, #20
 80129ca:	46bd      	mov	sp, r7
 80129cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d0:	4770      	bx	lr

080129d2 <LL_C1_IPCC_EnableIT_TXF>:
{
 80129d2:	b480      	push	{r7}
 80129d4:	b083      	sub	sp, #12
 80129d6:	af00      	add	r7, sp, #0
 80129d8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	601a      	str	r2, [r3, #0]
}
 80129e6:	bf00      	nop
 80129e8:	370c      	adds	r7, #12
 80129ea:	46bd      	mov	sp, r7
 80129ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f0:	4770      	bx	lr

080129f2 <LL_C1_IPCC_EnableIT_RXO>:
{
 80129f2:	b480      	push	{r7}
 80129f4:	b083      	sub	sp, #12
 80129f6:	af00      	add	r7, sp, #0
 80129f8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	f043 0201 	orr.w	r2, r3, #1
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	601a      	str	r2, [r3, #0]
}
 8012a06:	bf00      	nop
 8012a08:	370c      	adds	r7, #12
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a10:	4770      	bx	lr

08012a12 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8012a12:	b480      	push	{r7}
 8012a14:	b083      	sub	sp, #12
 8012a16:	af00      	add	r7, sp, #0
 8012a18:	6078      	str	r0, [r7, #4]
 8012a1a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	685a      	ldr	r2, [r3, #4]
 8012a20:	683b      	ldr	r3, [r7, #0]
 8012a22:	041b      	lsls	r3, r3, #16
 8012a24:	43db      	mvns	r3, r3
 8012a26:	401a      	ands	r2, r3
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	605a      	str	r2, [r3, #4]
}
 8012a2c:	bf00      	nop
 8012a2e:	370c      	adds	r7, #12
 8012a30:	46bd      	mov	sp, r7
 8012a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a36:	4770      	bx	lr

08012a38 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8012a38:	b480      	push	{r7}
 8012a3a:	b083      	sub	sp, #12
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
 8012a40:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	685a      	ldr	r2, [r3, #4]
 8012a46:	683b      	ldr	r3, [r7, #0]
 8012a48:	041b      	lsls	r3, r3, #16
 8012a4a:	431a      	orrs	r2, r3
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	605a      	str	r2, [r3, #4]
}
 8012a50:	bf00      	nop
 8012a52:	370c      	adds	r7, #12
 8012a54:	46bd      	mov	sp, r7
 8012a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5a:	4770      	bx	lr

08012a5c <LL_C1_IPCC_EnableReceiveChannel>:
{
 8012a5c:	b480      	push	{r7}
 8012a5e:	b083      	sub	sp, #12
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
 8012a64:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	685a      	ldr	r2, [r3, #4]
 8012a6a:	683b      	ldr	r3, [r7, #0]
 8012a6c:	43db      	mvns	r3, r3
 8012a6e:	401a      	ands	r2, r3
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	605a      	str	r2, [r3, #4]
}
 8012a74:	bf00      	nop
 8012a76:	370c      	adds	r7, #12
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a7e:	4770      	bx	lr

08012a80 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8012a80:	b480      	push	{r7}
 8012a82:	b083      	sub	sp, #12
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
 8012a88:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	683a      	ldr	r2, [r7, #0]
 8012a8e:	609a      	str	r2, [r3, #8]
}
 8012a90:	bf00      	nop
 8012a92:	370c      	adds	r7, #12
 8012a94:	46bd      	mov	sp, r7
 8012a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9a:	4770      	bx	lr

08012a9c <LL_C1_IPCC_SetFlag_CHx>:
{
 8012a9c:	b480      	push	{r7}
 8012a9e:	b083      	sub	sp, #12
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
 8012aa4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8012aa6:	683b      	ldr	r3, [r7, #0]
 8012aa8:	041a      	lsls	r2, r3, #16
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	609a      	str	r2, [r3, #8]
}
 8012aae:	bf00      	nop
 8012ab0:	370c      	adds	r7, #12
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab8:	4770      	bx	lr

08012aba <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8012aba:	b480      	push	{r7}
 8012abc:	b083      	sub	sp, #12
 8012abe:	af00      	add	r7, sp, #0
 8012ac0:	6078      	str	r0, [r7, #4]
 8012ac2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	68da      	ldr	r2, [r3, #12]
 8012ac8:	683b      	ldr	r3, [r7, #0]
 8012aca:	4013      	ands	r3, r2
 8012acc:	683a      	ldr	r2, [r7, #0]
 8012ace:	429a      	cmp	r2, r3
 8012ad0:	d101      	bne.n	8012ad6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8012ad2:	2301      	movs	r3, #1
 8012ad4:	e000      	b.n	8012ad8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8012ad6:	2300      	movs	r3, #0
}
 8012ad8:	4618      	mov	r0, r3
 8012ada:	370c      	adds	r7, #12
 8012adc:	46bd      	mov	sp, r7
 8012ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae2:	4770      	bx	lr

08012ae4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8012ae4:	b480      	push	{r7}
 8012ae6:	b083      	sub	sp, #12
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
 8012aec:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	69da      	ldr	r2, [r3, #28]
 8012af2:	683b      	ldr	r3, [r7, #0]
 8012af4:	4013      	ands	r3, r2
 8012af6:	683a      	ldr	r2, [r7, #0]
 8012af8:	429a      	cmp	r2, r3
 8012afa:	d101      	bne.n	8012b00 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8012afc:	2301      	movs	r3, #1
 8012afe:	e000      	b.n	8012b02 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8012b00:	2300      	movs	r3, #0
}
 8012b02:	4618      	mov	r0, r3
 8012b04:	370c      	adds	r7, #12
 8012b06:	46bd      	mov	sp, r7
 8012b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0c:	4770      	bx	lr
	...

08012b10 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8012b14:	2102      	movs	r1, #2
 8012b16:	4819      	ldr	r0, [pc, #100]	; (8012b7c <HW_IPCC_Rx_Handler+0x6c>)
 8012b18:	f7ff ffe4 	bl	8012ae4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d009      	beq.n	8012b36 <HW_IPCC_Rx_Handler+0x26>
 8012b22:	4b16      	ldr	r3, [pc, #88]	; (8012b7c <HW_IPCC_Rx_Handler+0x6c>)
 8012b24:	685b      	ldr	r3, [r3, #4]
 8012b26:	43db      	mvns	r3, r3
 8012b28:	f003 0302 	and.w	r3, r3, #2
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d002      	beq.n	8012b36 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8012b30:	f000 f8da 	bl	8012ce8 <HW_IPCC_SYS_EvtHandler>
 8012b34:	e01f      	b.n	8012b76 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8012b36:	2101      	movs	r1, #1
 8012b38:	4810      	ldr	r0, [pc, #64]	; (8012b7c <HW_IPCC_Rx_Handler+0x6c>)
 8012b3a:	f7ff ffd3 	bl	8012ae4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8012b3e:	4603      	mov	r3, r0
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d008      	beq.n	8012b56 <HW_IPCC_Rx_Handler+0x46>
 8012b44:	4b0d      	ldr	r3, [pc, #52]	; (8012b7c <HW_IPCC_Rx_Handler+0x6c>)
 8012b46:	685b      	ldr	r3, [r3, #4]
 8012b48:	f003 0301 	and.w	r3, r3, #1
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d102      	bne.n	8012b56 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8012b50:	f000 f88e 	bl	8012c70 <HW_IPCC_BLE_EvtHandler>
 8012b54:	e00f      	b.n	8012b76 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8012b56:	2108      	movs	r1, #8
 8012b58:	4808      	ldr	r0, [pc, #32]	; (8012b7c <HW_IPCC_Rx_Handler+0x6c>)
 8012b5a:	f7ff ffc3 	bl	8012ae4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8012b5e:	4603      	mov	r3, r0
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d009      	beq.n	8012b78 <HW_IPCC_Rx_Handler+0x68>
 8012b64:	4b05      	ldr	r3, [pc, #20]	; (8012b7c <HW_IPCC_Rx_Handler+0x6c>)
 8012b66:	685b      	ldr	r3, [r3, #4]
 8012b68:	43db      	mvns	r3, r3
 8012b6a:	f003 0308 	and.w	r3, r3, #8
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d002      	beq.n	8012b78 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8012b72:	f000 f905 	bl	8012d80 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8012b76:	bf00      	nop
 8012b78:	bf00      	nop
}
 8012b7a:	bd80      	pop	{r7, pc}
 8012b7c:	58000c00 	.word	0x58000c00

08012b80 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8012b84:	2102      	movs	r1, #2
 8012b86:	481a      	ldr	r0, [pc, #104]	; (8012bf0 <HW_IPCC_Tx_Handler+0x70>)
 8012b88:	f7ff ff97 	bl	8012aba <LL_C1_IPCC_IsActiveFlag_CHx>
 8012b8c:	4603      	mov	r3, r0
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d109      	bne.n	8012ba6 <HW_IPCC_Tx_Handler+0x26>
 8012b92:	4b17      	ldr	r3, [pc, #92]	; (8012bf0 <HW_IPCC_Tx_Handler+0x70>)
 8012b94:	685b      	ldr	r3, [r3, #4]
 8012b96:	43db      	mvns	r3, r3
 8012b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d002      	beq.n	8012ba6 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8012ba0:	f000 f896 	bl	8012cd0 <HW_IPCC_SYS_CmdEvtHandler>
 8012ba4:	e020      	b.n	8012be8 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8012ba6:	2108      	movs	r1, #8
 8012ba8:	4811      	ldr	r0, [pc, #68]	; (8012bf0 <HW_IPCC_Tx_Handler+0x70>)
 8012baa:	f7ff ff86 	bl	8012aba <LL_C1_IPCC_IsActiveFlag_CHx>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d109      	bne.n	8012bc8 <HW_IPCC_Tx_Handler+0x48>
 8012bb4:	4b0e      	ldr	r3, [pc, #56]	; (8012bf0 <HW_IPCC_Tx_Handler+0x70>)
 8012bb6:	685b      	ldr	r3, [r3, #4]
 8012bb8:	43db      	mvns	r3, r3
 8012bba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d002      	beq.n	8012bc8 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8012bc2:	f000 f8bf 	bl	8012d44 <HW_IPCC_MM_FreeBufHandler>
 8012bc6:	e00f      	b.n	8012be8 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8012bc8:	2120      	movs	r1, #32
 8012bca:	4809      	ldr	r0, [pc, #36]	; (8012bf0 <HW_IPCC_Tx_Handler+0x70>)
 8012bcc:	f7ff ff75 	bl	8012aba <LL_C1_IPCC_IsActiveFlag_CHx>
 8012bd0:	4603      	mov	r3, r0
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d109      	bne.n	8012bea <HW_IPCC_Tx_Handler+0x6a>
 8012bd6:	4b06      	ldr	r3, [pc, #24]	; (8012bf0 <HW_IPCC_Tx_Handler+0x70>)
 8012bd8:	685b      	ldr	r3, [r3, #4]
 8012bda:	43db      	mvns	r3, r3
 8012bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d002      	beq.n	8012bea <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8012be4:	f000 f850 	bl	8012c88 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8012be8:	bf00      	nop
 8012bea:	bf00      	nop
}
 8012bec:	bd80      	pop	{r7, pc}
 8012bee:	bf00      	nop
 8012bf0:	58000c00 	.word	0x58000c00

08012bf4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8012bf8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8012bfc:	f7ff fecd 	bl	801299a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8012c00:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012c04:	f7ff fe9e 	bl	8012944 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8012c08:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012c0c:	f7ff fe86 	bl	801291c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8012c10:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8012c12:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8012c14:	f7ff fe72 	bl	80128fc <LL_PWR_EnableBootC2>

  return;
 8012c18:	bf00      	nop
}
 8012c1a:	bd80      	pop	{r7, pc}

08012c1c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8012c20:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8012c24:	f7ff fea0 	bl	8012968 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8012c28:	4806      	ldr	r0, [pc, #24]	; (8012c44 <HW_IPCC_Init+0x28>)
 8012c2a:	f7ff fee2 	bl	80129f2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8012c2e:	4805      	ldr	r0, [pc, #20]	; (8012c44 <HW_IPCC_Init+0x28>)
 8012c30:	f7ff fecf 	bl	80129d2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8012c34:	202c      	movs	r0, #44	; 0x2c
 8012c36:	f7ef f8c6 	bl	8001dc6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8012c3a:	202d      	movs	r0, #45	; 0x2d
 8012c3c:	f7ef f8c3 	bl	8001dc6 <HAL_NVIC_EnableIRQ>

  return;
 8012c40:	bf00      	nop
}
 8012c42:	bd80      	pop	{r7, pc}
 8012c44:	58000c00 	.word	0x58000c00

08012c48 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8012c4c:	2101      	movs	r1, #1
 8012c4e:	4802      	ldr	r0, [pc, #8]	; (8012c58 <HW_IPCC_BLE_Init+0x10>)
 8012c50:	f7ff ff04 	bl	8012a5c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012c54:	bf00      	nop
}
 8012c56:	bd80      	pop	{r7, pc}
 8012c58:	58000c00 	.word	0x58000c00

08012c5c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8012c60:	2101      	movs	r1, #1
 8012c62:	4802      	ldr	r0, [pc, #8]	; (8012c6c <HW_IPCC_BLE_SendCmd+0x10>)
 8012c64:	f7ff ff1a 	bl	8012a9c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8012c68:	bf00      	nop
}
 8012c6a:	bd80      	pop	{r7, pc}
 8012c6c:	58000c00 	.word	0x58000c00

08012c70 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8012c74:	f7fe ffc8 	bl	8011c08 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8012c78:	2101      	movs	r1, #1
 8012c7a:	4802      	ldr	r0, [pc, #8]	; (8012c84 <HW_IPCC_BLE_EvtHandler+0x14>)
 8012c7c:	f7ff ff00 	bl	8012a80 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012c80:	bf00      	nop
}
 8012c82:	bd80      	pop	{r7, pc}
 8012c84:	58000c00 	.word	0x58000c00

08012c88 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8012c8c:	2120      	movs	r1, #32
 8012c8e:	4803      	ldr	r0, [pc, #12]	; (8012c9c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8012c90:	f7ff fed2 	bl	8012a38 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8012c94:	f7fe ffe8 	bl	8011c68 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8012c98:	bf00      	nop
}
 8012c9a:	bd80      	pop	{r7, pc}
 8012c9c:	58000c00 	.word	0x58000c00

08012ca0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8012ca4:	2102      	movs	r1, #2
 8012ca6:	4802      	ldr	r0, [pc, #8]	; (8012cb0 <HW_IPCC_SYS_Init+0x10>)
 8012ca8:	f7ff fed8 	bl	8012a5c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012cac:	bf00      	nop
}
 8012cae:	bd80      	pop	{r7, pc}
 8012cb0:	58000c00 	.word	0x58000c00

08012cb4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012cb8:	2102      	movs	r1, #2
 8012cba:	4804      	ldr	r0, [pc, #16]	; (8012ccc <HW_IPCC_SYS_SendCmd+0x18>)
 8012cbc:	f7ff feee 	bl	8012a9c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012cc0:	2102      	movs	r1, #2
 8012cc2:	4802      	ldr	r0, [pc, #8]	; (8012ccc <HW_IPCC_SYS_SendCmd+0x18>)
 8012cc4:	f7ff fea5 	bl	8012a12 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8012cc8:	bf00      	nop
}
 8012cca:	bd80      	pop	{r7, pc}
 8012ccc:	58000c00 	.word	0x58000c00

08012cd0 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012cd4:	2102      	movs	r1, #2
 8012cd6:	4803      	ldr	r0, [pc, #12]	; (8012ce4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8012cd8:	f7ff feae 	bl	8012a38 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8012cdc:	f7ff f814 	bl	8011d08 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8012ce0:	bf00      	nop
}
 8012ce2:	bd80      	pop	{r7, pc}
 8012ce4:	58000c00 	.word	0x58000c00

08012ce8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8012cec:	f7ff f822 	bl	8011d34 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8012cf0:	2102      	movs	r1, #2
 8012cf2:	4802      	ldr	r0, [pc, #8]	; (8012cfc <HW_IPCC_SYS_EvtHandler+0x14>)
 8012cf4:	f7ff fec4 	bl	8012a80 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012cf8:	bf00      	nop
}
 8012cfa:	bd80      	pop	{r7, pc}
 8012cfc:	58000c00 	.word	0x58000c00

08012d00 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b082      	sub	sp, #8
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8012d08:	2108      	movs	r1, #8
 8012d0a:	480c      	ldr	r0, [pc, #48]	; (8012d3c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8012d0c:	f7ff fed5 	bl	8012aba <LL_C1_IPCC_IsActiveFlag_CHx>
 8012d10:	4603      	mov	r3, r0
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d007      	beq.n	8012d26 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8012d16:	4a0a      	ldr	r2, [pc, #40]	; (8012d40 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012d1c:	2108      	movs	r1, #8
 8012d1e:	4807      	ldr	r0, [pc, #28]	; (8012d3c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8012d20:	f7ff fe77 	bl	8012a12 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8012d24:	e006      	b.n	8012d34 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012d2a:	2108      	movs	r1, #8
 8012d2c:	4803      	ldr	r0, [pc, #12]	; (8012d3c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8012d2e:	f7ff feb5 	bl	8012a9c <LL_C1_IPCC_SetFlag_CHx>
  return;
 8012d32:	bf00      	nop
}
 8012d34:	3708      	adds	r7, #8
 8012d36:	46bd      	mov	sp, r7
 8012d38:	bd80      	pop	{r7, pc}
 8012d3a:	bf00      	nop
 8012d3c:	58000c00 	.word	0x58000c00
 8012d40:	200008b8 	.word	0x200008b8

08012d44 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012d48:	2108      	movs	r1, #8
 8012d4a:	4806      	ldr	r0, [pc, #24]	; (8012d64 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8012d4c:	f7ff fe74 	bl	8012a38 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8012d50:	4b05      	ldr	r3, [pc, #20]	; (8012d68 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012d56:	2108      	movs	r1, #8
 8012d58:	4802      	ldr	r0, [pc, #8]	; (8012d64 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8012d5a:	f7ff fe9f 	bl	8012a9c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8012d5e:	bf00      	nop
}
 8012d60:	bd80      	pop	{r7, pc}
 8012d62:	bf00      	nop
 8012d64:	58000c00 	.word	0x58000c00
 8012d68:	200008b8 	.word	0x200008b8

08012d6c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8012d70:	2108      	movs	r1, #8
 8012d72:	4802      	ldr	r0, [pc, #8]	; (8012d7c <HW_IPCC_TRACES_Init+0x10>)
 8012d74:	f7ff fe72 	bl	8012a5c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012d78:	bf00      	nop
}
 8012d7a:	bd80      	pop	{r7, pc}
 8012d7c:	58000c00 	.word	0x58000c00

08012d80 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8012d80:	b580      	push	{r7, lr}
 8012d82:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8012d84:	f7ff f87e 	bl	8011e84 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8012d88:	2108      	movs	r1, #8
 8012d8a:	4802      	ldr	r0, [pc, #8]	; (8012d94 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8012d8c:	f7ff fe78 	bl	8012a80 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012d90:	bf00      	nop
}
 8012d92:	bd80      	pop	{r7, pc}
 8012d94:	58000c00 	.word	0x58000c00

08012d98 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	4912      	ldr	r1, [pc, #72]	; (8012de8 <MX_USB_Device_Init+0x50>)
 8012da0:	4812      	ldr	r0, [pc, #72]	; (8012dec <MX_USB_Device_Init+0x54>)
 8012da2:	f7fb ffb5 	bl	800ed10 <USBD_Init>
 8012da6:	4603      	mov	r3, r0
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d001      	beq.n	8012db0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8012dac:	f7ee fbe6 	bl	800157c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8012db0:	490f      	ldr	r1, [pc, #60]	; (8012df0 <MX_USB_Device_Init+0x58>)
 8012db2:	480e      	ldr	r0, [pc, #56]	; (8012dec <MX_USB_Device_Init+0x54>)
 8012db4:	f7fb ffdc 	bl	800ed70 <USBD_RegisterClass>
 8012db8:	4603      	mov	r3, r0
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d001      	beq.n	8012dc2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8012dbe:	f7ee fbdd 	bl	800157c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8012dc2:	490c      	ldr	r1, [pc, #48]	; (8012df4 <MX_USB_Device_Init+0x5c>)
 8012dc4:	4809      	ldr	r0, [pc, #36]	; (8012dec <MX_USB_Device_Init+0x54>)
 8012dc6:	f7fb fefd 	bl	800ebc4 <USBD_CDC_RegisterInterface>
 8012dca:	4603      	mov	r3, r0
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d001      	beq.n	8012dd4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8012dd0:	f7ee fbd4 	bl	800157c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8012dd4:	4805      	ldr	r0, [pc, #20]	; (8012dec <MX_USB_Device_Init+0x54>)
 8012dd6:	f7fb fff2 	bl	800edbe <USBD_Start>
 8012dda:	4603      	mov	r3, r0
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d001      	beq.n	8012de4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8012de0:	f7ee fbcc 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8012de4:	bf00      	nop
 8012de6:	bd80      	pop	{r7, pc}
 8012de8:	20000400 	.word	0x20000400
 8012dec:	200008bc 	.word	0x200008bc
 8012df0:	200002dc 	.word	0x200002dc
 8012df4:	200003ec 	.word	0x200003ec

08012df8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012df8:	b580      	push	{r7, lr}
 8012dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	4905      	ldr	r1, [pc, #20]	; (8012e14 <CDC_Init_FS+0x1c>)
 8012e00:	4805      	ldr	r0, [pc, #20]	; (8012e18 <CDC_Init_FS+0x20>)
 8012e02:	f7fb fef4 	bl	800ebee <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012e06:	4905      	ldr	r1, [pc, #20]	; (8012e1c <CDC_Init_FS+0x24>)
 8012e08:	4803      	ldr	r0, [pc, #12]	; (8012e18 <CDC_Init_FS+0x20>)
 8012e0a:	f7fb ff0e 	bl	800ec2a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012e0e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012e10:	4618      	mov	r0, r3
 8012e12:	bd80      	pop	{r7, pc}
 8012e14:	2000138c 	.word	0x2000138c
 8012e18:	200008bc 	.word	0x200008bc
 8012e1c:	20000b8c 	.word	0x20000b8c

08012e20 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012e20:	b480      	push	{r7}
 8012e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012e24:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012e26:	4618      	mov	r0, r3
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e2e:	4770      	bx	lr

08012e30 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012e30:	b480      	push	{r7}
 8012e32:	b083      	sub	sp, #12
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	4603      	mov	r3, r0
 8012e38:	6039      	str	r1, [r7, #0]
 8012e3a:	71fb      	strb	r3, [r7, #7]
 8012e3c:	4613      	mov	r3, r2
 8012e3e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012e40:	79fb      	ldrb	r3, [r7, #7]
 8012e42:	2b23      	cmp	r3, #35	; 0x23
 8012e44:	d84a      	bhi.n	8012edc <CDC_Control_FS+0xac>
 8012e46:	a201      	add	r2, pc, #4	; (adr r2, 8012e4c <CDC_Control_FS+0x1c>)
 8012e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e4c:	08012edd 	.word	0x08012edd
 8012e50:	08012edd 	.word	0x08012edd
 8012e54:	08012edd 	.word	0x08012edd
 8012e58:	08012edd 	.word	0x08012edd
 8012e5c:	08012edd 	.word	0x08012edd
 8012e60:	08012edd 	.word	0x08012edd
 8012e64:	08012edd 	.word	0x08012edd
 8012e68:	08012edd 	.word	0x08012edd
 8012e6c:	08012edd 	.word	0x08012edd
 8012e70:	08012edd 	.word	0x08012edd
 8012e74:	08012edd 	.word	0x08012edd
 8012e78:	08012edd 	.word	0x08012edd
 8012e7c:	08012edd 	.word	0x08012edd
 8012e80:	08012edd 	.word	0x08012edd
 8012e84:	08012edd 	.word	0x08012edd
 8012e88:	08012edd 	.word	0x08012edd
 8012e8c:	08012edd 	.word	0x08012edd
 8012e90:	08012edd 	.word	0x08012edd
 8012e94:	08012edd 	.word	0x08012edd
 8012e98:	08012edd 	.word	0x08012edd
 8012e9c:	08012edd 	.word	0x08012edd
 8012ea0:	08012edd 	.word	0x08012edd
 8012ea4:	08012edd 	.word	0x08012edd
 8012ea8:	08012edd 	.word	0x08012edd
 8012eac:	08012edd 	.word	0x08012edd
 8012eb0:	08012edd 	.word	0x08012edd
 8012eb4:	08012edd 	.word	0x08012edd
 8012eb8:	08012edd 	.word	0x08012edd
 8012ebc:	08012edd 	.word	0x08012edd
 8012ec0:	08012edd 	.word	0x08012edd
 8012ec4:	08012edd 	.word	0x08012edd
 8012ec8:	08012edd 	.word	0x08012edd
 8012ecc:	08012edd 	.word	0x08012edd
 8012ed0:	08012edd 	.word	0x08012edd
 8012ed4:	08012edd 	.word	0x08012edd
 8012ed8:	08012edd 	.word	0x08012edd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012edc:	bf00      	nop
  }

  return (USBD_OK);
 8012ede:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	370c      	adds	r7, #12
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eea:	4770      	bx	lr

08012eec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b082      	sub	sp, #8
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
 8012ef4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012ef6:	6879      	ldr	r1, [r7, #4]
 8012ef8:	4805      	ldr	r0, [pc, #20]	; (8012f10 <CDC_Receive_FS+0x24>)
 8012efa:	f7fb fe96 	bl	800ec2a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012efe:	4804      	ldr	r0, [pc, #16]	; (8012f10 <CDC_Receive_FS+0x24>)
 8012f00:	f7fb fedc 	bl	800ecbc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012f04:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012f06:	4618      	mov	r0, r3
 8012f08:	3708      	adds	r7, #8
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bd80      	pop	{r7, pc}
 8012f0e:	bf00      	nop
 8012f10:	200008bc 	.word	0x200008bc

08012f14 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b084      	sub	sp, #16
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
 8012f1c:	460b      	mov	r3, r1
 8012f1e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012f20:	2300      	movs	r3, #0
 8012f22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012f24:	4b0d      	ldr	r3, [pc, #52]	; (8012f5c <CDC_Transmit_FS+0x48>)
 8012f26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012f2a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012f2c:	68bb      	ldr	r3, [r7, #8]
 8012f2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d001      	beq.n	8012f3a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012f36:	2301      	movs	r3, #1
 8012f38:	e00b      	b.n	8012f52 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012f3a:	887b      	ldrh	r3, [r7, #2]
 8012f3c:	461a      	mov	r2, r3
 8012f3e:	6879      	ldr	r1, [r7, #4]
 8012f40:	4806      	ldr	r0, [pc, #24]	; (8012f5c <CDC_Transmit_FS+0x48>)
 8012f42:	f7fb fe54 	bl	800ebee <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012f46:	4805      	ldr	r0, [pc, #20]	; (8012f5c <CDC_Transmit_FS+0x48>)
 8012f48:	f7fb fe88 	bl	800ec5c <USBD_CDC_TransmitPacket>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f52:	4618      	mov	r0, r3
 8012f54:	3710      	adds	r7, #16
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bd80      	pop	{r7, pc}
 8012f5a:	bf00      	nop
 8012f5c:	200008bc 	.word	0x200008bc

08012f60 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012f60:	b480      	push	{r7}
 8012f62:	b087      	sub	sp, #28
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	60f8      	str	r0, [r7, #12]
 8012f68:	60b9      	str	r1, [r7, #8]
 8012f6a:	4613      	mov	r3, r2
 8012f6c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012f6e:	2300      	movs	r3, #0
 8012f70:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012f72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012f76:	4618      	mov	r0, r3
 8012f78:	371c      	adds	r7, #28
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f80:	4770      	bx	lr
	...

08012f84 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012f84:	b480      	push	{r7}
 8012f86:	b083      	sub	sp, #12
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	6039      	str	r1, [r7, #0]
 8012f8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8012f90:	683b      	ldr	r3, [r7, #0]
 8012f92:	2212      	movs	r2, #18
 8012f94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8012f96:	4b03      	ldr	r3, [pc, #12]	; (8012fa4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8012f98:	4618      	mov	r0, r3
 8012f9a:	370c      	adds	r7, #12
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa2:	4770      	bx	lr
 8012fa4:	20000420 	.word	0x20000420

08012fa8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012fa8:	b480      	push	{r7}
 8012faa:	b083      	sub	sp, #12
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	4603      	mov	r3, r0
 8012fb0:	6039      	str	r1, [r7, #0]
 8012fb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012fb4:	683b      	ldr	r3, [r7, #0]
 8012fb6:	2204      	movs	r2, #4
 8012fb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012fba:	4b03      	ldr	r3, [pc, #12]	; (8012fc8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	370c      	adds	r7, #12
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc6:	4770      	bx	lr
 8012fc8:	20000434 	.word	0x20000434

08012fcc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b082      	sub	sp, #8
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	6039      	str	r1, [r7, #0]
 8012fd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012fd8:	79fb      	ldrb	r3, [r7, #7]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d105      	bne.n	8012fea <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012fde:	683a      	ldr	r2, [r7, #0]
 8012fe0:	4907      	ldr	r1, [pc, #28]	; (8013000 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012fe2:	4808      	ldr	r0, [pc, #32]	; (8013004 <USBD_CDC_ProductStrDescriptor+0x38>)
 8012fe4:	f7fc fed3 	bl	800fd8e <USBD_GetString>
 8012fe8:	e004      	b.n	8012ff4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012fea:	683a      	ldr	r2, [r7, #0]
 8012fec:	4904      	ldr	r1, [pc, #16]	; (8013000 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012fee:	4805      	ldr	r0, [pc, #20]	; (8013004 <USBD_CDC_ProductStrDescriptor+0x38>)
 8012ff0:	f7fc fecd 	bl	800fd8e <USBD_GetString>
  }
  return USBD_StrDesc;
 8012ff4:	4b02      	ldr	r3, [pc, #8]	; (8013000 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	3708      	adds	r7, #8
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}
 8012ffe:	bf00      	nop
 8013000:	20001b8c 	.word	0x20001b8c
 8013004:	08014c18 	.word	0x08014c18

08013008 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b082      	sub	sp, #8
 801300c:	af00      	add	r7, sp, #0
 801300e:	4603      	mov	r3, r0
 8013010:	6039      	str	r1, [r7, #0]
 8013012:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013014:	683a      	ldr	r2, [r7, #0]
 8013016:	4904      	ldr	r1, [pc, #16]	; (8013028 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8013018:	4804      	ldr	r0, [pc, #16]	; (801302c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801301a:	f7fc feb8 	bl	800fd8e <USBD_GetString>
  return USBD_StrDesc;
 801301e:	4b02      	ldr	r3, [pc, #8]	; (8013028 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8013020:	4618      	mov	r0, r3
 8013022:	3708      	adds	r7, #8
 8013024:	46bd      	mov	sp, r7
 8013026:	bd80      	pop	{r7, pc}
 8013028:	20001b8c 	.word	0x20001b8c
 801302c:	08014c30 	.word	0x08014c30

08013030 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b082      	sub	sp, #8
 8013034:	af00      	add	r7, sp, #0
 8013036:	4603      	mov	r3, r0
 8013038:	6039      	str	r1, [r7, #0]
 801303a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801303c:	683b      	ldr	r3, [r7, #0]
 801303e:	221a      	movs	r2, #26
 8013040:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013042:	f000 f843 	bl	80130cc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8013046:	4b02      	ldr	r3, [pc, #8]	; (8013050 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8013048:	4618      	mov	r0, r3
 801304a:	3708      	adds	r7, #8
 801304c:	46bd      	mov	sp, r7
 801304e:	bd80      	pop	{r7, pc}
 8013050:	20000438 	.word	0x20000438

08013054 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b082      	sub	sp, #8
 8013058:	af00      	add	r7, sp, #0
 801305a:	4603      	mov	r3, r0
 801305c:	6039      	str	r1, [r7, #0]
 801305e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013060:	79fb      	ldrb	r3, [r7, #7]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d105      	bne.n	8013072 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8013066:	683a      	ldr	r2, [r7, #0]
 8013068:	4907      	ldr	r1, [pc, #28]	; (8013088 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801306a:	4808      	ldr	r0, [pc, #32]	; (801308c <USBD_CDC_ConfigStrDescriptor+0x38>)
 801306c:	f7fc fe8f 	bl	800fd8e <USBD_GetString>
 8013070:	e004      	b.n	801307c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8013072:	683a      	ldr	r2, [r7, #0]
 8013074:	4904      	ldr	r1, [pc, #16]	; (8013088 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8013076:	4805      	ldr	r0, [pc, #20]	; (801308c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8013078:	f7fc fe89 	bl	800fd8e <USBD_GetString>
  }
  return USBD_StrDesc;
 801307c:	4b02      	ldr	r3, [pc, #8]	; (8013088 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801307e:	4618      	mov	r0, r3
 8013080:	3708      	adds	r7, #8
 8013082:	46bd      	mov	sp, r7
 8013084:	bd80      	pop	{r7, pc}
 8013086:	bf00      	nop
 8013088:	20001b8c 	.word	0x20001b8c
 801308c:	08014c44 	.word	0x08014c44

08013090 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b082      	sub	sp, #8
 8013094:	af00      	add	r7, sp, #0
 8013096:	4603      	mov	r3, r0
 8013098:	6039      	str	r1, [r7, #0]
 801309a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801309c:	79fb      	ldrb	r3, [r7, #7]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d105      	bne.n	80130ae <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80130a2:	683a      	ldr	r2, [r7, #0]
 80130a4:	4907      	ldr	r1, [pc, #28]	; (80130c4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80130a6:	4808      	ldr	r0, [pc, #32]	; (80130c8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80130a8:	f7fc fe71 	bl	800fd8e <USBD_GetString>
 80130ac:	e004      	b.n	80130b8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80130ae:	683a      	ldr	r2, [r7, #0]
 80130b0:	4904      	ldr	r1, [pc, #16]	; (80130c4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80130b2:	4805      	ldr	r0, [pc, #20]	; (80130c8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80130b4:	f7fc fe6b 	bl	800fd8e <USBD_GetString>
  }
  return USBD_StrDesc;
 80130b8:	4b02      	ldr	r3, [pc, #8]	; (80130c4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80130ba:	4618      	mov	r0, r3
 80130bc:	3708      	adds	r7, #8
 80130be:	46bd      	mov	sp, r7
 80130c0:	bd80      	pop	{r7, pc}
 80130c2:	bf00      	nop
 80130c4:	20001b8c 	.word	0x20001b8c
 80130c8:	08014c50 	.word	0x08014c50

080130cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b084      	sub	sp, #16
 80130d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80130d2:	4b0f      	ldr	r3, [pc, #60]	; (8013110 <Get_SerialNum+0x44>)
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80130d8:	4b0e      	ldr	r3, [pc, #56]	; (8013114 <Get_SerialNum+0x48>)
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80130de:	4b0e      	ldr	r3, [pc, #56]	; (8013118 <Get_SerialNum+0x4c>)
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80130e4:	68fa      	ldr	r2, [r7, #12]
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	4413      	add	r3, r2
 80130ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d009      	beq.n	8013106 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80130f2:	2208      	movs	r2, #8
 80130f4:	4909      	ldr	r1, [pc, #36]	; (801311c <Get_SerialNum+0x50>)
 80130f6:	68f8      	ldr	r0, [r7, #12]
 80130f8:	f000 f814 	bl	8013124 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80130fc:	2204      	movs	r2, #4
 80130fe:	4908      	ldr	r1, [pc, #32]	; (8013120 <Get_SerialNum+0x54>)
 8013100:	68b8      	ldr	r0, [r7, #8]
 8013102:	f000 f80f 	bl	8013124 <IntToUnicode>
  }
}
 8013106:	bf00      	nop
 8013108:	3710      	adds	r7, #16
 801310a:	46bd      	mov	sp, r7
 801310c:	bd80      	pop	{r7, pc}
 801310e:	bf00      	nop
 8013110:	1fff7590 	.word	0x1fff7590
 8013114:	1fff7594 	.word	0x1fff7594
 8013118:	1fff7598 	.word	0x1fff7598
 801311c:	2000043a 	.word	0x2000043a
 8013120:	2000044a 	.word	0x2000044a

08013124 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013124:	b480      	push	{r7}
 8013126:	b087      	sub	sp, #28
 8013128:	af00      	add	r7, sp, #0
 801312a:	60f8      	str	r0, [r7, #12]
 801312c:	60b9      	str	r1, [r7, #8]
 801312e:	4613      	mov	r3, r2
 8013130:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013132:	2300      	movs	r3, #0
 8013134:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013136:	2300      	movs	r3, #0
 8013138:	75fb      	strb	r3, [r7, #23]
 801313a:	e027      	b.n	801318c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	0f1b      	lsrs	r3, r3, #28
 8013140:	2b09      	cmp	r3, #9
 8013142:	d80b      	bhi.n	801315c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	0f1b      	lsrs	r3, r3, #28
 8013148:	b2da      	uxtb	r2, r3
 801314a:	7dfb      	ldrb	r3, [r7, #23]
 801314c:	005b      	lsls	r3, r3, #1
 801314e:	4619      	mov	r1, r3
 8013150:	68bb      	ldr	r3, [r7, #8]
 8013152:	440b      	add	r3, r1
 8013154:	3230      	adds	r2, #48	; 0x30
 8013156:	b2d2      	uxtb	r2, r2
 8013158:	701a      	strb	r2, [r3, #0]
 801315a:	e00a      	b.n	8013172 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	0f1b      	lsrs	r3, r3, #28
 8013160:	b2da      	uxtb	r2, r3
 8013162:	7dfb      	ldrb	r3, [r7, #23]
 8013164:	005b      	lsls	r3, r3, #1
 8013166:	4619      	mov	r1, r3
 8013168:	68bb      	ldr	r3, [r7, #8]
 801316a:	440b      	add	r3, r1
 801316c:	3237      	adds	r2, #55	; 0x37
 801316e:	b2d2      	uxtb	r2, r2
 8013170:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	011b      	lsls	r3, r3, #4
 8013176:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013178:	7dfb      	ldrb	r3, [r7, #23]
 801317a:	005b      	lsls	r3, r3, #1
 801317c:	3301      	adds	r3, #1
 801317e:	68ba      	ldr	r2, [r7, #8]
 8013180:	4413      	add	r3, r2
 8013182:	2200      	movs	r2, #0
 8013184:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8013186:	7dfb      	ldrb	r3, [r7, #23]
 8013188:	3301      	adds	r3, #1
 801318a:	75fb      	strb	r3, [r7, #23]
 801318c:	7dfa      	ldrb	r2, [r7, #23]
 801318e:	79fb      	ldrb	r3, [r7, #7]
 8013190:	429a      	cmp	r2, r3
 8013192:	d3d3      	bcc.n	801313c <IntToUnicode+0x18>
  }
}
 8013194:	bf00      	nop
 8013196:	bf00      	nop
 8013198:	371c      	adds	r7, #28
 801319a:	46bd      	mov	sp, r7
 801319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a0:	4770      	bx	lr

080131a2 <LL_AHB2_GRP1_EnableClock>:
{
 80131a2:	b480      	push	{r7}
 80131a4:	b085      	sub	sp, #20
 80131a6:	af00      	add	r7, sp, #0
 80131a8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80131aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80131ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80131b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	4313      	orrs	r3, r2
 80131b8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80131ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80131be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	4013      	ands	r3, r2
 80131c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80131c6:	68fb      	ldr	r3, [r7, #12]
}
 80131c8:	bf00      	nop
 80131ca:	3714      	adds	r7, #20
 80131cc:	46bd      	mov	sp, r7
 80131ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d2:	4770      	bx	lr

080131d4 <LL_APB1_GRP1_EnableClock>:
{
 80131d4:	b480      	push	{r7}
 80131d6:	b085      	sub	sp, #20
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80131dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80131e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80131e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	4313      	orrs	r3, r2
 80131ea:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80131ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80131f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	4013      	ands	r3, r2
 80131f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80131f8:	68fb      	ldr	r3, [r7, #12]
}
 80131fa:	bf00      	nop
 80131fc:	3714      	adds	r7, #20
 80131fe:	46bd      	mov	sp, r7
 8013200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013204:	4770      	bx	lr
	...

08013208 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013208:	b580      	push	{r7, lr}
 801320a:	b09c      	sub	sp, #112	; 0x70
 801320c:	af00      	add	r7, sp, #0
 801320e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013210:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013214:	2200      	movs	r2, #0
 8013216:	601a      	str	r2, [r3, #0]
 8013218:	605a      	str	r2, [r3, #4]
 801321a:	609a      	str	r2, [r3, #8]
 801321c:	60da      	str	r2, [r3, #12]
 801321e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013220:	f107 030c 	add.w	r3, r7, #12
 8013224:	2250      	movs	r2, #80	; 0x50
 8013226:	2100      	movs	r1, #0
 8013228:	4618      	mov	r0, r3
 801322a:	f000 fdc1 	bl	8013db0 <memset>
  if(pcdHandle->Instance==USB)
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	4a1b      	ldr	r2, [pc, #108]	; (80132a0 <HAL_PCD_MspInit+0x98>)
 8013234:	4293      	cmp	r3, r2
 8013236:	d12f      	bne.n	8013298 <HAL_PCD_MspInit+0x90>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8013238:	f44f 7380 	mov.w	r3, #256	; 0x100
 801323c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801323e:	2300      	movs	r3, #0
 8013240:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013242:	f107 030c 	add.w	r3, r7, #12
 8013246:	4618      	mov	r0, r3
 8013248:	f7f2 fe55 	bl	8005ef6 <HAL_RCCEx_PeriphCLKConfig>
 801324c:	4603      	mov	r3, r0
 801324e:	2b00      	cmp	r3, #0
 8013250:	d001      	beq.n	8013256 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8013252:	f7ee f993 	bl	800157c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013256:	2001      	movs	r0, #1
 8013258:	f7ff ffa3 	bl	80131a2 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801325c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8013260:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013262:	2302      	movs	r3, #2
 8013264:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013266:	2300      	movs	r3, #0
 8013268:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801326a:	2300      	movs	r3, #0
 801326c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 801326e:	230a      	movs	r3, #10
 8013270:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013272:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013276:	4619      	mov	r1, r3
 8013278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801327c:	f7ee fdda 	bl	8001e34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8013280:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8013284:	f7ff ffa6 	bl	80131d4 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8013288:	2200      	movs	r2, #0
 801328a:	2100      	movs	r1, #0
 801328c:	2014      	movs	r0, #20
 801328e:	f7ee fd80 	bl	8001d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8013292:	2014      	movs	r0, #20
 8013294:	f7ee fd97 	bl	8001dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8013298:	bf00      	nop
 801329a:	3770      	adds	r7, #112	; 0x70
 801329c:	46bd      	mov	sp, r7
 801329e:	bd80      	pop	{r7, pc}
 80132a0:	40006800 	.word	0x40006800

080132a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	b082      	sub	sp, #8
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80132b8:	4619      	mov	r1, r3
 80132ba:	4610      	mov	r0, r2
 80132bc:	f7fb fdca 	bl	800ee54 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80132c0:	bf00      	nop
 80132c2:	3708      	adds	r7, #8
 80132c4:	46bd      	mov	sp, r7
 80132c6:	bd80      	pop	{r7, pc}

080132c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b082      	sub	sp, #8
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
 80132d0:	460b      	mov	r3, r1
 80132d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 80132da:	78fa      	ldrb	r2, [r7, #3]
 80132dc:	6879      	ldr	r1, [r7, #4]
 80132de:	4613      	mov	r3, r2
 80132e0:	009b      	lsls	r3, r3, #2
 80132e2:	4413      	add	r3, r2
 80132e4:	00db      	lsls	r3, r3, #3
 80132e6:	440b      	add	r3, r1
 80132e8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80132ec:	681a      	ldr	r2, [r3, #0]
 80132ee:	78fb      	ldrb	r3, [r7, #3]
 80132f0:	4619      	mov	r1, r3
 80132f2:	f7fb fe04 	bl	800eefe <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80132f6:	bf00      	nop
 80132f8:	3708      	adds	r7, #8
 80132fa:	46bd      	mov	sp, r7
 80132fc:	bd80      	pop	{r7, pc}

080132fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132fe:	b580      	push	{r7, lr}
 8013300:	b082      	sub	sp, #8
 8013302:	af00      	add	r7, sp, #0
 8013304:	6078      	str	r0, [r7, #4]
 8013306:	460b      	mov	r3, r1
 8013308:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8013310:	78fa      	ldrb	r2, [r7, #3]
 8013312:	6879      	ldr	r1, [r7, #4]
 8013314:	4613      	mov	r3, r2
 8013316:	009b      	lsls	r3, r3, #2
 8013318:	4413      	add	r3, r2
 801331a:	00db      	lsls	r3, r3, #3
 801331c:	440b      	add	r3, r1
 801331e:	3340      	adds	r3, #64	; 0x40
 8013320:	681a      	ldr	r2, [r3, #0]
 8013322:	78fb      	ldrb	r3, [r7, #3]
 8013324:	4619      	mov	r1, r3
 8013326:	f7fb fe4d 	bl	800efc4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801332a:	bf00      	nop
 801332c:	3708      	adds	r7, #8
 801332e:	46bd      	mov	sp, r7
 8013330:	bd80      	pop	{r7, pc}

08013332 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013332:	b580      	push	{r7, lr}
 8013334:	b082      	sub	sp, #8
 8013336:	af00      	add	r7, sp, #0
 8013338:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8013340:	4618      	mov	r0, r3
 8013342:	f7fb ff61 	bl	800f208 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8013346:	bf00      	nop
 8013348:	3708      	adds	r7, #8
 801334a:	46bd      	mov	sp, r7
 801334c:	bd80      	pop	{r7, pc}

0801334e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801334e:	b580      	push	{r7, lr}
 8013350:	b084      	sub	sp, #16
 8013352:	af00      	add	r7, sp, #0
 8013354:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013356:	2301      	movs	r3, #1
 8013358:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	689b      	ldr	r3, [r3, #8]
 801335e:	2b02      	cmp	r3, #2
 8013360:	d001      	beq.n	8013366 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8013362:	f7ee f90b 	bl	800157c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 801336c:	7bfa      	ldrb	r2, [r7, #15]
 801336e:	4611      	mov	r1, r2
 8013370:	4618      	mov	r0, r3
 8013372:	f7fb ff0b 	bl	800f18c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 801337c:	4618      	mov	r0, r3
 801337e:	f7fb feb7 	bl	800f0f0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8013382:	bf00      	nop
 8013384:	3710      	adds	r7, #16
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}
	...

0801338c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b082      	sub	sp, #8
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 801339a:	4618      	mov	r0, r3
 801339c:	f7fb ff06 	bl	800f1ac <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	699b      	ldr	r3, [r3, #24]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d005      	beq.n	80133b4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80133a8:	4b04      	ldr	r3, [pc, #16]	; (80133bc <HAL_PCD_SuspendCallback+0x30>)
 80133aa:	691b      	ldr	r3, [r3, #16]
 80133ac:	4a03      	ldr	r2, [pc, #12]	; (80133bc <HAL_PCD_SuspendCallback+0x30>)
 80133ae:	f043 0306 	orr.w	r3, r3, #6
 80133b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80133b4:	bf00      	nop
 80133b6:	3708      	adds	r7, #8
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bd80      	pop	{r7, pc}
 80133bc:	e000ed00 	.word	0xe000ed00

080133c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b082      	sub	sp, #8
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	699b      	ldr	r3, [r3, #24]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d007      	beq.n	80133e0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80133d0:	4b08      	ldr	r3, [pc, #32]	; (80133f4 <HAL_PCD_ResumeCallback+0x34>)
 80133d2:	691b      	ldr	r3, [r3, #16]
 80133d4:	4a07      	ldr	r2, [pc, #28]	; (80133f4 <HAL_PCD_ResumeCallback+0x34>)
 80133d6:	f023 0306 	bic.w	r3, r3, #6
 80133da:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80133dc:	f000 f9fc 	bl	80137d8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80133e6:	4618      	mov	r0, r3
 80133e8:	f7fb fef6 	bl	800f1d8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80133ec:	bf00      	nop
 80133ee:	3708      	adds	r7, #8
 80133f0:	46bd      	mov	sp, r7
 80133f2:	bd80      	pop	{r7, pc}
 80133f4:	e000ed00 	.word	0xe000ed00

080133f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b082      	sub	sp, #8
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8013400:	4a2c      	ldr	r2, [pc, #176]	; (80134b4 <USBD_LL_Init+0xbc>)
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	4a2a      	ldr	r2, [pc, #168]	; (80134b4 <USBD_LL_Init+0xbc>)
 801340c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8013410:	f7f1 fa3a 	bl	8004888 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8013414:	4b27      	ldr	r3, [pc, #156]	; (80134b4 <USBD_LL_Init+0xbc>)
 8013416:	4a28      	ldr	r2, [pc, #160]	; (80134b8 <USBD_LL_Init+0xc0>)
 8013418:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801341a:	4b26      	ldr	r3, [pc, #152]	; (80134b4 <USBD_LL_Init+0xbc>)
 801341c:	2208      	movs	r2, #8
 801341e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8013420:	4b24      	ldr	r3, [pc, #144]	; (80134b4 <USBD_LL_Init+0xbc>)
 8013422:	2202      	movs	r2, #2
 8013424:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013426:	4b23      	ldr	r3, [pc, #140]	; (80134b4 <USBD_LL_Init+0xbc>)
 8013428:	2202      	movs	r2, #2
 801342a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 801342c:	4b21      	ldr	r3, [pc, #132]	; (80134b4 <USBD_LL_Init+0xbc>)
 801342e:	2200      	movs	r2, #0
 8013430:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8013432:	4b20      	ldr	r3, [pc, #128]	; (80134b4 <USBD_LL_Init+0xbc>)
 8013434:	2200      	movs	r2, #0
 8013436:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8013438:	4b1e      	ldr	r3, [pc, #120]	; (80134b4 <USBD_LL_Init+0xbc>)
 801343a:	2200      	movs	r2, #0
 801343c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801343e:	4b1d      	ldr	r3, [pc, #116]	; (80134b4 <USBD_LL_Init+0xbc>)
 8013440:	2200      	movs	r2, #0
 8013442:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8013444:	481b      	ldr	r0, [pc, #108]	; (80134b4 <USBD_LL_Init+0xbc>)
 8013446:	f7ef fcaf 	bl	8002da8 <HAL_PCD_Init>
 801344a:	4603      	mov	r3, r0
 801344c:	2b00      	cmp	r3, #0
 801344e:	d001      	beq.n	8013454 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8013450:	f7ee f894 	bl	800157c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801345a:	2318      	movs	r3, #24
 801345c:	2200      	movs	r2, #0
 801345e:	2100      	movs	r1, #0
 8013460:	f7f1 f985 	bl	800476e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801346a:	2358      	movs	r3, #88	; 0x58
 801346c:	2200      	movs	r2, #0
 801346e:	2180      	movs	r1, #128	; 0x80
 8013470:	f7f1 f97d 	bl	800476e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801347a:	23c0      	movs	r3, #192	; 0xc0
 801347c:	2200      	movs	r2, #0
 801347e:	2181      	movs	r1, #129	; 0x81
 8013480:	f7f1 f975 	bl	800476e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801348a:	f44f 7388 	mov.w	r3, #272	; 0x110
 801348e:	2200      	movs	r2, #0
 8013490:	2101      	movs	r1, #1
 8013492:	f7f1 f96c 	bl	800476e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801349c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80134a0:	2200      	movs	r2, #0
 80134a2:	2182      	movs	r1, #130	; 0x82
 80134a4:	f7f1 f963 	bl	800476e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80134a8:	2300      	movs	r3, #0
}
 80134aa:	4618      	mov	r0, r3
 80134ac:	3708      	adds	r7, #8
 80134ae:	46bd      	mov	sp, r7
 80134b0:	bd80      	pop	{r7, pc}
 80134b2:	bf00      	nop
 80134b4:	20001d8c 	.word	0x20001d8c
 80134b8:	40006800 	.word	0x40006800

080134bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b084      	sub	sp, #16
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134c4:	2300      	movs	r3, #0
 80134c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134c8:	2300      	movs	r3, #0
 80134ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80134d2:	4618      	mov	r0, r3
 80134d4:	f7ef fd53 	bl	8002f7e <HAL_PCD_Start>
 80134d8:	4603      	mov	r3, r0
 80134da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80134dc:	7bfb      	ldrb	r3, [r7, #15]
 80134de:	4618      	mov	r0, r3
 80134e0:	f000 f980 	bl	80137e4 <USBD_Get_USB_Status>
 80134e4:	4603      	mov	r3, r0
 80134e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80134e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80134ea:	4618      	mov	r0, r3
 80134ec:	3710      	adds	r7, #16
 80134ee:	46bd      	mov	sp, r7
 80134f0:	bd80      	pop	{r7, pc}

080134f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80134f2:	b580      	push	{r7, lr}
 80134f4:	b084      	sub	sp, #16
 80134f6:	af00      	add	r7, sp, #0
 80134f8:	6078      	str	r0, [r7, #4]
 80134fa:	4608      	mov	r0, r1
 80134fc:	4611      	mov	r1, r2
 80134fe:	461a      	mov	r2, r3
 8013500:	4603      	mov	r3, r0
 8013502:	70fb      	strb	r3, [r7, #3]
 8013504:	460b      	mov	r3, r1
 8013506:	70bb      	strb	r3, [r7, #2]
 8013508:	4613      	mov	r3, r2
 801350a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801350c:	2300      	movs	r3, #0
 801350e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013510:	2300      	movs	r3, #0
 8013512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801351a:	78bb      	ldrb	r3, [r7, #2]
 801351c:	883a      	ldrh	r2, [r7, #0]
 801351e:	78f9      	ldrb	r1, [r7, #3]
 8013520:	f7ef fe9b 	bl	800325a <HAL_PCD_EP_Open>
 8013524:	4603      	mov	r3, r0
 8013526:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013528:	7bfb      	ldrb	r3, [r7, #15]
 801352a:	4618      	mov	r0, r3
 801352c:	f000 f95a 	bl	80137e4 <USBD_Get_USB_Status>
 8013530:	4603      	mov	r3, r0
 8013532:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013534:	7bbb      	ldrb	r3, [r7, #14]
}
 8013536:	4618      	mov	r0, r3
 8013538:	3710      	adds	r7, #16
 801353a:	46bd      	mov	sp, r7
 801353c:	bd80      	pop	{r7, pc}

0801353e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801353e:	b580      	push	{r7, lr}
 8013540:	b084      	sub	sp, #16
 8013542:	af00      	add	r7, sp, #0
 8013544:	6078      	str	r0, [r7, #4]
 8013546:	460b      	mov	r3, r1
 8013548:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801354a:	2300      	movs	r3, #0
 801354c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801354e:	2300      	movs	r3, #0
 8013550:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013558:	78fa      	ldrb	r2, [r7, #3]
 801355a:	4611      	mov	r1, r2
 801355c:	4618      	mov	r0, r3
 801355e:	f7ef fee4 	bl	800332a <HAL_PCD_EP_Close>
 8013562:	4603      	mov	r3, r0
 8013564:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013566:	7bfb      	ldrb	r3, [r7, #15]
 8013568:	4618      	mov	r0, r3
 801356a:	f000 f93b 	bl	80137e4 <USBD_Get_USB_Status>
 801356e:	4603      	mov	r3, r0
 8013570:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013572:	7bbb      	ldrb	r3, [r7, #14]
}
 8013574:	4618      	mov	r0, r3
 8013576:	3710      	adds	r7, #16
 8013578:	46bd      	mov	sp, r7
 801357a:	bd80      	pop	{r7, pc}

0801357c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b084      	sub	sp, #16
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
 8013584:	460b      	mov	r3, r1
 8013586:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013588:	2300      	movs	r3, #0
 801358a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801358c:	2300      	movs	r3, #0
 801358e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013596:	78fa      	ldrb	r2, [r7, #3]
 8013598:	4611      	mov	r1, r2
 801359a:	4618      	mov	r0, r3
 801359c:	f7ef ffa9 	bl	80034f2 <HAL_PCD_EP_SetStall>
 80135a0:	4603      	mov	r3, r0
 80135a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80135a4:	7bfb      	ldrb	r3, [r7, #15]
 80135a6:	4618      	mov	r0, r3
 80135a8:	f000 f91c 	bl	80137e4 <USBD_Get_USB_Status>
 80135ac:	4603      	mov	r3, r0
 80135ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80135b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80135b2:	4618      	mov	r0, r3
 80135b4:	3710      	adds	r7, #16
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bd80      	pop	{r7, pc}

080135ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80135ba:	b580      	push	{r7, lr}
 80135bc:	b084      	sub	sp, #16
 80135be:	af00      	add	r7, sp, #0
 80135c0:	6078      	str	r0, [r7, #4]
 80135c2:	460b      	mov	r3, r1
 80135c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80135c6:	2300      	movs	r3, #0
 80135c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80135ca:	2300      	movs	r3, #0
 80135cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80135d4:	78fa      	ldrb	r2, [r7, #3]
 80135d6:	4611      	mov	r1, r2
 80135d8:	4618      	mov	r0, r3
 80135da:	f7ef ffde 	bl	800359a <HAL_PCD_EP_ClrStall>
 80135de:	4603      	mov	r3, r0
 80135e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80135e2:	7bfb      	ldrb	r3, [r7, #15]
 80135e4:	4618      	mov	r0, r3
 80135e6:	f000 f8fd 	bl	80137e4 <USBD_Get_USB_Status>
 80135ea:	4603      	mov	r3, r0
 80135ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80135ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80135f0:	4618      	mov	r0, r3
 80135f2:	3710      	adds	r7, #16
 80135f4:	46bd      	mov	sp, r7
 80135f6:	bd80      	pop	{r7, pc}

080135f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80135f8:	b480      	push	{r7}
 80135fa:	b085      	sub	sp, #20
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
 8013600:	460b      	mov	r3, r1
 8013602:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801360a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801360c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013610:	2b00      	cmp	r3, #0
 8013612:	da0c      	bge.n	801362e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013614:	78fb      	ldrb	r3, [r7, #3]
 8013616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801361a:	68f9      	ldr	r1, [r7, #12]
 801361c:	1c5a      	adds	r2, r3, #1
 801361e:	4613      	mov	r3, r2
 8013620:	009b      	lsls	r3, r3, #2
 8013622:	4413      	add	r3, r2
 8013624:	00db      	lsls	r3, r3, #3
 8013626:	440b      	add	r3, r1
 8013628:	3306      	adds	r3, #6
 801362a:	781b      	ldrb	r3, [r3, #0]
 801362c:	e00b      	b.n	8013646 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801362e:	78fb      	ldrb	r3, [r7, #3]
 8013630:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013634:	68f9      	ldr	r1, [r7, #12]
 8013636:	4613      	mov	r3, r2
 8013638:	009b      	lsls	r3, r3, #2
 801363a:	4413      	add	r3, r2
 801363c:	00db      	lsls	r3, r3, #3
 801363e:	440b      	add	r3, r1
 8013640:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 8013644:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013646:	4618      	mov	r0, r3
 8013648:	3714      	adds	r7, #20
 801364a:	46bd      	mov	sp, r7
 801364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013650:	4770      	bx	lr

08013652 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013652:	b580      	push	{r7, lr}
 8013654:	b084      	sub	sp, #16
 8013656:	af00      	add	r7, sp, #0
 8013658:	6078      	str	r0, [r7, #4]
 801365a:	460b      	mov	r3, r1
 801365c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801365e:	2300      	movs	r3, #0
 8013660:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013662:	2300      	movs	r3, #0
 8013664:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801366c:	78fa      	ldrb	r2, [r7, #3]
 801366e:	4611      	mov	r1, r2
 8013670:	4618      	mov	r0, r3
 8013672:	f7ef fdcd 	bl	8003210 <HAL_PCD_SetAddress>
 8013676:	4603      	mov	r3, r0
 8013678:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801367a:	7bfb      	ldrb	r3, [r7, #15]
 801367c:	4618      	mov	r0, r3
 801367e:	f000 f8b1 	bl	80137e4 <USBD_Get_USB_Status>
 8013682:	4603      	mov	r3, r0
 8013684:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013686:	7bbb      	ldrb	r3, [r7, #14]
}
 8013688:	4618      	mov	r0, r3
 801368a:	3710      	adds	r7, #16
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}

08013690 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b086      	sub	sp, #24
 8013694:	af00      	add	r7, sp, #0
 8013696:	60f8      	str	r0, [r7, #12]
 8013698:	607a      	str	r2, [r7, #4]
 801369a:	603b      	str	r3, [r7, #0]
 801369c:	460b      	mov	r3, r1
 801369e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80136a0:	2300      	movs	r3, #0
 80136a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80136a4:	2300      	movs	r3, #0
 80136a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80136ae:	7af9      	ldrb	r1, [r7, #11]
 80136b0:	683b      	ldr	r3, [r7, #0]
 80136b2:	687a      	ldr	r2, [r7, #4]
 80136b4:	f7ef fed9 	bl	800346a <HAL_PCD_EP_Transmit>
 80136b8:	4603      	mov	r3, r0
 80136ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80136bc:	7dfb      	ldrb	r3, [r7, #23]
 80136be:	4618      	mov	r0, r3
 80136c0:	f000 f890 	bl	80137e4 <USBD_Get_USB_Status>
 80136c4:	4603      	mov	r3, r0
 80136c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80136c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80136ca:	4618      	mov	r0, r3
 80136cc:	3718      	adds	r7, #24
 80136ce:	46bd      	mov	sp, r7
 80136d0:	bd80      	pop	{r7, pc}

080136d2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80136d2:	b580      	push	{r7, lr}
 80136d4:	b086      	sub	sp, #24
 80136d6:	af00      	add	r7, sp, #0
 80136d8:	60f8      	str	r0, [r7, #12]
 80136da:	607a      	str	r2, [r7, #4]
 80136dc:	603b      	str	r3, [r7, #0]
 80136de:	460b      	mov	r3, r1
 80136e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80136e2:	2300      	movs	r3, #0
 80136e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80136e6:	2300      	movs	r3, #0
 80136e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80136f0:	7af9      	ldrb	r1, [r7, #11]
 80136f2:	683b      	ldr	r3, [r7, #0]
 80136f4:	687a      	ldr	r2, [r7, #4]
 80136f6:	f7ef fe62 	bl	80033be <HAL_PCD_EP_Receive>
 80136fa:	4603      	mov	r3, r0
 80136fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80136fe:	7dfb      	ldrb	r3, [r7, #23]
 8013700:	4618      	mov	r0, r3
 8013702:	f000 f86f 	bl	80137e4 <USBD_Get_USB_Status>
 8013706:	4603      	mov	r3, r0
 8013708:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801370a:	7dbb      	ldrb	r3, [r7, #22]
}
 801370c:	4618      	mov	r0, r3
 801370e:	3718      	adds	r7, #24
 8013710:	46bd      	mov	sp, r7
 8013712:	bd80      	pop	{r7, pc}

08013714 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b082      	sub	sp, #8
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
 801371c:	460b      	mov	r3, r1
 801371e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013726:	78fa      	ldrb	r2, [r7, #3]
 8013728:	4611      	mov	r1, r2
 801372a:	4618      	mov	r0, r3
 801372c:	f7ef fe85 	bl	800343a <HAL_PCD_EP_GetRxCount>
 8013730:	4603      	mov	r3, r0
}
 8013732:	4618      	mov	r0, r3
 8013734:	3708      	adds	r7, #8
 8013736:	46bd      	mov	sp, r7
 8013738:	bd80      	pop	{r7, pc}
	...

0801373c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801373c:	b580      	push	{r7, lr}
 801373e:	b082      	sub	sp, #8
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
 8013744:	460b      	mov	r3, r1
 8013746:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8013748:	78fb      	ldrb	r3, [r7, #3]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d002      	beq.n	8013754 <HAL_PCDEx_LPM_Callback+0x18>
 801374e:	2b01      	cmp	r3, #1
 8013750:	d013      	beq.n	801377a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8013752:	e023      	b.n	801379c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	699b      	ldr	r3, [r3, #24]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d007      	beq.n	801376c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801375c:	f000 f83c 	bl	80137d8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013760:	4b10      	ldr	r3, [pc, #64]	; (80137a4 <HAL_PCDEx_LPM_Callback+0x68>)
 8013762:	691b      	ldr	r3, [r3, #16]
 8013764:	4a0f      	ldr	r2, [pc, #60]	; (80137a4 <HAL_PCDEx_LPM_Callback+0x68>)
 8013766:	f023 0306 	bic.w	r3, r3, #6
 801376a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8013772:	4618      	mov	r0, r3
 8013774:	f7fb fd30 	bl	800f1d8 <USBD_LL_Resume>
    break;
 8013778:	e010      	b.n	801379c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8013780:	4618      	mov	r0, r3
 8013782:	f7fb fd13 	bl	800f1ac <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	699b      	ldr	r3, [r3, #24]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d005      	beq.n	801379a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801378e:	4b05      	ldr	r3, [pc, #20]	; (80137a4 <HAL_PCDEx_LPM_Callback+0x68>)
 8013790:	691b      	ldr	r3, [r3, #16]
 8013792:	4a04      	ldr	r2, [pc, #16]	; (80137a4 <HAL_PCDEx_LPM_Callback+0x68>)
 8013794:	f043 0306 	orr.w	r3, r3, #6
 8013798:	6113      	str	r3, [r2, #16]
    break;
 801379a:	bf00      	nop
}
 801379c:	bf00      	nop
 801379e:	3708      	adds	r7, #8
 80137a0:	46bd      	mov	sp, r7
 80137a2:	bd80      	pop	{r7, pc}
 80137a4:	e000ed00 	.word	0xe000ed00

080137a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80137a8:	b480      	push	{r7}
 80137aa:	b083      	sub	sp, #12
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80137b0:	4b03      	ldr	r3, [pc, #12]	; (80137c0 <USBD_static_malloc+0x18>)
}
 80137b2:	4618      	mov	r0, r3
 80137b4:	370c      	adds	r7, #12
 80137b6:	46bd      	mov	sp, r7
 80137b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137bc:	4770      	bx	lr
 80137be:	bf00      	nop
 80137c0:	20002084 	.word	0x20002084

080137c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80137c4:	b480      	push	{r7}
 80137c6:	b083      	sub	sp, #12
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]

}
 80137cc:	bf00      	nop
 80137ce:	370c      	adds	r7, #12
 80137d0:	46bd      	mov	sp, r7
 80137d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d6:	4770      	bx	lr

080137d8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80137dc:	f7ed fd06 	bl	80011ec <SystemClock_Config>
}
 80137e0:	bf00      	nop
 80137e2:	bd80      	pop	{r7, pc}

080137e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80137e4:	b480      	push	{r7}
 80137e6:	b085      	sub	sp, #20
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	4603      	mov	r3, r0
 80137ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80137ee:	2300      	movs	r3, #0
 80137f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80137f2:	79fb      	ldrb	r3, [r7, #7]
 80137f4:	2b03      	cmp	r3, #3
 80137f6:	d817      	bhi.n	8013828 <USBD_Get_USB_Status+0x44>
 80137f8:	a201      	add	r2, pc, #4	; (adr r2, 8013800 <USBD_Get_USB_Status+0x1c>)
 80137fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137fe:	bf00      	nop
 8013800:	08013811 	.word	0x08013811
 8013804:	08013817 	.word	0x08013817
 8013808:	0801381d 	.word	0x0801381d
 801380c:	08013823 	.word	0x08013823
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013810:	2300      	movs	r3, #0
 8013812:	73fb      	strb	r3, [r7, #15]
    break;
 8013814:	e00b      	b.n	801382e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013816:	2303      	movs	r3, #3
 8013818:	73fb      	strb	r3, [r7, #15]
    break;
 801381a:	e008      	b.n	801382e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801381c:	2301      	movs	r3, #1
 801381e:	73fb      	strb	r3, [r7, #15]
    break;
 8013820:	e005      	b.n	801382e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013822:	2303      	movs	r3, #3
 8013824:	73fb      	strb	r3, [r7, #15]
    break;
 8013826:	e002      	b.n	801382e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013828:	2303      	movs	r3, #3
 801382a:	73fb      	strb	r3, [r7, #15]
    break;
 801382c:	bf00      	nop
  }
  return usb_status;
 801382e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013830:	4618      	mov	r0, r3
 8013832:	3714      	adds	r7, #20
 8013834:	46bd      	mov	sp, r7
 8013836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383a:	4770      	bx	lr

0801383c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801383c:	b480      	push	{r7}
 801383e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8013840:	4b05      	ldr	r3, [pc, #20]	; (8013858 <UTIL_LPM_Init+0x1c>)
 8013842:	2200      	movs	r2, #0
 8013844:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8013846:	4b05      	ldr	r3, [pc, #20]	; (801385c <UTIL_LPM_Init+0x20>)
 8013848:	2200      	movs	r2, #0
 801384a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801384c:	bf00      	nop
 801384e:	46bd      	mov	sp, r7
 8013850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013854:	4770      	bx	lr
 8013856:	bf00      	nop
 8013858:	200022a4 	.word	0x200022a4
 801385c:	200022a8 	.word	0x200022a8

08013860 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8013860:	b480      	push	{r7}
 8013862:	b087      	sub	sp, #28
 8013864:	af00      	add	r7, sp, #0
 8013866:	6078      	str	r0, [r7, #4]
 8013868:	460b      	mov	r3, r1
 801386a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801386c:	f3ef 8310 	mrs	r3, PRIMASK
 8013870:	613b      	str	r3, [r7, #16]
  return(result);
 8013872:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8013874:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013876:	b672      	cpsid	i
}
 8013878:	bf00      	nop
  
  switch(state)
 801387a:	78fb      	ldrb	r3, [r7, #3]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d008      	beq.n	8013892 <UTIL_LPM_SetOffMode+0x32>
 8013880:	2b01      	cmp	r3, #1
 8013882:	d10e      	bne.n	80138a2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8013884:	4b0d      	ldr	r3, [pc, #52]	; (80138bc <UTIL_LPM_SetOffMode+0x5c>)
 8013886:	681a      	ldr	r2, [r3, #0]
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	4313      	orrs	r3, r2
 801388c:	4a0b      	ldr	r2, [pc, #44]	; (80138bc <UTIL_LPM_SetOffMode+0x5c>)
 801388e:	6013      	str	r3, [r2, #0]
      break;
 8013890:	e008      	b.n	80138a4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	43da      	mvns	r2, r3
 8013896:	4b09      	ldr	r3, [pc, #36]	; (80138bc <UTIL_LPM_SetOffMode+0x5c>)
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	4013      	ands	r3, r2
 801389c:	4a07      	ldr	r2, [pc, #28]	; (80138bc <UTIL_LPM_SetOffMode+0x5c>)
 801389e:	6013      	str	r3, [r2, #0]
      break;
 80138a0:	e000      	b.n	80138a4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80138a2:	bf00      	nop
 80138a4:	697b      	ldr	r3, [r7, #20]
 80138a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	f383 8810 	msr	PRIMASK, r3
}
 80138ae:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80138b0:	bf00      	nop
 80138b2:	371c      	adds	r7, #28
 80138b4:	46bd      	mov	sp, r7
 80138b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ba:	4770      	bx	lr
 80138bc:	200022a8 	.word	0x200022a8

080138c0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b090      	sub	sp, #64	; 0x40
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80138c8:	4b73      	ldr	r3, [pc, #460]	; (8013a98 <UTIL_SEQ_Run+0x1d8>)
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80138ce:	4b72      	ldr	r3, [pc, #456]	; (8013a98 <UTIL_SEQ_Run+0x1d8>)
 80138d0:	681a      	ldr	r2, [r3, #0]
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	4013      	ands	r3, r2
 80138d6:	4a70      	ldr	r2, [pc, #448]	; (8013a98 <UTIL_SEQ_Run+0x1d8>)
 80138d8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80138da:	4b70      	ldr	r3, [pc, #448]	; (8013a9c <UTIL_SEQ_Run+0x1dc>)
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80138e0:	4b6f      	ldr	r3, [pc, #444]	; (8013aa0 <UTIL_SEQ_Run+0x1e0>)
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80138e6:	4b6f      	ldr	r3, [pc, #444]	; (8013aa4 <UTIL_SEQ_Run+0x1e4>)
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 80138ec:	4b6e      	ldr	r3, [pc, #440]	; (8013aa8 <UTIL_SEQ_Run+0x1e8>)
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80138f2:	e08d      	b.n	8013a10 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80138f4:	2300      	movs	r3, #0
 80138f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80138f8:	e002      	b.n	8013900 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80138fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138fc:	3301      	adds	r3, #1
 80138fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8013900:	4a6a      	ldr	r2, [pc, #424]	; (8013aac <UTIL_SEQ_Run+0x1ec>)
 8013902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013904:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801390a:	401a      	ands	r2, r3
 801390c:	4b62      	ldr	r3, [pc, #392]	; (8013a98 <UTIL_SEQ_Run+0x1d8>)
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	4013      	ands	r3, r2
 8013912:	2b00      	cmp	r3, #0
 8013914:	d0f1      	beq.n	80138fa <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8013916:	4a65      	ldr	r2, [pc, #404]	; (8013aac <UTIL_SEQ_Run+0x1ec>)
 8013918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801391a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013920:	401a      	ands	r2, r3
 8013922:	4b5d      	ldr	r3, [pc, #372]	; (8013a98 <UTIL_SEQ_Run+0x1d8>)
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	4013      	ands	r3, r2
 8013928:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801392a:	4a60      	ldr	r2, [pc, #384]	; (8013aac <UTIL_SEQ_Run+0x1ec>)
 801392c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801392e:	00db      	lsls	r3, r3, #3
 8013930:	4413      	add	r3, r2
 8013932:	685a      	ldr	r2, [r3, #4]
 8013934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013936:	4013      	ands	r3, r2
 8013938:	2b00      	cmp	r3, #0
 801393a:	d106      	bne.n	801394a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801393c:	4a5b      	ldr	r2, [pc, #364]	; (8013aac <UTIL_SEQ_Run+0x1ec>)
 801393e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013940:	00db      	lsls	r3, r3, #3
 8013942:	4413      	add	r3, r2
 8013944:	f04f 32ff 	mov.w	r2, #4294967295
 8013948:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801394a:	4a58      	ldr	r2, [pc, #352]	; (8013aac <UTIL_SEQ_Run+0x1ec>)
 801394c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801394e:	00db      	lsls	r3, r3, #3
 8013950:	4413      	add	r3, r2
 8013952:	685a      	ldr	r2, [r3, #4]
 8013954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013956:	4013      	ands	r3, r2
 8013958:	4618      	mov	r0, r3
 801395a:	f000 f9b3 	bl	8013cc4 <SEQ_BitPosition>
 801395e:	4603      	mov	r3, r0
 8013960:	461a      	mov	r2, r3
 8013962:	4b53      	ldr	r3, [pc, #332]	; (8013ab0 <UTIL_SEQ_Run+0x1f0>)
 8013964:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8013966:	4a51      	ldr	r2, [pc, #324]	; (8013aac <UTIL_SEQ_Run+0x1ec>)
 8013968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801396a:	00db      	lsls	r3, r3, #3
 801396c:	4413      	add	r3, r2
 801396e:	685a      	ldr	r2, [r3, #4]
 8013970:	4b4f      	ldr	r3, [pc, #316]	; (8013ab0 <UTIL_SEQ_Run+0x1f0>)
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	2101      	movs	r1, #1
 8013976:	fa01 f303 	lsl.w	r3, r1, r3
 801397a:	43db      	mvns	r3, r3
 801397c:	401a      	ands	r2, r3
 801397e:	494b      	ldr	r1, [pc, #300]	; (8013aac <UTIL_SEQ_Run+0x1ec>)
 8013980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013982:	00db      	lsls	r3, r3, #3
 8013984:	440b      	add	r3, r1
 8013986:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013988:	f3ef 8310 	mrs	r3, PRIMASK
 801398c:	61bb      	str	r3, [r7, #24]
  return(result);
 801398e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013990:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8013992:	b672      	cpsid	i
}
 8013994:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8013996:	4b46      	ldr	r3, [pc, #280]	; (8013ab0 <UTIL_SEQ_Run+0x1f0>)
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	2201      	movs	r2, #1
 801399c:	fa02 f303 	lsl.w	r3, r2, r3
 80139a0:	43da      	mvns	r2, r3
 80139a2:	4b3e      	ldr	r3, [pc, #248]	; (8013a9c <UTIL_SEQ_Run+0x1dc>)
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	4013      	ands	r3, r2
 80139a8:	4a3c      	ldr	r2, [pc, #240]	; (8013a9c <UTIL_SEQ_Run+0x1dc>)
 80139aa:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80139ac:	2302      	movs	r3, #2
 80139ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80139b0:	e013      	b.n	80139da <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80139b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139b4:	3b01      	subs	r3, #1
 80139b6:	4a3d      	ldr	r2, [pc, #244]	; (8013aac <UTIL_SEQ_Run+0x1ec>)
 80139b8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80139bc:	4b3c      	ldr	r3, [pc, #240]	; (8013ab0 <UTIL_SEQ_Run+0x1f0>)
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	2201      	movs	r2, #1
 80139c2:	fa02 f303 	lsl.w	r3, r2, r3
 80139c6:	43da      	mvns	r2, r3
 80139c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139ca:	3b01      	subs	r3, #1
 80139cc:	400a      	ands	r2, r1
 80139ce:	4937      	ldr	r1, [pc, #220]	; (8013aac <UTIL_SEQ_Run+0x1ec>)
 80139d0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80139d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139d6:	3b01      	subs	r3, #1
 80139d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80139da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d1e8      	bne.n	80139b2 <UTIL_SEQ_Run+0xf2>
 80139e0:	6a3b      	ldr	r3, [r7, #32]
 80139e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80139e4:	697b      	ldr	r3, [r7, #20]
 80139e6:	f383 8810 	msr	PRIMASK, r3
}
 80139ea:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80139ec:	4b30      	ldr	r3, [pc, #192]	; (8013ab0 <UTIL_SEQ_Run+0x1f0>)
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	4a30      	ldr	r2, [pc, #192]	; (8013ab4 <UTIL_SEQ_Run+0x1f4>)
 80139f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80139f6:	4798      	blx	r3

    local_taskset = TaskSet;
 80139f8:	4b28      	ldr	r3, [pc, #160]	; (8013a9c <UTIL_SEQ_Run+0x1dc>)
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 80139fe:	4b28      	ldr	r3, [pc, #160]	; (8013aa0 <UTIL_SEQ_Run+0x1e0>)
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8013a04:	4b27      	ldr	r3, [pc, #156]	; (8013aa4 <UTIL_SEQ_Run+0x1e4>)
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8013a0a:	4b27      	ldr	r3, [pc, #156]	; (8013aa8 <UTIL_SEQ_Run+0x1e8>)
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8013a10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a14:	401a      	ands	r2, r3
 8013a16:	4b20      	ldr	r3, [pc, #128]	; (8013a98 <UTIL_SEQ_Run+0x1d8>)
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	4013      	ands	r3, r2
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d005      	beq.n	8013a2c <UTIL_SEQ_Run+0x16c>
 8013a20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a24:	4013      	ands	r3, r2
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	f43f af64 	beq.w	80138f4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8013a2c:	4b20      	ldr	r3, [pc, #128]	; (8013ab0 <UTIL_SEQ_Run+0x1f0>)
 8013a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8013a32:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8013a34:	f000 f938 	bl	8013ca8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013a38:	f3ef 8310 	mrs	r3, PRIMASK
 8013a3c:	613b      	str	r3, [r7, #16]
  return(result);
 8013a3e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8013a40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8013a42:	b672      	cpsid	i
}
 8013a44:	bf00      	nop
  local_taskset = TaskSet;
 8013a46:	4b15      	ldr	r3, [pc, #84]	; (8013a9c <UTIL_SEQ_Run+0x1dc>)
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8013a4c:	4b14      	ldr	r3, [pc, #80]	; (8013aa0 <UTIL_SEQ_Run+0x1e0>)
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8013a52:	4b14      	ldr	r3, [pc, #80]	; (8013aa4 <UTIL_SEQ_Run+0x1e4>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8013a58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a5c:	401a      	ands	r2, r3
 8013a5e:	4b0e      	ldr	r3, [pc, #56]	; (8013a98 <UTIL_SEQ_Run+0x1d8>)
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	4013      	ands	r3, r2
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d107      	bne.n	8013a78 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8013a68:	4b0f      	ldr	r3, [pc, #60]	; (8013aa8 <UTIL_SEQ_Run+0x1e8>)
 8013a6a:	681a      	ldr	r2, [r3, #0]
 8013a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a6e:	4013      	ands	r3, r2
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d101      	bne.n	8013a78 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8013a74:	f7ed f84d 	bl	8000b12 <UTIL_SEQ_Idle>
 8013a78:	69fb      	ldr	r3, [r7, #28]
 8013a7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	f383 8810 	msr	PRIMASK, r3
}
 8013a82:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8013a84:	f000 f917 	bl	8013cb6 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8013a88:	4a03      	ldr	r2, [pc, #12]	; (8013a98 <UTIL_SEQ_Run+0x1d8>)
 8013a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a8c:	6013      	str	r3, [r2, #0]

  return;
 8013a8e:	bf00      	nop
}
 8013a90:	3740      	adds	r7, #64	; 0x40
 8013a92:	46bd      	mov	sp, r7
 8013a94:	bd80      	pop	{r7, pc}
 8013a96:	bf00      	nop
 8013a98:	20000458 	.word	0x20000458
 8013a9c:	200022ac 	.word	0x200022ac
 8013aa0:	200022b0 	.word	0x200022b0
 8013aa4:	20000454 	.word	0x20000454
 8013aa8:	200022b4 	.word	0x200022b4
 8013aac:	2000233c 	.word	0x2000233c
 8013ab0:	200022b8 	.word	0x200022b8
 8013ab4:	200022bc 	.word	0x200022bc

08013ab8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b088      	sub	sp, #32
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	60f8      	str	r0, [r7, #12]
 8013ac0:	60b9      	str	r1, [r7, #8]
 8013ac2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8013ac8:	617b      	str	r3, [r7, #20]
  return(result);
 8013aca:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8013acc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8013ace:	b672      	cpsid	i
}
 8013ad0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8013ad2:	68f8      	ldr	r0, [r7, #12]
 8013ad4:	f000 f8f6 	bl	8013cc4 <SEQ_BitPosition>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	4619      	mov	r1, r3
 8013adc:	4a06      	ldr	r2, [pc, #24]	; (8013af8 <UTIL_SEQ_RegTask+0x40>)
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8013ae4:	69fb      	ldr	r3, [r7, #28]
 8013ae6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ae8:	69bb      	ldr	r3, [r7, #24]
 8013aea:	f383 8810 	msr	PRIMASK, r3
}
 8013aee:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8013af0:	bf00      	nop
}
 8013af2:	3720      	adds	r7, #32
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bd80      	pop	{r7, pc}
 8013af8:	200022bc 	.word	0x200022bc

08013afc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8013afc:	b480      	push	{r7}
 8013afe:	b087      	sub	sp, #28
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
 8013b04:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013b06:	f3ef 8310 	mrs	r3, PRIMASK
 8013b0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8013b0c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013b0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013b10:	b672      	cpsid	i
}
 8013b12:	bf00      	nop

  TaskSet |= TaskId_bm;
 8013b14:	4b0d      	ldr	r3, [pc, #52]	; (8013b4c <UTIL_SEQ_SetTask+0x50>)
 8013b16:	681a      	ldr	r2, [r3, #0]
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	4313      	orrs	r3, r2
 8013b1c:	4a0b      	ldr	r2, [pc, #44]	; (8013b4c <UTIL_SEQ_SetTask+0x50>)
 8013b1e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8013b20:	4a0b      	ldr	r2, [pc, #44]	; (8013b50 <UTIL_SEQ_SetTask+0x54>)
 8013b22:	683b      	ldr	r3, [r7, #0]
 8013b24:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	431a      	orrs	r2, r3
 8013b2c:	4908      	ldr	r1, [pc, #32]	; (8013b50 <UTIL_SEQ_SetTask+0x54>)
 8013b2e:	683b      	ldr	r3, [r7, #0]
 8013b30:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8013b34:	697b      	ldr	r3, [r7, #20]
 8013b36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b38:	693b      	ldr	r3, [r7, #16]
 8013b3a:	f383 8810 	msr	PRIMASK, r3
}
 8013b3e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013b40:	bf00      	nop
}
 8013b42:	371c      	adds	r7, #28
 8013b44:	46bd      	mov	sp, r7
 8013b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4a:	4770      	bx	lr
 8013b4c:	200022ac 	.word	0x200022ac
 8013b50:	2000233c 	.word	0x2000233c

08013b54 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8013b54:	b480      	push	{r7}
 8013b56:	b087      	sub	sp, #28
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013b5c:	f3ef 8310 	mrs	r3, PRIMASK
 8013b60:	60fb      	str	r3, [r7, #12]
  return(result);
 8013b62:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013b64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013b66:	b672      	cpsid	i
}
 8013b68:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	43da      	mvns	r2, r3
 8013b6e:	4b08      	ldr	r3, [pc, #32]	; (8013b90 <UTIL_SEQ_PauseTask+0x3c>)
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	4013      	ands	r3, r2
 8013b74:	4a06      	ldr	r2, [pc, #24]	; (8013b90 <UTIL_SEQ_PauseTask+0x3c>)
 8013b76:	6013      	str	r3, [r2, #0]
 8013b78:	697b      	ldr	r3, [r7, #20]
 8013b7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b7c:	693b      	ldr	r3, [r7, #16]
 8013b7e:	f383 8810 	msr	PRIMASK, r3
}
 8013b82:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013b84:	bf00      	nop
}
 8013b86:	371c      	adds	r7, #28
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b8e:	4770      	bx	lr
 8013b90:	20000454 	.word	0x20000454

08013b94 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8013b94:	b480      	push	{r7}
 8013b96:	b087      	sub	sp, #28
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8013ba0:	60fb      	str	r3, [r7, #12]
  return(result);
 8013ba2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013ba4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013ba6:	b672      	cpsid	i
}
 8013ba8:	bf00      	nop

  TaskMask |= TaskId_bm;
 8013baa:	4b09      	ldr	r3, [pc, #36]	; (8013bd0 <UTIL_SEQ_ResumeTask+0x3c>)
 8013bac:	681a      	ldr	r2, [r3, #0]
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	4313      	orrs	r3, r2
 8013bb2:	4a07      	ldr	r2, [pc, #28]	; (8013bd0 <UTIL_SEQ_ResumeTask+0x3c>)
 8013bb4:	6013      	str	r3, [r2, #0]
 8013bb6:	697b      	ldr	r3, [r7, #20]
 8013bb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013bba:	693b      	ldr	r3, [r7, #16]
 8013bbc:	f383 8810 	msr	PRIMASK, r3
}
 8013bc0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013bc2:	bf00      	nop
}
 8013bc4:	371c      	adds	r7, #28
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bcc:	4770      	bx	lr
 8013bce:	bf00      	nop
 8013bd0:	20000454 	.word	0x20000454

08013bd4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8013bd4:	b480      	push	{r7}
 8013bd6:	b087      	sub	sp, #28
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8013be0:	60fb      	str	r3, [r7, #12]
  return(result);
 8013be2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013be4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013be6:	b672      	cpsid	i
}
 8013be8:	bf00      	nop

  EvtSet |= EvtId_bm;
 8013bea:	4b09      	ldr	r3, [pc, #36]	; (8013c10 <UTIL_SEQ_SetEvt+0x3c>)
 8013bec:	681a      	ldr	r2, [r3, #0]
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	4313      	orrs	r3, r2
 8013bf2:	4a07      	ldr	r2, [pc, #28]	; (8013c10 <UTIL_SEQ_SetEvt+0x3c>)
 8013bf4:	6013      	str	r3, [r2, #0]
 8013bf6:	697b      	ldr	r3, [r7, #20]
 8013bf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013bfa:	693b      	ldr	r3, [r7, #16]
 8013bfc:	f383 8810 	msr	PRIMASK, r3
}
 8013c00:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013c02:	bf00      	nop
}
 8013c04:	371c      	adds	r7, #28
 8013c06:	46bd      	mov	sp, r7
 8013c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c0c:	4770      	bx	lr
 8013c0e:	bf00      	nop
 8013c10:	200022b0 	.word	0x200022b0

08013c14 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8013c14:	b580      	push	{r7, lr}
 8013c16:	b088      	sub	sp, #32
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8013c1c:	4b1f      	ldr	r3, [pc, #124]	; (8013c9c <UTIL_SEQ_WaitEvt+0x88>)
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8013c22:	4b1e      	ldr	r3, [pc, #120]	; (8013c9c <UTIL_SEQ_WaitEvt+0x88>)
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c2a:	d102      	bne.n	8013c32 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	61fb      	str	r3, [r7, #28]
 8013c30:	e005      	b.n	8013c3e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8013c32:	4b1a      	ldr	r3, [pc, #104]	; (8013c9c <UTIL_SEQ_WaitEvt+0x88>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	2201      	movs	r2, #1
 8013c38:	fa02 f303 	lsl.w	r3, r2, r3
 8013c3c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8013c3e:	4b18      	ldr	r3, [pc, #96]	; (8013ca0 <UTIL_SEQ_WaitEvt+0x8c>)
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8013c44:	4a16      	ldr	r2, [pc, #88]	; (8013ca0 <UTIL_SEQ_WaitEvt+0x8c>)
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8013c4a:	e003      	b.n	8013c54 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8013c4c:	6879      	ldr	r1, [r7, #4]
 8013c4e:	69f8      	ldr	r0, [r7, #28]
 8013c50:	f7ec ff66 	bl	8000b20 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8013c54:	4b13      	ldr	r3, [pc, #76]	; (8013ca4 <UTIL_SEQ_WaitEvt+0x90>)
 8013c56:	681a      	ldr	r2, [r3, #0]
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	4013      	ands	r3, r2
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d0f5      	beq.n	8013c4c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8013c60:	4a0e      	ldr	r2, [pc, #56]	; (8013c9c <UTIL_SEQ_WaitEvt+0x88>)
 8013c62:	69bb      	ldr	r3, [r7, #24]
 8013c64:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013c66:	f3ef 8310 	mrs	r3, PRIMASK
 8013c6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8013c6c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013c6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8013c70:	b672      	cpsid	i
}
 8013c72:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	43da      	mvns	r2, r3
 8013c78:	4b0a      	ldr	r3, [pc, #40]	; (8013ca4 <UTIL_SEQ_WaitEvt+0x90>)
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	4013      	ands	r3, r2
 8013c7e:	4a09      	ldr	r2, [pc, #36]	; (8013ca4 <UTIL_SEQ_WaitEvt+0x90>)
 8013c80:	6013      	str	r3, [r2, #0]
 8013c82:	693b      	ldr	r3, [r7, #16]
 8013c84:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	f383 8810 	msr	PRIMASK, r3
}
 8013c8c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8013c8e:	4a04      	ldr	r2, [pc, #16]	; (8013ca0 <UTIL_SEQ_WaitEvt+0x8c>)
 8013c90:	697b      	ldr	r3, [r7, #20]
 8013c92:	6013      	str	r3, [r2, #0]
  return;
 8013c94:	bf00      	nop
}
 8013c96:	3720      	adds	r7, #32
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	bd80      	pop	{r7, pc}
 8013c9c:	200022b8 	.word	0x200022b8
 8013ca0:	200022b4 	.word	0x200022b4
 8013ca4:	200022b0 	.word	0x200022b0

08013ca8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8013ca8:	b480      	push	{r7}
 8013caa:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8013cac:	bf00      	nop
}
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb4:	4770      	bx	lr

08013cb6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8013cb6:	b480      	push	{r7}
 8013cb8:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8013cba:	bf00      	nop
}
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc2:	4770      	bx	lr

08013cc4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8013cc4:	b480      	push	{r7}
 8013cc6:	b085      	sub	sp, #20
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8013ccc:	2300      	movs	r3, #0
 8013cce:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8013cd4:	68bb      	ldr	r3, [r7, #8]
 8013cd6:	0c1b      	lsrs	r3, r3, #16
 8013cd8:	041b      	lsls	r3, r3, #16
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d104      	bne.n	8013ce8 <SEQ_BitPosition+0x24>
 8013cde:	2310      	movs	r3, #16
 8013ce0:	73fb      	strb	r3, [r7, #15]
 8013ce2:	68bb      	ldr	r3, [r7, #8]
 8013ce4:	041b      	lsls	r3, r3, #16
 8013ce6:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8013ce8:	68bb      	ldr	r3, [r7, #8]
 8013cea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d105      	bne.n	8013cfe <SEQ_BitPosition+0x3a>
 8013cf2:	7bfb      	ldrb	r3, [r7, #15]
 8013cf4:	3308      	adds	r3, #8
 8013cf6:	73fb      	strb	r3, [r7, #15]
 8013cf8:	68bb      	ldr	r3, [r7, #8]
 8013cfa:	021b      	lsls	r3, r3, #8
 8013cfc:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8013cfe:	68bb      	ldr	r3, [r7, #8]
 8013d00:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d105      	bne.n	8013d14 <SEQ_BitPosition+0x50>
 8013d08:	7bfb      	ldrb	r3, [r7, #15]
 8013d0a:	3304      	adds	r3, #4
 8013d0c:	73fb      	strb	r3, [r7, #15]
 8013d0e:	68bb      	ldr	r3, [r7, #8]
 8013d10:	011b      	lsls	r3, r3, #4
 8013d12:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8013d14:	68bb      	ldr	r3, [r7, #8]
 8013d16:	0f1b      	lsrs	r3, r3, #28
 8013d18:	4a07      	ldr	r2, [pc, #28]	; (8013d38 <SEQ_BitPosition+0x74>)
 8013d1a:	5cd2      	ldrb	r2, [r2, r3]
 8013d1c:	7bfb      	ldrb	r3, [r7, #15]
 8013d1e:	4413      	add	r3, r2
 8013d20:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8013d22:	7bfb      	ldrb	r3, [r7, #15]
 8013d24:	f1c3 031f 	rsb	r3, r3, #31
 8013d28:	b2db      	uxtb	r3, r3
}
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	3714      	adds	r7, #20
 8013d2e:	46bd      	mov	sp, r7
 8013d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d34:	4770      	bx	lr
 8013d36:	bf00      	nop
 8013d38:	08014e80 	.word	0x08014e80

08013d3c <__errno>:
 8013d3c:	4b01      	ldr	r3, [pc, #4]	; (8013d44 <__errno+0x8>)
 8013d3e:	6818      	ldr	r0, [r3, #0]
 8013d40:	4770      	bx	lr
 8013d42:	bf00      	nop
 8013d44:	2000045c 	.word	0x2000045c

08013d48 <__libc_init_array>:
 8013d48:	b570      	push	{r4, r5, r6, lr}
 8013d4a:	4d0d      	ldr	r5, [pc, #52]	; (8013d80 <__libc_init_array+0x38>)
 8013d4c:	4c0d      	ldr	r4, [pc, #52]	; (8013d84 <__libc_init_array+0x3c>)
 8013d4e:	1b64      	subs	r4, r4, r5
 8013d50:	10a4      	asrs	r4, r4, #2
 8013d52:	2600      	movs	r6, #0
 8013d54:	42a6      	cmp	r6, r4
 8013d56:	d109      	bne.n	8013d6c <__libc_init_array+0x24>
 8013d58:	4d0b      	ldr	r5, [pc, #44]	; (8013d88 <__libc_init_array+0x40>)
 8013d5a:	4c0c      	ldr	r4, [pc, #48]	; (8013d8c <__libc_init_array+0x44>)
 8013d5c:	f000 fc94 	bl	8014688 <_init>
 8013d60:	1b64      	subs	r4, r4, r5
 8013d62:	10a4      	asrs	r4, r4, #2
 8013d64:	2600      	movs	r6, #0
 8013d66:	42a6      	cmp	r6, r4
 8013d68:	d105      	bne.n	8013d76 <__libc_init_array+0x2e>
 8013d6a:	bd70      	pop	{r4, r5, r6, pc}
 8013d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013d70:	4798      	blx	r3
 8013d72:	3601      	adds	r6, #1
 8013d74:	e7ee      	b.n	8013d54 <__libc_init_array+0xc>
 8013d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8013d7a:	4798      	blx	r3
 8013d7c:	3601      	adds	r6, #1
 8013d7e:	e7f2      	b.n	8013d66 <__libc_init_array+0x1e>
 8013d80:	08014f2c 	.word	0x08014f2c
 8013d84:	08014f2c 	.word	0x08014f2c
 8013d88:	08014f2c 	.word	0x08014f2c
 8013d8c:	08014f30 	.word	0x08014f30

08013d90 <__retarget_lock_acquire_recursive>:
 8013d90:	4770      	bx	lr

08013d92 <__retarget_lock_release_recursive>:
 8013d92:	4770      	bx	lr

08013d94 <memcpy>:
 8013d94:	440a      	add	r2, r1
 8013d96:	4291      	cmp	r1, r2
 8013d98:	f100 33ff 	add.w	r3, r0, #4294967295
 8013d9c:	d100      	bne.n	8013da0 <memcpy+0xc>
 8013d9e:	4770      	bx	lr
 8013da0:	b510      	push	{r4, lr}
 8013da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013da6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013daa:	4291      	cmp	r1, r2
 8013dac:	d1f9      	bne.n	8013da2 <memcpy+0xe>
 8013dae:	bd10      	pop	{r4, pc}

08013db0 <memset>:
 8013db0:	4402      	add	r2, r0
 8013db2:	4603      	mov	r3, r0
 8013db4:	4293      	cmp	r3, r2
 8013db6:	d100      	bne.n	8013dba <memset+0xa>
 8013db8:	4770      	bx	lr
 8013dba:	f803 1b01 	strb.w	r1, [r3], #1
 8013dbe:	e7f9      	b.n	8013db4 <memset+0x4>

08013dc0 <_free_r>:
 8013dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013dc2:	2900      	cmp	r1, #0
 8013dc4:	d044      	beq.n	8013e50 <_free_r+0x90>
 8013dc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013dca:	9001      	str	r0, [sp, #4]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	f1a1 0404 	sub.w	r4, r1, #4
 8013dd2:	bfb8      	it	lt
 8013dd4:	18e4      	addlt	r4, r4, r3
 8013dd6:	f000 fab9 	bl	801434c <__malloc_lock>
 8013dda:	4a1e      	ldr	r2, [pc, #120]	; (8013e54 <_free_r+0x94>)
 8013ddc:	9801      	ldr	r0, [sp, #4]
 8013dde:	6813      	ldr	r3, [r2, #0]
 8013de0:	b933      	cbnz	r3, 8013df0 <_free_r+0x30>
 8013de2:	6063      	str	r3, [r4, #4]
 8013de4:	6014      	str	r4, [r2, #0]
 8013de6:	b003      	add	sp, #12
 8013de8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013dec:	f000 bab4 	b.w	8014358 <__malloc_unlock>
 8013df0:	42a3      	cmp	r3, r4
 8013df2:	d908      	bls.n	8013e06 <_free_r+0x46>
 8013df4:	6825      	ldr	r5, [r4, #0]
 8013df6:	1961      	adds	r1, r4, r5
 8013df8:	428b      	cmp	r3, r1
 8013dfa:	bf01      	itttt	eq
 8013dfc:	6819      	ldreq	r1, [r3, #0]
 8013dfe:	685b      	ldreq	r3, [r3, #4]
 8013e00:	1949      	addeq	r1, r1, r5
 8013e02:	6021      	streq	r1, [r4, #0]
 8013e04:	e7ed      	b.n	8013de2 <_free_r+0x22>
 8013e06:	461a      	mov	r2, r3
 8013e08:	685b      	ldr	r3, [r3, #4]
 8013e0a:	b10b      	cbz	r3, 8013e10 <_free_r+0x50>
 8013e0c:	42a3      	cmp	r3, r4
 8013e0e:	d9fa      	bls.n	8013e06 <_free_r+0x46>
 8013e10:	6811      	ldr	r1, [r2, #0]
 8013e12:	1855      	adds	r5, r2, r1
 8013e14:	42a5      	cmp	r5, r4
 8013e16:	d10b      	bne.n	8013e30 <_free_r+0x70>
 8013e18:	6824      	ldr	r4, [r4, #0]
 8013e1a:	4421      	add	r1, r4
 8013e1c:	1854      	adds	r4, r2, r1
 8013e1e:	42a3      	cmp	r3, r4
 8013e20:	6011      	str	r1, [r2, #0]
 8013e22:	d1e0      	bne.n	8013de6 <_free_r+0x26>
 8013e24:	681c      	ldr	r4, [r3, #0]
 8013e26:	685b      	ldr	r3, [r3, #4]
 8013e28:	6053      	str	r3, [r2, #4]
 8013e2a:	4421      	add	r1, r4
 8013e2c:	6011      	str	r1, [r2, #0]
 8013e2e:	e7da      	b.n	8013de6 <_free_r+0x26>
 8013e30:	d902      	bls.n	8013e38 <_free_r+0x78>
 8013e32:	230c      	movs	r3, #12
 8013e34:	6003      	str	r3, [r0, #0]
 8013e36:	e7d6      	b.n	8013de6 <_free_r+0x26>
 8013e38:	6825      	ldr	r5, [r4, #0]
 8013e3a:	1961      	adds	r1, r4, r5
 8013e3c:	428b      	cmp	r3, r1
 8013e3e:	bf04      	itt	eq
 8013e40:	6819      	ldreq	r1, [r3, #0]
 8013e42:	685b      	ldreq	r3, [r3, #4]
 8013e44:	6063      	str	r3, [r4, #4]
 8013e46:	bf04      	itt	eq
 8013e48:	1949      	addeq	r1, r1, r5
 8013e4a:	6021      	streq	r1, [r4, #0]
 8013e4c:	6054      	str	r4, [r2, #4]
 8013e4e:	e7ca      	b.n	8013de6 <_free_r+0x26>
 8013e50:	b003      	add	sp, #12
 8013e52:	bd30      	pop	{r4, r5, pc}
 8013e54:	20002350 	.word	0x20002350

08013e58 <sbrk_aligned>:
 8013e58:	b570      	push	{r4, r5, r6, lr}
 8013e5a:	4e0e      	ldr	r6, [pc, #56]	; (8013e94 <sbrk_aligned+0x3c>)
 8013e5c:	460c      	mov	r4, r1
 8013e5e:	6831      	ldr	r1, [r6, #0]
 8013e60:	4605      	mov	r5, r0
 8013e62:	b911      	cbnz	r1, 8013e6a <sbrk_aligned+0x12>
 8013e64:	f000 fa20 	bl	80142a8 <_sbrk_r>
 8013e68:	6030      	str	r0, [r6, #0]
 8013e6a:	4621      	mov	r1, r4
 8013e6c:	4628      	mov	r0, r5
 8013e6e:	f000 fa1b 	bl	80142a8 <_sbrk_r>
 8013e72:	1c43      	adds	r3, r0, #1
 8013e74:	d00a      	beq.n	8013e8c <sbrk_aligned+0x34>
 8013e76:	1cc4      	adds	r4, r0, #3
 8013e78:	f024 0403 	bic.w	r4, r4, #3
 8013e7c:	42a0      	cmp	r0, r4
 8013e7e:	d007      	beq.n	8013e90 <sbrk_aligned+0x38>
 8013e80:	1a21      	subs	r1, r4, r0
 8013e82:	4628      	mov	r0, r5
 8013e84:	f000 fa10 	bl	80142a8 <_sbrk_r>
 8013e88:	3001      	adds	r0, #1
 8013e8a:	d101      	bne.n	8013e90 <sbrk_aligned+0x38>
 8013e8c:	f04f 34ff 	mov.w	r4, #4294967295
 8013e90:	4620      	mov	r0, r4
 8013e92:	bd70      	pop	{r4, r5, r6, pc}
 8013e94:	20002354 	.word	0x20002354

08013e98 <_malloc_r>:
 8013e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e9c:	1ccd      	adds	r5, r1, #3
 8013e9e:	f025 0503 	bic.w	r5, r5, #3
 8013ea2:	3508      	adds	r5, #8
 8013ea4:	2d0c      	cmp	r5, #12
 8013ea6:	bf38      	it	cc
 8013ea8:	250c      	movcc	r5, #12
 8013eaa:	2d00      	cmp	r5, #0
 8013eac:	4607      	mov	r7, r0
 8013eae:	db01      	blt.n	8013eb4 <_malloc_r+0x1c>
 8013eb0:	42a9      	cmp	r1, r5
 8013eb2:	d905      	bls.n	8013ec0 <_malloc_r+0x28>
 8013eb4:	230c      	movs	r3, #12
 8013eb6:	603b      	str	r3, [r7, #0]
 8013eb8:	2600      	movs	r6, #0
 8013eba:	4630      	mov	r0, r6
 8013ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ec0:	4e2e      	ldr	r6, [pc, #184]	; (8013f7c <_malloc_r+0xe4>)
 8013ec2:	f000 fa43 	bl	801434c <__malloc_lock>
 8013ec6:	6833      	ldr	r3, [r6, #0]
 8013ec8:	461c      	mov	r4, r3
 8013eca:	bb34      	cbnz	r4, 8013f1a <_malloc_r+0x82>
 8013ecc:	4629      	mov	r1, r5
 8013ece:	4638      	mov	r0, r7
 8013ed0:	f7ff ffc2 	bl	8013e58 <sbrk_aligned>
 8013ed4:	1c43      	adds	r3, r0, #1
 8013ed6:	4604      	mov	r4, r0
 8013ed8:	d14d      	bne.n	8013f76 <_malloc_r+0xde>
 8013eda:	6834      	ldr	r4, [r6, #0]
 8013edc:	4626      	mov	r6, r4
 8013ede:	2e00      	cmp	r6, #0
 8013ee0:	d140      	bne.n	8013f64 <_malloc_r+0xcc>
 8013ee2:	6823      	ldr	r3, [r4, #0]
 8013ee4:	4631      	mov	r1, r6
 8013ee6:	4638      	mov	r0, r7
 8013ee8:	eb04 0803 	add.w	r8, r4, r3
 8013eec:	f000 f9dc 	bl	80142a8 <_sbrk_r>
 8013ef0:	4580      	cmp	r8, r0
 8013ef2:	d13a      	bne.n	8013f6a <_malloc_r+0xd2>
 8013ef4:	6821      	ldr	r1, [r4, #0]
 8013ef6:	3503      	adds	r5, #3
 8013ef8:	1a6d      	subs	r5, r5, r1
 8013efa:	f025 0503 	bic.w	r5, r5, #3
 8013efe:	3508      	adds	r5, #8
 8013f00:	2d0c      	cmp	r5, #12
 8013f02:	bf38      	it	cc
 8013f04:	250c      	movcc	r5, #12
 8013f06:	4629      	mov	r1, r5
 8013f08:	4638      	mov	r0, r7
 8013f0a:	f7ff ffa5 	bl	8013e58 <sbrk_aligned>
 8013f0e:	3001      	adds	r0, #1
 8013f10:	d02b      	beq.n	8013f6a <_malloc_r+0xd2>
 8013f12:	6823      	ldr	r3, [r4, #0]
 8013f14:	442b      	add	r3, r5
 8013f16:	6023      	str	r3, [r4, #0]
 8013f18:	e00e      	b.n	8013f38 <_malloc_r+0xa0>
 8013f1a:	6822      	ldr	r2, [r4, #0]
 8013f1c:	1b52      	subs	r2, r2, r5
 8013f1e:	d41e      	bmi.n	8013f5e <_malloc_r+0xc6>
 8013f20:	2a0b      	cmp	r2, #11
 8013f22:	d916      	bls.n	8013f52 <_malloc_r+0xba>
 8013f24:	1961      	adds	r1, r4, r5
 8013f26:	42a3      	cmp	r3, r4
 8013f28:	6025      	str	r5, [r4, #0]
 8013f2a:	bf18      	it	ne
 8013f2c:	6059      	strne	r1, [r3, #4]
 8013f2e:	6863      	ldr	r3, [r4, #4]
 8013f30:	bf08      	it	eq
 8013f32:	6031      	streq	r1, [r6, #0]
 8013f34:	5162      	str	r2, [r4, r5]
 8013f36:	604b      	str	r3, [r1, #4]
 8013f38:	4638      	mov	r0, r7
 8013f3a:	f104 060b 	add.w	r6, r4, #11
 8013f3e:	f000 fa0b 	bl	8014358 <__malloc_unlock>
 8013f42:	f026 0607 	bic.w	r6, r6, #7
 8013f46:	1d23      	adds	r3, r4, #4
 8013f48:	1af2      	subs	r2, r6, r3
 8013f4a:	d0b6      	beq.n	8013eba <_malloc_r+0x22>
 8013f4c:	1b9b      	subs	r3, r3, r6
 8013f4e:	50a3      	str	r3, [r4, r2]
 8013f50:	e7b3      	b.n	8013eba <_malloc_r+0x22>
 8013f52:	6862      	ldr	r2, [r4, #4]
 8013f54:	42a3      	cmp	r3, r4
 8013f56:	bf0c      	ite	eq
 8013f58:	6032      	streq	r2, [r6, #0]
 8013f5a:	605a      	strne	r2, [r3, #4]
 8013f5c:	e7ec      	b.n	8013f38 <_malloc_r+0xa0>
 8013f5e:	4623      	mov	r3, r4
 8013f60:	6864      	ldr	r4, [r4, #4]
 8013f62:	e7b2      	b.n	8013eca <_malloc_r+0x32>
 8013f64:	4634      	mov	r4, r6
 8013f66:	6876      	ldr	r6, [r6, #4]
 8013f68:	e7b9      	b.n	8013ede <_malloc_r+0x46>
 8013f6a:	230c      	movs	r3, #12
 8013f6c:	603b      	str	r3, [r7, #0]
 8013f6e:	4638      	mov	r0, r7
 8013f70:	f000 f9f2 	bl	8014358 <__malloc_unlock>
 8013f74:	e7a1      	b.n	8013eba <_malloc_r+0x22>
 8013f76:	6025      	str	r5, [r4, #0]
 8013f78:	e7de      	b.n	8013f38 <_malloc_r+0xa0>
 8013f7a:	bf00      	nop
 8013f7c:	20002350 	.word	0x20002350

08013f80 <_printf_common>:
 8013f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f84:	4616      	mov	r6, r2
 8013f86:	4699      	mov	r9, r3
 8013f88:	688a      	ldr	r2, [r1, #8]
 8013f8a:	690b      	ldr	r3, [r1, #16]
 8013f8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013f90:	4293      	cmp	r3, r2
 8013f92:	bfb8      	it	lt
 8013f94:	4613      	movlt	r3, r2
 8013f96:	6033      	str	r3, [r6, #0]
 8013f98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013f9c:	4607      	mov	r7, r0
 8013f9e:	460c      	mov	r4, r1
 8013fa0:	b10a      	cbz	r2, 8013fa6 <_printf_common+0x26>
 8013fa2:	3301      	adds	r3, #1
 8013fa4:	6033      	str	r3, [r6, #0]
 8013fa6:	6823      	ldr	r3, [r4, #0]
 8013fa8:	0699      	lsls	r1, r3, #26
 8013faa:	bf42      	ittt	mi
 8013fac:	6833      	ldrmi	r3, [r6, #0]
 8013fae:	3302      	addmi	r3, #2
 8013fb0:	6033      	strmi	r3, [r6, #0]
 8013fb2:	6825      	ldr	r5, [r4, #0]
 8013fb4:	f015 0506 	ands.w	r5, r5, #6
 8013fb8:	d106      	bne.n	8013fc8 <_printf_common+0x48>
 8013fba:	f104 0a19 	add.w	sl, r4, #25
 8013fbe:	68e3      	ldr	r3, [r4, #12]
 8013fc0:	6832      	ldr	r2, [r6, #0]
 8013fc2:	1a9b      	subs	r3, r3, r2
 8013fc4:	42ab      	cmp	r3, r5
 8013fc6:	dc26      	bgt.n	8014016 <_printf_common+0x96>
 8013fc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013fcc:	1e13      	subs	r3, r2, #0
 8013fce:	6822      	ldr	r2, [r4, #0]
 8013fd0:	bf18      	it	ne
 8013fd2:	2301      	movne	r3, #1
 8013fd4:	0692      	lsls	r2, r2, #26
 8013fd6:	d42b      	bmi.n	8014030 <_printf_common+0xb0>
 8013fd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013fdc:	4649      	mov	r1, r9
 8013fde:	4638      	mov	r0, r7
 8013fe0:	47c0      	blx	r8
 8013fe2:	3001      	adds	r0, #1
 8013fe4:	d01e      	beq.n	8014024 <_printf_common+0xa4>
 8013fe6:	6823      	ldr	r3, [r4, #0]
 8013fe8:	68e5      	ldr	r5, [r4, #12]
 8013fea:	6832      	ldr	r2, [r6, #0]
 8013fec:	f003 0306 	and.w	r3, r3, #6
 8013ff0:	2b04      	cmp	r3, #4
 8013ff2:	bf08      	it	eq
 8013ff4:	1aad      	subeq	r5, r5, r2
 8013ff6:	68a3      	ldr	r3, [r4, #8]
 8013ff8:	6922      	ldr	r2, [r4, #16]
 8013ffa:	bf0c      	ite	eq
 8013ffc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014000:	2500      	movne	r5, #0
 8014002:	4293      	cmp	r3, r2
 8014004:	bfc4      	itt	gt
 8014006:	1a9b      	subgt	r3, r3, r2
 8014008:	18ed      	addgt	r5, r5, r3
 801400a:	2600      	movs	r6, #0
 801400c:	341a      	adds	r4, #26
 801400e:	42b5      	cmp	r5, r6
 8014010:	d11a      	bne.n	8014048 <_printf_common+0xc8>
 8014012:	2000      	movs	r0, #0
 8014014:	e008      	b.n	8014028 <_printf_common+0xa8>
 8014016:	2301      	movs	r3, #1
 8014018:	4652      	mov	r2, sl
 801401a:	4649      	mov	r1, r9
 801401c:	4638      	mov	r0, r7
 801401e:	47c0      	blx	r8
 8014020:	3001      	adds	r0, #1
 8014022:	d103      	bne.n	801402c <_printf_common+0xac>
 8014024:	f04f 30ff 	mov.w	r0, #4294967295
 8014028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801402c:	3501      	adds	r5, #1
 801402e:	e7c6      	b.n	8013fbe <_printf_common+0x3e>
 8014030:	18e1      	adds	r1, r4, r3
 8014032:	1c5a      	adds	r2, r3, #1
 8014034:	2030      	movs	r0, #48	; 0x30
 8014036:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801403a:	4422      	add	r2, r4
 801403c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014040:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014044:	3302      	adds	r3, #2
 8014046:	e7c7      	b.n	8013fd8 <_printf_common+0x58>
 8014048:	2301      	movs	r3, #1
 801404a:	4622      	mov	r2, r4
 801404c:	4649      	mov	r1, r9
 801404e:	4638      	mov	r0, r7
 8014050:	47c0      	blx	r8
 8014052:	3001      	adds	r0, #1
 8014054:	d0e6      	beq.n	8014024 <_printf_common+0xa4>
 8014056:	3601      	adds	r6, #1
 8014058:	e7d9      	b.n	801400e <_printf_common+0x8e>
	...

0801405c <_printf_i>:
 801405c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014060:	7e0f      	ldrb	r7, [r1, #24]
 8014062:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014064:	2f78      	cmp	r7, #120	; 0x78
 8014066:	4691      	mov	r9, r2
 8014068:	4680      	mov	r8, r0
 801406a:	460c      	mov	r4, r1
 801406c:	469a      	mov	sl, r3
 801406e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014072:	d807      	bhi.n	8014084 <_printf_i+0x28>
 8014074:	2f62      	cmp	r7, #98	; 0x62
 8014076:	d80a      	bhi.n	801408e <_printf_i+0x32>
 8014078:	2f00      	cmp	r7, #0
 801407a:	f000 80d8 	beq.w	801422e <_printf_i+0x1d2>
 801407e:	2f58      	cmp	r7, #88	; 0x58
 8014080:	f000 80a3 	beq.w	80141ca <_printf_i+0x16e>
 8014084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014088:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801408c:	e03a      	b.n	8014104 <_printf_i+0xa8>
 801408e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014092:	2b15      	cmp	r3, #21
 8014094:	d8f6      	bhi.n	8014084 <_printf_i+0x28>
 8014096:	a101      	add	r1, pc, #4	; (adr r1, 801409c <_printf_i+0x40>)
 8014098:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801409c:	080140f5 	.word	0x080140f5
 80140a0:	08014109 	.word	0x08014109
 80140a4:	08014085 	.word	0x08014085
 80140a8:	08014085 	.word	0x08014085
 80140ac:	08014085 	.word	0x08014085
 80140b0:	08014085 	.word	0x08014085
 80140b4:	08014109 	.word	0x08014109
 80140b8:	08014085 	.word	0x08014085
 80140bc:	08014085 	.word	0x08014085
 80140c0:	08014085 	.word	0x08014085
 80140c4:	08014085 	.word	0x08014085
 80140c8:	08014215 	.word	0x08014215
 80140cc:	08014139 	.word	0x08014139
 80140d0:	080141f7 	.word	0x080141f7
 80140d4:	08014085 	.word	0x08014085
 80140d8:	08014085 	.word	0x08014085
 80140dc:	08014237 	.word	0x08014237
 80140e0:	08014085 	.word	0x08014085
 80140e4:	08014139 	.word	0x08014139
 80140e8:	08014085 	.word	0x08014085
 80140ec:	08014085 	.word	0x08014085
 80140f0:	080141ff 	.word	0x080141ff
 80140f4:	682b      	ldr	r3, [r5, #0]
 80140f6:	1d1a      	adds	r2, r3, #4
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	602a      	str	r2, [r5, #0]
 80140fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014100:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014104:	2301      	movs	r3, #1
 8014106:	e0a3      	b.n	8014250 <_printf_i+0x1f4>
 8014108:	6820      	ldr	r0, [r4, #0]
 801410a:	6829      	ldr	r1, [r5, #0]
 801410c:	0606      	lsls	r6, r0, #24
 801410e:	f101 0304 	add.w	r3, r1, #4
 8014112:	d50a      	bpl.n	801412a <_printf_i+0xce>
 8014114:	680e      	ldr	r6, [r1, #0]
 8014116:	602b      	str	r3, [r5, #0]
 8014118:	2e00      	cmp	r6, #0
 801411a:	da03      	bge.n	8014124 <_printf_i+0xc8>
 801411c:	232d      	movs	r3, #45	; 0x2d
 801411e:	4276      	negs	r6, r6
 8014120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014124:	485e      	ldr	r0, [pc, #376]	; (80142a0 <_printf_i+0x244>)
 8014126:	230a      	movs	r3, #10
 8014128:	e019      	b.n	801415e <_printf_i+0x102>
 801412a:	680e      	ldr	r6, [r1, #0]
 801412c:	602b      	str	r3, [r5, #0]
 801412e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014132:	bf18      	it	ne
 8014134:	b236      	sxthne	r6, r6
 8014136:	e7ef      	b.n	8014118 <_printf_i+0xbc>
 8014138:	682b      	ldr	r3, [r5, #0]
 801413a:	6820      	ldr	r0, [r4, #0]
 801413c:	1d19      	adds	r1, r3, #4
 801413e:	6029      	str	r1, [r5, #0]
 8014140:	0601      	lsls	r1, r0, #24
 8014142:	d501      	bpl.n	8014148 <_printf_i+0xec>
 8014144:	681e      	ldr	r6, [r3, #0]
 8014146:	e002      	b.n	801414e <_printf_i+0xf2>
 8014148:	0646      	lsls	r6, r0, #25
 801414a:	d5fb      	bpl.n	8014144 <_printf_i+0xe8>
 801414c:	881e      	ldrh	r6, [r3, #0]
 801414e:	4854      	ldr	r0, [pc, #336]	; (80142a0 <_printf_i+0x244>)
 8014150:	2f6f      	cmp	r7, #111	; 0x6f
 8014152:	bf0c      	ite	eq
 8014154:	2308      	moveq	r3, #8
 8014156:	230a      	movne	r3, #10
 8014158:	2100      	movs	r1, #0
 801415a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801415e:	6865      	ldr	r5, [r4, #4]
 8014160:	60a5      	str	r5, [r4, #8]
 8014162:	2d00      	cmp	r5, #0
 8014164:	bfa2      	ittt	ge
 8014166:	6821      	ldrge	r1, [r4, #0]
 8014168:	f021 0104 	bicge.w	r1, r1, #4
 801416c:	6021      	strge	r1, [r4, #0]
 801416e:	b90e      	cbnz	r6, 8014174 <_printf_i+0x118>
 8014170:	2d00      	cmp	r5, #0
 8014172:	d04d      	beq.n	8014210 <_printf_i+0x1b4>
 8014174:	4615      	mov	r5, r2
 8014176:	fbb6 f1f3 	udiv	r1, r6, r3
 801417a:	fb03 6711 	mls	r7, r3, r1, r6
 801417e:	5dc7      	ldrb	r7, [r0, r7]
 8014180:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014184:	4637      	mov	r7, r6
 8014186:	42bb      	cmp	r3, r7
 8014188:	460e      	mov	r6, r1
 801418a:	d9f4      	bls.n	8014176 <_printf_i+0x11a>
 801418c:	2b08      	cmp	r3, #8
 801418e:	d10b      	bne.n	80141a8 <_printf_i+0x14c>
 8014190:	6823      	ldr	r3, [r4, #0]
 8014192:	07de      	lsls	r6, r3, #31
 8014194:	d508      	bpl.n	80141a8 <_printf_i+0x14c>
 8014196:	6923      	ldr	r3, [r4, #16]
 8014198:	6861      	ldr	r1, [r4, #4]
 801419a:	4299      	cmp	r1, r3
 801419c:	bfde      	ittt	le
 801419e:	2330      	movle	r3, #48	; 0x30
 80141a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80141a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80141a8:	1b52      	subs	r2, r2, r5
 80141aa:	6122      	str	r2, [r4, #16]
 80141ac:	f8cd a000 	str.w	sl, [sp]
 80141b0:	464b      	mov	r3, r9
 80141b2:	aa03      	add	r2, sp, #12
 80141b4:	4621      	mov	r1, r4
 80141b6:	4640      	mov	r0, r8
 80141b8:	f7ff fee2 	bl	8013f80 <_printf_common>
 80141bc:	3001      	adds	r0, #1
 80141be:	d14c      	bne.n	801425a <_printf_i+0x1fe>
 80141c0:	f04f 30ff 	mov.w	r0, #4294967295
 80141c4:	b004      	add	sp, #16
 80141c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141ca:	4835      	ldr	r0, [pc, #212]	; (80142a0 <_printf_i+0x244>)
 80141cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80141d0:	6829      	ldr	r1, [r5, #0]
 80141d2:	6823      	ldr	r3, [r4, #0]
 80141d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80141d8:	6029      	str	r1, [r5, #0]
 80141da:	061d      	lsls	r5, r3, #24
 80141dc:	d514      	bpl.n	8014208 <_printf_i+0x1ac>
 80141de:	07df      	lsls	r7, r3, #31
 80141e0:	bf44      	itt	mi
 80141e2:	f043 0320 	orrmi.w	r3, r3, #32
 80141e6:	6023      	strmi	r3, [r4, #0]
 80141e8:	b91e      	cbnz	r6, 80141f2 <_printf_i+0x196>
 80141ea:	6823      	ldr	r3, [r4, #0]
 80141ec:	f023 0320 	bic.w	r3, r3, #32
 80141f0:	6023      	str	r3, [r4, #0]
 80141f2:	2310      	movs	r3, #16
 80141f4:	e7b0      	b.n	8014158 <_printf_i+0xfc>
 80141f6:	6823      	ldr	r3, [r4, #0]
 80141f8:	f043 0320 	orr.w	r3, r3, #32
 80141fc:	6023      	str	r3, [r4, #0]
 80141fe:	2378      	movs	r3, #120	; 0x78
 8014200:	4828      	ldr	r0, [pc, #160]	; (80142a4 <_printf_i+0x248>)
 8014202:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014206:	e7e3      	b.n	80141d0 <_printf_i+0x174>
 8014208:	0659      	lsls	r1, r3, #25
 801420a:	bf48      	it	mi
 801420c:	b2b6      	uxthmi	r6, r6
 801420e:	e7e6      	b.n	80141de <_printf_i+0x182>
 8014210:	4615      	mov	r5, r2
 8014212:	e7bb      	b.n	801418c <_printf_i+0x130>
 8014214:	682b      	ldr	r3, [r5, #0]
 8014216:	6826      	ldr	r6, [r4, #0]
 8014218:	6961      	ldr	r1, [r4, #20]
 801421a:	1d18      	adds	r0, r3, #4
 801421c:	6028      	str	r0, [r5, #0]
 801421e:	0635      	lsls	r5, r6, #24
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	d501      	bpl.n	8014228 <_printf_i+0x1cc>
 8014224:	6019      	str	r1, [r3, #0]
 8014226:	e002      	b.n	801422e <_printf_i+0x1d2>
 8014228:	0670      	lsls	r0, r6, #25
 801422a:	d5fb      	bpl.n	8014224 <_printf_i+0x1c8>
 801422c:	8019      	strh	r1, [r3, #0]
 801422e:	2300      	movs	r3, #0
 8014230:	6123      	str	r3, [r4, #16]
 8014232:	4615      	mov	r5, r2
 8014234:	e7ba      	b.n	80141ac <_printf_i+0x150>
 8014236:	682b      	ldr	r3, [r5, #0]
 8014238:	1d1a      	adds	r2, r3, #4
 801423a:	602a      	str	r2, [r5, #0]
 801423c:	681d      	ldr	r5, [r3, #0]
 801423e:	6862      	ldr	r2, [r4, #4]
 8014240:	2100      	movs	r1, #0
 8014242:	4628      	mov	r0, r5
 8014244:	f7eb ffa4 	bl	8000190 <memchr>
 8014248:	b108      	cbz	r0, 801424e <_printf_i+0x1f2>
 801424a:	1b40      	subs	r0, r0, r5
 801424c:	6060      	str	r0, [r4, #4]
 801424e:	6863      	ldr	r3, [r4, #4]
 8014250:	6123      	str	r3, [r4, #16]
 8014252:	2300      	movs	r3, #0
 8014254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014258:	e7a8      	b.n	80141ac <_printf_i+0x150>
 801425a:	6923      	ldr	r3, [r4, #16]
 801425c:	462a      	mov	r2, r5
 801425e:	4649      	mov	r1, r9
 8014260:	4640      	mov	r0, r8
 8014262:	47d0      	blx	sl
 8014264:	3001      	adds	r0, #1
 8014266:	d0ab      	beq.n	80141c0 <_printf_i+0x164>
 8014268:	6823      	ldr	r3, [r4, #0]
 801426a:	079b      	lsls	r3, r3, #30
 801426c:	d413      	bmi.n	8014296 <_printf_i+0x23a>
 801426e:	68e0      	ldr	r0, [r4, #12]
 8014270:	9b03      	ldr	r3, [sp, #12]
 8014272:	4298      	cmp	r0, r3
 8014274:	bfb8      	it	lt
 8014276:	4618      	movlt	r0, r3
 8014278:	e7a4      	b.n	80141c4 <_printf_i+0x168>
 801427a:	2301      	movs	r3, #1
 801427c:	4632      	mov	r2, r6
 801427e:	4649      	mov	r1, r9
 8014280:	4640      	mov	r0, r8
 8014282:	47d0      	blx	sl
 8014284:	3001      	adds	r0, #1
 8014286:	d09b      	beq.n	80141c0 <_printf_i+0x164>
 8014288:	3501      	adds	r5, #1
 801428a:	68e3      	ldr	r3, [r4, #12]
 801428c:	9903      	ldr	r1, [sp, #12]
 801428e:	1a5b      	subs	r3, r3, r1
 8014290:	42ab      	cmp	r3, r5
 8014292:	dcf2      	bgt.n	801427a <_printf_i+0x21e>
 8014294:	e7eb      	b.n	801426e <_printf_i+0x212>
 8014296:	2500      	movs	r5, #0
 8014298:	f104 0619 	add.w	r6, r4, #25
 801429c:	e7f5      	b.n	801428a <_printf_i+0x22e>
 801429e:	bf00      	nop
 80142a0:	08014ef0 	.word	0x08014ef0
 80142a4:	08014f01 	.word	0x08014f01

080142a8 <_sbrk_r>:
 80142a8:	b538      	push	{r3, r4, r5, lr}
 80142aa:	4d06      	ldr	r5, [pc, #24]	; (80142c4 <_sbrk_r+0x1c>)
 80142ac:	2300      	movs	r3, #0
 80142ae:	4604      	mov	r4, r0
 80142b0:	4608      	mov	r0, r1
 80142b2:	602b      	str	r3, [r5, #0]
 80142b4:	f7ed fb10 	bl	80018d8 <_sbrk>
 80142b8:	1c43      	adds	r3, r0, #1
 80142ba:	d102      	bne.n	80142c2 <_sbrk_r+0x1a>
 80142bc:	682b      	ldr	r3, [r5, #0]
 80142be:	b103      	cbz	r3, 80142c2 <_sbrk_r+0x1a>
 80142c0:	6023      	str	r3, [r4, #0]
 80142c2:	bd38      	pop	{r3, r4, r5, pc}
 80142c4:	20002358 	.word	0x20002358

080142c8 <siprintf>:
 80142c8:	b40e      	push	{r1, r2, r3}
 80142ca:	b500      	push	{lr}
 80142cc:	b09c      	sub	sp, #112	; 0x70
 80142ce:	ab1d      	add	r3, sp, #116	; 0x74
 80142d0:	9002      	str	r0, [sp, #8]
 80142d2:	9006      	str	r0, [sp, #24]
 80142d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80142d8:	4809      	ldr	r0, [pc, #36]	; (8014300 <siprintf+0x38>)
 80142da:	9107      	str	r1, [sp, #28]
 80142dc:	9104      	str	r1, [sp, #16]
 80142de:	4909      	ldr	r1, [pc, #36]	; (8014304 <siprintf+0x3c>)
 80142e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80142e4:	9105      	str	r1, [sp, #20]
 80142e6:	6800      	ldr	r0, [r0, #0]
 80142e8:	9301      	str	r3, [sp, #4]
 80142ea:	a902      	add	r1, sp, #8
 80142ec:	f000 f8c4 	bl	8014478 <_svfiprintf_r>
 80142f0:	9b02      	ldr	r3, [sp, #8]
 80142f2:	2200      	movs	r2, #0
 80142f4:	701a      	strb	r2, [r3, #0]
 80142f6:	b01c      	add	sp, #112	; 0x70
 80142f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80142fc:	b003      	add	sp, #12
 80142fe:	4770      	bx	lr
 8014300:	2000045c 	.word	0x2000045c
 8014304:	ffff0208 	.word	0xffff0208

08014308 <strcpy>:
 8014308:	4603      	mov	r3, r0
 801430a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801430e:	f803 2b01 	strb.w	r2, [r3], #1
 8014312:	2a00      	cmp	r2, #0
 8014314:	d1f9      	bne.n	801430a <strcpy+0x2>
 8014316:	4770      	bx	lr

08014318 <memmove>:
 8014318:	4288      	cmp	r0, r1
 801431a:	b510      	push	{r4, lr}
 801431c:	eb01 0402 	add.w	r4, r1, r2
 8014320:	d902      	bls.n	8014328 <memmove+0x10>
 8014322:	4284      	cmp	r4, r0
 8014324:	4623      	mov	r3, r4
 8014326:	d807      	bhi.n	8014338 <memmove+0x20>
 8014328:	1e43      	subs	r3, r0, #1
 801432a:	42a1      	cmp	r1, r4
 801432c:	d008      	beq.n	8014340 <memmove+0x28>
 801432e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014332:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014336:	e7f8      	b.n	801432a <memmove+0x12>
 8014338:	4402      	add	r2, r0
 801433a:	4601      	mov	r1, r0
 801433c:	428a      	cmp	r2, r1
 801433e:	d100      	bne.n	8014342 <memmove+0x2a>
 8014340:	bd10      	pop	{r4, pc}
 8014342:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014346:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801434a:	e7f7      	b.n	801433c <memmove+0x24>

0801434c <__malloc_lock>:
 801434c:	4801      	ldr	r0, [pc, #4]	; (8014354 <__malloc_lock+0x8>)
 801434e:	f7ff bd1f 	b.w	8013d90 <__retarget_lock_acquire_recursive>
 8014352:	bf00      	nop
 8014354:	2000234c 	.word	0x2000234c

08014358 <__malloc_unlock>:
 8014358:	4801      	ldr	r0, [pc, #4]	; (8014360 <__malloc_unlock+0x8>)
 801435a:	f7ff bd1a 	b.w	8013d92 <__retarget_lock_release_recursive>
 801435e:	bf00      	nop
 8014360:	2000234c 	.word	0x2000234c

08014364 <_realloc_r>:
 8014364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014368:	4680      	mov	r8, r0
 801436a:	4614      	mov	r4, r2
 801436c:	460e      	mov	r6, r1
 801436e:	b921      	cbnz	r1, 801437a <_realloc_r+0x16>
 8014370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014374:	4611      	mov	r1, r2
 8014376:	f7ff bd8f 	b.w	8013e98 <_malloc_r>
 801437a:	b92a      	cbnz	r2, 8014388 <_realloc_r+0x24>
 801437c:	f7ff fd20 	bl	8013dc0 <_free_r>
 8014380:	4625      	mov	r5, r4
 8014382:	4628      	mov	r0, r5
 8014384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014388:	f000 f976 	bl	8014678 <_malloc_usable_size_r>
 801438c:	4284      	cmp	r4, r0
 801438e:	4607      	mov	r7, r0
 8014390:	d802      	bhi.n	8014398 <_realloc_r+0x34>
 8014392:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014396:	d812      	bhi.n	80143be <_realloc_r+0x5a>
 8014398:	4621      	mov	r1, r4
 801439a:	4640      	mov	r0, r8
 801439c:	f7ff fd7c 	bl	8013e98 <_malloc_r>
 80143a0:	4605      	mov	r5, r0
 80143a2:	2800      	cmp	r0, #0
 80143a4:	d0ed      	beq.n	8014382 <_realloc_r+0x1e>
 80143a6:	42bc      	cmp	r4, r7
 80143a8:	4622      	mov	r2, r4
 80143aa:	4631      	mov	r1, r6
 80143ac:	bf28      	it	cs
 80143ae:	463a      	movcs	r2, r7
 80143b0:	f7ff fcf0 	bl	8013d94 <memcpy>
 80143b4:	4631      	mov	r1, r6
 80143b6:	4640      	mov	r0, r8
 80143b8:	f7ff fd02 	bl	8013dc0 <_free_r>
 80143bc:	e7e1      	b.n	8014382 <_realloc_r+0x1e>
 80143be:	4635      	mov	r5, r6
 80143c0:	e7df      	b.n	8014382 <_realloc_r+0x1e>

080143c2 <__ssputs_r>:
 80143c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143c6:	688e      	ldr	r6, [r1, #8]
 80143c8:	429e      	cmp	r6, r3
 80143ca:	4682      	mov	sl, r0
 80143cc:	460c      	mov	r4, r1
 80143ce:	4690      	mov	r8, r2
 80143d0:	461f      	mov	r7, r3
 80143d2:	d838      	bhi.n	8014446 <__ssputs_r+0x84>
 80143d4:	898a      	ldrh	r2, [r1, #12]
 80143d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80143da:	d032      	beq.n	8014442 <__ssputs_r+0x80>
 80143dc:	6825      	ldr	r5, [r4, #0]
 80143de:	6909      	ldr	r1, [r1, #16]
 80143e0:	eba5 0901 	sub.w	r9, r5, r1
 80143e4:	6965      	ldr	r5, [r4, #20]
 80143e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80143ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80143ee:	3301      	adds	r3, #1
 80143f0:	444b      	add	r3, r9
 80143f2:	106d      	asrs	r5, r5, #1
 80143f4:	429d      	cmp	r5, r3
 80143f6:	bf38      	it	cc
 80143f8:	461d      	movcc	r5, r3
 80143fa:	0553      	lsls	r3, r2, #21
 80143fc:	d531      	bpl.n	8014462 <__ssputs_r+0xa0>
 80143fe:	4629      	mov	r1, r5
 8014400:	f7ff fd4a 	bl	8013e98 <_malloc_r>
 8014404:	4606      	mov	r6, r0
 8014406:	b950      	cbnz	r0, 801441e <__ssputs_r+0x5c>
 8014408:	230c      	movs	r3, #12
 801440a:	f8ca 3000 	str.w	r3, [sl]
 801440e:	89a3      	ldrh	r3, [r4, #12]
 8014410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014414:	81a3      	strh	r3, [r4, #12]
 8014416:	f04f 30ff 	mov.w	r0, #4294967295
 801441a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801441e:	6921      	ldr	r1, [r4, #16]
 8014420:	464a      	mov	r2, r9
 8014422:	f7ff fcb7 	bl	8013d94 <memcpy>
 8014426:	89a3      	ldrh	r3, [r4, #12]
 8014428:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801442c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014430:	81a3      	strh	r3, [r4, #12]
 8014432:	6126      	str	r6, [r4, #16]
 8014434:	6165      	str	r5, [r4, #20]
 8014436:	444e      	add	r6, r9
 8014438:	eba5 0509 	sub.w	r5, r5, r9
 801443c:	6026      	str	r6, [r4, #0]
 801443e:	60a5      	str	r5, [r4, #8]
 8014440:	463e      	mov	r6, r7
 8014442:	42be      	cmp	r6, r7
 8014444:	d900      	bls.n	8014448 <__ssputs_r+0x86>
 8014446:	463e      	mov	r6, r7
 8014448:	6820      	ldr	r0, [r4, #0]
 801444a:	4632      	mov	r2, r6
 801444c:	4641      	mov	r1, r8
 801444e:	f7ff ff63 	bl	8014318 <memmove>
 8014452:	68a3      	ldr	r3, [r4, #8]
 8014454:	1b9b      	subs	r3, r3, r6
 8014456:	60a3      	str	r3, [r4, #8]
 8014458:	6823      	ldr	r3, [r4, #0]
 801445a:	4433      	add	r3, r6
 801445c:	6023      	str	r3, [r4, #0]
 801445e:	2000      	movs	r0, #0
 8014460:	e7db      	b.n	801441a <__ssputs_r+0x58>
 8014462:	462a      	mov	r2, r5
 8014464:	f7ff ff7e 	bl	8014364 <_realloc_r>
 8014468:	4606      	mov	r6, r0
 801446a:	2800      	cmp	r0, #0
 801446c:	d1e1      	bne.n	8014432 <__ssputs_r+0x70>
 801446e:	6921      	ldr	r1, [r4, #16]
 8014470:	4650      	mov	r0, sl
 8014472:	f7ff fca5 	bl	8013dc0 <_free_r>
 8014476:	e7c7      	b.n	8014408 <__ssputs_r+0x46>

08014478 <_svfiprintf_r>:
 8014478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801447c:	4698      	mov	r8, r3
 801447e:	898b      	ldrh	r3, [r1, #12]
 8014480:	061b      	lsls	r3, r3, #24
 8014482:	b09d      	sub	sp, #116	; 0x74
 8014484:	4607      	mov	r7, r0
 8014486:	460d      	mov	r5, r1
 8014488:	4614      	mov	r4, r2
 801448a:	d50e      	bpl.n	80144aa <_svfiprintf_r+0x32>
 801448c:	690b      	ldr	r3, [r1, #16]
 801448e:	b963      	cbnz	r3, 80144aa <_svfiprintf_r+0x32>
 8014490:	2140      	movs	r1, #64	; 0x40
 8014492:	f7ff fd01 	bl	8013e98 <_malloc_r>
 8014496:	6028      	str	r0, [r5, #0]
 8014498:	6128      	str	r0, [r5, #16]
 801449a:	b920      	cbnz	r0, 80144a6 <_svfiprintf_r+0x2e>
 801449c:	230c      	movs	r3, #12
 801449e:	603b      	str	r3, [r7, #0]
 80144a0:	f04f 30ff 	mov.w	r0, #4294967295
 80144a4:	e0d1      	b.n	801464a <_svfiprintf_r+0x1d2>
 80144a6:	2340      	movs	r3, #64	; 0x40
 80144a8:	616b      	str	r3, [r5, #20]
 80144aa:	2300      	movs	r3, #0
 80144ac:	9309      	str	r3, [sp, #36]	; 0x24
 80144ae:	2320      	movs	r3, #32
 80144b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80144b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80144b8:	2330      	movs	r3, #48	; 0x30
 80144ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014664 <_svfiprintf_r+0x1ec>
 80144be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80144c2:	f04f 0901 	mov.w	r9, #1
 80144c6:	4623      	mov	r3, r4
 80144c8:	469a      	mov	sl, r3
 80144ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80144ce:	b10a      	cbz	r2, 80144d4 <_svfiprintf_r+0x5c>
 80144d0:	2a25      	cmp	r2, #37	; 0x25
 80144d2:	d1f9      	bne.n	80144c8 <_svfiprintf_r+0x50>
 80144d4:	ebba 0b04 	subs.w	fp, sl, r4
 80144d8:	d00b      	beq.n	80144f2 <_svfiprintf_r+0x7a>
 80144da:	465b      	mov	r3, fp
 80144dc:	4622      	mov	r2, r4
 80144de:	4629      	mov	r1, r5
 80144e0:	4638      	mov	r0, r7
 80144e2:	f7ff ff6e 	bl	80143c2 <__ssputs_r>
 80144e6:	3001      	adds	r0, #1
 80144e8:	f000 80aa 	beq.w	8014640 <_svfiprintf_r+0x1c8>
 80144ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80144ee:	445a      	add	r2, fp
 80144f0:	9209      	str	r2, [sp, #36]	; 0x24
 80144f2:	f89a 3000 	ldrb.w	r3, [sl]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	f000 80a2 	beq.w	8014640 <_svfiprintf_r+0x1c8>
 80144fc:	2300      	movs	r3, #0
 80144fe:	f04f 32ff 	mov.w	r2, #4294967295
 8014502:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014506:	f10a 0a01 	add.w	sl, sl, #1
 801450a:	9304      	str	r3, [sp, #16]
 801450c:	9307      	str	r3, [sp, #28]
 801450e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014512:	931a      	str	r3, [sp, #104]	; 0x68
 8014514:	4654      	mov	r4, sl
 8014516:	2205      	movs	r2, #5
 8014518:	f814 1b01 	ldrb.w	r1, [r4], #1
 801451c:	4851      	ldr	r0, [pc, #324]	; (8014664 <_svfiprintf_r+0x1ec>)
 801451e:	f7eb fe37 	bl	8000190 <memchr>
 8014522:	9a04      	ldr	r2, [sp, #16]
 8014524:	b9d8      	cbnz	r0, 801455e <_svfiprintf_r+0xe6>
 8014526:	06d0      	lsls	r0, r2, #27
 8014528:	bf44      	itt	mi
 801452a:	2320      	movmi	r3, #32
 801452c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014530:	0711      	lsls	r1, r2, #28
 8014532:	bf44      	itt	mi
 8014534:	232b      	movmi	r3, #43	; 0x2b
 8014536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801453a:	f89a 3000 	ldrb.w	r3, [sl]
 801453e:	2b2a      	cmp	r3, #42	; 0x2a
 8014540:	d015      	beq.n	801456e <_svfiprintf_r+0xf6>
 8014542:	9a07      	ldr	r2, [sp, #28]
 8014544:	4654      	mov	r4, sl
 8014546:	2000      	movs	r0, #0
 8014548:	f04f 0c0a 	mov.w	ip, #10
 801454c:	4621      	mov	r1, r4
 801454e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014552:	3b30      	subs	r3, #48	; 0x30
 8014554:	2b09      	cmp	r3, #9
 8014556:	d94e      	bls.n	80145f6 <_svfiprintf_r+0x17e>
 8014558:	b1b0      	cbz	r0, 8014588 <_svfiprintf_r+0x110>
 801455a:	9207      	str	r2, [sp, #28]
 801455c:	e014      	b.n	8014588 <_svfiprintf_r+0x110>
 801455e:	eba0 0308 	sub.w	r3, r0, r8
 8014562:	fa09 f303 	lsl.w	r3, r9, r3
 8014566:	4313      	orrs	r3, r2
 8014568:	9304      	str	r3, [sp, #16]
 801456a:	46a2      	mov	sl, r4
 801456c:	e7d2      	b.n	8014514 <_svfiprintf_r+0x9c>
 801456e:	9b03      	ldr	r3, [sp, #12]
 8014570:	1d19      	adds	r1, r3, #4
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	9103      	str	r1, [sp, #12]
 8014576:	2b00      	cmp	r3, #0
 8014578:	bfbb      	ittet	lt
 801457a:	425b      	neglt	r3, r3
 801457c:	f042 0202 	orrlt.w	r2, r2, #2
 8014580:	9307      	strge	r3, [sp, #28]
 8014582:	9307      	strlt	r3, [sp, #28]
 8014584:	bfb8      	it	lt
 8014586:	9204      	strlt	r2, [sp, #16]
 8014588:	7823      	ldrb	r3, [r4, #0]
 801458a:	2b2e      	cmp	r3, #46	; 0x2e
 801458c:	d10c      	bne.n	80145a8 <_svfiprintf_r+0x130>
 801458e:	7863      	ldrb	r3, [r4, #1]
 8014590:	2b2a      	cmp	r3, #42	; 0x2a
 8014592:	d135      	bne.n	8014600 <_svfiprintf_r+0x188>
 8014594:	9b03      	ldr	r3, [sp, #12]
 8014596:	1d1a      	adds	r2, r3, #4
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	9203      	str	r2, [sp, #12]
 801459c:	2b00      	cmp	r3, #0
 801459e:	bfb8      	it	lt
 80145a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80145a4:	3402      	adds	r4, #2
 80145a6:	9305      	str	r3, [sp, #20]
 80145a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014674 <_svfiprintf_r+0x1fc>
 80145ac:	7821      	ldrb	r1, [r4, #0]
 80145ae:	2203      	movs	r2, #3
 80145b0:	4650      	mov	r0, sl
 80145b2:	f7eb fded 	bl	8000190 <memchr>
 80145b6:	b140      	cbz	r0, 80145ca <_svfiprintf_r+0x152>
 80145b8:	2340      	movs	r3, #64	; 0x40
 80145ba:	eba0 000a 	sub.w	r0, r0, sl
 80145be:	fa03 f000 	lsl.w	r0, r3, r0
 80145c2:	9b04      	ldr	r3, [sp, #16]
 80145c4:	4303      	orrs	r3, r0
 80145c6:	3401      	adds	r4, #1
 80145c8:	9304      	str	r3, [sp, #16]
 80145ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145ce:	4826      	ldr	r0, [pc, #152]	; (8014668 <_svfiprintf_r+0x1f0>)
 80145d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80145d4:	2206      	movs	r2, #6
 80145d6:	f7eb fddb 	bl	8000190 <memchr>
 80145da:	2800      	cmp	r0, #0
 80145dc:	d038      	beq.n	8014650 <_svfiprintf_r+0x1d8>
 80145de:	4b23      	ldr	r3, [pc, #140]	; (801466c <_svfiprintf_r+0x1f4>)
 80145e0:	bb1b      	cbnz	r3, 801462a <_svfiprintf_r+0x1b2>
 80145e2:	9b03      	ldr	r3, [sp, #12]
 80145e4:	3307      	adds	r3, #7
 80145e6:	f023 0307 	bic.w	r3, r3, #7
 80145ea:	3308      	adds	r3, #8
 80145ec:	9303      	str	r3, [sp, #12]
 80145ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145f0:	4433      	add	r3, r6
 80145f2:	9309      	str	r3, [sp, #36]	; 0x24
 80145f4:	e767      	b.n	80144c6 <_svfiprintf_r+0x4e>
 80145f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80145fa:	460c      	mov	r4, r1
 80145fc:	2001      	movs	r0, #1
 80145fe:	e7a5      	b.n	801454c <_svfiprintf_r+0xd4>
 8014600:	2300      	movs	r3, #0
 8014602:	3401      	adds	r4, #1
 8014604:	9305      	str	r3, [sp, #20]
 8014606:	4619      	mov	r1, r3
 8014608:	f04f 0c0a 	mov.w	ip, #10
 801460c:	4620      	mov	r0, r4
 801460e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014612:	3a30      	subs	r2, #48	; 0x30
 8014614:	2a09      	cmp	r2, #9
 8014616:	d903      	bls.n	8014620 <_svfiprintf_r+0x1a8>
 8014618:	2b00      	cmp	r3, #0
 801461a:	d0c5      	beq.n	80145a8 <_svfiprintf_r+0x130>
 801461c:	9105      	str	r1, [sp, #20]
 801461e:	e7c3      	b.n	80145a8 <_svfiprintf_r+0x130>
 8014620:	fb0c 2101 	mla	r1, ip, r1, r2
 8014624:	4604      	mov	r4, r0
 8014626:	2301      	movs	r3, #1
 8014628:	e7f0      	b.n	801460c <_svfiprintf_r+0x194>
 801462a:	ab03      	add	r3, sp, #12
 801462c:	9300      	str	r3, [sp, #0]
 801462e:	462a      	mov	r2, r5
 8014630:	4b0f      	ldr	r3, [pc, #60]	; (8014670 <_svfiprintf_r+0x1f8>)
 8014632:	a904      	add	r1, sp, #16
 8014634:	4638      	mov	r0, r7
 8014636:	f3af 8000 	nop.w
 801463a:	1c42      	adds	r2, r0, #1
 801463c:	4606      	mov	r6, r0
 801463e:	d1d6      	bne.n	80145ee <_svfiprintf_r+0x176>
 8014640:	89ab      	ldrh	r3, [r5, #12]
 8014642:	065b      	lsls	r3, r3, #25
 8014644:	f53f af2c 	bmi.w	80144a0 <_svfiprintf_r+0x28>
 8014648:	9809      	ldr	r0, [sp, #36]	; 0x24
 801464a:	b01d      	add	sp, #116	; 0x74
 801464c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014650:	ab03      	add	r3, sp, #12
 8014652:	9300      	str	r3, [sp, #0]
 8014654:	462a      	mov	r2, r5
 8014656:	4b06      	ldr	r3, [pc, #24]	; (8014670 <_svfiprintf_r+0x1f8>)
 8014658:	a904      	add	r1, sp, #16
 801465a:	4638      	mov	r0, r7
 801465c:	f7ff fcfe 	bl	801405c <_printf_i>
 8014660:	e7eb      	b.n	801463a <_svfiprintf_r+0x1c2>
 8014662:	bf00      	nop
 8014664:	08014f12 	.word	0x08014f12
 8014668:	08014f1c 	.word	0x08014f1c
 801466c:	00000000 	.word	0x00000000
 8014670:	080143c3 	.word	0x080143c3
 8014674:	08014f18 	.word	0x08014f18

08014678 <_malloc_usable_size_r>:
 8014678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801467c:	1f18      	subs	r0, r3, #4
 801467e:	2b00      	cmp	r3, #0
 8014680:	bfbc      	itt	lt
 8014682:	580b      	ldrlt	r3, [r1, r0]
 8014684:	18c0      	addlt	r0, r0, r3
 8014686:	4770      	bx	lr

08014688 <_init>:
 8014688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801468a:	bf00      	nop
 801468c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801468e:	bc08      	pop	{r3}
 8014690:	469e      	mov	lr, r3
 8014692:	4770      	bx	lr

08014694 <_fini>:
 8014694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014696:	bf00      	nop
 8014698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801469a:	bc08      	pop	{r3}
 801469c:	469e      	mov	lr, r3
 801469e:	4770      	bx	lr
