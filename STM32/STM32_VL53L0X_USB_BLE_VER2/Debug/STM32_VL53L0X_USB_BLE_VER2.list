
STM32_VL53L0X_USB_BLE_VER2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001464c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000890  0801478c  0801478c  0002478c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801501c  0801501c  0002501c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015024  08015024  00025024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015028  08015028  00025028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000004bc  20000004  0801502c  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200004c0  080154e8  000304c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003c  2000055c  08015581  0003055c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000598  080155bd  00030598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000084  200005ac  080155ce  000305ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001d2c  20000630  08015652  00030630  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000235c  08015652  0003235c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030630  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 15 MB_MEM1       000001bb  20030028  20030028  00040000  2**2
                  ALLOC
 16 MB_MEM2       00000883  200301e4  200301e4  00040000  2**2
                  ALLOC
 17 .debug_info   0004112a  00000000  00000000  00030660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00007ec7  00000000  00000000  0007178a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003450  00000000  00000000  00079658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000030c8  00000000  00000000  0007caa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00031c64  00000000  00000000  0007fb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0003c4d2  00000000  00000000  000b17d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00104ec6  00000000  00000000  000edca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  001f2b6c  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000e044  00000000  00000000  001f2bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000630 	.word	0x20000630
 800015c:	00000000 	.word	0x00000000
 8000160:	08014774 	.word	0x08014774

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000634 	.word	0x20000634
 800017c:	08014774 	.word	0x08014774

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <APPD_EnableCPU2+0x34>)
 800053c:	1d3c      	adds	r4, r7, #4
 800053e:	461d      	mov	r5, r3
 8000540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000544:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000548:	c403      	stmia	r4!, {r0, r1}
 800054a:	8022      	strh	r2, [r4, #0]
 800054c:	3402      	adds	r4, #2
 800054e:	0c13      	lsrs	r3, r2, #16
 8000550:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000552:	f011 fcfb 	bl	8011f4c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	4618      	mov	r0, r3
 800055a:	f010 ff96 	bl	801148a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800055e:	bf00      	nop
}
 8000560:	3720      	adds	r7, #32
 8000562:	46bd      	mov	sp, r7
 8000564:	bdb0      	pop	{r4, r5, r7, pc}
 8000566:	bf00      	nop
 8000568:	0801478c 	.word	0x0801478c

0800056c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <LL_C2_PWR_SetPowerMode+0x28>)
 8000576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800057a:	f023 0207 	bic.w	r2, r3, #7
 800057e:	4905      	ldr	r1, [pc, #20]	; (8000594 <LL_C2_PWR_SetPowerMode+0x28>)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4313      	orrs	r3, r2
 8000584:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	58000400 	.word	0x58000400

08000598 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <LL_EXTI_EnableIT_32_63+0x24>)
 80005a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80005a6:	4905      	ldr	r1, [pc, #20]	; (80005bc <LL_EXTI_EnableIT_32_63+0x24>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	58000800 	.word	0x58000800

080005c0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80005c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005cc:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80005ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80005d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80005da:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	021b      	lsls	r3, r3, #8
 80005e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005e6:	4313      	orrs	r3, r2
 80005e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	cafecafe 	.word	0xcafecafe

080005fc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800060e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4313      	orrs	r3, r2
 8000616:	608b      	str	r3, [r1, #8]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800062c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000630:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800064a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800064e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000652:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800065a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800066c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000674:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800067c:	d101      	bne.n	8000682 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800067e:	2301      	movs	r3, #1
 8000680:	e000      	b.n	8000684 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000682:	2300      	movs	r3, #0
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800069a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80006a2:	d101      	bne.n	80006a8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80006a4:	2301      	movs	r3, #1
 80006a6:	e000      	b.n	80006aa <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80006bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80006cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4013      	ands	r3, r2
 80006d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006d8:	68fb      	ldr	r3, [r7, #12]
}
 80006da:	bf00      	nop
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
	...

080006e8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <LL_DBGMCU_GetRevisionID+0x18>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	0c1b      	lsrs	r3, r3, #16
 80006f2:	b29b      	uxth	r3, r3
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e0042000 	.word	0xe0042000

08000704 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	685a      	ldr	r2, [r3, #4]
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	041b      	lsls	r3, r3, #16
 8000716:	431a      	orrs	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	605a      	str	r2, [r3, #4]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	685a      	ldr	r2, [r3, #4]
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	431a      	orrs	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	605a      	str	r2, [r3, #4]
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr

0800074a <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800074a:	b480      	push	{r7}
 800074c:	b083      	sub	sp, #12
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
 8000752:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	695a      	ldr	r2, [r3, #20]
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	041b      	lsls	r3, r3, #16
 800075c:	431a      	orrs	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	615a      	str	r2, [r3, #20]
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800076e:	b480      	push	{r7}
 8000770:	b083      	sub	sp, #12
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	695a      	ldr	r2, [r3, #20]
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	431a      	orrs	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	615a      	str	r2, [r3, #20]
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	609a      	str	r2, [r3, #8]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	683a      	ldr	r2, [r7, #0]
 80007ba:	619a      	str	r2, [r3, #24]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <LL_LPM_EnableSleep+0x1c>)
 80007ce:	691b      	ldr	r3, [r3, #16]
 80007d0:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <LL_LPM_EnableSleep+0x1c>)
 80007d2:	f023 0304 	bic.w	r3, r3, #4
 80007d6:	6113      	str	r3, [r2, #16]
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	22ff      	movs	r2, #255	; 0xff
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000802:	b480      	push	{r7}
 8000804:	b083      	sub	sp, #12
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	22ca      	movs	r2, #202	; 0xca
 800080e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2253      	movs	r2, #83	; 0x53
 8000814:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000822:	b480      	push	{r7}
 8000824:	b083      	sub	sp, #12
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
 800082a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	f023 0207 	bic.w	r2, r3, #7
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	431a      	orrs	r2, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	609a      	str	r2, [r3, #8]
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <MX_APPE_Config+0x18>)
 800084e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000852:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000854:	f000 f824 	bl	80008a0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000858:	f000 f864 	bl	8000924 <Config_HSE>

  return;
 800085c:	bf00      	nop
}
 800085e:	bd80      	pop	{r7, pc}
 8000860:	58004000 	.word	0x58004000

08000864 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000868:	f000 f870 	bl	800094c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800086c:	f000 f888 	bl	8000980 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000870:	4903      	ldr	r1, [pc, #12]	; (8000880 <MX_APPE_Init+0x1c>)
 8000872:	2000      	movs	r0, #0
 8000874:	f000 f9de 	bl	8000c34 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000878:	f000 f890 	bl	800099c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 800087c:	bf00      	nop
}
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200006e8 	.word	0x200006e8

08000884 <Init_Smps>:

void Init_Smps(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000888:	bf00      	nop
}
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <Init_Exti>:

void Init_Exti(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000896:	2050      	movs	r0, #80	; 0x50
 8000898:	f7ff fe7e 	bl	8000598 <LL_EXTI_EnableIT_32_63>

  return;
 800089c:	bf00      	nop
}
 800089e:	bd80      	pop	{r7, pc}

080008a0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80008a4:	f000 f804 	bl	80008b0 <Reset_BackupDomain>

  Reset_IPCC();
 80008a8:	f000 f81a 	bl	80008e0 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80008ac:	bf00      	nop
}
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80008b4:	f7ff fed8 	bl	8000668 <LL_RCC_IsActiveFlag_PINRST>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d00d      	beq.n	80008da <Reset_BackupDomain+0x2a>
 80008be:	f7ff fee6 	bl	800068e <LL_RCC_IsActiveFlag_SFTRST>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d108      	bne.n	80008da <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80008c8:	f004 f836 	bl	8004938 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80008cc:	f004 f834 	bl	8004938 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80008d0:	f7ff fea8 	bl	8000624 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80008d4:	f7ff feb7 	bl	8000646 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80008d8:	bf00      	nop
 80008da:	bf00      	nop
}
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80008e4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e8:	f7ff fee4 	bl	80006b4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80008ec:	213f      	movs	r1, #63	; 0x3f
 80008ee:	480c      	ldr	r0, [pc, #48]	; (8000920 <Reset_IPCC+0x40>)
 80008f0:	f7ff ff4e 	bl	8000790 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80008f4:	213f      	movs	r1, #63	; 0x3f
 80008f6:	480a      	ldr	r0, [pc, #40]	; (8000920 <Reset_IPCC+0x40>)
 80008f8:	f7ff ff58 	bl	80007ac <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80008fc:	213f      	movs	r1, #63	; 0x3f
 80008fe:	4808      	ldr	r0, [pc, #32]	; (8000920 <Reset_IPCC+0x40>)
 8000900:	f7ff ff00 	bl	8000704 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000904:	213f      	movs	r1, #63	; 0x3f
 8000906:	4806      	ldr	r0, [pc, #24]	; (8000920 <Reset_IPCC+0x40>)
 8000908:	f7ff ff1f 	bl	800074a <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 800090c:	213f      	movs	r1, #63	; 0x3f
 800090e:	4804      	ldr	r0, [pc, #16]	; (8000920 <Reset_IPCC+0x40>)
 8000910:	f7ff ff0a 	bl	8000728 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000914:	213f      	movs	r1, #63	; 0x3f
 8000916:	4802      	ldr	r0, [pc, #8]	; (8000920 <Reset_IPCC+0x40>)
 8000918:	f7ff ff29 	bl	800076e <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 800091c:	bf00      	nop
}
 800091e:	bd80      	pop	{r7, pc}
 8000920:	58000c00 	.word	0x58000c00

08000924 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800092a:	2000      	movs	r0, #0
 800092c:	f011 fb9a 	bl	8012064 <OTP_Read>
 8000930:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d005      	beq.n	8000944 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	799b      	ldrb	r3, [r3, #6]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fe3f 	bl	80005c0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000942:	bf00      	nop
 8000944:	bf00      	nop
}
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <System_Init>:

static void System_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  Init_Smps();
 8000950:	f7ff ff98 	bl	8000884 <Init_Smps>

  Init_Exti();
 8000954:	f7ff ff9d 	bl	8000892 <Init_Exti>

  Init_Rtc();
 8000958:	f000 f802 	bl	8000960 <Init_Rtc>

  return;
 800095c:	bf00      	nop
}
 800095e:	bd80      	pop	{r7, pc}

08000960 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <Init_Rtc+0x1c>)
 8000966:	f7ff ff4c 	bl	8000802 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800096a:	2100      	movs	r1, #0
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <Init_Rtc+0x1c>)
 800096e:	f7ff ff58 	bl	8000822 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000972:	4802      	ldr	r0, [pc, #8]	; (800097c <Init_Rtc+0x1c>)
 8000974:	f7ff ff38 	bl	80007e8 <LL_RTC_EnableWriteProtection>

  return;
 8000978:	bf00      	nop
}
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40002800 	.word	0x40002800

08000980 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000984:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000988:	f7ff fe38 	bl	80005fc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800098c:	f012 ffcc 	bl	8013928 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000990:	2004      	movs	r0, #4
 8000992:	f7ff fdeb 	bl	800056c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000996:	bf00      	nop
}
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80009a2:	f011 f91d 	bl	8011be0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80009a6:	4a11      	ldr	r2, [pc, #68]	; (80009ec <appe_Tl_Init+0x50>)
 80009a8:	2100      	movs	r1, #0
 80009aa:	2004      	movs	r0, #4
 80009ac:	f013 f8fa 	bl	8013ba4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <appe_Tl_Init+0x54>)
 80009b2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <appe_Tl_Init+0x58>)
 80009b6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80009b8:	463b      	mov	r3, r7
 80009ba:	4619      	mov	r1, r3
 80009bc:	480e      	ldr	r0, [pc, #56]	; (80009f8 <appe_Tl_Init+0x5c>)
 80009be:	f010 ffd5 	bl	801196c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <appe_Tl_Init+0x60>)
 80009c4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <appe_Tl_Init+0x64>)
 80009c8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <appe_Tl_Init+0x68>)
 80009cc:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80009ce:	f240 533c 	movw	r3, #1340	; 0x53c
 80009d2:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80009d4:	f107 0308 	add.w	r3, r7, #8
 80009d8:	4618      	mov	r0, r3
 80009da:	f011 fa43 	bl	8011e64 <TL_MM_Init>

  TL_Enable();
 80009de:	f011 f8f9 	bl	8011bd4 <TL_Enable>

  return;
 80009e2:	bf00      	nop
}
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	080119a5 	.word	0x080119a5
 80009f0:	20030734 	.word	0x20030734
 80009f4:	08000a09 	.word	0x08000a09
 80009f8:	08000a21 	.word	0x08000a21
 80009fc:	2003094c 	.word	0x2003094c
 8000a00:	20030840 	.word	0x20030840
 8000a04:	200301f8 	.word	0x200301f8

08000a08 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000a12:	bf00      	nop
}
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
	...

08000a20 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	330b      	adds	r3, #11
 8000a2e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000a3a:	2b07      	cmp	r3, #7
 8000a3c:	d81f      	bhi.n	8000a7e <APPE_SysUserEvtRx+0x5e>
 8000a3e:	a201      	add	r2, pc, #4	; (adr r2, 8000a44 <APPE_SysUserEvtRx+0x24>)
 8000a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a44:	08000a65 	.word	0x08000a65
 8000a48:	08000a77 	.word	0x08000a77
 8000a4c:	08000a7f 	.word	0x08000a7f
 8000a50:	08000a7f 	.word	0x08000a7f
 8000a54:	08000a7f 	.word	0x08000a7f
 8000a58:	08000a7f 	.word	0x08000a7f
 8000a5c:	08000a7f 	.word	0x08000a7f
 8000a60:	08000a7f 	.word	0x08000a7f
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f010 fd3b 	bl	80114e4 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f000 f81b 	bl	8000aaa <APPE_SysEvtReadyProcessing>
    break;
 8000a74:	e004      	b.n	8000a80 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f000 f806 	bl	8000a88 <APPE_SysEvtError>
    break;
 8000a7c:	e000      	b.n	8000a80 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000a7e:	bf00      	nop
  }

  return;
 8000a80:	bf00      	nop
}
 8000a82:	3720      	adds	r7, #32
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	330b      	adds	r3, #11
 8000a96:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	3302      	adds	r3, #2
 8000a9c:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000a9e:	bf00      	nop
}
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b08a      	sub	sp, #40	; 0x28
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	330b      	adds	r3, #11
 8000aca:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000acc:	6a3b      	ldr	r3, [r7, #32]
 8000ace:	3302      	adds	r3, #2
 8000ad0:	61fb      	str	r3, [r7, #28]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d117      	bne.n	8000b0a <APPE_SysEvtReadyProcessing+0x60>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000ada:	f7ff fd2b 	bl	8000534 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000ade:	230d      	movs	r3, #13
 8000ae0:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000ae2:	237f      	movs	r3, #127	; 0x7f
 8000ae4:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000ae6:	f7ff fdff 	bl	80006e8 <LL_DBGMCU_GetRevisionID>
 8000aea:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = RevisionID;
 8000aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	4618      	mov	r0, r3
 8000af8:	f010 fcde 	bl	80114b8 <SHCI_C2_Config>

    APP_BLE_Init();
 8000afc:	f011 fbbc 	bl	8012278 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000b00:	2100      	movs	r1, #0
 8000b02:	2001      	movs	r0, #1
 8000b04:	f012 ff22 	bl	801394c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000b08:	e007      	b.n	8000b1a <APPE_SysEvtReadyProcessing+0x70>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d103      	bne.n	8000b1a <APPE_SysEvtReadyProcessing+0x70>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
  return;
 8000b18:	bf00      	nop
 8000b1a:	bf00      	nop
}
 8000b1c:	3728      	adds	r7, #40	; 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b084      	sub	sp, #16
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b2a:	f001 f86d 	bl	8001c08 <HAL_GetTick>
 8000b2e:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b3a:	d00a      	beq.n	8000b52 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000b3c:	f001 f87c 	bl	8001c38 <HAL_GetTickFreq>
 8000b40:	4603      	mov	r3, r0
 8000b42:	461a      	mov	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4413      	add	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b4a:	e002      	b.n	8000b52 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000b4c:	f7ff fe3c 	bl	80007c8 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8000b50:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000b52:	f001 f859 	bl	8001c08 <HAL_GetTick>
 8000b56:	4602      	mov	r2, r0
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d8f4      	bhi.n	8000b4c <HAL_Delay+0x2a>
  }
}
 8000b62:	bf00      	nop
 8000b64:	bf00      	nop
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	f012 ff1a 	bl	80139ac <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000b80:	bf00      	nop
}
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	f012 ff08 	bl	80139ac <UTIL_SEQ_Run>

  return;
 8000b9c:	bf00      	nop
}
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000bac:	2100      	movs	r1, #0
 8000bae:	2004      	movs	r0, #4
 8000bb0:	f013 f81a 	bl	8013be8 <UTIL_SEQ_SetTask>
  return;
 8000bb4:	bf00      	nop
}
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000bc4:	2002      	movs	r0, #2
 8000bc6:	f013 f87b 	bl	8013cc0 <UTIL_SEQ_SetEvt>
  return;
 8000bca:	bf00      	nop
}
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000bda:	2002      	movs	r0, #2
 8000bdc:	f013 f890 	bl	8013d00 <UTIL_SEQ_WaitEvt>
  return;
 8000be0:	bf00      	nop
}
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <LL_EXTI_EnableIT_0_31>:
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <LL_EXTI_EnableIT_0_31+0x24>)
 8000bf2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000bf6:	4905      	ldr	r1, [pc, #20]	; (8000c0c <LL_EXTI_EnableIT_0_31+0x24>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	58000800 	.word	0x58000800

08000c10 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4904      	ldr	r1, [pc, #16]	; (8000c30 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	600b      	str	r3, [r1, #0]

}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	58000800 	.word	0x58000800

08000c34 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000c40:	4a64      	ldr	r2, [pc, #400]	; (8000dd4 <HW_TS_Init+0x1a0>)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000c46:	4b63      	ldr	r3, [pc, #396]	; (8000dd4 <HW_TS_Init+0x1a0>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	22ca      	movs	r2, #202	; 0xca
 8000c4e:	625a      	str	r2, [r3, #36]	; 0x24
 8000c50:	4b60      	ldr	r3, [pc, #384]	; (8000dd4 <HW_TS_Init+0x1a0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2253      	movs	r2, #83	; 0x53
 8000c58:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000c5a:	4b5f      	ldr	r3, [pc, #380]	; (8000dd8 <HW_TS_Init+0x1a4>)
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	4a5e      	ldr	r2, [pc, #376]	; (8000dd8 <HW_TS_Init+0x1a4>)
 8000c60:	f043 0320 	orr.w	r3, r3, #32
 8000c64:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000c66:	4b5c      	ldr	r3, [pc, #368]	; (8000dd8 <HW_TS_Init+0x1a4>)
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	f003 0307 	and.w	r3, r3, #7
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	f1c3 0304 	rsb	r3, r3, #4
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	4b58      	ldr	r3, [pc, #352]	; (8000ddc <HW_TS_Init+0x1a8>)
 8000c7a:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000c7c:	4b56      	ldr	r3, [pc, #344]	; (8000dd8 <HW_TS_Init+0x1a4>)
 8000c7e:	691b      	ldr	r3, [r3, #16]
 8000c80:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000c84:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000c88:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	fa92 f2a2 	rbit	r2, r2
 8000c90:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000c96:	697a      	ldr	r2, [r7, #20]
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	d101      	bne.n	8000ca0 <HW_TS_Init+0x6c>
  {
    return 32U;
 8000c9c:	2220      	movs	r2, #32
 8000c9e:	e003      	b.n	8000ca8 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8000ca0:	697a      	ldr	r2, [r7, #20]
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	40d3      	lsrs	r3, r2
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	3301      	adds	r3, #1
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	4b4b      	ldr	r3, [pc, #300]	; (8000de0 <HW_TS_Init+0x1ac>)
 8000cb2:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000cb4:	4b48      	ldr	r3, [pc, #288]	; (8000dd8 <HW_TS_Init+0x1a4>)
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	4b47      	ldr	r3, [pc, #284]	; (8000de4 <HW_TS_Init+0x1b0>)
 8000cc6:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000cc8:	4b46      	ldr	r3, [pc, #280]	; (8000de4 <HW_TS_Init+0x1b0>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	4a44      	ldr	r2, [pc, #272]	; (8000de0 <HW_TS_Init+0x1ac>)
 8000cd0:	7812      	ldrb	r2, [r2, #0]
 8000cd2:	fb02 f303 	mul.w	r3, r2, r3
 8000cd6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000cda:	4a40      	ldr	r2, [pc, #256]	; (8000ddc <HW_TS_Init+0x1a8>)
 8000cdc:	7812      	ldrb	r2, [r2, #0]
 8000cde:	40d3      	lsrs	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d904      	bls.n	8000cf6 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000cec:	4b3e      	ldr	r3, [pc, #248]	; (8000de8 <HW_TS_Init+0x1b4>)
 8000cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cf2:	801a      	strh	r2, [r3, #0]
 8000cf4:	e003      	b.n	8000cfe <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	4b3b      	ldr	r3, [pc, #236]	; (8000de8 <HW_TS_Init+0x1b4>)
 8000cfc:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000cfe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000d02:	f7ff ff85 	bl	8000c10 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000d06:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000d0a:	f7ff ff6d 	bl	8000be8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d143      	bne.n	8000d9c <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000d14:	4b35      	ldr	r3, [pc, #212]	; (8000dec <HW_TS_Init+0x1b8>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000d1a:	4b35      	ldr	r3, [pc, #212]	; (8000df0 <HW_TS_Init+0x1bc>)
 8000d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d20:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000d22:	2300      	movs	r3, #0
 8000d24:	77fb      	strb	r3, [r7, #31]
 8000d26:	e00c      	b.n	8000d42 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000d28:	7ffa      	ldrb	r2, [r7, #31]
 8000d2a:	4932      	ldr	r1, [pc, #200]	; (8000df4 <HW_TS_Init+0x1c0>)
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	4413      	add	r3, r2
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	440b      	add	r3, r1
 8000d36:	330c      	adds	r3, #12
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000d3c:	7ffb      	ldrb	r3, [r7, #31]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	77fb      	strb	r3, [r7, #31]
 8000d42:	7ffb      	ldrb	r3, [r7, #31]
 8000d44:	2b05      	cmp	r3, #5
 8000d46:	d9ef      	bls.n	8000d28 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000d48:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <HW_TS_Init+0x1c4>)
 8000d4a:	2206      	movs	r2, #6
 8000d4c:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000d4e:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <HW_TS_Init+0x1a0>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <HW_TS_Init+0x1a0>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d60:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <HW_TS_Init+0x1a0>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <HW_TS_Init+0x1a0>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000d76:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000d78:	4b20      	ldr	r3, [pc, #128]	; (8000dfc <HW_TS_Init+0x1c8>)
 8000d7a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d7e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000d80:	2003      	movs	r0, #3
 8000d82:	f001 f8be 	bl	8001f02 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <HW_TS_Init+0x1a0>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <HW_TS_Init+0x1a0>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	e00a      	b.n	8000db2 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HW_TS_Init+0x1a0>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d002      	beq.n	8000db2 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000dac:	2003      	movs	r0, #3
 8000dae:	f001 f89a 	bl	8001ee6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <HW_TS_Init+0x1a0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	22ff      	movs	r2, #255	; 0xff
 8000dba:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2103      	movs	r1, #3
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f001 f85c 	bl	8001e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000dc6:	2003      	movs	r0, #3
 8000dc8:	f001 f873 	bl	8001eb2 <HAL_NVIC_EnableIRQ>

  return;
 8000dcc:	bf00      	nop
}
 8000dce:	3720      	adds	r7, #32
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	2000064c 	.word	0x2000064c
 8000dd8:	40002800 	.word	0x40002800
 8000ddc:	20000650 	.word	0x20000650
 8000de0:	20000651 	.word	0x20000651
 8000de4:	20000652 	.word	0x20000652
 8000de8:	20000654 	.word	0x20000654
 8000dec:	20000558 	.word	0x20000558
 8000df0:	20000554 	.word	0x20000554
 8000df4:	200004c0 	.word	0x200004c0
 8000df8:	20000550 	.word	0x20000550
 8000dfc:	58000800 	.word	0x58000800

08000e00 <LL_RCC_LSE_SetDriveCapability>:
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e10:	f023 0218 	bic.w	r2, r3, #24
 8000e14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <LL_AHB2_GRP1_EnableClock>:
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e50:	68fb      	ldr	r3, [r7, #12]
}
 8000e52:	bf00      	nop
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	3220      	adds	r2, #32
 8000e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e74:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <LL_HSEM_1StepLock+0x2c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d001      	beq.n	8000e7e <LL_HSEM_1StepLock+0x1e>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e000      	b.n	8000e80 <LL_HSEM_1StepLock+0x20>
 8000e7e:	2300      	movs	r3, #0
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	80000400 	.word	0x80000400

08000e90 <print_pal_error>:
VL53L0X_Dev_t		dev;
VL53L0X_DEV			Dev = &dev;
char ary[50];
int sensor = 0;
uint16_t stop = 500;
void print_pal_error(VL53L0X_Error Status){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
    char buf[VL53L0X_MAX_STRING_LENGTH];
    VL53L0X_GetPalErrorString(Status, buf);
 8000e9a:	f107 0208 	add.w	r2, r7, #8
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f008 fd03 	bl	80098b0 <VL53L0X_GetPalErrorString>
//    sprintf(ary,"API Status: %i : %s\n", Status, buf);
//    HAL_UART_Transmit(&huart1, ary, strlen((char*)ary), 0xFFFF);
}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	; 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <rangingTest>:

VL53L0X_Error rangingTest(VL53L0X_Dev_t *pMyDevice)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b094      	sub	sp, #80	; 0x50
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    FixPoint1616_t LimitCheckCurrent;
    uint32_t refSpadCount;
    uint8_t isApertureSpads;
    uint8_t VhvSettings;
    uint8_t PhaseCal;
    uint8_t left[] = "left\n\r";
 8000ec2:	4a78      	ldr	r2, [pc, #480]	; (80010a4 <rangingTest+0x1f0>)
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ecc:	6018      	str	r0, [r3, #0]
 8000ece:	3304      	adds	r3, #4
 8000ed0:	8019      	strh	r1, [r3, #0]
 8000ed2:	3302      	adds	r3, #2
 8000ed4:	0c0a      	lsrs	r2, r1, #16
 8000ed6:	701a      	strb	r2, [r3, #0]
    uint8_t center[] = "center\n\r";
 8000ed8:	4a73      	ldr	r2, [pc, #460]	; (80010a8 <rangingTest+0x1f4>)
 8000eda:	f107 0310 	add.w	r3, r7, #16
 8000ede:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ee0:	c303      	stmia	r3!, {r0, r1}
 8000ee2:	701a      	strb	r2, [r3, #0]
    uint8_t right[] = "right\n\r";
 8000ee4:	4a71      	ldr	r2, [pc, #452]	; (80010ac <rangingTest+0x1f8>)
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eee:	e883 0003 	stmia.w	r3, {r0, r1}
    if(Status == VL53L0X_ERROR_NONE)
 8000ef2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10a      	bne.n	8000f10 <rangingTest+0x5c>
    {
//        sprintf (ary,"Call of VL53L0X_StaticInit\n");
//        HAL_UART_Transmit(&huart1, ary, strlen((char*)ary), 0xFFFF);
        Status = VL53L0X_StaticInit(pMyDevice); // Device Initialization
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f008 fd02 	bl	8009904 <VL53L0X_StaticInit>
 8000f00:	4603      	mov	r3, r0
 8000f02:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        print_pal_error(Status);
 8000f06:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ffc0 	bl	8000e90 <print_pal_error>
    }

    if(Status == VL53L0X_ERROR_NONE)
 8000f10:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d10f      	bne.n	8000f38 <rangingTest+0x84>
    {
//        sprintf (ary,"Call of VL53L0X_PerformRefCalibration\n");
//        HAL_UART_Transmit(&huart1, ary, strlen((char*)ary), 0xFFFF);
        Status = VL53L0X_PerformRefCalibration(pMyDevice,
 8000f18:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8000f1c:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000f20:	4619      	mov	r1, r3
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f009 fbe0 	bl	800a6e8 <VL53L0X_PerformRefCalibration>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        		&VhvSettings, &PhaseCal); // Device Initialization
        print_pal_error(Status);
 8000f2e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ffac 	bl	8000e90 <print_pal_error>
    }

    if(Status == VL53L0X_ERROR_NONE)
 8000f38:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d10f      	bne.n	8000f60 <rangingTest+0xac>
    {
//        printf ("Call of VL53L0X_PerformRefSpadManagement\n");
        Status = VL53L0X_PerformRefSpadManagement(pMyDevice,
 8000f40:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8000f44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f00a f85e 	bl	800b00c <VL53L0X_PerformRefSpadManagement>
 8000f50:	4603      	mov	r3, r0
 8000f52:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        		&refSpadCount, &isApertureSpads); // Device Initialization
//        printf ("refSpadCount = %d, isApertureSpads = %d\n", refSpadCount, isApertureSpads);
        print_pal_error(Status);
 8000f56:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff ff98 	bl	8000e90 <print_pal_error>
    }

    if(Status == VL53L0X_ERROR_NONE)
 8000f60:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d10b      	bne.n	8000f80 <rangingTest+0xcc>
    {

        // no need to do this when we use VL53L0X_PerformSingleRangingMeasurement
//        printf ("Call of VL53L0X_SetDeviceMode\n");
        Status = VL53L0X_SetDeviceMode(pMyDevice, VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 8000f68:	2100      	movs	r1, #0
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f008 fedc 	bl	8009d28 <VL53L0X_SetDeviceMode>
 8000f70:	4603      	mov	r3, r0
 8000f72:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        print_pal_error(Status);
 8000f76:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ff88 	bl	8000e90 <print_pal_error>
    }

    // Enable/Disable Sigma and Signal check
    if (Status == VL53L0X_ERROR_NONE) {
 8000f80:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d107      	bne.n	8000f98 <rangingTest+0xe4>
        Status = VL53L0X_SetLimitCheckEnable(pMyDevice,
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f009 f92f 	bl	800a1f0 <VL53L0X_SetLimitCheckEnable>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        		VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
    }
    if (Status == VL53L0X_ERROR_NONE) {
 8000f98:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d107      	bne.n	8000fb0 <rangingTest+0xfc>
        Status = VL53L0X_SetLimitCheckEnable(pMyDevice,
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f009 f923 	bl	800a1f0 <VL53L0X_SetLimitCheckEnable>
 8000faa:	4603      	mov	r3, r0
 8000fac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        		VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8000fb0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d107      	bne.n	8000fc8 <rangingTest+0x114>
        Status = VL53L0X_SetLimitCheckEnable(pMyDevice,
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2103      	movs	r1, #3
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f009 f917 	bl	800a1f0 <VL53L0X_SetLimitCheckEnable>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        		VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 1);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8000fc8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d108      	bne.n	8000fe2 <rangingTest+0x12e>
        Status = VL53L0X_SetLimitCheckValue(pMyDevice,
 8000fd0:	f640 02d4 	movw	r2, #2260	; 0x8d4
 8000fd4:	2103      	movs	r1, #3
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f009 f9ba 	bl	800a350 <VL53L0X_SetLimitCheckValue>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    /*
     *  Step  4 : Test ranging mode
     */

    if(Status == VL53L0X_ERROR_NONE)
 8000fe2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d156      	bne.n	8001098 <rangingTest+0x1e4>
    {
//        for(i=0;i<10;i++){
//            printf ("Call of VL53L0X_PerformSingleRangingMeasurement\n");
            Status = VL53L0X_PerformSingleRangingMeasurement(pMyDevice,
 8000fea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fee:	4619      	mov	r1, r3
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f009 fe1b 	bl	800ac2c <VL53L0X_PerformSingleRangingMeasurement>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            		&RangingMeasurementData);

            print_pal_error(Status);
 8000ffc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff45 	bl	8000e90 <print_pal_error>
            print_range_status(&RangingMeasurementData);
 8001006:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f85a 	bl	80010c4 <print_range_status>

            VL53L0X_GetLimitCheckCurrent(pMyDevice,
 8001010:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001014:	461a      	mov	r2, r3
 8001016:	2103      	movs	r1, #3
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f009 fa89 	bl	800a530 <VL53L0X_GetLimitCheckCurrent>
//            sprintf(ary,"RANGE IGNORE THRESHOLD: %f\n\n", (float)LimitCheckCurrent/65536.0);
//            HAL_UART_Transmit(&huart1, ary, strlen((char*)ary), 0xFFFF);

//            if (Status != VL53L0X_ERROR_NONE) break;

            sprintf(ary,"distance: %i\n\r",RangingMeasurementData.RangeMilliMeter);
 800101e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001020:	461a      	mov	r2, r3
 8001022:	4923      	ldr	r1, [pc, #140]	; (80010b0 <rangingTest+0x1fc>)
 8001024:	4823      	ldr	r0, [pc, #140]	; (80010b4 <rangingTest+0x200>)
 8001026:	f013 f9c5 	bl	80143b4 <siprintf>
            HAL_UART_Transmit(&huart1, ary, strlen((char*)ary), 10);
 800102a:	4822      	ldr	r0, [pc, #136]	; (80010b4 <rangingTest+0x200>)
 800102c:	f7ff f8a8 	bl	8000180 <strlen>
 8001030:	4603      	mov	r3, r0
 8001032:	b29a      	uxth	r2, r3
 8001034:	230a      	movs	r3, #10
 8001036:	491f      	ldr	r1, [pc, #124]	; (80010b4 <rangingTest+0x200>)
 8001038:	481f      	ldr	r0, [pc, #124]	; (80010b8 <rangingTest+0x204>)
 800103a:	f005 fbb7 	bl	80067ac <HAL_UART_Transmit>
            if(sensor == 1){
 800103e:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <rangingTest+0x208>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d10a      	bne.n	800105c <rangingTest+0x1a8>
                        	if(RangingMeasurementData.RangeMilliMeter < stop){
 8001046:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001048:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <rangingTest+0x20c>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	429a      	cmp	r2, r3
 800104e:	d205      	bcs.n	800105c <rangingTest+0x1a8>
                        	CDC_Transmit_FS(left, sizeof(left));
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	2107      	movs	r1, #7
 8001056:	4618      	mov	r0, r3
 8001058:	f011 ffd2 	bl	8013000 <CDC_Transmit_FS>
                        }
            }
                        if(sensor == 2){
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <rangingTest+0x208>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d10a      	bne.n	800107a <rangingTest+0x1c6>
                                    	if(RangingMeasurementData.RangeMilliMeter < stop){
 8001064:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <rangingTest+0x20c>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	d205      	bcs.n	800107a <rangingTest+0x1c6>
                                    		CDC_Transmit_FS(center, sizeof(center));
 800106e:	f107 0310 	add.w	r3, r7, #16
 8001072:	2109      	movs	r1, #9
 8001074:	4618      	mov	r0, r3
 8001076:	f011 ffc3 	bl	8013000 <CDC_Transmit_FS>
                                    }
                        }
                        if(sensor == 3){
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <rangingTest+0x208>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b03      	cmp	r3, #3
 8001080:	d10a      	bne.n	8001098 <rangingTest+0x1e4>
                                         if(RangingMeasurementData.RangeMilliMeter < stop){
 8001082:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <rangingTest+0x20c>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	429a      	cmp	r2, r3
 800108a:	d205      	bcs.n	8001098 <rangingTest+0x1e4>
                                                		CDC_Transmit_FS(right, sizeof(right));
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	2108      	movs	r1, #8
 8001092:	4618      	mov	r0, r3
 8001094:	f011 ffb4 	bl	8013000 <CDC_Transmit_FS>
                                                }
}
                        }
    return Status;
 8001098:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800109c:	4618      	mov	r0, r3
 800109e:	3750      	adds	r7, #80	; 0x50
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	080147b8 	.word	0x080147b8
 80010a8:	080147c0 	.word	0x080147c0
 80010ac:	080147cc 	.word	0x080147cc
 80010b0:	080147a8 	.word	0x080147a8
 80010b4:	2000079c 	.word	0x2000079c
 80010b8:	2000070c 	.word	0x2000070c
 80010bc:	200007d0 	.word	0x200007d0
 80010c0:	20000004 	.word	0x20000004

080010c4 <print_range_status>:
void print_range_status(VL53L0X_RangingMeasurementData_t* pRangingMeasurementData){ //범위 ?��?�� 문자?�� ?��출함?��
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08c      	sub	sp, #48	; 0x30
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

    /*
     * New Range Status: data is valid when pRangingMeasurementData->RangeStatus = 0
     */

    RangeStatus = pRangingMeasurementData->RangeStatus;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	7e1b      	ldrb	r3, [r3, #24]
 80010d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    VL53L0X_GetRangeStatusString(RangeStatus, buf);
 80010d4:	f107 020c 	add.w	r2, r7, #12
 80010d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010dc:	4611      	mov	r1, r2
 80010de:	4618      	mov	r0, r3
 80010e0:	f008 fbd1 	bl	8009886 <VL53L0X_GetRangeStatusString>
//    sprintf(ary,"Range Status: %i : %s\n", RangeStatus, buf);
//    HAL_UART_Transmit(&huart1, ary, strlen((char*)ary), 0xFFFF);

}
 80010e4:	bf00      	nop
 80010e6:	3730      	adds	r7, #48	; 0x30
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0dc      	sub	sp, #368	; 0x170
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
			VL53L0X_Dev_t MyDevice;
			VL53L0X_Dev_t *pMyDevice = &MyDevice;
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
			int32_t init_done = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001104:	f000 fd12 	bl	8001b2c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001108:	f7ff fb9e 	bl	8000848 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110c:	f000 f8d8 	bl	80012c0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001110:	f000 f94a 	bl	80013a8 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8001114:	f000 f9ae 	bl	8001474 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001118:	f000 fa3e 	bl	8001598 <MX_GPIO_Init>
  MX_I2C1_Init();
 800111c:	f000 f96a 	bl	80013f4 <MX_I2C1_Init>
  MX_USB_Device_Init();
 8001120:	f011 feb0 	bl	8012e84 <MX_USB_Device_Init>
  MX_USART1_UART_Init();
 8001124:	f000 f9ec 	bl	8001500 <MX_USART1_UART_Init>
  MX_RF_Init();
 8001128:	f000 f9b8 	bl	800149c <MX_RF_Init>
  MX_RTC_Init();
 800112c:	f000 f9be 	bl	80014ac <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  pMyDevice->I2cDevAddr      = 0x52;
 8001130:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001134:	2252      	movs	r2, #82	; 0x52
 8001136:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
     pMyDevice->comms_type      =  1;
 800113a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800113e:	2201      	movs	r2, #1
 8001140:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
     pMyDevice->comms_speed_khz =  400;
 8001144:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001148:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800114c:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e
         if (Status != VL53L0X_ERROR_NONE) {
 8001150:	f997 316f 	ldrsb.w	r3, [r7, #367]	; 0x16f
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <main+0x78>
             Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001158:	23ec      	movs	r3, #236	; 0xec
 800115a:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
             init_done = 1;
 800115e:	2301      	movs	r3, #1
 8001160:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
//         HAL_UART_Transmit(&huart1, ary, strlen((char*)ary), 0xFFFF);
         }
   #ifdef VL53L0X_LOG_ENABLE
       VL53L0X_trace_config("test.log", TRACE_MODULE_ALL, TRACE_LEVEL_ALL, TRACE_FUNCTION_ALL);
   #endif
       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2120      	movs	r1, #32
 8001168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116c:	f001 f848 	bl	8002200 <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2140      	movs	r1, #64	; 0x40
 8001174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001178:	f001 f842 	bl	8002200 <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2180      	movs	r1, #128	; 0x80
 8001180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001184:	f001 f83c 	bl	8002200 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001188:	f7ff fb6c 	bl	8000864 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 800118c:	f7ff fcee 	bl	8000b6c <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    if(Status == VL53L0X_ERROR_NONE)
 8001190:	f997 316f 	ldrsb.w	r3, [r7, #367]	; 0x16f
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1f9      	bne.n	800118c <main+0xa0>
   	  	      {
   	  		  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001198:	2201      	movs	r2, #1
 800119a:	2120      	movs	r1, #32
 800119c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a0:	f001 f82e 	bl	8002200 <HAL_GPIO_WritePin>
   	  		  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2140      	movs	r1, #64	; 0x40
 80011a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ac:	f001 f828 	bl	8002200 <HAL_GPIO_WritePin>
   	  		  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2180      	movs	r1, #128	; 0x80
 80011b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b8:	f001 f822 	bl	8002200 <HAL_GPIO_WritePin>
   	  		  	  sensor = 1;
 80011bc:	4b3a      	ldr	r3, [pc, #232]	; (80012a8 <main+0x1bc>)
 80011be:	2201      	movs	r2, #1
 80011c0:	601a      	str	r2, [r3, #0]
   	  		  	  sprintf(ary,"sensor ");
 80011c2:	493a      	ldr	r1, [pc, #232]	; (80012ac <main+0x1c0>)
 80011c4:	483a      	ldr	r0, [pc, #232]	; (80012b0 <main+0x1c4>)
 80011c6:	f013 f8f5 	bl	80143b4 <siprintf>
   	  		  	  HAL_UART_Transmit(&huart1, ary, strlen((char *)ary), 10);
 80011ca:	4839      	ldr	r0, [pc, #228]	; (80012b0 <main+0x1c4>)
 80011cc:	f7fe ffd8 	bl	8000180 <strlen>
 80011d0:	4603      	mov	r3, r0
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	230a      	movs	r3, #10
 80011d6:	4936      	ldr	r1, [pc, #216]	; (80012b0 <main+0x1c4>)
 80011d8:	4836      	ldr	r0, [pc, #216]	; (80012b4 <main+0x1c8>)
 80011da:	f005 fae7 	bl	80067ac <HAL_UART_Transmit>
   	  	          Status = rangingTest(pMyDevice);
 80011de:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 80011e2:	f7ff fe67 	bl	8000eb4 <rangingTest>
 80011e6:	4603      	mov	r3, r0
 80011e8:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
   	  	          HAL_Delay(1);
 80011ec:	2001      	movs	r0, #1
 80011ee:	f7ff fc98 	bl	8000b22 <HAL_Delay>

   	  	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2120      	movs	r1, #32
 80011f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fa:	f001 f801 	bl	8002200 <HAL_GPIO_WritePin>
   	  	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80011fe:	2201      	movs	r2, #1
 8001200:	2140      	movs	r1, #64	; 0x40
 8001202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001206:	f000 fffb 	bl	8002200 <HAL_GPIO_WritePin>
   	  	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001212:	f000 fff5 	bl	8002200 <HAL_GPIO_WritePin>
   	  	          sensor = 2;
 8001216:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <main+0x1bc>)
 8001218:	2202      	movs	r2, #2
 800121a:	601a      	str	r2, [r3, #0]
   	  	          sprintf(ary,"sensor1 ");
 800121c:	4926      	ldr	r1, [pc, #152]	; (80012b8 <main+0x1cc>)
 800121e:	4824      	ldr	r0, [pc, #144]	; (80012b0 <main+0x1c4>)
 8001220:	f013 f8c8 	bl	80143b4 <siprintf>
   	  	          HAL_UART_Transmit(&huart1, ary, strlen((char *)ary), 10);
 8001224:	4822      	ldr	r0, [pc, #136]	; (80012b0 <main+0x1c4>)
 8001226:	f7fe ffab 	bl	8000180 <strlen>
 800122a:	4603      	mov	r3, r0
 800122c:	b29a      	uxth	r2, r3
 800122e:	230a      	movs	r3, #10
 8001230:	491f      	ldr	r1, [pc, #124]	; (80012b0 <main+0x1c4>)
 8001232:	4820      	ldr	r0, [pc, #128]	; (80012b4 <main+0x1c8>)
 8001234:	f005 faba 	bl	80067ac <HAL_UART_Transmit>
   	  	          Status = rangingTest(pMyDevice);
 8001238:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 800123c:	f7ff fe3a 	bl	8000eb4 <rangingTest>
 8001240:	4603      	mov	r3, r0
 8001242:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
   	  	          HAL_Delay(1);
 8001246:	2001      	movs	r0, #1
 8001248:	f7ff fc6b 	bl	8000b22 <HAL_Delay>

   	  	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	2120      	movs	r1, #32
 8001250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001254:	f000 ffd4 	bl	8002200 <HAL_GPIO_WritePin>
   	  	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	2140      	movs	r1, #64	; 0x40
 800125c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001260:	f000 ffce 	bl	8002200 <HAL_GPIO_WritePin>
   	  	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8001264:	2201      	movs	r2, #1
 8001266:	2180      	movs	r1, #128	; 0x80
 8001268:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126c:	f000 ffc8 	bl	8002200 <HAL_GPIO_WritePin>
   	  			  sensor = 3;
 8001270:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <main+0x1bc>)
 8001272:	2203      	movs	r2, #3
 8001274:	601a      	str	r2, [r3, #0]
   	  			  sprintf(ary,"sensor2 ");
 8001276:	4911      	ldr	r1, [pc, #68]	; (80012bc <main+0x1d0>)
 8001278:	480d      	ldr	r0, [pc, #52]	; (80012b0 <main+0x1c4>)
 800127a:	f013 f89b 	bl	80143b4 <siprintf>
   	  			  HAL_UART_Transmit(&huart1, ary, strlen((char *)ary), 10);
 800127e:	480c      	ldr	r0, [pc, #48]	; (80012b0 <main+0x1c4>)
 8001280:	f7fe ff7e 	bl	8000180 <strlen>
 8001284:	4603      	mov	r3, r0
 8001286:	b29a      	uxth	r2, r3
 8001288:	230a      	movs	r3, #10
 800128a:	4909      	ldr	r1, [pc, #36]	; (80012b0 <main+0x1c4>)
 800128c:	4809      	ldr	r0, [pc, #36]	; (80012b4 <main+0x1c8>)
 800128e:	f005 fa8d 	bl	80067ac <HAL_UART_Transmit>
   	  			  Status = rangingTest(pMyDevice);
 8001292:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 8001296:	f7ff fe0d 	bl	8000eb4 <rangingTest>
 800129a:	4603      	mov	r3, r0
 800129c:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
   	  			  HAL_Delay(1);
 80012a0:	2001      	movs	r0, #1
 80012a2:	f7ff fc3e 	bl	8000b22 <HAL_Delay>
    MX_APPE_Process();
 80012a6:	e771      	b.n	800118c <main+0xa0>
 80012a8:	200007d0 	.word	0x200007d0
 80012ac:	080147d4 	.word	0x080147d4
 80012b0:	2000079c 	.word	0x2000079c
 80012b4:	2000070c 	.word	0x2000070c
 80012b8:	080147dc 	.word	0x080147dc
 80012bc:	080147e8 	.word	0x080147e8

080012c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b09a      	sub	sp, #104	; 0x68
 80012c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c6:	f107 0320 	add.w	r3, r7, #32
 80012ca:	2248      	movs	r2, #72	; 0x48
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f012 fde4 	bl	8013e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]
 80012e2:	615a      	str	r2, [r3, #20]
 80012e4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012e6:	f003 fb27 	bl	8004938 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80012ea:	2000      	movs	r0, #0
 80012ec:	f7ff fd88 	bl	8000e00 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f0:	4b2c      	ldr	r3, [pc, #176]	; (80013a4 <SystemClock_Config+0xe4>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012f8:	4a2a      	ldr	r2, [pc, #168]	; (80013a4 <SystemClock_Config+0xe4>)
 80012fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	4b28      	ldr	r3, [pc, #160]	; (80013a4 <SystemClock_Config+0xe4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001308:	603b      	str	r3, [r7, #0]
 800130a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800130c:	2367      	movs	r3, #103	; 0x67
 800130e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001310:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001316:	2301      	movs	r3, #1
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800131a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001320:	2301      	movs	r3, #1
 8001322:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001324:	2301      	movs	r3, #1
 8001326:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001328:	2340      	movs	r3, #64	; 0x40
 800132a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800132c:	2300      	movs	r3, #0
 800132e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001330:	2360      	movs	r3, #96	; 0x60
 8001332:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001334:	2302      	movs	r3, #2
 8001336:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001338:	2301      	movs	r3, #1
 800133a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001340:	2318      	movs	r3, #24
 8001342:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001344:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001348:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 800134a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800134e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001350:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001354:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001356:	f107 0320 	add.w	r3, r7, #32
 800135a:	4618      	mov	r0, r3
 800135c:	f003 fe90 	bl	8005080 <HAL_RCC_OscConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001366:	f000 f973 	bl	8001650 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800136a:	236f      	movs	r3, #111	; 0x6f
 800136c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136e:	2303      	movs	r3, #3
 8001370:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	2101      	movs	r1, #1
 800138a:	4618      	mov	r0, r3
 800138c:	f004 f9ec 	bl	8005768 <HAL_RCC_ClockConfig>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001396:	f000 f95b 	bl	8001650 <Error_Handler>
  }
}
 800139a:	bf00      	nop
 800139c:	3768      	adds	r7, #104	; 0x68
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	58000400 	.word	0x58000400

080013a8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b094      	sub	sp, #80	; 0x50
 80013ac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ae:	463b      	mov	r3, r7
 80013b0:	2250      	movs	r2, #80	; 0x50
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f012 fd71 	bl	8013e9c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80013ba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80013be:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80013c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013c4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80013c6:	2300      	movs	r3, #0
 80013c8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ce:	463b      	mov	r3, r7
 80013d0:	4618      	mov	r0, r3
 80013d2:	f004 fe06 	bl	8005fe2 <HAL_RCCEx_PeriphCLKConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80013dc:	f000 f938 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  LL_HSEM_1StepLock( HSEM, 5 );
 80013e0:	2105      	movs	r1, #5
 80013e2:	4803      	ldr	r0, [pc, #12]	; (80013f0 <PeriphCommonClock_Config+0x48>)
 80013e4:	f7ff fd3c 	bl	8000e60 <LL_HSEM_1StepLock>
  /* USER CODE END Smps */
}
 80013e8:	bf00      	nop
 80013ea:	3750      	adds	r7, #80	; 0x50
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	58001400 	.word	0x58001400

080013f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013f8:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <MX_I2C1_Init+0x74>)
 80013fa:	4a1c      	ldr	r2, [pc, #112]	; (800146c <MX_I2C1_Init+0x78>)
 80013fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 80013fe:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <MX_I2C1_Init+0x74>)
 8001400:	4a1b      	ldr	r2, [pc, #108]	; (8001470 <MX_I2C1_Init+0x7c>)
 8001402:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <MX_I2C1_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <MX_I2C1_Init+0x74>)
 800140c:	2201      	movs	r2, #1
 800140e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <MX_I2C1_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <MX_I2C1_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MX_I2C1_Init+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_I2C1_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_I2C1_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800142e:	480e      	ldr	r0, [pc, #56]	; (8001468 <MX_I2C1_Init+0x74>)
 8001430:	f000 ff22 	bl	8002278 <HAL_I2C_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800143a:	f000 f909 	bl	8001650 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800143e:	2100      	movs	r1, #0
 8001440:	4809      	ldr	r0, [pc, #36]	; (8001468 <MX_I2C1_Init+0x74>)
 8001442:	f001 fc09 	bl	8002c58 <HAL_I2CEx_ConfigAnalogFilter>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800144c:	f000 f900 	bl	8001650 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001450:	2100      	movs	r1, #0
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_I2C1_Init+0x74>)
 8001454:	f001 fc4b 	bl	8002cee <HAL_I2CEx_ConfigDigitalFilter>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800145e:	f000 f8f7 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000658 	.word	0x20000658
 800146c:	40005400 	.word	0x40005400
 8001470:	00300f38 	.word	0x00300f38

08001474 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_IPCC_Init+0x20>)
 800147a:	4a07      	ldr	r2, [pc, #28]	; (8001498 <MX_IPCC_Init+0x24>)
 800147c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_IPCC_Init+0x20>)
 8001480:	f001 fc82 	bl	8002d88 <HAL_IPCC_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800148a:	f000 f8e1 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200006ac 	.word	0x200006ac
 8001498:	58000c00 	.word	0x58000c00

0800149c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_RTC_Init+0x4c>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	; (80014fc <MX_RTC_Init+0x50>)
 80014b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <MX_RTC_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80014bc:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <MX_RTC_Init+0x4c>)
 80014be:	220f      	movs	r2, #15
 80014c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <MX_RTC_Init+0x4c>)
 80014c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80014c8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <MX_RTC_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <MX_RTC_Init+0x4c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <MX_RTC_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <MX_RTC_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_RTC_Init+0x4c>)
 80014e4:	f005 f804 	bl	80064f0 <HAL_RTC_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80014ee:	f000 f8af 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200006e8 	.word	0x200006e8
 80014fc:	40002800 	.word	0x40002800

08001500 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001504:	4b22      	ldr	r3, [pc, #136]	; (8001590 <MX_USART1_UART_Init+0x90>)
 8001506:	4a23      	ldr	r2, [pc, #140]	; (8001594 <MX_USART1_UART_Init+0x94>)
 8001508:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800150a:	4b21      	ldr	r3, [pc, #132]	; (8001590 <MX_USART1_UART_Init+0x90>)
 800150c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001510:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001512:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <MX_USART1_UART_Init+0x90>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <MX_USART1_UART_Init+0x90>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <MX_USART1_UART_Init+0x90>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001524:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <MX_USART1_UART_Init+0x90>)
 8001526:	220c      	movs	r2, #12
 8001528:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <MX_USART1_UART_Init+0x90>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001530:	4b17      	ldr	r3, [pc, #92]	; (8001590 <MX_USART1_UART_Init+0x90>)
 8001532:	2200      	movs	r2, #0
 8001534:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001536:	4b16      	ldr	r3, [pc, #88]	; (8001590 <MX_USART1_UART_Init+0x90>)
 8001538:	2200      	movs	r2, #0
 800153a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MX_USART1_UART_Init+0x90>)
 800153e:	2200      	movs	r2, #0
 8001540:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <MX_USART1_UART_Init+0x90>)
 8001544:	2200      	movs	r2, #0
 8001546:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001548:	4811      	ldr	r0, [pc, #68]	; (8001590 <MX_USART1_UART_Init+0x90>)
 800154a:	f005 f8df 	bl	800670c <HAL_UART_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001554:	f000 f87c 	bl	8001650 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001558:	2100      	movs	r1, #0
 800155a:	480d      	ldr	r0, [pc, #52]	; (8001590 <MX_USART1_UART_Init+0x90>)
 800155c:	f005 fdd0 	bl	8007100 <HAL_UARTEx_SetTxFifoThreshold>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001566:	f000 f873 	bl	8001650 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800156a:	2100      	movs	r1, #0
 800156c:	4808      	ldr	r0, [pc, #32]	; (8001590 <MX_USART1_UART_Init+0x90>)
 800156e:	f005 fe05 	bl	800717c <HAL_UARTEx_SetRxFifoThreshold>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001578:	f000 f86a 	bl	8001650 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800157c:	4804      	ldr	r0, [pc, #16]	; (8001590 <MX_USART1_UART_Init+0x90>)
 800157e:	f005 fd86 	bl	800708e <HAL_UARTEx_DisableFifoMode>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001588:	f000 f862 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	2000070c 	.word	0x2000070c
 8001594:	40013800 	.word	0x40013800

08001598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ac:	2004      	movs	r0, #4
 80015ae:	f7ff fc3d 	bl	8000e2c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	2002      	movs	r0, #2
 80015b4:	f7ff fc3a 	bl	8000e2c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b8:	2001      	movs	r0, #1
 80015ba:	f7ff fc37 	bl	8000e2c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015be:	2008      	movs	r0, #8
 80015c0:	f7ff fc34 	bl	8000e2c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80015c4:	2200      	movs	r2, #0
 80015c6:	21e0      	movs	r1, #224	; 0xe0
 80015c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015cc:	f000 fe18 	bl	8002200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2123      	movs	r1, #35	; 0x23
 80015d4:	481b      	ldr	r0, [pc, #108]	; (8001644 <MX_GPIO_Init+0xac>)
 80015d6:	f000 fe13 	bl	8002200 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015da:	23e0      	movs	r3, #224	; 0xe0
 80015dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015de:	2301      	movs	r3, #1
 80015e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	4619      	mov	r1, r3
 80015ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f2:	f000 fc95 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015f6:	2310      	movs	r3, #16
 80015f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	4619      	mov	r1, r3
 8001606:	4810      	ldr	r0, [pc, #64]	; (8001648 <MX_GPIO_Init+0xb0>)
 8001608:	f000 fc8a 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800160c:	2323      	movs	r3, #35	; 0x23
 800160e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001610:	2301      	movs	r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	4619      	mov	r1, r3
 8001620:	4808      	ldr	r0, [pc, #32]	; (8001644 <MX_GPIO_Init+0xac>)
 8001622:	f000 fc7d 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001626:	2303      	movs	r3, #3
 8001628:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	4619      	mov	r1, r3
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_GPIO_Init+0xb4>)
 8001638:	f000 fc72 	bl	8001f20 <HAL_GPIO_Init>

}
 800163c:	bf00      	nop
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	48000400 	.word	0x48000400
 8001648:	48000800 	.word	0x48000800
 800164c:	48000c00 	.word	0x48000c00

08001650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001654:	b672      	cpsid	i
}
 8001656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001658:	e7fe      	b.n	8001658 <Error_Handler+0x8>

0800165a <LL_RCC_EnableRTC>:
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800165e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001666:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800166a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800166e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <LL_AHB2_GRP1_EnableClock>:
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001688:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800168a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4313      	orrs	r3, r2
 8001692:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001698:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4013      	ands	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016a0:	68fb      	ldr	r3, [r7, #12]
}
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <LL_AHB3_GRP1_EnableClock>:
{
 80016ae:	b480      	push	{r7}
 80016b0:	b085      	sub	sp, #20
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80016b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80016c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4013      	ands	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016d2:	68fb      	ldr	r3, [r7, #12]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80016e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80016f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4013      	ands	r3, r2
 8001702:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001704:	68fb      	ldr	r3, [r7, #12]
}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001712:	b480      	push	{r7}
 8001714:	b085      	sub	sp, #20
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800171a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800171e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001720:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4313      	orrs	r3, r2
 8001728:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800172a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800172e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4013      	ands	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001748:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800174c:	f7ff ffaf 	bl	80016ae <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001750:	2200      	movs	r2, #0
 8001752:	2100      	movs	r1, #0
 8001754:	202e      	movs	r0, #46	; 0x2e
 8001756:	f000 fb92 	bl	8001e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800175a:	202e      	movs	r0, #46	; 0x2e
 800175c:	f000 fba9 	bl	8001eb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b09c      	sub	sp, #112	; 0x70
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	2250      	movs	r2, #80	; 0x50
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f012 fb89 	bl	8013e9c <memset>
  if(hi2c->Instance==I2C1)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a17      	ldr	r2, [pc, #92]	; (80017ec <HAL_I2C_MspInit+0x88>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d126      	bne.n	80017e2 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001794:	2304      	movs	r3, #4
 8001796:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001798:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	4618      	mov	r0, r3
 80017a4:	f004 fc1d 	bl	8005fe2 <HAL_RCCEx_PeriphCLKConfig>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80017ae:	f7ff ff4f 	bl	8001650 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b2:	2002      	movs	r0, #2
 80017b4:	f7ff ff62 	bl	800167c <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017be:	2312      	movs	r3, #18
 80017c0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017ca:	2304      	movs	r3, #4
 80017cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017d2:	4619      	mov	r1, r3
 80017d4:	4806      	ldr	r0, [pc, #24]	; (80017f0 <HAL_I2C_MspInit+0x8c>)
 80017d6:	f000 fba3 	bl	8001f20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017da:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80017de:	f7ff ff7f 	bl	80016e0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017e2:	bf00      	nop
 80017e4:	3770      	adds	r7, #112	; 0x70
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40005400 	.word	0x40005400
 80017f0:	48000400 	.word	0x48000400

080017f4 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <HAL_IPCC_MspInit+0x44>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d113      	bne.n	800182e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800180a:	f7ff ff50 	bl	80016ae <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	202c      	movs	r0, #44	; 0x2c
 8001814:	f000 fb33 	bl	8001e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001818:	202c      	movs	r0, #44	; 0x2c
 800181a:	f000 fb4a 	bl	8001eb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2100      	movs	r1, #0
 8001822:	202d      	movs	r0, #45	; 0x2d
 8001824:	f000 fb2b 	bl	8001e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001828:	202d      	movs	r0, #45	; 0x2d
 800182a:	f000 fb42 	bl	8001eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	58000c00 	.word	0x58000c00

0800183c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b096      	sub	sp, #88	; 0x58
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001844:	f107 0308 	add.w	r3, r7, #8
 8001848:	2250      	movs	r2, #80	; 0x50
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f012 fb25 	bl	8013e9c <memset>
  if(hrtc->Instance==RTC)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a0e      	ldr	r2, [pc, #56]	; (8001890 <HAL_RTC_MspInit+0x54>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d115      	bne.n	8001888 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800185c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001860:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001862:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001866:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001868:	f107 0308 	add.w	r3, r7, #8
 800186c:	4618      	mov	r0, r3
 800186e:	f004 fbb8 	bl	8005fe2 <HAL_RCCEx_PeriphCLKConfig>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001878:	f7ff feea 	bl	8001650 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800187c:	f7ff feed 	bl	800165a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001880:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001884:	f7ff ff2c 	bl	80016e0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001888:	bf00      	nop
 800188a:	3758      	adds	r7, #88	; 0x58
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40002800 	.word	0x40002800

08001894 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b09c      	sub	sp, #112	; 0x70
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	2250      	movs	r2, #80	; 0x50
 80018b2:	2100      	movs	r1, #0
 80018b4:	4618      	mov	r0, r3
 80018b6:	f012 faf1 	bl	8013e9c <memset>
  if(huart->Instance==USART1)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a16      	ldr	r2, [pc, #88]	; (8001918 <HAL_UART_MspInit+0x84>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d124      	bne.n	800190e <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018c4:	2301      	movs	r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018c8:	2300      	movs	r3, #0
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	4618      	mov	r0, r3
 80018d2:	f004 fb86 	bl	8005fe2 <HAL_RCCEx_PeriphCLKConfig>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018dc:	f7ff feb8 	bl	8001650 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80018e4:	f7ff ff15 	bl	8001712 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e8:	2002      	movs	r0, #2
 80018ea:	f7ff fec7 	bl	800167c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80018ee:	23c0      	movs	r3, #192	; 0xc0
 80018f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018f6:	2301      	movs	r3, #1
 80018f8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2300      	movs	r3, #0
 80018fc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018fe:	2307      	movs	r3, #7
 8001900:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001902:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001906:	4619      	mov	r1, r3
 8001908:	4804      	ldr	r0, [pc, #16]	; (800191c <HAL_UART_MspInit+0x88>)
 800190a:	f000 fb09 	bl	8001f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800190e:	bf00      	nop
 8001910:	3770      	adds	r7, #112	; 0x70
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40013800 	.word	0x40013800
 800191c:	48000400 	.word	0x48000400

08001920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <NMI_Handler+0x4>

08001926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192a:	e7fe      	b.n	800192a <HardFault_Handler+0x4>

0800192c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <MemManage_Handler+0x4>

08001932 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <BusFault_Handler+0x4>

08001938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <UsageFault_Handler+0x4>

0800193e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800196c:	f000 f938 	bl	8001be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}

08001974 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001978:	4802      	ldr	r0, [pc, #8]	; (8001984 <USB_LP_IRQHandler+0x10>)
 800197a:	f001 fb98 	bl	80030ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20001d8c 	.word	0x20001d8c

08001988 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800198c:	f011 f936 	bl	8012bfc <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}

08001994 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001998:	f011 f968 	bl	8012c6c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80019a4:	f000 fc44 	bl	8002230 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}

080019ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b4:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <_sbrk+0x5c>)
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <_sbrk+0x60>)
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <_sbrk+0x64>)
 80019ca:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <_sbrk+0x68>)
 80019cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d207      	bcs.n	80019ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019dc:	f012 fa24 	bl	8013e28 <__errno>
 80019e0:	4603      	mov	r3, r0
 80019e2:	220c      	movs	r2, #12
 80019e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	e009      	b.n	8001a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <_sbrk+0x64>)
 80019fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fe:	68fb      	ldr	r3, [r7, #12]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20030000 	.word	0x20030000
 8001a0c:	00000400 	.word	0x00000400
 8001a10:	200007d4 	.word	0x200007d4
 8001a14:	20002360 	.word	0x20002360

08001a18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001a1c:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <SystemInit+0x98>)
 8001a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a22:	4a23      	ldr	r2, [pc, #140]	; (8001ab0 <SystemInit+0x98>)
 8001a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a40:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001a44:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <SystemInit+0x9c>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a62:	f023 0305 	bic.w	r3, r3, #5
 8001a66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a82:	4a0d      	ldr	r2, [pc, #52]	; (8001ab8 <SystemInit+0xa0>)
 8001a84:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8a:	4a0b      	ldr	r2, [pc, #44]	; (8001ab8 <SystemInit+0xa0>)
 8001a8c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	619a      	str	r2, [r3, #24]
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00
 8001ab4:	faf6fefb 	.word	0xfaf6fefb
 8001ab8:	22041000 	.word	0x22041000

08001abc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001abc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001abe:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac0:	3304      	adds	r3, #4

08001ac2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001ac6:	d3f9      	bcc.n	8001abc <CopyDataInit>
  bx lr
 8001ac8:	4770      	bx	lr

08001aca <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001aca:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001acc:	3004      	adds	r0, #4

08001ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001ace:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001ad0:	d3fb      	bcc.n	8001aca <FillZerobss>
  bx lr
 8001ad2:	4770      	bx	lr

08001ad4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ad4:	480c      	ldr	r0, [pc, #48]	; (8001b08 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001ad6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ad8:	f7ff ff9e 	bl	8001a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001adc:	480b      	ldr	r0, [pc, #44]	; (8001b0c <LoopForever+0x8>)
 8001ade:	490c      	ldr	r1, [pc, #48]	; (8001b10 <LoopForever+0xc>)
 8001ae0:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <LoopForever+0x10>)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f7ff ffed 	bl	8001ac2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001ae8:	480b      	ldr	r0, [pc, #44]	; (8001b18 <LoopForever+0x14>)
 8001aea:	490c      	ldr	r1, [pc, #48]	; (8001b1c <LoopForever+0x18>)
 8001aec:	2300      	movs	r3, #0
 8001aee:	f7ff ffee 	bl	8001ace <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001af2:	480b      	ldr	r0, [pc, #44]	; (8001b20 <LoopForever+0x1c>)
 8001af4:	490b      	ldr	r1, [pc, #44]	; (8001b24 <LoopForever+0x20>)
 8001af6:	2300      	movs	r3, #0
 8001af8:	f7ff ffe9 	bl	8001ace <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001afc:	f012 f99a 	bl	8013e34 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001b00:	f7ff faf4 	bl	80010ec <main>

08001b04 <LoopForever>:

LoopForever:
  b LoopForever
 8001b04:	e7fe      	b.n	8001b04 <LoopForever>
 8001b06:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001b08:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001b0c:	20000004 	.word	0x20000004
 8001b10:	200004c0 	.word	0x200004c0
 8001b14:	0801502c 	.word	0x0801502c
  INIT_BSS _sbss, _ebss
 8001b18:	20000630 	.word	0x20000630
 8001b1c:	2000235c 	.word	0x2000235c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001b20:	200301e4 	.word	0x200301e4
 8001b24:	20030a67 	.word	0x20030a67

08001b28 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b28:	e7fe      	b.n	8001b28 <ADC1_IRQHandler>
	...

08001b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_Init+0x3c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a0b      	ldr	r2, [pc, #44]	; (8001b68 <HAL_Init+0x3c>)
 8001b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b40:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b42:	2003      	movs	r0, #3
 8001b44:	f000 f990 	bl	8001e68 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f000 f80f 	bl	8001b6c <HAL_InitTick>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	71fb      	strb	r3, [r7, #7]
 8001b58:	e001      	b.n	8001b5e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b5a:	f7ff fdf3 	bl	8001744 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	58004000 	.word	0x58004000

08001b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001b78:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <HAL_InitTick+0x6c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d024      	beq.n	8001bca <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b80:	f003 ff9e 	bl	8005ac0 <HAL_RCC_GetHCLKFreq>
 8001b84:	4602      	mov	r2, r0
 8001b86:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <HAL_InitTick+0x6c>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b90:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 f998 	bl	8001ece <HAL_SYSTICK_Config>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10f      	bne.n	8001bc4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b0f      	cmp	r3, #15
 8001ba8:	d809      	bhi.n	8001bbe <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001baa:	2200      	movs	r2, #0
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb2:	f000 f964 	bl	8001e7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bb6:	4a09      	ldr	r2, [pc, #36]	; (8001bdc <HAL_InitTick+0x70>)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	e007      	b.n	8001bce <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	73fb      	strb	r3, [r7, #15]
 8001bc2:	e004      	b.n	8001bce <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	73fb      	strb	r3, [r7, #15]
 8001bc8:	e001      	b.n	8001bce <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000010 	.word	0x20000010
 8001bdc:	2000000c 	.word	0x2000000c

08001be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_IncTick+0x20>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	461a      	mov	r2, r3
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_IncTick+0x24>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4413      	add	r3, r2
 8001bf0:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <HAL_IncTick+0x24>)
 8001bf2:	6013      	str	r3, [r2, #0]
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	20000010 	.word	0x20000010
 8001c04:	200007d8 	.word	0x200007d8

08001c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <HAL_GetTick+0x14>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	200007d8 	.word	0x200007d8

08001c20 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <HAL_GetTickPrio+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	2000000c 	.word	0x2000000c

08001c38 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <HAL_GetTickFreq+0x14>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000010 	.word	0x20000010

08001c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db0b      	blt.n	8001cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4907      	ldr	r1, [pc, #28]	; (8001cec <__NVIC_EnableIRQ+0x38>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	db0c      	blt.n	8001d1c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	f003 021f 	and.w	r2, r3, #31
 8001d08:	4907      	ldr	r1, [pc, #28]	; (8001d28 <__NVIC_SetPendingIRQ+0x38>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	095b      	lsrs	r3, r3, #5
 8001d10:	2001      	movs	r0, #1
 8001d12:	fa00 f202 	lsl.w	r2, r0, r2
 8001d16:	3340      	adds	r3, #64	; 0x40
 8001d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000e100 	.word	0xe000e100

08001d2c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	db0c      	blt.n	8001d58 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	4907      	ldr	r1, [pc, #28]	; (8001d64 <__NVIC_ClearPendingIRQ+0x38>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d52:	3360      	adds	r3, #96	; 0x60
 8001d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000e100 	.word	0xe000e100

08001d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	db0a      	blt.n	8001d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	490c      	ldr	r1, [pc, #48]	; (8001db4 <__NVIC_SetPriority+0x4c>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	0112      	lsls	r2, r2, #4
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d90:	e00a      	b.n	8001da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4908      	ldr	r1, [pc, #32]	; (8001db8 <__NVIC_SetPriority+0x50>)
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	3b04      	subs	r3, #4
 8001da0:	0112      	lsls	r2, r2, #4
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	440b      	add	r3, r1
 8001da6:	761a      	strb	r2, [r3, #24]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	e000e100 	.word	0xe000e100
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	; 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f1c3 0307 	rsb	r3, r3, #7
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	bf28      	it	cs
 8001dda:	2304      	movcs	r3, #4
 8001ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3304      	adds	r3, #4
 8001de2:	2b06      	cmp	r3, #6
 8001de4:	d902      	bls.n	8001dec <NVIC_EncodePriority+0x30>
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3b03      	subs	r3, #3
 8001dea:	e000      	b.n	8001dee <NVIC_EncodePriority+0x32>
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	f04f 32ff 	mov.w	r2, #4294967295
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43da      	mvns	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	401a      	ands	r2, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e04:	f04f 31ff 	mov.w	r1, #4294967295
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0e:	43d9      	mvns	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	4313      	orrs	r3, r2
         );
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3724      	adds	r7, #36	; 0x24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e34:	d301      	bcc.n	8001e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e36:	2301      	movs	r3, #1
 8001e38:	e00f      	b.n	8001e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	; (8001e64 <SysTick_Config+0x40>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e42:	210f      	movs	r1, #15
 8001e44:	f04f 30ff 	mov.w	r0, #4294967295
 8001e48:	f7ff ff8e 	bl	8001d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <SysTick_Config+0x40>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e52:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <SysTick_Config+0x40>)
 8001e54:	2207      	movs	r2, #7
 8001e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	e000e010 	.word	0xe000e010

08001e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff feed 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b086      	sub	sp, #24
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
 8001e8a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e8c:	f7ff ff04 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001e90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68b9      	ldr	r1, [r7, #8]
 8001e96:	6978      	ldr	r0, [r7, #20]
 8001e98:	f7ff ff90 	bl	8001dbc <NVIC_EncodePriority>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff5f 	bl	8001d68 <__NVIC_SetPriority>
}
 8001eaa:	bf00      	nop
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fef7 	bl	8001cb4 <__NVIC_EnableIRQ>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff ffa4 	bl	8001e24 <SysTick_Config>
 8001edc:	4603      	mov	r3, r0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fefb 	bl	8001cf0 <__NVIC_SetPendingIRQ>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff0b 	bl	8001d2c <__NVIC_ClearPendingIRQ>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f2e:	e14c      	b.n	80021ca <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	2101      	movs	r1, #1
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 813e 	beq.w	80021c4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d005      	beq.n	8001f60 <HAL_GPIO_Init+0x40>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d130      	bne.n	8001fc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f96:	2201      	movs	r2, #1
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	091b      	lsrs	r3, r3, #4
 8001fac:	f003 0201 	and.w	r2, r3, #1
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	d017      	beq.n	8001ffe <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	2203      	movs	r2, #3
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d123      	bne.n	8002052 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	08da      	lsrs	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3208      	adds	r2, #8
 8002012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002016:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	220f      	movs	r2, #15
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	691a      	ldr	r2, [r3, #16]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	08da      	lsrs	r2, r3, #3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3208      	adds	r2, #8
 800204c:	6939      	ldr	r1, [r7, #16]
 800204e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	2203      	movs	r2, #3
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0203 	and.w	r2, r3, #3
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 8098 	beq.w	80021c4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002094:	4a54      	ldr	r2, [pc, #336]	; (80021e8 <HAL_GPIO_Init+0x2c8>)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	089b      	lsrs	r3, r3, #2
 800209a:	3302      	adds	r3, #2
 800209c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	220f      	movs	r2, #15
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020be:	d019      	beq.n	80020f4 <HAL_GPIO_Init+0x1d4>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a4a      	ldr	r2, [pc, #296]	; (80021ec <HAL_GPIO_Init+0x2cc>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d013      	beq.n	80020f0 <HAL_GPIO_Init+0x1d0>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a49      	ldr	r2, [pc, #292]	; (80021f0 <HAL_GPIO_Init+0x2d0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d00d      	beq.n	80020ec <HAL_GPIO_Init+0x1cc>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a48      	ldr	r2, [pc, #288]	; (80021f4 <HAL_GPIO_Init+0x2d4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d007      	beq.n	80020e8 <HAL_GPIO_Init+0x1c8>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a47      	ldr	r2, [pc, #284]	; (80021f8 <HAL_GPIO_Init+0x2d8>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d101      	bne.n	80020e4 <HAL_GPIO_Init+0x1c4>
 80020e0:	2304      	movs	r3, #4
 80020e2:	e008      	b.n	80020f6 <HAL_GPIO_Init+0x1d6>
 80020e4:	2307      	movs	r3, #7
 80020e6:	e006      	b.n	80020f6 <HAL_GPIO_Init+0x1d6>
 80020e8:	2303      	movs	r3, #3
 80020ea:	e004      	b.n	80020f6 <HAL_GPIO_Init+0x1d6>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e002      	b.n	80020f6 <HAL_GPIO_Init+0x1d6>
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <HAL_GPIO_Init+0x1d6>
 80020f4:	2300      	movs	r3, #0
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	f002 0203 	and.w	r2, r2, #3
 80020fc:	0092      	lsls	r2, r2, #2
 80020fe:	4093      	lsls	r3, r2
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002106:	4938      	ldr	r1, [pc, #224]	; (80021e8 <HAL_GPIO_Init+0x2c8>)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	089b      	lsrs	r3, r3, #2
 800210c:	3302      	adds	r3, #2
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002114:	4b39      	ldr	r3, [pc, #228]	; (80021fc <HAL_GPIO_Init+0x2dc>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	43db      	mvns	r3, r3
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002138:	4a30      	ldr	r2, [pc, #192]	; (80021fc <HAL_GPIO_Init+0x2dc>)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800213e:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <HAL_GPIO_Init+0x2dc>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	43db      	mvns	r3, r3
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4313      	orrs	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002162:	4a26      	ldr	r2, [pc, #152]	; (80021fc <HAL_GPIO_Init+0x2dc>)
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002168:	4b24      	ldr	r3, [pc, #144]	; (80021fc <HAL_GPIO_Init+0x2dc>)
 800216a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800216e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	43db      	mvns	r3, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800218e:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <HAL_GPIO_Init+0x2dc>)
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002196:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_GPIO_Init+0x2dc>)
 8002198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021bc:	4a0f      	ldr	r2, [pc, #60]	; (80021fc <HAL_GPIO_Init+0x2dc>)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	3301      	adds	r3, #1
 80021c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	fa22 f303 	lsr.w	r3, r2, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f47f aeab 	bne.w	8001f30 <HAL_GPIO_Init+0x10>
  }
}
 80021da:	bf00      	nop
 80021dc:	bf00      	nop
 80021de:	371c      	adds	r7, #28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	40010000 	.word	0x40010000
 80021ec:	48000400 	.word	0x48000400
 80021f0:	48000800 	.word	0x48000800
 80021f4:	48000c00 	.word	0x48000c00
 80021f8:	48001000 	.word	0x48001000
 80021fc:	58000800 	.word	0x58000800

08002200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	807b      	strh	r3, [r7, #2]
 800220c:	4613      	mov	r3, r2
 800220e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002210:	787b      	ldrb	r3, [r7, #1]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002216:	887a      	ldrh	r2, [r7, #2]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800221c:	e002      	b.n	8002224 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800221e:	887a      	ldrh	r2, [r7, #2]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002236:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <HAL_HSEM_IRQHandler+0x30>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <HAL_HSEM_IRQHandler+0x30>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	43db      	mvns	r3, r3
 8002244:	4906      	ldr	r1, [pc, #24]	; (8002260 <HAL_HSEM_IRQHandler+0x30>)
 8002246:	4013      	ands	r3, r2
 8002248:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800224a:	4a05      	ldr	r2, [pc, #20]	; (8002260 <HAL_HSEM_IRQHandler+0x30>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f807 	bl	8002264 <HAL_HSEM_FreeCallback>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	58001500 	.word	0x58001500

08002264 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e081      	b.n	800238e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d106      	bne.n	80022a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff fa60 	bl	8001764 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2224      	movs	r2, #36	; 0x24
 80022a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0201 	bic.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d107      	bne.n	80022f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	e006      	b.n	8002300 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80022fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d104      	bne.n	8002312 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002310:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002324:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002334:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691a      	ldr	r2, [r3, #16]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69d9      	ldr	r1, [r3, #28]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1a      	ldr	r2, [r3, #32]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0201 	orr.w	r2, r2, #1
 800236e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2220      	movs	r2, #32
 800237a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af02      	add	r7, sp, #8
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	461a      	mov	r2, r3
 80023a4:	460b      	mov	r3, r1
 80023a6:	817b      	strh	r3, [r7, #10]
 80023a8:	4613      	mov	r3, r2
 80023aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b20      	cmp	r3, #32
 80023b6:	f040 80da 	bne.w	800256e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_I2C_Master_Transmit+0x30>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e0d3      	b.n	8002570 <HAL_I2C_Master_Transmit+0x1d8>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023d0:	f7ff fc1a 	bl	8001c08 <HAL_GetTick>
 80023d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2319      	movs	r3, #25
 80023dc:	2201      	movs	r2, #1
 80023de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 fa5e 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e0be      	b.n	8002570 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2221      	movs	r2, #33	; 0x21
 80023f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2210      	movs	r2, #16
 80023fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	893a      	ldrh	r2, [r7, #8]
 8002412:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241e:	b29b      	uxth	r3, r3
 8002420:	2bff      	cmp	r3, #255	; 0xff
 8002422:	d90e      	bls.n	8002442 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	22ff      	movs	r2, #255	; 0xff
 8002428:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242e:	b2da      	uxtb	r2, r3
 8002430:	8979      	ldrh	r1, [r7, #10]
 8002432:	4b51      	ldr	r3, [pc, #324]	; (8002578 <HAL_I2C_Master_Transmit+0x1e0>)
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 fbda 	bl	8002bf4 <I2C_TransferConfig>
 8002440:	e06c      	b.n	800251c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002450:	b2da      	uxtb	r2, r3
 8002452:	8979      	ldrh	r1, [r7, #10]
 8002454:	4b48      	ldr	r3, [pc, #288]	; (8002578 <HAL_I2C_Master_Transmit+0x1e0>)
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 fbc9 	bl	8002bf4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002462:	e05b      	b.n	800251c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	6a39      	ldr	r1, [r7, #32]
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 fa5b 	bl	8002924 <I2C_WaitOnTXISFlagUntilTimeout>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e07b      	b.n	8002570 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	781a      	ldrb	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002492:	b29b      	uxth	r3, r3
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d034      	beq.n	800251c <HAL_I2C_Master_Transmit+0x184>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d130      	bne.n	800251c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	2200      	movs	r2, #0
 80024c2:	2180      	movs	r1, #128	; 0x80
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 f9ed 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e04d      	b.n	8002570 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d8:	b29b      	uxth	r3, r3
 80024da:	2bff      	cmp	r3, #255	; 0xff
 80024dc:	d90e      	bls.n	80024fc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	22ff      	movs	r2, #255	; 0xff
 80024e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	8979      	ldrh	r1, [r7, #10]
 80024ec:	2300      	movs	r3, #0
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 fb7d 	bl	8002bf4 <I2C_TransferConfig>
 80024fa:	e00f      	b.n	800251c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250a:	b2da      	uxtb	r2, r3
 800250c:	8979      	ldrh	r1, [r7, #10]
 800250e:	2300      	movs	r3, #0
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 fb6c 	bl	8002bf4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d19e      	bne.n	8002464 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	6a39      	ldr	r1, [r7, #32]
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 fa3a 	bl	80029a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e01a      	b.n	8002570 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2220      	movs	r2, #32
 8002540:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6859      	ldr	r1, [r3, #4]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_I2C_Master_Transmit+0x1e4>)
 800254e:	400b      	ands	r3, r1
 8002550:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2220      	movs	r2, #32
 8002556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	e000      	b.n	8002570 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800256e:	2302      	movs	r3, #2
  }
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	80002000 	.word	0x80002000
 800257c:	fe00e800 	.word	0xfe00e800

08002580 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af02      	add	r7, sp, #8
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	4608      	mov	r0, r1
 800258a:	4611      	mov	r1, r2
 800258c:	461a      	mov	r2, r3
 800258e:	4603      	mov	r3, r0
 8002590:	817b      	strh	r3, [r7, #10]
 8002592:	460b      	mov	r3, r1
 8002594:	813b      	strh	r3, [r7, #8]
 8002596:	4613      	mov	r3, r2
 8002598:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	f040 80fd 	bne.w	80027a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <HAL_I2C_Mem_Read+0x34>
 80025ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d105      	bne.n	80025c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0f1      	b.n	80027a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_I2C_Mem_Read+0x4e>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e0ea      	b.n	80027a4 <HAL_I2C_Mem_Read+0x224>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025d6:	f7ff fb17 	bl	8001c08 <HAL_GetTick>
 80025da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	2319      	movs	r3, #25
 80025e2:	2201      	movs	r2, #1
 80025e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 f95b 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0d5      	b.n	80027a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2222      	movs	r2, #34	; 0x22
 80025fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2240      	movs	r2, #64	; 0x40
 8002604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a3a      	ldr	r2, [r7, #32]
 8002612:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002618:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002620:	88f8      	ldrh	r0, [r7, #6]
 8002622:	893a      	ldrh	r2, [r7, #8]
 8002624:	8979      	ldrh	r1, [r7, #10]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	9301      	str	r3, [sp, #4]
 800262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	4603      	mov	r3, r0
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 f8bf 	bl	80027b4 <I2C_RequestMemoryRead>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0ad      	b.n	80027a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264c:	b29b      	uxth	r3, r3
 800264e:	2bff      	cmp	r3, #255	; 0xff
 8002650:	d90e      	bls.n	8002670 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	22ff      	movs	r2, #255	; 0xff
 8002656:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265c:	b2da      	uxtb	r2, r3
 800265e:	8979      	ldrh	r1, [r7, #10]
 8002660:	4b52      	ldr	r3, [pc, #328]	; (80027ac <HAL_I2C_Mem_Read+0x22c>)
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fac3 	bl	8002bf4 <I2C_TransferConfig>
 800266e:	e00f      	b.n	8002690 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267e:	b2da      	uxtb	r2, r3
 8002680:	8979      	ldrh	r1, [r7, #10]
 8002682:	4b4a      	ldr	r3, [pc, #296]	; (80027ac <HAL_I2C_Mem_Read+0x22c>)
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 fab2 	bl	8002bf4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002696:	2200      	movs	r2, #0
 8002698:	2104      	movs	r1, #4
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f902 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e07c      	b.n	80027a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d034      	beq.n	8002750 <HAL_I2C_Mem_Read+0x1d0>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d130      	bne.n	8002750 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f4:	2200      	movs	r2, #0
 80026f6:	2180      	movs	r1, #128	; 0x80
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f8d3 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e04d      	b.n	80027a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270c:	b29b      	uxth	r3, r3
 800270e:	2bff      	cmp	r3, #255	; 0xff
 8002710:	d90e      	bls.n	8002730 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	22ff      	movs	r2, #255	; 0xff
 8002716:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271c:	b2da      	uxtb	r2, r3
 800271e:	8979      	ldrh	r1, [r7, #10]
 8002720:	2300      	movs	r3, #0
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 fa63 	bl	8002bf4 <I2C_TransferConfig>
 800272e:	e00f      	b.n	8002750 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273e:	b2da      	uxtb	r2, r3
 8002740:	8979      	ldrh	r1, [r7, #10]
 8002742:	2300      	movs	r3, #0
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 fa52 	bl	8002bf4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002754:	b29b      	uxth	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d19a      	bne.n	8002690 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f920 	bl	80029a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e01a      	b.n	80027a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2220      	movs	r2, #32
 8002774:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6859      	ldr	r1, [r3, #4]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_I2C_Mem_Read+0x230>)
 8002782:	400b      	ands	r3, r1
 8002784:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2220      	movs	r2, #32
 800278a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	e000      	b.n	80027a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80027a2:	2302      	movs	r3, #2
  }
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	80002400 	.word	0x80002400
 80027b0:	fe00e800 	.word	0xfe00e800

080027b4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af02      	add	r7, sp, #8
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	4608      	mov	r0, r1
 80027be:	4611      	mov	r1, r2
 80027c0:	461a      	mov	r2, r3
 80027c2:	4603      	mov	r3, r0
 80027c4:	817b      	strh	r3, [r7, #10]
 80027c6:	460b      	mov	r3, r1
 80027c8:	813b      	strh	r3, [r7, #8]
 80027ca:	4613      	mov	r3, r2
 80027cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027ce:	88fb      	ldrh	r3, [r7, #6]
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	8979      	ldrh	r1, [r7, #10]
 80027d4:	4b20      	ldr	r3, [pc, #128]	; (8002858 <I2C_RequestMemoryRead+0xa4>)
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	2300      	movs	r3, #0
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 fa0a 	bl	8002bf4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027e0:	69fa      	ldr	r2, [r7, #28]
 80027e2:	69b9      	ldr	r1, [r7, #24]
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 f89d 	bl	8002924 <I2C_WaitOnTXISFlagUntilTimeout>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e02c      	b.n	800284e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d105      	bne.n	8002806 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027fa:	893b      	ldrh	r3, [r7, #8]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	629a      	str	r2, [r3, #40]	; 0x28
 8002804:	e015      	b.n	8002832 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002806:	893b      	ldrh	r3, [r7, #8]
 8002808:	0a1b      	lsrs	r3, r3, #8
 800280a:	b29b      	uxth	r3, r3
 800280c:	b2da      	uxtb	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002814:	69fa      	ldr	r2, [r7, #28]
 8002816:	69b9      	ldr	r1, [r7, #24]
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f883 	bl	8002924 <I2C_WaitOnTXISFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e012      	b.n	800284e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002828:	893b      	ldrh	r3, [r7, #8]
 800282a:	b2da      	uxtb	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	2200      	movs	r2, #0
 800283a:	2140      	movs	r1, #64	; 0x40
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 f831 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	80002000 	.word	0x80002000

0800285c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b02      	cmp	r3, #2
 8002870:	d103      	bne.n	800287a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2200      	movs	r2, #0
 8002878:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b01      	cmp	r3, #1
 8002886:	d007      	beq.n	8002898 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699a      	ldr	r2, [r3, #24]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	619a      	str	r2, [r3, #24]
  }
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	4613      	mov	r3, r2
 80028b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028b4:	e022      	b.n	80028fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028bc:	d01e      	beq.n	80028fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028be:	f7ff f9a3 	bl	8001c08 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d302      	bcc.n	80028d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d113      	bne.n	80028fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d8:	f043 0220 	orr.w	r2, r3, #32
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2220      	movs	r2, #32
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e00f      	b.n	800291c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699a      	ldr	r2, [r3, #24]
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	4013      	ands	r3, r2
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	429a      	cmp	r2, r3
 800290a:	bf0c      	ite	eq
 800290c:	2301      	moveq	r3, #1
 800290e:	2300      	movne	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	429a      	cmp	r2, r3
 8002918:	d0cd      	beq.n	80028b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002930:	e02c      	b.n	800298c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 f870 	bl	8002a1c <I2C_IsErrorOccurred>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e02a      	b.n	800299c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294c:	d01e      	beq.n	800298c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294e:	f7ff f95b 	bl	8001c08 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	429a      	cmp	r2, r3
 800295c:	d302      	bcc.n	8002964 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d113      	bne.n	800298c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002968:	f043 0220 	orr.w	r2, r3, #32
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e007      	b.n	800299c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b02      	cmp	r3, #2
 8002998:	d1cb      	bne.n	8002932 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029b0:	e028      	b.n	8002a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 f830 	bl	8002a1c <I2C_IsErrorOccurred>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e026      	b.n	8002a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c6:	f7ff f91f 	bl	8001c08 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d302      	bcc.n	80029dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d113      	bne.n	8002a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e0:	f043 0220 	orr.w	r2, r3, #32
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e007      	b.n	8002a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	f003 0320 	and.w	r3, r3, #32
 8002a0e:	2b20      	cmp	r3, #32
 8002a10:	d1cf      	bne.n	80029b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08a      	sub	sp, #40	; 0x28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d075      	beq.n	8002b34 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2210      	movs	r2, #16
 8002a4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a50:	e056      	b.n	8002b00 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d052      	beq.n	8002b00 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a5a:	f7ff f8d5 	bl	8001c08 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d302      	bcc.n	8002a70 <I2C_IsErrorOccurred+0x54>
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d147      	bne.n	8002b00 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a92:	d12e      	bne.n	8002af2 <I2C_IsErrorOccurred+0xd6>
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a9a:	d02a      	beq.n	8002af2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002a9c:	7cfb      	ldrb	r3, [r7, #19]
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	d027      	beq.n	8002af2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ab0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ab2:	f7ff f8a9 	bl	8001c08 <HAL_GetTick>
 8002ab6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ab8:	e01b      	b.n	8002af2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002aba:	f7ff f8a5 	bl	8001c08 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b19      	cmp	r3, #25
 8002ac6:	d914      	bls.n	8002af2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002acc:	f043 0220 	orr.w	r2, r3, #32
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	d1dc      	bne.n	8002aba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	d003      	beq.n	8002b16 <I2C_IsErrorOccurred+0xfa>
 8002b0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d09d      	beq.n	8002a52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d103      	bne.n	8002b26 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2220      	movs	r2, #32
 8002b24:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	f043 0304 	orr.w	r3, r3, #4
 8002b2c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00b      	beq.n	8002b5e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00b      	beq.n	8002b80 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	f043 0308 	orr.w	r3, r3, #8
 8002b6e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00b      	beq.n	8002ba2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	f043 0302 	orr.w	r3, r3, #2
 8002b90:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002ba2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d01c      	beq.n	8002be4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f7ff fe56 	bl	800285c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6859      	ldr	r1, [r3, #4]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <I2C_IsErrorOccurred+0x1d4>)
 8002bbc:	400b      	ands	r3, r1
 8002bbe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3728      	adds	r7, #40	; 0x28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	fe00e800 	.word	0xfe00e800

08002bf4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	607b      	str	r3, [r7, #4]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	817b      	strh	r3, [r7, #10]
 8002c02:	4613      	mov	r3, r2
 8002c04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c06:	897b      	ldrh	r3, [r7, #10]
 8002c08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c0c:	7a7b      	ldrb	r3, [r7, #9]
 8002c0e:	041b      	lsls	r3, r3, #16
 8002c10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c14:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c22:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	0d5b      	lsrs	r3, r3, #21
 8002c2e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c32:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <I2C_TransferConfig+0x60>)
 8002c34:	430b      	orrs	r3, r1
 8002c36:	43db      	mvns	r3, r3
 8002c38:	ea02 0103 	and.w	r1, r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c46:	bf00      	nop
 8002c48:	371c      	adds	r7, #28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	03ff63ff 	.word	0x03ff63ff

08002c58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	d138      	bne.n	8002ce0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e032      	b.n	8002ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2224      	movs	r2, #36	; 0x24
 8002c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0201 	bic.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002caa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6819      	ldr	r1, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e000      	b.n	8002ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ce0:	2302      	movs	r3, #2
  }
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b085      	sub	sp, #20
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	d139      	bne.n	8002d78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e033      	b.n	8002d7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2224      	movs	r2, #36	; 0x24
 8002d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0201 	bic.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d74:	2300      	movs	r3, #0
 8002d76:	e000      	b.n	8002d7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d78:	2302      	movs	r3, #2
  }
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d01e      	beq.n	8002dd8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002d9a:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <HAL_IPCC_Init+0x60>)
 8002d9c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d102      	bne.n	8002db0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fe fd22 	bl	80017f4 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002db0:	68b8      	ldr	r0, [r7, #8]
 8002db2:	f000 f85b 	bl	8002e6c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f82c 	bl	8002e20 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002dd6:	e001      	b.n	8002ddc <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	58000c00 	.word	0x58000c00

08002dec <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	4613      	mov	r3, r2
 8002df8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002dfa:	bf00      	nop
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	4613      	mov	r3, r2
 8002e12:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	e00f      	b.n	8002e4e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	4a0b      	ldr	r2, [pc, #44]	; (8002e64 <IPCC_SetDefaultCallbacks+0x44>)
 8002e38:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	3306      	adds	r3, #6
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	4a08      	ldr	r2, [pc, #32]	; (8002e68 <IPCC_SetDefaultCallbacks+0x48>)
 8002e46:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2b05      	cmp	r3, #5
 8002e52:	d9ec      	bls.n	8002e2e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	08002ded 	.word	0x08002ded
 8002e68:	08002e07 	.word	0x08002e07

08002e6c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8002e80:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	223f      	movs	r2, #63	; 0x3f
 8002e86:	609a      	str	r2, [r3, #8]
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e96:	b08b      	sub	sp, #44	; 0x2c
 8002e98:	af06      	add	r7, sp, #24
 8002e9a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e0dd      	b.n	8003062 <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f010 fa1a 	bl	80132f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f004 f9f5 	bl	80072c2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ed8:	2300      	movs	r3, #0
 8002eda:	73fb      	strb	r3, [r7, #15]
 8002edc:	e04d      	b.n	8002f7a <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	440b      	add	r3, r1
 8002eee:	3305      	adds	r3, #5
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	440b      	add	r3, r1
 8002f04:	3304      	adds	r3, #4
 8002f06:	7bfa      	ldrb	r2, [r7, #15]
 8002f08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f0a:	7bfa      	ldrb	r2, [r7, #15]
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	b298      	uxth	r0, r3
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	440b      	add	r3, r1
 8002f1c:	333a      	adds	r3, #58	; 0x3a
 8002f1e:	4602      	mov	r2, r0
 8002f20:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	440b      	add	r3, r1
 8002f32:	3307      	adds	r3, #7
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f38:	7bfa      	ldrb	r2, [r7, #15]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	440b      	add	r3, r1
 8002f46:	333c      	adds	r3, #60	; 0x3c
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f4c:	7bfa      	ldrb	r2, [r7, #15]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	440b      	add	r3, r1
 8002f5a:	3340      	adds	r3, #64	; 0x40
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f60:	7bfa      	ldrb	r2, [r7, #15]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	440b      	add	r3, r1
 8002f6e:	3344      	adds	r3, #68	; 0x44
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	3301      	adds	r3, #1
 8002f78:	73fb      	strb	r3, [r7, #15]
 8002f7a:	7bfa      	ldrb	r2, [r7, #15]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d3ac      	bcc.n	8002ede <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f84:	2300      	movs	r3, #0
 8002f86:	73fb      	strb	r3, [r7, #15]
 8002f88:	e044      	b.n	8003014 <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f8a:	7bfa      	ldrb	r2, [r7, #15]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	440b      	add	r3, r1
 8002f98:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fa0:	7bfa      	ldrb	r2, [r7, #15]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	440b      	add	r3, r1
 8002fae:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8002fb2:	7bfa      	ldrb	r2, [r7, #15]
 8002fb4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fb6:	7bfa      	ldrb	r2, [r7, #15]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	440b      	add	r3, r1
 8002fc4:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fcc:	7bfa      	ldrb	r2, [r7, #15]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	440b      	add	r3, r1
 8002fda:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fe2:	7bfa      	ldrb	r2, [r7, #15]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	440b      	add	r3, r1
 8002ff0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ff8:	7bfa      	ldrb	r2, [r7, #15]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	440b      	add	r3, r1
 8003006:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	3301      	adds	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
 8003014:	7bfa      	ldrb	r2, [r7, #15]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	429a      	cmp	r2, r3
 800301c:	d3b5      	bcc.n	8002f8a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	687e      	ldr	r6, [r7, #4]
 8003026:	466d      	mov	r5, sp
 8003028:	f106 0410 	add.w	r4, r6, #16
 800302c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800302e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003030:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003034:	e885 0003 	stmia.w	r5, {r0, r1}
 8003038:	1d33      	adds	r3, r6, #4
 800303a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800303c:	6838      	ldr	r0, [r7, #0]
 800303e:	f004 f95b 	bl	80072f8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d102      	bne.n	8003060 <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f001 fc42 	bl	80048e4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800306a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b082      	sub	sp, #8
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_PCD_Start+0x16>
 800307c:	2302      	movs	r3, #2
 800307e:	e012      	b.n	80030a6 <HAL_PCD_Start+0x3c>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  __HAL_PCD_ENABLE(hpcd);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f004 f901 	bl	8007294 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f006 fb40 	bl	800971c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f006 fb45 	bl	800974a <USB_ReadInterrupts>
 80030c0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 fb30 	bl	8003732 <PCD_EP_ISR_Handler>

    return;
 80030d2:	e110      	b.n	80032f6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d013      	beq.n	8003106 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030f0:	b292      	uxth	r2, r2
 80030f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f010 f99f 	bl	801343a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80030fc:	2100      	movs	r1, #0
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f8fc 	bl	80032fc <HAL_PCD_SetAddress>

    return;
 8003104:	e0f7      	b.n	80032f6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00c      	beq.n	800312a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003118:	b29a      	uxth	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003122:	b292      	uxth	r2, r2
 8003124:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003128:	e0e5      	b.n	80032f6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00c      	beq.n	800314e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800313c:	b29a      	uxth	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003146:	b292      	uxth	r2, r2
 8003148:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800314c:	e0d3      	b.n	80032f6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d034      	beq.n	80031c2 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003160:	b29a      	uxth	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0204 	bic.w	r2, r2, #4
 800316a:	b292      	uxth	r2, r2
 800316c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003178:	b29a      	uxth	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0208 	bic.w	r2, r2, #8
 8003182:	b292      	uxth	r2, r2
 8003184:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800318e:	2b01      	cmp	r3, #1
 8003190:	d107      	bne.n	80031a2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800319a:	2100      	movs	r1, #0
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f010 fb43 	bl	8013828 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f010 f982 	bl	80134ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031ba:	b292      	uxth	r2, r2
 80031bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80031c0:	e099      	b.n	80032f6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d027      	beq.n	800321c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0208 	orr.w	r2, r2, #8
 80031de:	b292      	uxth	r2, r2
 80031e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f6:	b292      	uxth	r2, r2
 80031f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003204:	b29a      	uxth	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0204 	orr.w	r2, r2, #4
 800320e:	b292      	uxth	r2, r2
 8003210:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f010 f92f 	bl	8013478 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800321a:	e06c      	b.n	80032f6 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003222:	2b00      	cmp	r3, #0
 8003224:	d040      	beq.n	80032a8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800322e:	b29a      	uxth	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003238:	b292      	uxth	r2, r2
 800323a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d12b      	bne.n	80032a0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003250:	b29a      	uxth	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0204 	orr.w	r2, r2, #4
 800325a:	b292      	uxth	r2, r2
 800325c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003268:	b29a      	uxth	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0208 	orr.w	r2, r2, #8
 8003272:	b292      	uxth	r2, r2
 8003274:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003288:	b29b      	uxth	r3, r3
 800328a:	089b      	lsrs	r3, r3, #2
 800328c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003296:	2101      	movs	r1, #1
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f010 fac5 	bl	8013828 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800329e:	e02a      	b.n	80032f6 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f010 f8e9 	bl	8013478 <HAL_PCD_SuspendCallback>
    return;
 80032a6:	e026      	b.n	80032f6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00f      	beq.n	80032d2 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032c4:	b292      	uxth	r2, r2
 80032c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f010 f8a7 	bl	801341e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80032d0:	e011      	b.n	80032f6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00c      	beq.n	80032f6 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032ee:	b292      	uxth	r2, r2
 80032f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80032f4:	bf00      	nop
  }
}
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_PCD_SetAddress+0x1a>
 8003312:	2302      	movs	r3, #2
 8003314:	e013      	b.n	800333e <HAL_PCD_SetAddress+0x42>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	78fa      	ldrb	r2, [r7, #3]
 8003322:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	78fa      	ldrb	r2, [r7, #3]
 800332c:	4611      	mov	r1, r2
 800332e:	4618      	mov	r0, r3
 8003330:	f006 f9e0 	bl	80096f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	4608      	mov	r0, r1
 8003350:	4611      	mov	r1, r2
 8003352:	461a      	mov	r2, r3
 8003354:	4603      	mov	r3, r0
 8003356:	70fb      	strb	r3, [r7, #3]
 8003358:	460b      	mov	r3, r1
 800335a:	803b      	strh	r3, [r7, #0]
 800335c:	4613      	mov	r3, r2
 800335e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003364:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003368:	2b00      	cmp	r3, #0
 800336a:	da0f      	bge.n	800338c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	4413      	add	r3, r2
 8003380:	3304      	adds	r3, #4
 8003382:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2201      	movs	r2, #1
 8003388:	705a      	strb	r2, [r3, #1]
 800338a:	e00f      	b.n	80033ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800338c:	78fb      	ldrb	r3, [r7, #3]
 800338e:	f003 0207 	and.w	r2, r3, #7
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	4413      	add	r3, r2
 80033a2:	3304      	adds	r3, #4
 80033a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80033b8:	883a      	ldrh	r2, [r7, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	78ba      	ldrb	r2, [r7, #2]
 80033c2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	785b      	ldrb	r3, [r3, #1]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d004      	beq.n	80033d6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80033d6:	78bb      	ldrb	r3, [r7, #2]
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d102      	bne.n	80033e2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_PCD_EP_Open+0xaa>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e00e      	b.n	800340e <HAL_PCD_EP_Open+0xc8>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68f9      	ldr	r1, [r7, #12]
 80033fe:	4618      	mov	r0, r3
 8003400:	f003 ff9c 	bl	800733c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 800340c:	7afb      	ldrb	r3, [r7, #11]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b084      	sub	sp, #16
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	460b      	mov	r3, r1
 8003420:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003422:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003426:	2b00      	cmp	r3, #0
 8003428:	da0f      	bge.n	800344a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	4413      	add	r3, r2
 800343e:	3304      	adds	r3, #4
 8003440:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2201      	movs	r2, #1
 8003446:	705a      	strb	r2, [r3, #1]
 8003448:	e00f      	b.n	800346a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800344a:	78fb      	ldrb	r3, [r7, #3]
 800344c:	f003 0207 	and.w	r2, r3, #7
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	4413      	add	r3, r2
 8003460:	3304      	adds	r3, #4
 8003462:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800346a:	78fb      	ldrb	r3, [r7, #3]
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	b2da      	uxtb	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_PCD_EP_Close+0x6e>
 8003480:	2302      	movs	r3, #2
 8003482:	e00e      	b.n	80034a2 <HAL_PCD_EP_Close+0x8c>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68f9      	ldr	r1, [r7, #12]
 8003492:	4618      	mov	r0, r3
 8003494:	f004 fb0c 	bl	8007ab0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b086      	sub	sp, #24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
 80034b6:	460b      	mov	r3, r1
 80034b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034ba:	7afb      	ldrb	r3, [r7, #11]
 80034bc:	f003 0207 	and.w	r2, r3, #7
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	4413      	add	r3, r2
 80034d0:	3304      	adds	r3, #4
 80034d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2200      	movs	r2, #0
 80034e4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2200      	movs	r2, #0
 80034ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ec:	7afb      	ldrb	r3, [r7, #11]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034f8:	7afb      	ldrb	r3, [r7, #11]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6979      	ldr	r1, [r7, #20]
 8003508:	4618      	mov	r0, r3
 800350a:	f004 fcbe 	bl	8007e8a <USB_EPStartXfer>
 800350e:	e005      	b.n	800351c <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6979      	ldr	r1, [r7, #20]
 8003516:	4618      	mov	r0, r3
 8003518:	f004 fcb7 	bl	8007e8a <USB_EPStartXfer>
  }

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	460b      	mov	r3, r1
 8003530:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003532:	78fb      	ldrb	r3, [r7, #3]
 8003534:	f003 0207 	and.w	r2, r3, #7
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	440b      	add	r3, r1
 8003544:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003548:	681b      	ldr	r3, [r3, #0]
}
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b086      	sub	sp, #24
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	603b      	str	r3, [r7, #0]
 8003562:	460b      	mov	r3, r1
 8003564:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003566:	7afb      	ldrb	r3, [r7, #11]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4413      	add	r3, r2
 800357a:	3304      	adds	r3, #4
 800357c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2200      	movs	r2, #0
 800359c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2201      	movs	r2, #1
 80035a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035a4:	7afb      	ldrb	r3, [r7, #11]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035b0:	7afb      	ldrb	r3, [r7, #11]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6979      	ldr	r1, [r7, #20]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f004 fc62 	bl	8007e8a <USB_EPStartXfer>
 80035c6:	e005      	b.n	80035d4 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6979      	ldr	r1, [r7, #20]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f004 fc5b 	bl	8007e8a <USB_EPStartXfer>
  }

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b084      	sub	sp, #16
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
 80035e6:	460b      	mov	r3, r1
 80035e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80035ea:	78fb      	ldrb	r3, [r7, #3]
 80035ec:	f003 0207 	and.w	r2, r3, #7
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d901      	bls.n	80035fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e040      	b.n	800367e <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003600:	2b00      	cmp	r3, #0
 8003602:	da0f      	bge.n	8003624 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003604:	78fb      	ldrb	r3, [r7, #3]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	4413      	add	r3, r2
 8003618:	3304      	adds	r3, #4
 800361a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2201      	movs	r2, #1
 8003620:	705a      	strb	r2, [r3, #1]
 8003622:	e00d      	b.n	8003640 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003624:	78fa      	ldrb	r2, [r7, #3]
 8003626:	4613      	mov	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	4413      	add	r3, r2
 8003636:	3304      	adds	r3, #4
 8003638:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2201      	movs	r2, #1
 8003644:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003646:	78fb      	ldrb	r3, [r7, #3]
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	b2da      	uxtb	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_PCD_EP_SetStall+0x82>
 800365c:	2302      	movs	r3, #2
 800365e:	e00e      	b.n	800367e <HAL_PCD_EP_SetStall+0xa0>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68f9      	ldr	r1, [r7, #12]
 800366e:	4618      	mov	r0, r3
 8003670:	f005 ff41 	bl	80094f6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b084      	sub	sp, #16
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	460b      	mov	r3, r1
 8003690:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	f003 020f 	and.w	r2, r3, #15
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	429a      	cmp	r2, r3
 800369e:	d901      	bls.n	80036a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e042      	b.n	800372a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	da0f      	bge.n	80036cc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ac:	78fb      	ldrb	r3, [r7, #3]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	4413      	add	r3, r2
 80036c0:	3304      	adds	r3, #4
 80036c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	705a      	strb	r2, [r3, #1]
 80036ca:	e00f      	b.n	80036ec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	f003 0207 	and.w	r2, r3, #7
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	3304      	adds	r3, #4
 80036e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_PCD_EP_ClrStall+0x86>
 8003708:	2302      	movs	r3, #2
 800370a:	e00e      	b.n	800372a <HAL_PCD_EP_ClrStall+0xa4>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68f9      	ldr	r1, [r7, #12]
 800371a:	4618      	mov	r0, r3
 800371c:	f005 ff3c 	bl	8009598 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b096      	sub	sp, #88	; 0x58
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800373a:	e3a9      	b.n	8003e90 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003744:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003748:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800374c:	b2db      	uxtb	r3, r3
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8003756:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800375a:	2b00      	cmp	r3, #0
 800375c:	f040 8169 	bne.w	8003a32 <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003760:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	d150      	bne.n	800380e <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	b29b      	uxth	r3, r3
 8003774:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377c:	81fb      	strh	r3, [r7, #14]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	89fb      	ldrh	r3, [r7, #14]
 8003784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800378c:	b29b      	uxth	r3, r3
 800378e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	332c      	adds	r3, #44	; 0x2c
 8003794:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800379e:	b29b      	uxth	r3, r3
 80037a0:	461a      	mov	r2, r3
 80037a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	4413      	add	r3, r2
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6812      	ldr	r2, [r2, #0]
 80037ae:	4413      	add	r3, r2
 80037b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80037ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80037be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c0:	695a      	ldr	r2, [r3, #20]
 80037c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	441a      	add	r2, r3
 80037c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ca:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80037cc:	2100      	movs	r1, #0
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f00f fe0b 	bl	80133ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 8357 	beq.w	8003e90 <PCD_EP_ISR_Handler+0x75e>
 80037e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f040 8352 	bne.w	8003e90 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	b292      	uxth	r2, r2
 8003800:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800380c:	e340      	b.n	8003e90 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003814:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003820:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003828:	2b00      	cmp	r3, #0
 800382a:	d032      	beq.n	8003892 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003834:	b29b      	uxth	r3, r3
 8003836:	461a      	mov	r2, r3
 8003838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	4413      	add	r3, r2
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	4413      	add	r3, r2
 8003846:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003852:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6818      	ldr	r0, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 800385e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003860:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003864:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003866:	b29b      	uxth	r3, r3
 8003868:	f005 ffc1 	bl	80097ee <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	b29a      	uxth	r2, r3
 8003874:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003878:	4013      	ands	r3, r2
 800387a:	823b      	strh	r3, [r7, #16]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	8a3a      	ldrh	r2, [r7, #16]
 8003882:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003886:	b292      	uxth	r2, r2
 8003888:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f00f fd80 	bl	8013390 <HAL_PCD_SetupStageCallback>
 8003890:	e2fe      	b.n	8003e90 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003892:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8003896:	2b00      	cmp	r3, #0
 8003898:	f280 82fa 	bge.w	8003e90 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80038a8:	4013      	ands	r3, r2
 80038aa:	83fb      	strh	r3, [r7, #30]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	8bfa      	ldrh	r2, [r7, #30]
 80038b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038b6:	b292      	uxth	r2, r2
 80038b8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	461a      	mov	r2, r3
 80038c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4413      	add	r3, r2
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6812      	ldr	r2, [r2, #0]
 80038d2:	4413      	add	r3, r2
 80038d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80038e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d019      	beq.n	800391e <PCD_EP_ISR_Handler+0x1ec>
 80038ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d015      	beq.n	800391e <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f8:	6959      	ldr	r1, [r3, #20]
 80038fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038fc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80038fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003900:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003902:	b29b      	uxth	r3, r3
 8003904:	f005 ff73 	bl	80097ee <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800390a:	695a      	ldr	r2, [r3, #20]
 800390c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	441a      	add	r2, r3
 8003912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003914:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003916:	2100      	movs	r1, #0
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f00f fd4b 	bl	80133b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003928:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800392c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003930:	2b00      	cmp	r3, #0
 8003932:	f040 82ad 	bne.w	8003e90 <PCD_EP_ISR_Handler+0x75e>
 8003936:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800393a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800393e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003942:	f000 82a5 	beq.w	8003e90 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003954:	b29b      	uxth	r3, r3
 8003956:	461a      	mov	r2, r3
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	4413      	add	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	2b3e      	cmp	r3, #62	; 0x3e
 800396c:	d918      	bls.n	80039a0 <PCD_EP_ISR_Handler+0x26e>
 800396e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	647b      	str	r3, [r7, #68]	; 0x44
 8003976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	2b00      	cmp	r3, #0
 8003980:	d102      	bne.n	8003988 <PCD_EP_ISR_Handler+0x256>
 8003982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003984:	3b01      	subs	r3, #1
 8003986:	647b      	str	r3, [r7, #68]	; 0x44
 8003988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800398a:	b29b      	uxth	r3, r3
 800398c:	029b      	lsls	r3, r3, #10
 800398e:	b29b      	uxth	r3, r3
 8003990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003998:	b29a      	uxth	r2, r3
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	801a      	strh	r2, [r3, #0]
 800399e:	e029      	b.n	80039f4 <PCD_EP_ISR_Handler+0x2c2>
 80039a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d112      	bne.n	80039ce <PCD_EP_ISR_Handler+0x29c>
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	801a      	strh	r2, [r3, #0]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	b29b      	uxth	r3, r3
 80039be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	801a      	strh	r2, [r3, #0]
 80039cc:	e012      	b.n	80039f4 <PCD_EP_ISR_Handler+0x2c2>
 80039ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	085b      	lsrs	r3, r3, #1
 80039d4:	647b      	str	r3, [r7, #68]	; 0x44
 80039d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <PCD_EP_ISR_Handler+0x2b6>
 80039e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039e4:	3301      	adds	r3, #1
 80039e6:	647b      	str	r3, [r7, #68]	; 0x44
 80039e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	029b      	lsls	r3, r3, #10
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	881b      	ldrh	r3, [r3, #0]
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a04:	827b      	strh	r3, [r7, #18]
 8003a06:	8a7b      	ldrh	r3, [r7, #18]
 8003a08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003a0c:	827b      	strh	r3, [r7, #18]
 8003a0e:	8a7b      	ldrh	r3, [r7, #18]
 8003a10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a14:	827b      	strh	r3, [r7, #18]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	8a7b      	ldrh	r3, [r7, #18]
 8003a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	8013      	strh	r3, [r2, #0]
 8003a30:	e22e      	b.n	8003e90 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a46:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f280 80f7 	bge.w	8003c3e <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003a66:	4013      	ands	r3, r2
 8003a68:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	461a      	mov	r2, r3
 8003a72:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003a7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a82:	b292      	uxth	r2, r2
 8003a84:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003a86:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	4413      	add	r3, r2
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa0:	7b1b      	ldrb	r3, [r3, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d123      	bne.n	8003aee <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	4413      	add	r3, r2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8003ace:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 808e 	beq.w	8003bf4 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ade:	6959      	ldr	r1, [r3, #20]
 8003ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae2:	88da      	ldrh	r2, [r3, #6]
 8003ae4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003ae8:	f005 fe81 	bl	80097ee <USB_ReadPMA>
 8003aec:	e082      	b.n	8003bf4 <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af0:	78db      	ldrb	r3, [r3, #3]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d10a      	bne.n	8003b0c <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003af6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003afa:	461a      	mov	r2, r3
 8003afc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f9d4 	bl	8003eac <HAL_PCD_EP_DB_Receive>
 8003b04:	4603      	mov	r3, r0
 8003b06:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003b0a:	e073      	b.n	8003bf4 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	461a      	mov	r2, r3
 8003b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b26:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	441a      	add	r2, r3
 8003b38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	461a      	mov	r2, r3
 8003b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d022      	beq.n	8003bb0 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	461a      	mov	r2, r3
 8003b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	4413      	add	r3, r2
 8003b84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b88:	881b      	ldrh	r3, [r3, #0]
 8003b8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b8e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003b92:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d02c      	beq.n	8003bf4 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba0:	6959      	ldr	r1, [r3, #20]
 8003ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba4:	891a      	ldrh	r2, [r3, #8]
 8003ba6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003baa:	f005 fe20 	bl	80097ee <USB_ReadPMA>
 8003bae:	e021      	b.n	8003bf4 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	461a      	mov	r2, r3
 8003bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6812      	ldr	r2, [r2, #0]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bd4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003bd8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d009      	beq.n	8003bf4 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be6:	6959      	ldr	r1, [r3, #20]
 8003be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bea:	895a      	ldrh	r2, [r3, #10]
 8003bec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003bf0:	f005 fdfd 	bl	80097ee <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bf6:	69da      	ldr	r2, [r3, #28]
 8003bf8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003bfc:	441a      	add	r2, r3
 8003bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c00:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c04:	695a      	ldr	r2, [r3, #20]
 8003c06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003c0a:	441a      	add	r2, r3
 8003c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c0e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <PCD_EP_ISR_Handler+0x4f2>
 8003c18:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d206      	bcs.n	8003c32 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	4619      	mov	r1, r3
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f00f fbc2 	bl	80133b4 <HAL_PCD_DataOutStageCallback>
 8003c30:	e005      	b.n	8003c3e <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f004 f926 	bl	8007e8a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003c3e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 8122 	beq.w	8003e90 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8003c4c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	3304      	adds	r3, #4
 8003c60:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	441a      	add	r2, r3
 8003c8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca0:	78db      	ldrb	r3, [r3, #3]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	f040 80a2 	bne.w	8003dec <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8003ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003caa:	2200      	movs	r2, #0
 8003cac:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb0:	7b1b      	ldrb	r3, [r3, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 8093 	beq.w	8003dde <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003cb8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d046      	beq.n	8003d52 <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc6:	785b      	ldrb	r3, [r3, #1]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d126      	bne.n	8003d1a <PCD_EP_ISR_Handler+0x5e8>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	461a      	mov	r2, r3
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	4413      	add	r3, r2
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	00da      	lsls	r2, r3, #3
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	4413      	add	r3, r2
 8003cee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003cf2:	623b      	str	r3, [r7, #32]
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	801a      	strh	r2, [r3, #0]
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	801a      	strh	r2, [r3, #0]
 8003d18:	e061      	b.n	8003dde <PCD_EP_ISR_Handler+0x6ac>
 8003d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d1c:	785b      	ldrb	r3, [r3, #1]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d15d      	bne.n	8003dde <PCD_EP_ISR_Handler+0x6ac>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	461a      	mov	r2, r3
 8003d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d36:	4413      	add	r3, r2
 8003d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	00da      	lsls	r2, r3, #3
 8003d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d42:	4413      	add	r3, r2
 8003d44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	801a      	strh	r2, [r3, #0]
 8003d50:	e045      	b.n	8003dde <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d5a:	785b      	ldrb	r3, [r3, #1]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d126      	bne.n	8003dae <PCD_EP_ISR_Handler+0x67c>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	637b      	str	r3, [r7, #52]	; 0x34
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d74:	4413      	add	r3, r2
 8003d76:	637b      	str	r3, [r7, #52]	; 0x34
 8003d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	00da      	lsls	r2, r3, #3
 8003d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d80:	4413      	add	r3, r2
 8003d82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d86:	633b      	str	r3, [r7, #48]	; 0x30
 8003d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d96:	801a      	strh	r2, [r3, #0]
 8003d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003daa:	801a      	strh	r2, [r3, #0]
 8003dac:	e017      	b.n	8003dde <PCD_EP_ISR_Handler+0x6ac>
 8003dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003db0:	785b      	ldrb	r3, [r3, #1]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d113      	bne.n	8003dde <PCD_EP_ISR_Handler+0x6ac>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc4:	4413      	add	r3, r2
 8003dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	00da      	lsls	r2, r3, #3
 8003dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003dd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dda:	2200      	movs	r2, #0
 8003ddc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	4619      	mov	r1, r3
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f00f fb00 	bl	80133ea <HAL_PCD_DataInStageCallback>
 8003dea:	e051      	b.n	8003e90 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003dec:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d144      	bne.n	8003e82 <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	461a      	mov	r2, r3
 8003e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	4413      	add	r3, r2
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6812      	ldr	r2, [r2, #0]
 8003e10:	4413      	add	r3, r2
 8003e12:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e1c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e22:	699a      	ldr	r2, [r3, #24]
 8003e24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d907      	bls.n	8003e3c <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 8003e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e2e:	699a      	ldr	r2, [r3, #24]
 8003e30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003e34:	1ad2      	subs	r2, r2, r3
 8003e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e38:	619a      	str	r2, [r3, #24]
 8003e3a:	e002      	b.n	8003e42 <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 8003e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e3e:	2200      	movs	r2, #0
 8003e40:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	4619      	mov	r1, r3
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f00f faca 	bl	80133ea <HAL_PCD_DataInStageCallback>
 8003e56:	e01b      	b.n	8003e90 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e5a:	695a      	ldr	r2, [r3, #20]
 8003e5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003e60:	441a      	add	r2, r3
 8003e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e64:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e68:	69da      	ldr	r2, [r3, #28]
 8003e6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003e6e:	441a      	add	r2, r3
 8003e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e72:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f004 f805 	bl	8007e8a <USB_EPStartXfer>
 8003e80:	e006      	b.n	8003e90 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003e82:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003e86:	461a      	mov	r2, r3
 8003e88:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f917 	bl	80040be <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	b21b      	sxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f6ff ac4d 	blt.w	800373c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3758      	adds	r7, #88	; 0x58
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003eba:	88fb      	ldrh	r3, [r7, #6]
 8003ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d07c      	beq.n	8003fbe <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	6812      	ldr	r2, [r2, #0]
 8003edc:	4413      	add	r3, r2
 8003ede:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ee8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	8b7b      	ldrh	r3, [r7, #26]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d306      	bcc.n	8003f02 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	699a      	ldr	r2, [r3, #24]
 8003ef8:	8b7b      	ldrh	r3, [r7, #26]
 8003efa:	1ad2      	subs	r2, r2, r3
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	619a      	str	r2, [r3, #24]
 8003f00:	e002      	b.n	8003f08 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2200      	movs	r2, #0
 8003f06:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d123      	bne.n	8003f58 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2a:	833b      	strh	r3, [r7, #24]
 8003f2c:	8b3b      	ldrh	r3, [r7, #24]
 8003f2e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f32:	833b      	strh	r3, [r7, #24]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	441a      	add	r2, r3
 8003f42:	8b3b      	ldrh	r3, [r7, #24]
 8003f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f58:	88fb      	ldrh	r3, [r7, #6]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d01f      	beq.n	8003fa2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7c:	82fb      	strh	r3, [r7, #22]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	441a      	add	r2, r3
 8003f8c:	8afb      	ldrh	r3, [r7, #22]
 8003f8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003fa2:	8b7b      	ldrh	r3, [r7, #26]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 8085 	beq.w	80040b4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	6959      	ldr	r1, [r3, #20]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	891a      	ldrh	r2, [r3, #8]
 8003fb6:	8b7b      	ldrh	r3, [r7, #26]
 8003fb8:	f005 fc19 	bl	80097ee <USB_ReadPMA>
 8003fbc:	e07a      	b.n	80040b4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	461a      	mov	r2, r3
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	6812      	ldr	r2, [r2, #0]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fe2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	699a      	ldr	r2, [r3, #24]
 8003fe8:	8b7b      	ldrh	r3, [r7, #26]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d306      	bcc.n	8003ffc <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	699a      	ldr	r2, [r3, #24]
 8003ff2:	8b7b      	ldrh	r3, [r7, #26]
 8003ff4:	1ad2      	subs	r2, r2, r3
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	619a      	str	r2, [r3, #24]
 8003ffa:	e002      	b.n	8004002 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2200      	movs	r2, #0
 8004000:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d123      	bne.n	8004052 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	b29b      	uxth	r3, r3
 800401c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004024:	83fb      	strh	r3, [r7, #30]
 8004026:	8bfb      	ldrh	r3, [r7, #30]
 8004028:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800402c:	83fb      	strh	r3, [r7, #30]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	441a      	add	r2, r3
 800403c:	8bfb      	ldrh	r3, [r7, #30]
 800403e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800404a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800404e:	b29b      	uxth	r3, r3
 8004050:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004052:	88fb      	ldrh	r3, [r7, #6]
 8004054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d11f      	bne.n	800409c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	461a      	mov	r2, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	b29b      	uxth	r3, r3
 800406e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004076:	83bb      	strh	r3, [r7, #28]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	461a      	mov	r2, r3
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	441a      	add	r2, r3
 8004086:	8bbb      	ldrh	r3, [r7, #28]
 8004088:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800408c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004094:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004098:	b29b      	uxth	r3, r3
 800409a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800409c:	8b7b      	ldrh	r3, [r7, #26]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d008      	beq.n	80040b4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	6959      	ldr	r1, [r3, #20]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	895a      	ldrh	r2, [r3, #10]
 80040ae:	8b7b      	ldrh	r3, [r7, #26]
 80040b0:	f005 fb9d 	bl	80097ee <USB_ReadPMA>
    }
  }

  return count;
 80040b4:	8b7b      	ldrh	r3, [r7, #26]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3720      	adds	r7, #32
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b0a2      	sub	sp, #136	; 0x88
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	4613      	mov	r3, r2
 80040ca:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80040cc:	88fb      	ldrh	r3, [r7, #6]
 80040ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 81c5 	beq.w	8004462 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	461a      	mov	r2, r3
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	4413      	add	r3, r2
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	6812      	ldr	r2, [r2, #0]
 80040f0:	4413      	add	r3, r2
 80040f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	699a      	ldr	r2, [r3, #24]
 8004104:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004108:	429a      	cmp	r2, r3
 800410a:	d907      	bls.n	800411c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	699a      	ldr	r2, [r3, #24]
 8004110:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004114:	1ad2      	subs	r2, r2, r3
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	619a      	str	r2, [r3, #24]
 800411a:	e002      	b.n	8004122 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2200      	movs	r2, #0
 8004120:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	2b00      	cmp	r3, #0
 8004128:	f040 80b9 	bne.w	800429e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	785b      	ldrb	r3, [r3, #1]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d126      	bne.n	8004182 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	62bb      	str	r3, [r7, #40]	; 0x28
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004142:	b29b      	uxth	r3, r3
 8004144:	461a      	mov	r2, r3
 8004146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004148:	4413      	add	r3, r2
 800414a:	62bb      	str	r3, [r7, #40]	; 0x28
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	00da      	lsls	r2, r3, #3
 8004152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004154:	4413      	add	r3, r2
 8004156:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800415a:	627b      	str	r3, [r7, #36]	; 0x24
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	b29b      	uxth	r3, r3
 8004162:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004166:	b29a      	uxth	r2, r3
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	801a      	strh	r2, [r3, #0]
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	b29b      	uxth	r3, r3
 8004172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800417a:	b29a      	uxth	r2, r3
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	801a      	strh	r2, [r3, #0]
 8004180:	e01a      	b.n	80041b8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	785b      	ldrb	r3, [r3, #1]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d116      	bne.n	80041b8 <HAL_PCD_EP_DB_Transmit+0xfa>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	633b      	str	r3, [r7, #48]	; 0x30
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004198:	b29b      	uxth	r3, r3
 800419a:	461a      	mov	r2, r3
 800419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419e:	4413      	add	r3, r2
 80041a0:	633b      	str	r3, [r7, #48]	; 0x30
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	00da      	lsls	r2, r3, #3
 80041a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041aa:	4413      	add	r3, r2
 80041ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80041b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b4:	2200      	movs	r2, #0
 80041b6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	623b      	str	r3, [r7, #32]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	785b      	ldrb	r3, [r3, #1]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d126      	bne.n	8004214 <HAL_PCD_EP_DB_Transmit+0x156>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	61bb      	str	r3, [r7, #24]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	461a      	mov	r2, r3
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	4413      	add	r3, r2
 80041dc:	61bb      	str	r3, [r7, #24]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	00da      	lsls	r2, r3, #3
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	4413      	add	r3, r2
 80041e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80041ec:	617b      	str	r3, [r7, #20]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	801a      	strh	r2, [r3, #0]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	b29b      	uxth	r3, r3
 8004204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800420c:	b29a      	uxth	r2, r3
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	801a      	strh	r2, [r3, #0]
 8004212:	e017      	b.n	8004244 <HAL_PCD_EP_DB_Transmit+0x186>
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	785b      	ldrb	r3, [r3, #1]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d113      	bne.n	8004244 <HAL_PCD_EP_DB_Transmit+0x186>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004224:	b29b      	uxth	r3, r3
 8004226:	461a      	mov	r2, r3
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	4413      	add	r3, r2
 800422c:	623b      	str	r3, [r7, #32]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	00da      	lsls	r2, r3, #3
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	4413      	add	r3, r2
 8004238:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800423c:	61fb      	str	r3, [r7, #28]
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	2200      	movs	r2, #0
 8004242:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	4619      	mov	r1, r3
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f00f f8cd 	bl	80133ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004250:	88fb      	ldrh	r3, [r7, #6]
 8004252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 82d2 	beq.w	8004800 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	461a      	mov	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	b29b      	uxth	r3, r3
 800426e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004276:	827b      	strh	r3, [r7, #18]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	441a      	add	r2, r3
 8004286:	8a7b      	ldrh	r3, [r7, #18]
 8004288:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800428c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004290:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004298:	b29b      	uxth	r3, r3
 800429a:	8013      	strh	r3, [r2, #0]
 800429c:	e2b0      	b.n	8004800 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800429e:	88fb      	ldrh	r3, [r7, #6]
 80042a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d021      	beq.n	80042ec <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	461a      	mov	r2, r3
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	461a      	mov	r2, r3
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	441a      	add	r2, r3
 80042d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80042d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	f040 8284 	bne.w	8004800 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	695a      	ldr	r2, [r3, #20]
 80042fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004300:	441a      	add	r2, r3
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	69da      	ldr	r2, [r3, #28]
 800430a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800430e:	441a      	add	r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	6a1a      	ldr	r2, [r3, #32]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	429a      	cmp	r2, r3
 800431e:	d309      	bcc.n	8004334 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	6a1a      	ldr	r2, [r3, #32]
 800432a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800432c:	1ad2      	subs	r2, r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	621a      	str	r2, [r3, #32]
 8004332:	e015      	b.n	8004360 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d107      	bne.n	800434c <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800433c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004340:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800434a:	e009      	b.n	8004360 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2200      	movs	r2, #0
 800435e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	785b      	ldrb	r3, [r3, #1]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d155      	bne.n	8004414 <HAL_PCD_EP_DB_Transmit+0x356>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	63bb      	str	r3, [r7, #56]	; 0x38
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004376:	b29b      	uxth	r3, r3
 8004378:	461a      	mov	r2, r3
 800437a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437c:	4413      	add	r3, r2
 800437e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	00da      	lsls	r2, r3, #3
 8004386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004388:	4413      	add	r3, r2
 800438a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800438e:	637b      	str	r3, [r7, #52]	; 0x34
 8004390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004392:	2b3e      	cmp	r3, #62	; 0x3e
 8004394:	d916      	bls.n	80043c4 <HAL_PCD_EP_DB_Transmit+0x306>
 8004396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004398:	095b      	lsrs	r3, r3, #5
 800439a:	64bb      	str	r3, [r7, #72]	; 0x48
 800439c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800439e:	f003 031f 	and.w	r3, r3, #31
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d102      	bne.n	80043ac <HAL_PCD_EP_DB_Transmit+0x2ee>
 80043a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043a8:	3b01      	subs	r3, #1
 80043aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80043ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	029b      	lsls	r3, r3, #10
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043bc:	b29a      	uxth	r2, r3
 80043be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c0:	801a      	strh	r2, [r3, #0]
 80043c2:	e043      	b.n	800444c <HAL_PCD_EP_DB_Transmit+0x38e>
 80043c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d112      	bne.n	80043f0 <HAL_PCD_EP_DB_Transmit+0x332>
 80043ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043cc:	881b      	ldrh	r3, [r3, #0]
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d8:	801a      	strh	r2, [r3, #0]
 80043da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	b29b      	uxth	r3, r3
 80043e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ec:	801a      	strh	r2, [r3, #0]
 80043ee:	e02d      	b.n	800444c <HAL_PCD_EP_DB_Transmit+0x38e>
 80043f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f2:	085b      	lsrs	r3, r3, #1
 80043f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80043f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <HAL_PCD_EP_DB_Transmit+0x348>
 8004400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004402:	3301      	adds	r3, #1
 8004404:	64bb      	str	r3, [r7, #72]	; 0x48
 8004406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004408:	b29b      	uxth	r3, r3
 800440a:	029b      	lsls	r3, r3, #10
 800440c:	b29a      	uxth	r2, r3
 800440e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004410:	801a      	strh	r2, [r3, #0]
 8004412:	e01b      	b.n	800444c <HAL_PCD_EP_DB_Transmit+0x38e>
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	785b      	ldrb	r3, [r3, #1]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d117      	bne.n	800444c <HAL_PCD_EP_DB_Transmit+0x38e>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	643b      	str	r3, [r7, #64]	; 0x40
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800442a:	b29b      	uxth	r3, r3
 800442c:	461a      	mov	r2, r3
 800442e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004430:	4413      	add	r3, r2
 8004432:	643b      	str	r3, [r7, #64]	; 0x40
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	00da      	lsls	r2, r3, #3
 800443a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800443c:	4413      	add	r3, r2
 800443e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004446:	b29a      	uxth	r2, r3
 8004448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800444a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6818      	ldr	r0, [r3, #0]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	6959      	ldr	r1, [r3, #20]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	891a      	ldrh	r2, [r3, #8]
 8004458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800445a:	b29b      	uxth	r3, r3
 800445c:	f005 f985 	bl	800976a <USB_WritePMA>
 8004460:	e1ce      	b.n	8004800 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800446a:	b29b      	uxth	r3, r3
 800446c:	461a      	mov	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	4413      	add	r3, r2
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	6812      	ldr	r2, [r2, #0]
 800447a:	4413      	add	r3, r2
 800447c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004486:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	699a      	ldr	r2, [r3, #24]
 800448e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004492:	429a      	cmp	r2, r3
 8004494:	d307      	bcc.n	80044a6 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	699a      	ldr	r2, [r3, #24]
 800449a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800449e:	1ad2      	subs	r2, r2, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	619a      	str	r2, [r3, #24]
 80044a4:	e002      	b.n	80044ac <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2200      	movs	r2, #0
 80044aa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f040 80c4 	bne.w	800463e <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	785b      	ldrb	r3, [r3, #1]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d126      	bne.n	800450c <HAL_PCD_EP_DB_Transmit+0x44e>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044d2:	4413      	add	r3, r2
 80044d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	00da      	lsls	r2, r3, #3
 80044dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044de:	4413      	add	r3, r2
 80044e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80044e4:	667b      	str	r3, [r7, #100]	; 0x64
 80044e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044f4:	801a      	strh	r2, [r3, #0]
 80044f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004504:	b29a      	uxth	r2, r3
 8004506:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004508:	801a      	strh	r2, [r3, #0]
 800450a:	e01a      	b.n	8004542 <HAL_PCD_EP_DB_Transmit+0x484>
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	785b      	ldrb	r3, [r3, #1]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d116      	bne.n	8004542 <HAL_PCD_EP_DB_Transmit+0x484>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	673b      	str	r3, [r7, #112]	; 0x70
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004522:	b29b      	uxth	r3, r3
 8004524:	461a      	mov	r2, r3
 8004526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004528:	4413      	add	r3, r2
 800452a:	673b      	str	r3, [r7, #112]	; 0x70
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	00da      	lsls	r2, r3, #3
 8004532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004534:	4413      	add	r3, r2
 8004536:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800453a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800453c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453e:	2200      	movs	r2, #0
 8004540:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	785b      	ldrb	r3, [r3, #1]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d12f      	bne.n	80045b0 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004560:	b29b      	uxth	r3, r3
 8004562:	461a      	mov	r2, r3
 8004564:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004568:	4413      	add	r3, r2
 800456a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	00da      	lsls	r2, r3, #3
 8004574:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004578:	4413      	add	r3, r2
 800457a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800457e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004582:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	b29b      	uxth	r3, r3
 800458a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800458e:	b29a      	uxth	r2, r3
 8004590:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004594:	801a      	strh	r2, [r3, #0]
 8004596:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	b29b      	uxth	r3, r3
 800459e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045ac:	801a      	strh	r2, [r3, #0]
 80045ae:	e017      	b.n	80045e0 <HAL_PCD_EP_DB_Transmit+0x522>
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	785b      	ldrb	r3, [r3, #1]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d113      	bne.n	80045e0 <HAL_PCD_EP_DB_Transmit+0x522>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	461a      	mov	r2, r3
 80045c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045c6:	4413      	add	r3, r2
 80045c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	00da      	lsls	r2, r3, #3
 80045d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045d2:	4413      	add	r3, r2
 80045d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80045da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045dc:	2200      	movs	r2, #0
 80045de:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	4619      	mov	r1, r3
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f00e feff 	bl	80133ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80045ec:	88fb      	ldrh	r3, [r7, #6]
 80045ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f040 8104 	bne.w	8004800 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	461a      	mov	r2, r3
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	881b      	ldrh	r3, [r3, #0]
 8004608:	b29b      	uxth	r3, r3
 800460a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800460e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004612:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	441a      	add	r2, r3
 8004624:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004628:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800462c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004630:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004638:	b29b      	uxth	r3, r3
 800463a:	8013      	strh	r3, [r2, #0]
 800463c:	e0e0      	b.n	8004800 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800463e:	88fb      	ldrh	r3, [r7, #6]
 8004640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d121      	bne.n	800468c <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	461a      	mov	r2, r3
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	881b      	ldrh	r3, [r3, #0]
 8004658:	b29b      	uxth	r3, r3
 800465a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004662:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	441a      	add	r2, r3
 8004674:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800467c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004680:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004688:	b29b      	uxth	r3, r3
 800468a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004692:	2b01      	cmp	r3, #1
 8004694:	f040 80b4 	bne.w	8004800 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	695a      	ldr	r2, [r3, #20]
 800469c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046a0:	441a      	add	r2, r3
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	69da      	ldr	r2, [r3, #28]
 80046aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046ae:	441a      	add	r2, r3
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	6a1a      	ldr	r2, [r3, #32]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d309      	bcc.n	80046d4 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	6a1a      	ldr	r2, [r3, #32]
 80046ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046cc:	1ad2      	subs	r2, r2, r3
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	621a      	str	r2, [r3, #32]
 80046d2:	e015      	b.n	8004700 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d107      	bne.n	80046ec <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80046dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046e0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80046ea:	e009      	b.n	8004700 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2200      	movs	r2, #0
 80046f6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	663b      	str	r3, [r7, #96]	; 0x60
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	785b      	ldrb	r3, [r3, #1]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d155      	bne.n	80047ba <HAL_PCD_EP_DB_Transmit+0x6fc>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	65bb      	str	r3, [r7, #88]	; 0x58
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800471c:	b29b      	uxth	r3, r3
 800471e:	461a      	mov	r2, r3
 8004720:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004722:	4413      	add	r3, r2
 8004724:	65bb      	str	r3, [r7, #88]	; 0x58
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	00da      	lsls	r2, r3, #3
 800472c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800472e:	4413      	add	r3, r2
 8004730:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004734:	657b      	str	r3, [r7, #84]	; 0x54
 8004736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004738:	2b3e      	cmp	r3, #62	; 0x3e
 800473a:	d916      	bls.n	800476a <HAL_PCD_EP_DB_Transmit+0x6ac>
 800473c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	677b      	str	r3, [r7, #116]	; 0x74
 8004742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004744:	f003 031f 	and.w	r3, r3, #31
 8004748:	2b00      	cmp	r3, #0
 800474a:	d102      	bne.n	8004752 <HAL_PCD_EP_DB_Transmit+0x694>
 800474c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800474e:	3b01      	subs	r3, #1
 8004750:	677b      	str	r3, [r7, #116]	; 0x74
 8004752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004754:	b29b      	uxth	r3, r3
 8004756:	029b      	lsls	r3, r3, #10
 8004758:	b29b      	uxth	r3, r3
 800475a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800475e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004762:	b29a      	uxth	r2, r3
 8004764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004766:	801a      	strh	r2, [r3, #0]
 8004768:	e040      	b.n	80047ec <HAL_PCD_EP_DB_Transmit+0x72e>
 800476a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800476c:	2b00      	cmp	r3, #0
 800476e:	d112      	bne.n	8004796 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8004770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	b29b      	uxth	r3, r3
 8004776:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800477a:	b29a      	uxth	r2, r3
 800477c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800477e:	801a      	strh	r2, [r3, #0]
 8004780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004782:	881b      	ldrh	r3, [r3, #0]
 8004784:	b29b      	uxth	r3, r3
 8004786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800478a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800478e:	b29a      	uxth	r2, r3
 8004790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004792:	801a      	strh	r2, [r3, #0]
 8004794:	e02a      	b.n	80047ec <HAL_PCD_EP_DB_Transmit+0x72e>
 8004796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004798:	085b      	lsrs	r3, r3, #1
 800479a:	677b      	str	r3, [r7, #116]	; 0x74
 800479c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <HAL_PCD_EP_DB_Transmit+0x6ee>
 80047a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047a8:	3301      	adds	r3, #1
 80047aa:	677b      	str	r3, [r7, #116]	; 0x74
 80047ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	029b      	lsls	r3, r3, #10
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047b6:	801a      	strh	r2, [r3, #0]
 80047b8:	e018      	b.n	80047ec <HAL_PCD_EP_DB_Transmit+0x72e>
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	785b      	ldrb	r3, [r3, #1]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d114      	bne.n	80047ec <HAL_PCD_EP_DB_Transmit+0x72e>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	461a      	mov	r2, r3
 80047ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047d0:	4413      	add	r3, r2
 80047d2:	663b      	str	r3, [r7, #96]	; 0x60
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	00da      	lsls	r2, r3, #3
 80047da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047dc:	4413      	add	r3, r2
 80047de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80047e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ea:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	6959      	ldr	r1, [r3, #20]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	895a      	ldrh	r2, [r3, #10]
 80047f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	f004 ffb5 	bl	800976a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	461a      	mov	r2, r3
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	b29b      	uxth	r3, r3
 8004812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800481a:	823b      	strh	r3, [r7, #16]
 800481c:	8a3b      	ldrh	r3, [r7, #16]
 800481e:	f083 0310 	eor.w	r3, r3, #16
 8004822:	823b      	strh	r3, [r7, #16]
 8004824:	8a3b      	ldrh	r3, [r7, #16]
 8004826:	f083 0320 	eor.w	r3, r3, #32
 800482a:	823b      	strh	r3, [r7, #16]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	461a      	mov	r2, r3
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	441a      	add	r2, r3
 800483a:	8a3b      	ldrh	r3, [r7, #16]
 800483c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800484c:	b29b      	uxth	r3, r3
 800484e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3788      	adds	r7, #136	; 0x88
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800485a:	b480      	push	{r7}
 800485c:	b087      	sub	sp, #28
 800485e:	af00      	add	r7, sp, #0
 8004860:	60f8      	str	r0, [r7, #12]
 8004862:	607b      	str	r3, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	817b      	strh	r3, [r7, #10]
 8004868:	4613      	mov	r3, r2
 800486a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800486c:	897b      	ldrh	r3, [r7, #10]
 800486e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00c      	beq.n	8004892 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004878:	897b      	ldrh	r3, [r7, #10]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	4613      	mov	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4413      	add	r3, r2
 800488c:	3304      	adds	r3, #4
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	e00a      	b.n	80048a8 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004892:	897a      	ldrh	r2, [r7, #10]
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4413      	add	r3, r2
 80048a4:	3304      	adds	r3, #4
 80048a6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80048a8:	893b      	ldrh	r3, [r7, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d107      	bne.n	80048be <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2200      	movs	r2, #0
 80048b2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	80da      	strh	r2, [r3, #6]
 80048bc:	e00b      	b.n	80048d6 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2201      	movs	r2, #1
 80048c2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	0c1b      	lsrs	r3, r3, #16
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	371c      	adds	r7, #28
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004908:	b29b      	uxth	r3, r3
 800490a:	f043 0301 	orr.w	r3, r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800491c:	b29b      	uxth	r3, r3
 800491e:	f043 0302 	orr.w	r3, r3, #2
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800493c:	4b05      	ldr	r3, [pc, #20]	; (8004954 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a04      	ldr	r2, [pc, #16]	; (8004954 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004946:	6013      	str	r3, [r2, #0]
}
 8004948:	bf00      	nop
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	58000400 	.word	0x58000400

08004958 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800495c:	4b04      	ldr	r3, [pc, #16]	; (8004970 <HAL_PWREx_GetVoltageRange+0x18>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004964:	4618      	mov	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	58000400 	.word	0x58000400

08004974 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004978:	4b05      	ldr	r3, [pc, #20]	; (8004990 <HAL_PWREx_EnableVddUSB+0x1c>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	4a04      	ldr	r2, [pc, #16]	; (8004990 <HAL_PWREx_EnableVddUSB+0x1c>)
 800497e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004982:	6053      	str	r3, [r2, #4]
}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	58000400 	.word	0x58000400

08004994 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049a6:	d101      	bne.n	80049ac <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <LL_RCC_HSE_Enable>:
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80049bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ca:	6013      	str	r3, [r2, #0]
}
 80049cc:	bf00      	nop
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <LL_RCC_HSE_Disable>:
{
 80049d6:	b480      	push	{r7}
 80049d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80049da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e8:	6013      	str	r3, [r2, #0]
}
 80049ea:	bf00      	nop
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <LL_RCC_HSE_IsReady>:
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80049f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a06:	d101      	bne.n	8004a0c <LL_RCC_HSE_IsReady+0x18>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e000      	b.n	8004a0e <LL_RCC_HSE_IsReady+0x1a>
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <LL_RCC_HSI_Enable>:
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a2a:	6013      	str	r3, [r2, #0]
}
 8004a2c:	bf00      	nop
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <LL_RCC_HSI_Disable>:
{
 8004a36:	b480      	push	{r7}
 8004a38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a48:	6013      	str	r3, [r2, #0]
}
 8004a4a:	bf00      	nop
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <LL_RCC_HSI_IsReady>:
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a66:	d101      	bne.n	8004a6c <LL_RCC_HSI_IsReady+0x18>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e000      	b.n	8004a6e <LL_RCC_HSI_IsReady+0x1a>
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	061b      	lsls	r3, r3, #24
 8004a8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a92:	4313      	orrs	r3, r2
 8004a94:	604b      	str	r3, [r1, #4]
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <LL_RCC_HSI48_Enable>:
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004aae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ab2:	f043 0301 	orr.w	r3, r3, #1
 8004ab6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004aba:	bf00      	nop
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <LL_RCC_HSI48_Disable>:
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004acc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ad4:	f023 0301 	bic.w	r3, r3, #1
 8004ad8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004adc:	bf00      	nop
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <LL_RCC_HSI48_IsReady>:
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d101      	bne.n	8004afe <LL_RCC_HSI48_IsReady+0x18>
 8004afa:	2301      	movs	r3, #1
 8004afc:	e000      	b.n	8004b00 <LL_RCC_HSI48_IsReady+0x1a>
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <LL_RCC_LSE_Enable>:
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b1a:	f043 0301 	orr.w	r3, r3, #1
 8004b1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b22:	bf00      	nop
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <LL_RCC_LSE_Disable>:
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b3c:	f023 0301 	bic.w	r3, r3, #1
 8004b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b44:	bf00      	nop
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <LL_RCC_LSE_EnableBypass>:
{
 8004b4e:	b480      	push	{r7}
 8004b50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b5e:	f043 0304 	orr.w	r3, r3, #4
 8004b62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b66:	bf00      	nop
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <LL_RCC_LSE_DisableBypass>:
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b80:	f023 0304 	bic.w	r3, r3, #4
 8004b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b88:	bf00      	nop
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <LL_RCC_LSE_IsReady>:
{
 8004b92:	b480      	push	{r7}
 8004b94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d101      	bne.n	8004baa <LL_RCC_LSE_IsReady+0x18>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <LL_RCC_LSE_IsReady+0x1a>
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <LL_RCC_LSI1_Enable>:
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bc6:	f043 0301 	orr.w	r3, r3, #1
 8004bca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004bce:	bf00      	nop
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <LL_RCC_LSI1_Disable>:
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004be4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004be8:	f023 0301 	bic.w	r3, r3, #1
 8004bec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004bf0:	bf00      	nop
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <LL_RCC_LSI1_IsReady>:
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d101      	bne.n	8004c12 <LL_RCC_LSI1_IsReady+0x18>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e000      	b.n	8004c14 <LL_RCC_LSI1_IsReady+0x1a>
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <LL_RCC_LSI2_Enable>:
{
 8004c1e:	b480      	push	{r7}
 8004c20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c2e:	f043 0304 	orr.w	r3, r3, #4
 8004c32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004c36:	bf00      	nop
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <LL_RCC_LSI2_Disable>:
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c50:	f023 0304 	bic.w	r3, r3, #4
 8004c54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004c58:	bf00      	nop
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <LL_RCC_LSI2_IsReady>:
{
 8004c62:	b480      	push	{r7}
 8004c64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d101      	bne.n	8004c7a <LL_RCC_LSI2_IsReady+0x18>
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <LL_RCC_LSI2_IsReady+0x1a>
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <LL_RCC_LSI2_SetTrimming>:
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c96:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	021b      	lsls	r3, r3, #8
 8004c9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <LL_RCC_MSI_Enable>:
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	6013      	str	r3, [r2, #0]
}
 8004cc8:	bf00      	nop
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <LL_RCC_MSI_Disable>:
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ce0:	f023 0301 	bic.w	r3, r3, #1
 8004ce4:	6013      	str	r3, [r2, #0]
}
 8004ce6:	bf00      	nop
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <LL_RCC_MSI_IsReady>:
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d101      	bne.n	8004d06 <LL_RCC_MSI_IsReady+0x16>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e000      	b.n	8004d08 <LL_RCC_MSI_IsReady+0x18>
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <LL_RCC_MSI_SetRange>:
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	600b      	str	r3, [r1, #0]
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <LL_RCC_MSI_GetRange>:
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d4a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2bb0      	cmp	r3, #176	; 0xb0
 8004d50:	d901      	bls.n	8004d56 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004d52:	23b0      	movs	r3, #176	; 0xb0
 8004d54:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004d56:	687b      	ldr	r3, [r7, #4]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	021b      	lsls	r3, r3, #8
 8004d7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	604b      	str	r3, [r1, #4]
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <LL_RCC_SetSysClkSource>:
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f023 0203 	bic.w	r2, r3, #3
 8004da0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	608b      	str	r3, [r1, #8]
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <LL_RCC_GetSysClkSource>:
{
 8004db6:	b480      	push	{r7}
 8004db8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f003 030c 	and.w	r3, r3, #12
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <LL_RCC_SetAHBPrescaler>:
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004de0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	608b      	str	r3, [r1, #8]
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <LL_C2_RCC_SetAHBPrescaler>:
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004e06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <LL_RCC_SetAHB4Prescaler>:
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004e32:	f023 020f 	bic.w	r2, r3, #15
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	091b      	lsrs	r3, r3, #4
 8004e3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <LL_RCC_SetAPB1Prescaler>:
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	608b      	str	r3, [r1, #8]
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <LL_RCC_SetAPB2Prescaler>:
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	608b      	str	r3, [r1, #8]
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <LL_RCC_GetAHBPrescaler>:
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <LL_RCC_GetAHB4Prescaler>:
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ec4:	011b      	lsls	r3, r3, #4
 8004ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <LL_RCC_GetAPB1Prescaler>:
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <LL_RCC_GetAPB2Prescaler>:
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <LL_RCC_PLL_Enable>:
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f16:	6013      	str	r3, [r2, #0]
}
 8004f18:	bf00      	nop
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <LL_RCC_PLL_Disable>:
{
 8004f22:	b480      	push	{r7}
 8004f24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f34:	6013      	str	r3, [r2, #0]
}
 8004f36:	bf00      	nop
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <LL_RCC_PLL_IsReady>:
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f52:	d101      	bne.n	8004f58 <LL_RCC_PLL_IsReady+0x18>
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <LL_RCC_PLL_IsReady+0x1a>
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <LL_RCC_PLL_GetN>:
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	0a1b      	lsrs	r3, r3, #8
 8004f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <LL_RCC_PLL_GetR>:
{
 8004f7e:	b480      	push	{r7}
 8004f80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <LL_RCC_PLL_GetDivider>:
{
 8004f96:	b480      	push	{r7}
 8004f98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <LL_RCC_PLL_GetMainSource>:
{
 8004fae:	b480      	push	{r7}
 8004fb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f003 0303 	and.w	r3, r3, #3
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <LL_RCC_IsActiveFlag_HPRE>:
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd8:	d101      	bne.n	8004fde <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004fea:	b480      	push	{r7}
 8004fec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ffe:	d101      	bne.n	8005004 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005000:	2301      	movs	r3, #1
 8005002:	e000      	b.n	8005006 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8005010:	b480      	push	{r7}
 8005012:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005018:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800501c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005024:	d101      	bne.n	800502a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005026:	2301      	movs	r3, #1
 8005028:	e000      	b.n	800502c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8005036:	b480      	push	{r7}
 8005038:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800503a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005044:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005048:	d101      	bne.n	800504e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800504a:	2301      	movs	r3, #1
 800504c:	e000      	b.n	8005050 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <LL_RCC_IsActiveFlag_PPRE2>:
{
 800505a:	b480      	push	{r7}
 800505c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800505e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005068:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800506c:	d101      	bne.n	8005072 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800506e:	2301      	movs	r3, #1
 8005070:	e000      	b.n	8005074 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
	...

08005080 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005080:	b590      	push	{r4, r7, lr}
 8005082:	b08d      	sub	sp, #52	; 0x34
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e363      	b.n	800575a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 808d 	beq.w	80051ba <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050a0:	f7ff fe89 	bl	8004db6 <LL_RCC_GetSysClkSource>
 80050a4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050a6:	f7ff ff82 	bl	8004fae <LL_RCC_PLL_GetMainSource>
 80050aa:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80050ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d005      	beq.n	80050be <HAL_RCC_OscConfig+0x3e>
 80050b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b4:	2b0c      	cmp	r3, #12
 80050b6:	d147      	bne.n	8005148 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80050b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d144      	bne.n	8005148 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e347      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80050ce:	f7ff fe34 	bl	8004d3a <LL_RCC_MSI_GetRange>
 80050d2:	4603      	mov	r3, r0
 80050d4:	429c      	cmp	r4, r3
 80050d6:	d914      	bls.n	8005102 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 fd2f 	bl	8005b40 <RCC_SetFlashLatencyFromMSIRange>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e336      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff fe0e 	bl	8004d12 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff fe32 	bl	8004d64 <LL_RCC_MSI_SetCalibTrimming>
 8005100:	e013      	b.n	800512a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	4618      	mov	r0, r3
 8005108:	f7ff fe03 	bl	8004d12 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	4618      	mov	r0, r3
 8005112:	f7ff fe27 	bl	8004d64 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fd10 	bl	8005b40 <RCC_SetFlashLatencyFromMSIRange>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e317      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800512a:	f000 fcc9 	bl	8005ac0 <HAL_RCC_GetHCLKFreq>
 800512e:	4603      	mov	r3, r0
 8005130:	4aa4      	ldr	r2, [pc, #656]	; (80053c4 <HAL_RCC_OscConfig+0x344>)
 8005132:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005134:	4ba4      	ldr	r3, [pc, #656]	; (80053c8 <HAL_RCC_OscConfig+0x348>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4618      	mov	r0, r3
 800513a:	f7fc fd17 	bl	8001b6c <HAL_InitTick>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d039      	beq.n	80051b8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e308      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01e      	beq.n	800518e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005150:	f7ff fdb0 	bl	8004cb4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005154:	f7fc fd58 	bl	8001c08 <HAL_GetTick>
 8005158:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800515c:	f7fc fd54 	bl	8001c08 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e2f5      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800516e:	f7ff fdbf 	bl	8004cf0 <LL_RCC_MSI_IsReady>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0f1      	beq.n	800515c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	4618      	mov	r0, r3
 800517e:	f7ff fdc8 	bl	8004d12 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff fdec 	bl	8004d64 <LL_RCC_MSI_SetCalibTrimming>
 800518c:	e015      	b.n	80051ba <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800518e:	f7ff fda0 	bl	8004cd2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005192:	f7fc fd39 	bl	8001c08 <HAL_GetTick>
 8005196:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005198:	e008      	b.n	80051ac <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800519a:	f7fc fd35 	bl	8001c08 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e2d6      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80051ac:	f7ff fda0 	bl	8004cf0 <LL_RCC_MSI_IsReady>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1f1      	bne.n	800519a <HAL_RCC_OscConfig+0x11a>
 80051b6:	e000      	b.n	80051ba <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80051b8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d047      	beq.n	8005256 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051c6:	f7ff fdf6 	bl	8004db6 <LL_RCC_GetSysClkSource>
 80051ca:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051cc:	f7ff feef 	bl	8004fae <LL_RCC_PLL_GetMainSource>
 80051d0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d005      	beq.n	80051e4 <HAL_RCC_OscConfig+0x164>
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	2b0c      	cmp	r3, #12
 80051dc:	d108      	bne.n	80051f0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d105      	bne.n	80051f0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d134      	bne.n	8005256 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e2b4      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051f8:	d102      	bne.n	8005200 <HAL_RCC_OscConfig+0x180>
 80051fa:	f7ff fbdd 	bl	80049b8 <LL_RCC_HSE_Enable>
 80051fe:	e001      	b.n	8005204 <HAL_RCC_OscConfig+0x184>
 8005200:	f7ff fbe9 	bl	80049d6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d012      	beq.n	8005232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520c:	f7fc fcfc 	bl	8001c08 <HAL_GetTick>
 8005210:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005214:	f7fc fcf8 	bl	8001c08 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b64      	cmp	r3, #100	; 0x64
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e299      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005226:	f7ff fbe5 	bl	80049f4 <LL_RCC_HSE_IsReady>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0f1      	beq.n	8005214 <HAL_RCC_OscConfig+0x194>
 8005230:	e011      	b.n	8005256 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005232:	f7fc fce9 	bl	8001c08 <HAL_GetTick>
 8005236:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800523a:	f7fc fce5 	bl	8001c08 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b64      	cmp	r3, #100	; 0x64
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e286      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800524c:	f7ff fbd2 	bl	80049f4 <LL_RCC_HSE_IsReady>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f1      	bne.n	800523a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d04c      	beq.n	80052fc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005262:	f7ff fda8 	bl	8004db6 <LL_RCC_GetSysClkSource>
 8005266:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005268:	f7ff fea1 	bl	8004fae <LL_RCC_PLL_GetMainSource>
 800526c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	2b04      	cmp	r3, #4
 8005272:	d005      	beq.n	8005280 <HAL_RCC_OscConfig+0x200>
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	2b0c      	cmp	r3, #12
 8005278:	d10e      	bne.n	8005298 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2b02      	cmp	r3, #2
 800527e:	d10b      	bne.n	8005298 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e266      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	4618      	mov	r0, r3
 8005292:	f7ff fbf1 	bl	8004a78 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005296:	e031      	b.n	80052fc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d019      	beq.n	80052d4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052a0:	f7ff fbba 	bl	8004a18 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a4:	f7fc fcb0 	bl	8001c08 <HAL_GetTick>
 80052a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80052aa:	e008      	b.n	80052be <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052ac:	f7fc fcac 	bl	8001c08 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e24d      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80052be:	f7ff fbc9 	bl	8004a54 <LL_RCC_HSI_IsReady>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0f1      	beq.n	80052ac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7ff fbd3 	bl	8004a78 <LL_RCC_HSI_SetCalibTrimming>
 80052d2:	e013      	b.n	80052fc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052d4:	f7ff fbaf 	bl	8004a36 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d8:	f7fc fc96 	bl	8001c08 <HAL_GetTick>
 80052dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052e0:	f7fc fc92 	bl	8001c08 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e233      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80052f2:	f7ff fbaf 	bl	8004a54 <LL_RCC_HSI_IsReady>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1f1      	bne.n	80052e0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b00      	cmp	r3, #0
 8005306:	d106      	bne.n	8005316 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 80a3 	beq.w	800545c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d076      	beq.n	800540c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0310 	and.w	r3, r3, #16
 8005326:	2b00      	cmp	r3, #0
 8005328:	d046      	beq.n	80053b8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800532a:	f7ff fc66 	bl	8004bfa <LL_RCC_LSI1_IsReady>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d113      	bne.n	800535c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005334:	f7ff fc3f 	bl	8004bb6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005338:	f7fc fc66 	bl	8001c08 <HAL_GetTick>
 800533c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005340:	f7fc fc62 	bl	8001c08 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e203      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005352:	f7ff fc52 	bl	8004bfa <LL_RCC_LSI1_IsReady>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0f1      	beq.n	8005340 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800535c:	f7ff fc5f 	bl	8004c1e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005360:	f7fc fc52 	bl	8001c08 <HAL_GetTick>
 8005364:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005366:	e008      	b.n	800537a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005368:	f7fc fc4e 	bl	8001c08 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b03      	cmp	r3, #3
 8005374:	d901      	bls.n	800537a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e1ef      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800537a:	f7ff fc72 	bl	8004c62 <LL_RCC_LSI2_IsReady>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0f1      	beq.n	8005368 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	4618      	mov	r0, r3
 800538a:	f7ff fc7c 	bl	8004c86 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800538e:	f7ff fc23 	bl	8004bd8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005392:	f7fc fc39 	bl	8001c08 <HAL_GetTick>
 8005396:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005398:	e008      	b.n	80053ac <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800539a:	f7fc fc35 	bl	8001c08 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e1d6      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80053ac:	f7ff fc25 	bl	8004bfa <LL_RCC_LSI1_IsReady>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1f1      	bne.n	800539a <HAL_RCC_OscConfig+0x31a>
 80053b6:	e051      	b.n	800545c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80053b8:	f7ff fbfd 	bl	8004bb6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053bc:	f7fc fc24 	bl	8001c08 <HAL_GetTick>
 80053c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80053c2:	e00c      	b.n	80053de <HAL_RCC_OscConfig+0x35e>
 80053c4:	20000008 	.word	0x20000008
 80053c8:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80053cc:	f7fc fc1c 	bl	8001c08 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e1bd      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80053de:	f7ff fc0c 	bl	8004bfa <LL_RCC_LSI1_IsReady>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0f1      	beq.n	80053cc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80053e8:	f7ff fc2a 	bl	8004c40 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80053ec:	e008      	b.n	8005400 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80053ee:	f7fc fc0b 	bl	8001c08 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e1ac      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005400:	f7ff fc2f 	bl	8004c62 <LL_RCC_LSI2_IsReady>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1f1      	bne.n	80053ee <HAL_RCC_OscConfig+0x36e>
 800540a:	e027      	b.n	800545c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800540c:	f7ff fc18 	bl	8004c40 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005410:	f7fc fbfa 	bl	8001c08 <HAL_GetTick>
 8005414:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005418:	f7fc fbf6 	bl	8001c08 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b03      	cmp	r3, #3
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e197      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800542a:	f7ff fc1a 	bl	8004c62 <LL_RCC_LSI2_IsReady>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1f1      	bne.n	8005418 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005434:	f7ff fbd0 	bl	8004bd8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005438:	f7fc fbe6 	bl	8001c08 <HAL_GetTick>
 800543c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005440:	f7fc fbe2 	bl	8001c08 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e183      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005452:	f7ff fbd2 	bl	8004bfa <LL_RCC_LSI1_IsReady>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1f1      	bne.n	8005440 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	d05b      	beq.n	8005520 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005468:	4ba7      	ldr	r3, [pc, #668]	; (8005708 <HAL_RCC_OscConfig+0x688>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005470:	2b00      	cmp	r3, #0
 8005472:	d114      	bne.n	800549e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005474:	f7ff fa60 	bl	8004938 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005478:	f7fc fbc6 	bl	8001c08 <HAL_GetTick>
 800547c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005480:	f7fc fbc2 	bl	8001c08 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e163      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005492:	4b9d      	ldr	r3, [pc, #628]	; (8005708 <HAL_RCC_OscConfig+0x688>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0f0      	beq.n	8005480 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d102      	bne.n	80054ac <HAL_RCC_OscConfig+0x42c>
 80054a6:	f7ff fb30 	bl	8004b0a <LL_RCC_LSE_Enable>
 80054aa:	e00c      	b.n	80054c6 <HAL_RCC_OscConfig+0x446>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	2b05      	cmp	r3, #5
 80054b2:	d104      	bne.n	80054be <HAL_RCC_OscConfig+0x43e>
 80054b4:	f7ff fb4b 	bl	8004b4e <LL_RCC_LSE_EnableBypass>
 80054b8:	f7ff fb27 	bl	8004b0a <LL_RCC_LSE_Enable>
 80054bc:	e003      	b.n	80054c6 <HAL_RCC_OscConfig+0x446>
 80054be:	f7ff fb35 	bl	8004b2c <LL_RCC_LSE_Disable>
 80054c2:	f7ff fb55 	bl	8004b70 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d014      	beq.n	80054f8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ce:	f7fc fb9b 	bl	8001c08 <HAL_GetTick>
 80054d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80054d4:	e00a      	b.n	80054ec <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054d6:	f7fc fb97 	bl	8001c08 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d901      	bls.n	80054ec <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e136      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80054ec:	f7ff fb51 	bl	8004b92 <LL_RCC_LSE_IsReady>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0ef      	beq.n	80054d6 <HAL_RCC_OscConfig+0x456>
 80054f6:	e013      	b.n	8005520 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f8:	f7fc fb86 	bl	8001c08 <HAL_GetTick>
 80054fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80054fe:	e00a      	b.n	8005516 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005500:	f7fc fb82 	bl	8001c08 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	f241 3288 	movw	r2, #5000	; 0x1388
 800550e:	4293      	cmp	r3, r2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e121      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005516:	f7ff fb3c 	bl	8004b92 <LL_RCC_LSE_IsReady>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1ef      	bne.n	8005500 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005528:	2b00      	cmp	r3, #0
 800552a:	d02c      	beq.n	8005586 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005530:	2b00      	cmp	r3, #0
 8005532:	d014      	beq.n	800555e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005534:	f7ff fab5 	bl	8004aa2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005538:	f7fc fb66 	bl	8001c08 <HAL_GetTick>
 800553c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005540:	f7fc fb62 	bl	8001c08 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e103      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005552:	f7ff fac8 	bl	8004ae6 <LL_RCC_HSI48_IsReady>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d0f1      	beq.n	8005540 <HAL_RCC_OscConfig+0x4c0>
 800555c:	e013      	b.n	8005586 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800555e:	f7ff fab1 	bl	8004ac4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005562:	f7fc fb51 	bl	8001c08 <HAL_GetTick>
 8005566:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005568:	e008      	b.n	800557c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800556a:	f7fc fb4d 	bl	8001c08 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d901      	bls.n	800557c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e0ee      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800557c:	f7ff fab3 	bl	8004ae6 <LL_RCC_HSI48_IsReady>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1f1      	bne.n	800556a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 80e4 	beq.w	8005758 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005590:	f7ff fc11 	bl	8004db6 <LL_RCC_GetSysClkSource>
 8005594:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	f040 80b4 	bne.w	8005710 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f003 0203 	and.w	r2, r3, #3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d123      	bne.n	80055fe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d11c      	bne.n	80055fe <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	0a1b      	lsrs	r3, r3, #8
 80055c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d114      	bne.n	80055fe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80055de:	429a      	cmp	r2, r3
 80055e0:	d10d      	bne.n	80055fe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d106      	bne.n	80055fe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d05d      	beq.n	80056ba <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	2b0c      	cmp	r3, #12
 8005602:	d058      	beq.n	80056b6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e0a1      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005616:	f7ff fc84 	bl	8004f22 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800561a:	f7fc faf5 	bl	8001c08 <HAL_GetTick>
 800561e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005620:	e008      	b.n	8005634 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005622:	f7fc faf1 	bl	8001c08 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e092      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1ef      	bne.n	8005622 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005646:	68da      	ldr	r2, [r3, #12]
 8005648:	4b30      	ldr	r3, [pc, #192]	; (800570c <HAL_RCC_OscConfig+0x68c>)
 800564a:	4013      	ands	r3, r2
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005654:	4311      	orrs	r1, r2
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800565a:	0212      	lsls	r2, r2, #8
 800565c:	4311      	orrs	r1, r2
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005662:	4311      	orrs	r1, r2
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005668:	4311      	orrs	r1, r2
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800566e:	430a      	orrs	r2, r1
 8005670:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005674:	4313      	orrs	r3, r2
 8005676:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005678:	f7ff fc44 	bl	8004f04 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800567c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800568a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800568c:	f7fc fabc 	bl	8001c08 <HAL_GetTick>
 8005690:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005692:	e008      	b.n	80056a6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005694:	f7fc fab8 	bl	8001c08 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e059      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0ef      	beq.n	8005694 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056b4:	e050      	b.n	8005758 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e04f      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d147      	bne.n	8005758 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80056c8:	f7ff fc1c 	bl	8004f04 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80056dc:	f7fc fa94 	bl	8001c08 <HAL_GetTick>
 80056e0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056e2:	e008      	b.n	80056f6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056e4:	f7fc fa90 	bl	8001c08 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e031      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0ef      	beq.n	80056e4 <HAL_RCC_OscConfig+0x664>
 8005704:	e028      	b.n	8005758 <HAL_RCC_OscConfig+0x6d8>
 8005706:	bf00      	nop
 8005708:	58000400 	.word	0x58000400
 800570c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	2b0c      	cmp	r3, #12
 8005714:	d01e      	beq.n	8005754 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005716:	f7ff fc04 	bl	8004f22 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571a:	f7fc fa75 	bl	8001c08 <HAL_GetTick>
 800571e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005720:	e008      	b.n	8005734 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005722:	f7fc fa71 	bl	8001c08 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e012      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1ef      	bne.n	8005722 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800574c:	4b05      	ldr	r3, [pc, #20]	; (8005764 <HAL_RCC_OscConfig+0x6e4>)
 800574e:	4013      	ands	r3, r2
 8005750:	60cb      	str	r3, [r1, #12]
 8005752:	e001      	b.n	8005758 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e000      	b.n	800575a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3734      	adds	r7, #52	; 0x34
 800575e:	46bd      	mov	sp, r7
 8005760:	bd90      	pop	{r4, r7, pc}
 8005762:	bf00      	nop
 8005764:	eefefffc 	.word	0xeefefffc

08005768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e12d      	b.n	80059d8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800577c:	4b98      	ldr	r3, [pc, #608]	; (80059e0 <HAL_RCC_ClockConfig+0x278>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	429a      	cmp	r2, r3
 8005788:	d91b      	bls.n	80057c2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800578a:	4b95      	ldr	r3, [pc, #596]	; (80059e0 <HAL_RCC_ClockConfig+0x278>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f023 0207 	bic.w	r2, r3, #7
 8005792:	4993      	ldr	r1, [pc, #588]	; (80059e0 <HAL_RCC_ClockConfig+0x278>)
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	4313      	orrs	r3, r2
 8005798:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800579a:	f7fc fa35 	bl	8001c08 <HAL_GetTick>
 800579e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a0:	e008      	b.n	80057b4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80057a2:	f7fc fa31 	bl	8001c08 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d901      	bls.n	80057b4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e111      	b.n	80059d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057b4:	4b8a      	ldr	r3, [pc, #552]	; (80059e0 <HAL_RCC_ClockConfig+0x278>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d1ef      	bne.n	80057a2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d016      	beq.n	80057fc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff fafb 	bl	8004dce <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80057d8:	f7fc fa16 	bl	8001c08 <HAL_GetTick>
 80057dc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80057e0:	f7fc fa12 	bl	8001c08 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e0f2      	b.n	80059d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80057f2:	f7ff fbe8 	bl	8004fc6 <LL_RCC_IsActiveFlag_HPRE>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0f1      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0320 	and.w	r3, r3, #32
 8005804:	2b00      	cmp	r3, #0
 8005806:	d016      	beq.n	8005836 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	4618      	mov	r0, r3
 800580e:	f7ff faf2 	bl	8004df6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005812:	f7fc f9f9 	bl	8001c08 <HAL_GetTick>
 8005816:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005818:	e008      	b.n	800582c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800581a:	f7fc f9f5 	bl	8001c08 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e0d5      	b.n	80059d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800582c:	f7ff fbdd 	bl	8004fea <LL_RCC_IsActiveFlag_C2HPRE>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0f1      	beq.n	800581a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583e:	2b00      	cmp	r3, #0
 8005840:	d016      	beq.n	8005870 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	4618      	mov	r0, r3
 8005848:	f7ff faeb 	bl	8004e22 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800584c:	f7fc f9dc 	bl	8001c08 <HAL_GetTick>
 8005850:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005852:	e008      	b.n	8005866 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005854:	f7fc f9d8 	bl	8001c08 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d901      	bls.n	8005866 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e0b8      	b.n	80059d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005866:	f7ff fbd3 	bl	8005010 <LL_RCC_IsActiveFlag_SHDHPRE>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0f1      	beq.n	8005854 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b00      	cmp	r3, #0
 800587a:	d016      	beq.n	80058aa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	4618      	mov	r0, r3
 8005882:	f7ff fae5 	bl	8004e50 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005886:	f7fc f9bf 	bl	8001c08 <HAL_GetTick>
 800588a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800588c:	e008      	b.n	80058a0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800588e:	f7fc f9bb 	bl	8001c08 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d901      	bls.n	80058a0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e09b      	b.n	80059d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80058a0:	f7ff fbc9 	bl	8005036 <LL_RCC_IsActiveFlag_PPRE1>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0f1      	beq.n	800588e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0308 	and.w	r3, r3, #8
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d017      	beq.n	80058e6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff fadb 	bl	8004e78 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80058c2:	f7fc f9a1 	bl	8001c08 <HAL_GetTick>
 80058c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80058c8:	e008      	b.n	80058dc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80058ca:	f7fc f99d 	bl	8001c08 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d901      	bls.n	80058dc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e07d      	b.n	80059d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80058dc:	f7ff fbbd 	bl	800505a <LL_RCC_IsActiveFlag_PPRE2>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0f1      	beq.n	80058ca <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d043      	beq.n	800597a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d106      	bne.n	8005908 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80058fa:	f7ff f87b 	bl	80049f4 <LL_RCC_HSE_IsReady>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d11e      	bne.n	8005942 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e067      	b.n	80059d8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2b03      	cmp	r3, #3
 800590e:	d106      	bne.n	800591e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005910:	f7ff fb16 	bl	8004f40 <LL_RCC_PLL_IsReady>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d113      	bne.n	8005942 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e05c      	b.n	80059d8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d106      	bne.n	8005934 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005926:	f7ff f9e3 	bl	8004cf0 <LL_RCC_MSI_IsReady>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d108      	bne.n	8005942 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e051      	b.n	80059d8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005934:	f7ff f88e 	bl	8004a54 <LL_RCC_HSI_IsReady>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e04a      	b.n	80059d8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff fa21 	bl	8004d8e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800594c:	f7fc f95c 	bl	8001c08 <HAL_GetTick>
 8005950:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005952:	e00a      	b.n	800596a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005954:	f7fc f958 	bl	8001c08 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005962:	4293      	cmp	r3, r2
 8005964:	d901      	bls.n	800596a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e036      	b.n	80059d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800596a:	f7ff fa24 	bl	8004db6 <LL_RCC_GetSysClkSource>
 800596e:	4602      	mov	r2, r0
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	429a      	cmp	r2, r3
 8005978:	d1ec      	bne.n	8005954 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800597a:	4b19      	ldr	r3, [pc, #100]	; (80059e0 <HAL_RCC_ClockConfig+0x278>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d21b      	bcs.n	80059c0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005988:	4b15      	ldr	r3, [pc, #84]	; (80059e0 <HAL_RCC_ClockConfig+0x278>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f023 0207 	bic.w	r2, r3, #7
 8005990:	4913      	ldr	r1, [pc, #76]	; (80059e0 <HAL_RCC_ClockConfig+0x278>)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	4313      	orrs	r3, r2
 8005996:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005998:	f7fc f936 	bl	8001c08 <HAL_GetTick>
 800599c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80059a0:	f7fc f932 	bl	8001c08 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e012      	b.n	80059d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b2:	4b0b      	ldr	r3, [pc, #44]	; (80059e0 <HAL_RCC_ClockConfig+0x278>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d1ef      	bne.n	80059a0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80059c0:	f000 f87e 	bl	8005ac0 <HAL_RCC_GetHCLKFreq>
 80059c4:	4603      	mov	r3, r0
 80059c6:	4a07      	ldr	r2, [pc, #28]	; (80059e4 <HAL_RCC_ClockConfig+0x27c>)
 80059c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80059ca:	f7fc f929 	bl	8001c20 <HAL_GetTickPrio>
 80059ce:	4603      	mov	r3, r0
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fc f8cb 	bl	8001b6c <HAL_InitTick>
 80059d6:	4603      	mov	r3, r0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	58004000 	.word	0x58004000
 80059e4:	20000008 	.word	0x20000008

080059e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059e8:	b590      	push	{r4, r7, lr}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059ee:	f7ff f9e2 	bl	8004db6 <LL_RCC_GetSysClkSource>
 80059f2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10a      	bne.n	8005a10 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80059fa:	f7ff f99e 	bl	8004d3a <LL_RCC_MSI_GetRange>
 80059fe:	4603      	mov	r3, r0
 8005a00:	091b      	lsrs	r3, r3, #4
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	4a2b      	ldr	r2, [pc, #172]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	e04b      	b.n	8005aa8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d102      	bne.n	8005a1c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a16:	4b28      	ldr	r3, [pc, #160]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	e045      	b.n	8005aa8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b08      	cmp	r3, #8
 8005a20:	d10a      	bne.n	8005a38 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005a22:	f7fe ffb7 	bl	8004994 <LL_RCC_HSE_IsEnabledDiv2>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d102      	bne.n	8005a32 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005a2c:	4b22      	ldr	r3, [pc, #136]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	e03a      	b.n	8005aa8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005a32:	4b22      	ldr	r3, [pc, #136]	; (8005abc <HAL_RCC_GetSysClockFreq+0xd4>)
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	e037      	b.n	8005aa8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005a38:	f7ff fab9 	bl	8004fae <LL_RCC_PLL_GetMainSource>
 8005a3c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d003      	beq.n	8005a4c <HAL_RCC_GetSysClockFreq+0x64>
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	d003      	beq.n	8005a52 <HAL_RCC_GetSysClockFreq+0x6a>
 8005a4a:	e00d      	b.n	8005a68 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005a4c:	4b1a      	ldr	r3, [pc, #104]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a4e:	60bb      	str	r3, [r7, #8]
        break;
 8005a50:	e015      	b.n	8005a7e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005a52:	f7fe ff9f 	bl	8004994 <LL_RCC_HSE_IsEnabledDiv2>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d102      	bne.n	8005a62 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005a5c:	4b16      	ldr	r3, [pc, #88]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a5e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005a60:	e00d      	b.n	8005a7e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005a62:	4b16      	ldr	r3, [pc, #88]	; (8005abc <HAL_RCC_GetSysClockFreq+0xd4>)
 8005a64:	60bb      	str	r3, [r7, #8]
        break;
 8005a66:	e00a      	b.n	8005a7e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005a68:	f7ff f967 	bl	8004d3a <LL_RCC_MSI_GetRange>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	091b      	lsrs	r3, r3, #4
 8005a70:	f003 030f 	and.w	r3, r3, #15
 8005a74:	4a0f      	ldr	r2, [pc, #60]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a7a:	60bb      	str	r3, [r7, #8]
        break;
 8005a7c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005a7e:	f7ff fa71 	bl	8004f64 <LL_RCC_PLL_GetN>
 8005a82:	4602      	mov	r2, r0
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	fb03 f402 	mul.w	r4, r3, r2
 8005a8a:	f7ff fa84 	bl	8004f96 <LL_RCC_PLL_GetDivider>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	091b      	lsrs	r3, r3, #4
 8005a92:	3301      	adds	r3, #1
 8005a94:	fbb4 f4f3 	udiv	r4, r4, r3
 8005a98:	f7ff fa71 	bl	8004f7e <LL_RCC_PLL_GetR>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	0f5b      	lsrs	r3, r3, #29
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	fbb4 f3f3 	udiv	r3, r4, r3
 8005aa6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd90      	pop	{r4, r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	08014ee8 	.word	0x08014ee8
 8005ab8:	00f42400 	.word	0x00f42400
 8005abc:	01e84800 	.word	0x01e84800

08005ac0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ac0:	b598      	push	{r3, r4, r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005ac4:	f7ff ff90 	bl	80059e8 <HAL_RCC_GetSysClockFreq>
 8005ac8:	4604      	mov	r4, r0
 8005aca:	f7ff f9e9 	bl	8004ea0 <LL_RCC_GetAHBPrescaler>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	091b      	lsrs	r3, r3, #4
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	4a03      	ldr	r2, [pc, #12]	; (8005ae4 <HAL_RCC_GetHCLKFreq+0x24>)
 8005ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005adc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	bd98      	pop	{r3, r4, r7, pc}
 8005ae4:	08014e88 	.word	0x08014e88

08005ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ae8:	b598      	push	{r3, r4, r7, lr}
 8005aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005aec:	f7ff ffe8 	bl	8005ac0 <HAL_RCC_GetHCLKFreq>
 8005af0:	4604      	mov	r4, r0
 8005af2:	f7ff f9ef 	bl	8004ed4 <LL_RCC_GetAPB1Prescaler>
 8005af6:	4603      	mov	r3, r0
 8005af8:	0a1b      	lsrs	r3, r3, #8
 8005afa:	f003 0307 	and.w	r3, r3, #7
 8005afe:	4a04      	ldr	r2, [pc, #16]	; (8005b10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b04:	f003 031f 	and.w	r3, r3, #31
 8005b08:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	bd98      	pop	{r3, r4, r7, pc}
 8005b10:	08014ec8 	.word	0x08014ec8

08005b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b14:	b598      	push	{r3, r4, r7, lr}
 8005b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005b18:	f7ff ffd2 	bl	8005ac0 <HAL_RCC_GetHCLKFreq>
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	f7ff f9e5 	bl	8004eec <LL_RCC_GetAPB2Prescaler>
 8005b22:	4603      	mov	r3, r0
 8005b24:	0adb      	lsrs	r3, r3, #11
 8005b26:	f003 0307 	and.w	r3, r3, #7
 8005b2a:	4a04      	ldr	r2, [pc, #16]	; (8005b3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b30:	f003 031f 	and.w	r3, r3, #31
 8005b34:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	bd98      	pop	{r3, r4, r7, pc}
 8005b3c:	08014ec8 	.word	0x08014ec8

08005b40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005b40:	b590      	push	{r4, r7, lr}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2bb0      	cmp	r3, #176	; 0xb0
 8005b4c:	d903      	bls.n	8005b56 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005b4e:	4b15      	ldr	r3, [pc, #84]	; (8005ba4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	e007      	b.n	8005b66 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	091b      	lsrs	r3, r3, #4
 8005b5a:	f003 030f 	and.w	r3, r3, #15
 8005b5e:	4a11      	ldr	r2, [pc, #68]	; (8005ba4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b64:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005b66:	f7ff f9a7 	bl	8004eb8 <LL_RCC_GetAHB4Prescaler>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	091b      	lsrs	r3, r3, #4
 8005b6e:	f003 030f 	and.w	r3, r3, #15
 8005b72:	4a0d      	ldr	r2, [pc, #52]	; (8005ba8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	4a0a      	ldr	r2, [pc, #40]	; (8005bac <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005b84:	fba2 2303 	umull	r2, r3, r2, r3
 8005b88:	0c9c      	lsrs	r4, r3, #18
 8005b8a:	f7fe fee5 	bl	8004958 <HAL_PWREx_GetVoltageRange>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	4619      	mov	r1, r3
 8005b92:	4620      	mov	r0, r4
 8005b94:	f000 f80c 	bl	8005bb0 <RCC_SetFlashLatency>
 8005b98:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd90      	pop	{r4, r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	08014ee8 	.word	0x08014ee8
 8005ba8:	08014e88 	.word	0x08014e88
 8005bac:	431bde83 	.word	0x431bde83

08005bb0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005bb0:	b590      	push	{r4, r7, lr}
 8005bb2:	b093      	sub	sp, #76	; 0x4c
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005bba:	4b37      	ldr	r3, [pc, #220]	; (8005c98 <RCC_SetFlashLatency+0xe8>)
 8005bbc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005bc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005bc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005bc6:	4a35      	ldr	r2, [pc, #212]	; (8005c9c <RCC_SetFlashLatency+0xec>)
 8005bc8:	f107 031c 	add.w	r3, r7, #28
 8005bcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8005bce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005bd2:	4b33      	ldr	r3, [pc, #204]	; (8005ca0 <RCC_SetFlashLatency+0xf0>)
 8005bd4:	f107 040c 	add.w	r4, r7, #12
 8005bd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005bda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005bde:	2300      	movs	r3, #0
 8005be0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005be8:	d11a      	bne.n	8005c20 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005bea:	2300      	movs	r3, #0
 8005bec:	643b      	str	r3, [r7, #64]	; 0x40
 8005bee:	e013      	b.n	8005c18 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	3348      	adds	r3, #72	; 0x48
 8005bf6:	443b      	add	r3, r7
 8005bf8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d807      	bhi.n	8005c12 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	3348      	adds	r3, #72	; 0x48
 8005c08:	443b      	add	r3, r7
 8005c0a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005c0e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005c10:	e020      	b.n	8005c54 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c14:	3301      	adds	r3, #1
 8005c16:	643b      	str	r3, [r7, #64]	; 0x40
 8005c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d9e8      	bls.n	8005bf0 <RCC_SetFlashLatency+0x40>
 8005c1e:	e019      	b.n	8005c54 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005c20:	2300      	movs	r3, #0
 8005c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c24:	e013      	b.n	8005c4e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	3348      	adds	r3, #72	; 0x48
 8005c2c:	443b      	add	r3, r7
 8005c2e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d807      	bhi.n	8005c48 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	3348      	adds	r3, #72	; 0x48
 8005c3e:	443b      	add	r3, r7
 8005c40:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005c44:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005c46:	e005      	b.n	8005c54 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d9e8      	bls.n	8005c26 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005c54:	4b13      	ldr	r3, [pc, #76]	; (8005ca4 <RCC_SetFlashLatency+0xf4>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f023 0207 	bic.w	r2, r3, #7
 8005c5c:	4911      	ldr	r1, [pc, #68]	; (8005ca4 <RCC_SetFlashLatency+0xf4>)
 8005c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c60:	4313      	orrs	r3, r2
 8005c62:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c64:	f7fb ffd0 	bl	8001c08 <HAL_GetTick>
 8005c68:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005c6a:	e008      	b.n	8005c7e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005c6c:	f7fb ffcc 	bl	8001c08 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d901      	bls.n	8005c7e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e007      	b.n	8005c8e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005c7e:	4b09      	ldr	r3, [pc, #36]	; (8005ca4 <RCC_SetFlashLatency+0xf4>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d1ef      	bne.n	8005c6c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	374c      	adds	r7, #76	; 0x4c
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd90      	pop	{r4, r7, pc}
 8005c96:	bf00      	nop
 8005c98:	080147f4 	.word	0x080147f4
 8005c9c:	08014804 	.word	0x08014804
 8005ca0:	08014810 	.word	0x08014810
 8005ca4:	58004000 	.word	0x58004000

08005ca8 <LL_RCC_LSE_IsEnabled>:
{
 8005ca8:	b480      	push	{r7}
 8005caa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <LL_RCC_LSE_IsEnabled+0x18>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e000      	b.n	8005cc2 <LL_RCC_LSE_IsEnabled+0x1a>
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <LL_RCC_LSE_IsReady>:
{
 8005ccc:	b480      	push	{r7}
 8005cce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d101      	bne.n	8005ce4 <LL_RCC_LSE_IsReady+0x18>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e000      	b.n	8005ce6 <LL_RCC_LSE_IsReady+0x1a>
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <LL_RCC_SetRFWKPClockSource>:
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <LL_RCC_SetSMPSClockSource>:
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	f023 0203 	bic.w	r2, r3, #3
 8005d2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <LL_RCC_SetSMPSPrescaler>:
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <LL_RCC_SetUSARTClockSource>:
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7c:	f023 0203 	bic.w	r2, r3, #3
 8005d80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <LL_RCC_SetLPUARTClockSource>:
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005dac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <LL_RCC_SetI2CClockSource>:
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	091b      	lsrs	r3, r3, #4
 8005dd8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005ddc:	43db      	mvns	r3, r3
 8005dde:	401a      	ands	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005de8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dec:	4313      	orrs	r3, r2
 8005dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005df2:	bf00      	nop
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <LL_RCC_SetLPTIMClockSource>:
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	0c1b      	lsrs	r3, r3, #16
 8005e12:	041b      	lsls	r3, r3, #16
 8005e14:	43db      	mvns	r3, r3
 8005e16:	401a      	ands	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	041b      	lsls	r3, r3, #16
 8005e1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e20:	4313      	orrs	r3, r2
 8005e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005e26:	bf00      	nop
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <LL_RCC_SetSAIClockSource>:
{
 8005e32:	b480      	push	{r7}
 8005e34:	b083      	sub	sp, #12
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005e52:	bf00      	nop
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <LL_RCC_SetRNGClockSource>:
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005e72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005e7e:	bf00      	nop
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <LL_RCC_SetCLK48ClockSource>:
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005eaa:	bf00      	nop
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <LL_RCC_SetUSBClockSource>:
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b082      	sub	sp, #8
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7ff ffe3 	bl	8005e8a <LL_RCC_SetCLK48ClockSource>
}
 8005ec4:	bf00      	nop
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <LL_RCC_SetADCClockSource>:
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005edc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ee0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <LL_RCC_SetRTCClockSource>:
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <LL_RCC_GetRTCClockSource>:
{
 8005f24:	b480      	push	{r7}
 8005f26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f30:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <LL_RCC_ForceBackupDomainReset>:
{
 8005f3e:	b480      	push	{r7}
 8005f40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f56:	bf00      	nop
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f78:	bf00      	nop
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <LL_RCC_PLLSAI1_Enable>:
{
 8005f82:	b480      	push	{r7}
 8005f84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f94:	6013      	str	r3, [r2, #0]
}
 8005f96:	bf00      	nop
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <LL_RCC_PLLSAI1_Disable>:
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fb2:	6013      	str	r3, [r2, #0]
}
 8005fb4:	bf00      	nop
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <LL_RCC_PLLSAI1_IsReady>:
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fd0:	d101      	bne.n	8005fd6 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e000      	b.n	8005fd8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b088      	sub	sp, #32
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005fea:	2300      	movs	r3, #0
 8005fec:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005fee:	2300      	movs	r3, #0
 8005ff0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d034      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006002:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006006:	d021      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006008:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800600c:	d81b      	bhi.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800600e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006012:	d01d      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006014:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006018:	d815      	bhi.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00b      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800601e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006022:	d110      	bne.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800602e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006032:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006034:	e00d      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	3304      	adds	r3, #4
 800603a:	4618      	mov	r0, r3
 800603c:	f000 f947 	bl	80062ce <RCCEx_PLLSAI1_ConfigNP>
 8006040:	4603      	mov	r3, r0
 8006042:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006044:	e005      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	77fb      	strb	r3, [r7, #31]
        break;
 800604a:	e002      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800604c:	bf00      	nop
 800604e:	e000      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006052:	7ffb      	ldrb	r3, [r7, #31]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d105      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff fee8 	bl	8005e32 <LL_RCC_SetSAIClockSource>
 8006062:	e001      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006064:	7ffb      	ldrb	r3, [r7, #31]
 8006066:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006070:	2b00      	cmp	r3, #0
 8006072:	d046      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006074:	f7ff ff56 	bl	8005f24 <LL_RCC_GetRTCClockSource>
 8006078:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	429a      	cmp	r2, r3
 8006082:	d03c      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006084:	f7fe fc58 	bl	8004938 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d105      	bne.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff ff30 	bl	8005ef8 <LL_RCC_SetRTCClockSource>
 8006098:	e02e      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800609a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800609e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80060a4:	f7ff ff4b 	bl	8005f3e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80060a8:	f7ff ff5a 	bl	8005f60 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	4313      	orrs	r3, r2
 80060b8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80060ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80060c4:	f7ff fdf0 	bl	8005ca8 <LL_RCC_LSE_IsEnabled>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d114      	bne.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060ce:	f7fb fd9b 	bl	8001c08 <HAL_GetTick>
 80060d2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80060d4:	e00b      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060d6:	f7fb fd97 	bl	8001c08 <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d902      	bls.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	77fb      	strb	r3, [r7, #31]
              break;
 80060ec:	e004      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80060ee:	f7ff fded 	bl	8005ccc <LL_RCC_LSE_IsReady>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d1ee      	bne.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80060f8:	7ffb      	ldrb	r3, [r7, #31]
 80060fa:	77bb      	strb	r3, [r7, #30]
 80060fc:	e001      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060fe:	7ffb      	ldrb	r3, [r7, #31]
 8006100:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d004      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	4618      	mov	r0, r3
 8006114:	f7ff fe2a 	bl	8005d6c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0302 	and.w	r3, r3, #2
 8006120:	2b00      	cmp	r3, #0
 8006122:	d004      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff fe35 	bl	8005d98 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0310 	and.w	r3, r3, #16
 8006136:	2b00      	cmp	r3, #0
 8006138:	d004      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff fe5d 	bl	8005dfe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0320 	and.w	r3, r3, #32
 800614c:	2b00      	cmp	r3, #0
 800614e:	d004      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006154:	4618      	mov	r0, r3
 8006156:	f7ff fe52 	bl	8005dfe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0304 	and.w	r3, r3, #4
 8006162:	2b00      	cmp	r3, #0
 8006164:	d004      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	4618      	mov	r0, r3
 800616c:	f7ff fe2a 	bl	8005dc4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0308 	and.w	r3, r3, #8
 8006178:	2b00      	cmp	r3, #0
 800617a:	d004      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	4618      	mov	r0, r3
 8006182:	f7ff fe1f 	bl	8005dc4 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800618e:	2b00      	cmp	r3, #0
 8006190:	d022      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006196:	4618      	mov	r0, r3
 8006198:	f7ff fe8d 	bl	8005eb6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061a4:	d107      	bne.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80061a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061b4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061be:	d10b      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3304      	adds	r3, #4
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 f8dd 	bl	8006384 <RCCEx_PLLSAI1_ConfigNQ>
 80061ca:	4603      	mov	r3, r0
 80061cc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80061ce:	7ffb      	ldrb	r3, [r7, #31]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80061d4:	7ffb      	ldrb	r3, [r7, #31]
 80061d6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d02b      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ec:	d008      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061f6:	d003      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d105      	bne.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	4618      	mov	r0, r3
 8006206:	f7ff fe2a 	bl	8005e5e <LL_RCC_SetRNGClockSource>
 800620a:	e00a      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	2000      	movs	r0, #0
 8006218:	f7ff fe21 	bl	8005e5e <LL_RCC_SetRNGClockSource>
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f7ff fe34 	bl	8005e8a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006226:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800622a:	d107      	bne.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800622c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006236:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800623a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006244:	2b00      	cmp	r3, #0
 8006246:	d022      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800624c:	4618      	mov	r0, r3
 800624e:	f7ff fe3d 	bl	8005ecc <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006256:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800625a:	d107      	bne.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800625c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800626a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006270:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006274:	d10b      	bne.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	3304      	adds	r3, #4
 800627a:	4618      	mov	r0, r3
 800627c:	f000 f8dd 	bl	800643a <RCCEx_PLLSAI1_ConfigNR>
 8006280:	4603      	mov	r3, r0
 8006282:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006284:	7ffb      	ldrb	r3, [r7, #31]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800628a:	7ffb      	ldrb	r3, [r7, #31]
 800628c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d004      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629e:	4618      	mov	r0, r3
 80062a0:	f7ff fd26 	bl	8005cf0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d009      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff fd45 	bl	8005d44 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062be:	4618      	mov	r0, r3
 80062c0:	f7ff fd2c 	bl	8005d1c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80062c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3720      	adds	r7, #32
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b084      	sub	sp, #16
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062d6:	2300      	movs	r3, #0
 80062d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80062da:	f7ff fe61 	bl	8005fa0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80062de:	f7fb fc93 	bl	8001c08 <HAL_GetTick>
 80062e2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80062e4:	e009      	b.n	80062fa <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062e6:	f7fb fc8f 	bl	8001c08 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d902      	bls.n	80062fa <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	73fb      	strb	r3, [r7, #15]
      break;
 80062f8:	e004      	b.n	8006304 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80062fa:	f7ff fe60 	bl	8005fbe <LL_RCC_PLLSAI1_IsReady>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1f0      	bne.n	80062e6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006304:	7bfb      	ldrb	r3, [r7, #15]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d137      	bne.n	800637a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800630a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	021b      	lsls	r3, r3, #8
 800631a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800631e:	4313      	orrs	r3, r2
 8006320:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006334:	4313      	orrs	r3, r2
 8006336:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006338:	f7ff fe23 	bl	8005f82 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800633c:	f7fb fc64 	bl	8001c08 <HAL_GetTick>
 8006340:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006342:	e009      	b.n	8006358 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006344:	f7fb fc60 	bl	8001c08 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d902      	bls.n	8006358 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	73fb      	strb	r3, [r7, #15]
        break;
 8006356:	e004      	b.n	8006362 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006358:	f7ff fe31 	bl	8005fbe <LL_RCC_PLLSAI1_IsReady>
 800635c:	4603      	mov	r3, r0
 800635e:	2b01      	cmp	r3, #1
 8006360:	d1f0      	bne.n	8006344 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006362:	7bfb      	ldrb	r3, [r7, #15]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d108      	bne.n	800637a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800636c:	691a      	ldr	r2, [r3, #16]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006376:	4313      	orrs	r3, r2
 8006378:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800637a:	7bfb      	ldrb	r3, [r7, #15]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800638c:	2300      	movs	r3, #0
 800638e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006390:	f7ff fe06 	bl	8005fa0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006394:	f7fb fc38 	bl	8001c08 <HAL_GetTick>
 8006398:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800639a:	e009      	b.n	80063b0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800639c:	f7fb fc34 	bl	8001c08 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d902      	bls.n	80063b0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	73fb      	strb	r3, [r7, #15]
      break;
 80063ae:	e004      	b.n	80063ba <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80063b0:	f7ff fe05 	bl	8005fbe <LL_RCC_PLLSAI1_IsReady>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1f0      	bne.n	800639c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d137      	bne.n	8006430 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80063c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	021b      	lsls	r3, r3, #8
 80063d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063d4:	4313      	orrs	r3, r2
 80063d6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80063d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063ea:	4313      	orrs	r3, r2
 80063ec:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80063ee:	f7ff fdc8 	bl	8005f82 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063f2:	f7fb fc09 	bl	8001c08 <HAL_GetTick>
 80063f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80063f8:	e009      	b.n	800640e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063fa:	f7fb fc05 	bl	8001c08 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d902      	bls.n	800640e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	73fb      	strb	r3, [r7, #15]
        break;
 800640c:	e004      	b.n	8006418 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800640e:	f7ff fdd6 	bl	8005fbe <LL_RCC_PLLSAI1_IsReady>
 8006412:	4603      	mov	r3, r0
 8006414:	2b01      	cmp	r3, #1
 8006416:	d1f0      	bne.n	80063fa <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006418:	7bfb      	ldrb	r3, [r7, #15]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d108      	bne.n	8006430 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800641e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006422:	691a      	ldr	r2, [r3, #16]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800642c:	4313      	orrs	r3, r2
 800642e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006430:	7bfb      	ldrb	r3, [r7, #15]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b084      	sub	sp, #16
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006446:	f7ff fdab 	bl	8005fa0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800644a:	f7fb fbdd 	bl	8001c08 <HAL_GetTick>
 800644e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006450:	e009      	b.n	8006466 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006452:	f7fb fbd9 	bl	8001c08 <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	2b02      	cmp	r3, #2
 800645e:	d902      	bls.n	8006466 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	73fb      	strb	r3, [r7, #15]
      break;
 8006464:	e004      	b.n	8006470 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006466:	f7ff fdaa 	bl	8005fbe <LL_RCC_PLLSAI1_IsReady>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1f0      	bne.n	8006452 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d137      	bne.n	80064e6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	021b      	lsls	r3, r3, #8
 8006486:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800648a:	4313      	orrs	r3, r2
 800648c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800648e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064a0:	4313      	orrs	r3, r2
 80064a2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80064a4:	f7ff fd6d 	bl	8005f82 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064a8:	f7fb fbae 	bl	8001c08 <HAL_GetTick>
 80064ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80064ae:	e009      	b.n	80064c4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064b0:	f7fb fbaa 	bl	8001c08 <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d902      	bls.n	80064c4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	73fb      	strb	r3, [r7, #15]
        break;
 80064c2:	e004      	b.n	80064ce <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80064c4:	f7ff fd7b 	bl	8005fbe <LL_RCC_PLLSAI1_IsReady>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d1f0      	bne.n	80064b0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d108      	bne.n	80064e6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80064d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064d8:	691a      	ldr	r2, [r3, #16]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064e2:	4313      	orrs	r3, r2
 80064e4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e090      	b.n	8006624 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d106      	bne.n	800651c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7fb f990 	bl	800183c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2202      	movs	r2, #2
 8006520:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	22ca      	movs	r2, #202	; 0xca
 800652a:	625a      	str	r2, [r3, #36]	; 0x24
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2253      	movs	r2, #83	; 0x53
 8006532:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f89f 	bl	8006678 <RTC_EnterInitMode>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d009      	beq.n	8006554 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	22ff      	movs	r2, #255	; 0xff
 8006546:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2204      	movs	r2, #4
 800654c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e067      	b.n	8006624 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6812      	ldr	r2, [r2, #0]
 800655e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006566:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6899      	ldr	r1, [r3, #8]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	431a      	orrs	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	431a      	orrs	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	68d2      	ldr	r2, [r2, #12]
 800658e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6919      	ldr	r1, [r3, #16]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	041a      	lsls	r2, r3, #16
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68da      	ldr	r2, [r3, #12]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065b2:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 0203 	bic.w	r2, r2, #3
 80065c2:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	69da      	ldr	r2, [r3, #28]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	431a      	orrs	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d113      	bne.n	8006612 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f81e 	bl	800662c <HAL_RTC_WaitForSynchro>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00d      	beq.n	8006612 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	22ff      	movs	r2, #255	; 0xff
 80065fc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2204      	movs	r2, #4
 8006602:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e008      	b.n	8006624 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	22ff      	movs	r2, #255	; 0xff
 8006618:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8006622:	2300      	movs	r3, #0
  }
}
 8006624:	4618      	mov	r0, r3
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006642:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006644:	f7fb fae0 	bl	8001c08 <HAL_GetTick>
 8006648:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800664a:	e009      	b.n	8006660 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800664c:	f7fb fadc 	bl	8001c08 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800665a:	d901      	bls.n	8006660 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e007      	b.n	8006670 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	f003 0320 	and.w	r3, r3, #32
 800666a:	2b00      	cmp	r3, #0
 800666c:	d0ee      	beq.n	800664c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668a:	2b00      	cmp	r3, #0
 800668c:	d119      	bne.n	80066c2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f04f 32ff 	mov.w	r2, #4294967295
 8006696:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006698:	f7fb fab6 	bl	8001c08 <HAL_GetTick>
 800669c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800669e:	e009      	b.n	80066b4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80066a0:	f7fb fab2 	bl	8001c08 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066ae:	d901      	bls.n	80066b4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e007      	b.n	80066c4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d0ee      	beq.n	80066a0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <LL_RCC_GetUSARTClockSource>:
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80066d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4013      	ands	r3, r2
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <LL_RCC_GetLPUARTClockSource>:
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80066f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4013      	ands	r3, r2
}
 8006700:	4618      	mov	r0, r3
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e042      	b.n	80067a4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006724:	2b00      	cmp	r3, #0
 8006726:	d106      	bne.n	8006736 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7fb f8af 	bl	8001894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2224      	movs	r2, #36	; 0x24
 800673a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f022 0201 	bic.w	r2, r2, #1
 800674c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f8c2 	bl	80068d8 <UART_SetConfig>
 8006754:	4603      	mov	r3, r0
 8006756:	2b01      	cmp	r3, #1
 8006758:	d101      	bne.n	800675e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e022      	b.n	80067a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006762:	2b00      	cmp	r3, #0
 8006764:	d002      	beq.n	800676c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fadc 	bl	8006d24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685a      	ldr	r2, [r3, #4]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800677a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689a      	ldr	r2, [r3, #8]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800678a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f042 0201 	orr.w	r2, r2, #1
 800679a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fb63 	bl	8006e68 <UART_CheckIdleState>
 80067a2:	4603      	mov	r3, r0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b08a      	sub	sp, #40	; 0x28
 80067b0:	af02      	add	r7, sp, #8
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	603b      	str	r3, [r7, #0]
 80067b8:	4613      	mov	r3, r2
 80067ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067c2:	2b20      	cmp	r3, #32
 80067c4:	f040 8083 	bne.w	80068ce <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d002      	beq.n	80067d4 <HAL_UART_Transmit+0x28>
 80067ce:	88fb      	ldrh	r3, [r7, #6]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e07b      	b.n	80068d0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d101      	bne.n	80067e6 <HAL_UART_Transmit+0x3a>
 80067e2:	2302      	movs	r3, #2
 80067e4:	e074      	b.n	80068d0 <HAL_UART_Transmit+0x124>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2221      	movs	r2, #33	; 0x21
 80067fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067fe:	f7fb fa03 	bl	8001c08 <HAL_GetTick>
 8006802:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	88fa      	ldrh	r2, [r7, #6]
 8006808:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	88fa      	ldrh	r2, [r7, #6]
 8006810:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800681c:	d108      	bne.n	8006830 <HAL_UART_Transmit+0x84>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d104      	bne.n	8006830 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006826:	2300      	movs	r3, #0
 8006828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	61bb      	str	r3, [r7, #24]
 800682e:	e003      	b.n	8006838 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006834:	2300      	movs	r3, #0
 8006836:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006840:	e02c      	b.n	800689c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2200      	movs	r2, #0
 800684a:	2180      	movs	r1, #128	; 0x80
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f000 fb56 	bl	8006efe <UART_WaitOnFlagUntilTimeout>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e039      	b.n	80068d0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10b      	bne.n	800687a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006870:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	3302      	adds	r3, #2
 8006876:	61bb      	str	r3, [r7, #24]
 8006878:	e007      	b.n	800688a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	781a      	ldrb	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	3301      	adds	r3, #1
 8006888:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006890:	b29b      	uxth	r3, r3
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1cc      	bne.n	8006842 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	2200      	movs	r2, #0
 80068b0:	2140      	movs	r1, #64	; 0x40
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f000 fb23 	bl	8006efe <UART_WaitOnFlagUntilTimeout>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e006      	b.n	80068d0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2220      	movs	r2, #32
 80068c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80068ca:	2300      	movs	r3, #0
 80068cc:	e000      	b.n	80068d0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80068ce:	2302      	movs	r3, #2
  }
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3720      	adds	r7, #32
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068dc:	b08c      	sub	sp, #48	; 0x30
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	689a      	ldr	r2, [r3, #8]
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	431a      	orrs	r2, r3
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	431a      	orrs	r2, r3
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	4baf      	ldr	r3, [pc, #700]	; (8006bc4 <UART_SetConfig+0x2ec>)
 8006908:	4013      	ands	r3, r2
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	6812      	ldr	r2, [r2, #0]
 800690e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006910:	430b      	orrs	r3, r1
 8006912:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	68da      	ldr	r2, [r3, #12]
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	430a      	orrs	r2, r1
 8006928:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4aa4      	ldr	r2, [pc, #656]	; (8006bc8 <UART_SetConfig+0x2f0>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d004      	beq.n	8006944 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006940:	4313      	orrs	r3, r2
 8006942:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800694e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	6812      	ldr	r2, [r2, #0]
 8006956:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006958:	430b      	orrs	r3, r1
 800695a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006962:	f023 010f 	bic.w	r1, r3, #15
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a95      	ldr	r2, [pc, #596]	; (8006bcc <UART_SetConfig+0x2f4>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d125      	bne.n	80069c8 <UART_SetConfig+0xf0>
 800697c:	2003      	movs	r0, #3
 800697e:	f7ff fea5 	bl	80066cc <LL_RCC_GetUSARTClockSource>
 8006982:	4603      	mov	r3, r0
 8006984:	2b03      	cmp	r3, #3
 8006986:	d81b      	bhi.n	80069c0 <UART_SetConfig+0xe8>
 8006988:	a201      	add	r2, pc, #4	; (adr r2, 8006990 <UART_SetConfig+0xb8>)
 800698a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698e:	bf00      	nop
 8006990:	080069a1 	.word	0x080069a1
 8006994:	080069b1 	.word	0x080069b1
 8006998:	080069a9 	.word	0x080069a9
 800699c:	080069b9 	.word	0x080069b9
 80069a0:	2301      	movs	r3, #1
 80069a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069a6:	e042      	b.n	8006a2e <UART_SetConfig+0x156>
 80069a8:	2302      	movs	r3, #2
 80069aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069ae:	e03e      	b.n	8006a2e <UART_SetConfig+0x156>
 80069b0:	2304      	movs	r3, #4
 80069b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069b6:	e03a      	b.n	8006a2e <UART_SetConfig+0x156>
 80069b8:	2308      	movs	r3, #8
 80069ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069be:	e036      	b.n	8006a2e <UART_SetConfig+0x156>
 80069c0:	2310      	movs	r3, #16
 80069c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069c6:	e032      	b.n	8006a2e <UART_SetConfig+0x156>
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a7e      	ldr	r2, [pc, #504]	; (8006bc8 <UART_SetConfig+0x2f0>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d12a      	bne.n	8006a28 <UART_SetConfig+0x150>
 80069d2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80069d6:	f7ff fe89 	bl	80066ec <LL_RCC_GetLPUARTClockSource>
 80069da:	4603      	mov	r3, r0
 80069dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069e0:	d01a      	beq.n	8006a18 <UART_SetConfig+0x140>
 80069e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069e6:	d81b      	bhi.n	8006a20 <UART_SetConfig+0x148>
 80069e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ec:	d00c      	beq.n	8006a08 <UART_SetConfig+0x130>
 80069ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069f2:	d815      	bhi.n	8006a20 <UART_SetConfig+0x148>
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d003      	beq.n	8006a00 <UART_SetConfig+0x128>
 80069f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069fc:	d008      	beq.n	8006a10 <UART_SetConfig+0x138>
 80069fe:	e00f      	b.n	8006a20 <UART_SetConfig+0x148>
 8006a00:	2300      	movs	r3, #0
 8006a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a06:	e012      	b.n	8006a2e <UART_SetConfig+0x156>
 8006a08:	2302      	movs	r3, #2
 8006a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a0e:	e00e      	b.n	8006a2e <UART_SetConfig+0x156>
 8006a10:	2304      	movs	r3, #4
 8006a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a16:	e00a      	b.n	8006a2e <UART_SetConfig+0x156>
 8006a18:	2308      	movs	r3, #8
 8006a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a1e:	e006      	b.n	8006a2e <UART_SetConfig+0x156>
 8006a20:	2310      	movs	r3, #16
 8006a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a26:	e002      	b.n	8006a2e <UART_SetConfig+0x156>
 8006a28:	2310      	movs	r3, #16
 8006a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a65      	ldr	r2, [pc, #404]	; (8006bc8 <UART_SetConfig+0x2f0>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	f040 8097 	bne.w	8006b68 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a3e:	2b08      	cmp	r3, #8
 8006a40:	d823      	bhi.n	8006a8a <UART_SetConfig+0x1b2>
 8006a42:	a201      	add	r2, pc, #4	; (adr r2, 8006a48 <UART_SetConfig+0x170>)
 8006a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a48:	08006a6d 	.word	0x08006a6d
 8006a4c:	08006a8b 	.word	0x08006a8b
 8006a50:	08006a75 	.word	0x08006a75
 8006a54:	08006a8b 	.word	0x08006a8b
 8006a58:	08006a7b 	.word	0x08006a7b
 8006a5c:	08006a8b 	.word	0x08006a8b
 8006a60:	08006a8b 	.word	0x08006a8b
 8006a64:	08006a8b 	.word	0x08006a8b
 8006a68:	08006a83 	.word	0x08006a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a6c:	f7ff f83c 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 8006a70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a72:	e010      	b.n	8006a96 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a74:	4b56      	ldr	r3, [pc, #344]	; (8006bd0 <UART_SetConfig+0x2f8>)
 8006a76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a78:	e00d      	b.n	8006a96 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a7a:	f7fe ffb5 	bl	80059e8 <HAL_RCC_GetSysClockFreq>
 8006a7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a80:	e009      	b.n	8006a96 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a88:	e005      	b.n	8006a96 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006a94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 812a 	beq.w	8006cf2 <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa2:	4a4c      	ldr	r2, [pc, #304]	; (8006bd4 <UART_SetConfig+0x2fc>)
 8006aa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ab0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	4413      	add	r3, r2
 8006abc:	69ba      	ldr	r2, [r7, #24]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d305      	bcc.n	8006ace <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d903      	bls.n	8006ad6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ad4:	e10d      	b.n	8006cf2 <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	2200      	movs	r2, #0
 8006ada:	60bb      	str	r3, [r7, #8]
 8006adc:	60fa      	str	r2, [r7, #12]
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae2:	4a3c      	ldr	r2, [pc, #240]	; (8006bd4 <UART_SetConfig+0x2fc>)
 8006ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	2200      	movs	r2, #0
 8006aec:	603b      	str	r3, [r7, #0]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006af4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006af8:	f7f9 fb9a 	bl	8000230 <__aeabi_uldivmod>
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4610      	mov	r0, r2
 8006b02:	4619      	mov	r1, r3
 8006b04:	f04f 0200 	mov.w	r2, #0
 8006b08:	f04f 0300 	mov.w	r3, #0
 8006b0c:	020b      	lsls	r3, r1, #8
 8006b0e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b12:	0202      	lsls	r2, r0, #8
 8006b14:	6979      	ldr	r1, [r7, #20]
 8006b16:	6849      	ldr	r1, [r1, #4]
 8006b18:	0849      	lsrs	r1, r1, #1
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	460c      	mov	r4, r1
 8006b1e:	4605      	mov	r5, r0
 8006b20:	eb12 0804 	adds.w	r8, r2, r4
 8006b24:	eb43 0905 	adc.w	r9, r3, r5
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	469a      	mov	sl, r3
 8006b30:	4693      	mov	fp, r2
 8006b32:	4652      	mov	r2, sl
 8006b34:	465b      	mov	r3, fp
 8006b36:	4640      	mov	r0, r8
 8006b38:	4649      	mov	r1, r9
 8006b3a:	f7f9 fb79 	bl	8000230 <__aeabi_uldivmod>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	460b      	mov	r3, r1
 8006b42:	4613      	mov	r3, r2
 8006b44:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b4c:	d308      	bcc.n	8006b60 <UART_SetConfig+0x288>
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b54:	d204      	bcs.n	8006b60 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	6a3a      	ldr	r2, [r7, #32]
 8006b5c:	60da      	str	r2, [r3, #12]
 8006b5e:	e0c8      	b.n	8006cf2 <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006b66:	e0c4      	b.n	8006cf2 <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b70:	d16d      	bne.n	8006c4e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006b72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b76:	3b01      	subs	r3, #1
 8006b78:	2b07      	cmp	r3, #7
 8006b7a:	d82d      	bhi.n	8006bd8 <UART_SetConfig+0x300>
 8006b7c:	a201      	add	r2, pc, #4	; (adr r2, 8006b84 <UART_SetConfig+0x2ac>)
 8006b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b82:	bf00      	nop
 8006b84:	08006ba5 	.word	0x08006ba5
 8006b88:	08006bad 	.word	0x08006bad
 8006b8c:	08006bd9 	.word	0x08006bd9
 8006b90:	08006bb3 	.word	0x08006bb3
 8006b94:	08006bd9 	.word	0x08006bd9
 8006b98:	08006bd9 	.word	0x08006bd9
 8006b9c:	08006bd9 	.word	0x08006bd9
 8006ba0:	08006bbb 	.word	0x08006bbb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ba4:	f7fe ffb6 	bl	8005b14 <HAL_RCC_GetPCLK2Freq>
 8006ba8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006baa:	e01b      	b.n	8006be4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bac:	4b08      	ldr	r3, [pc, #32]	; (8006bd0 <UART_SetConfig+0x2f8>)
 8006bae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006bb0:	e018      	b.n	8006be4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bb2:	f7fe ff19 	bl	80059e8 <HAL_RCC_GetSysClockFreq>
 8006bb6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006bb8:	e014      	b.n	8006be4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006bc0:	e010      	b.n	8006be4 <UART_SetConfig+0x30c>
 8006bc2:	bf00      	nop
 8006bc4:	cfff69f3 	.word	0xcfff69f3
 8006bc8:	40008000 	.word	0x40008000
 8006bcc:	40013800 	.word	0x40013800
 8006bd0:	00f42400 	.word	0x00f42400
 8006bd4:	08014f28 	.word	0x08014f28
      default:
        pclk = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006be2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 8083 	beq.w	8006cf2 <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf0:	4a4a      	ldr	r2, [pc, #296]	; (8006d1c <UART_SetConfig+0x444>)
 8006bf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bfe:	005a      	lsls	r2, r3, #1
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	085b      	lsrs	r3, r3, #1
 8006c06:	441a      	add	r2, r3
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c10:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c12:	6a3b      	ldr	r3, [r7, #32]
 8006c14:	2b0f      	cmp	r3, #15
 8006c16:	d916      	bls.n	8006c46 <UART_SetConfig+0x36e>
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c1e:	d212      	bcs.n	8006c46 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	f023 030f 	bic.w	r3, r3, #15
 8006c28:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	085b      	lsrs	r3, r3, #1
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	f003 0307 	and.w	r3, r3, #7
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	8bfb      	ldrh	r3, [r7, #30]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	8bfa      	ldrh	r2, [r7, #30]
 8006c42:	60da      	str	r2, [r3, #12]
 8006c44:	e055      	b.n	8006cf2 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006c4c:	e051      	b.n	8006cf2 <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c52:	3b01      	subs	r3, #1
 8006c54:	2b07      	cmp	r3, #7
 8006c56:	d822      	bhi.n	8006c9e <UART_SetConfig+0x3c6>
 8006c58:	a201      	add	r2, pc, #4	; (adr r2, 8006c60 <UART_SetConfig+0x388>)
 8006c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5e:	bf00      	nop
 8006c60:	08006c81 	.word	0x08006c81
 8006c64:	08006c89 	.word	0x08006c89
 8006c68:	08006c9f 	.word	0x08006c9f
 8006c6c:	08006c8f 	.word	0x08006c8f
 8006c70:	08006c9f 	.word	0x08006c9f
 8006c74:	08006c9f 	.word	0x08006c9f
 8006c78:	08006c9f 	.word	0x08006c9f
 8006c7c:	08006c97 	.word	0x08006c97
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c80:	f7fe ff48 	bl	8005b14 <HAL_RCC_GetPCLK2Freq>
 8006c84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c86:	e010      	b.n	8006caa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c88:	4b25      	ldr	r3, [pc, #148]	; (8006d20 <UART_SetConfig+0x448>)
 8006c8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c8c:	e00d      	b.n	8006caa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c8e:	f7fe feab 	bl	80059e8 <HAL_RCC_GetSysClockFreq>
 8006c92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c94:	e009      	b.n	8006caa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c9c:	e005      	b.n	8006caa <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006ca8:	bf00      	nop
    }

    if (pclk != 0U)
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d020      	beq.n	8006cf2 <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb4:	4a19      	ldr	r2, [pc, #100]	; (8006d1c <UART_SetConfig+0x444>)
 8006cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	fbb3 f2f2 	udiv	r2, r3, r2
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	085b      	lsrs	r3, r3, #1
 8006cc8:	441a      	add	r2, r3
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	2b0f      	cmp	r3, #15
 8006cd8:	d908      	bls.n	8006cec <UART_SetConfig+0x414>
 8006cda:	6a3b      	ldr	r3, [r7, #32]
 8006cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ce0:	d204      	bcs.n	8006cec <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	6a3a      	ldr	r2, [r7, #32]
 8006ce8:	60da      	str	r2, [r3, #12]
 8006cea:	e002      	b.n	8006cf2 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2200      	movs	r2, #0
 8006d06:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006d0e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3730      	adds	r7, #48	; 0x30
 8006d16:	46bd      	mov	sp, r7
 8006d18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d1c:	08014f28 	.word	0x08014f28
 8006d20:	00f42400 	.word	0x00f42400

08006d24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00a      	beq.n	8006d4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00a      	beq.n	8006d70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d74:	f003 0304 	and.w	r3, r3, #4
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d96:	f003 0308 	and.w	r3, r3, #8
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00a      	beq.n	8006db4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db8:	f003 0310 	and.w	r3, r3, #16
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00a      	beq.n	8006dd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dda:	f003 0320 	and.w	r3, r3, #32
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00a      	beq.n	8006df8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d01a      	beq.n	8006e3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e22:	d10a      	bne.n	8006e3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	430a      	orrs	r2, r1
 8006e38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00a      	beq.n	8006e5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	605a      	str	r2, [r3, #4]
  }
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af02      	add	r7, sp, #8
 8006e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e78:	f7fa fec6 	bl	8001c08 <HAL_GetTick>
 8006e7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0308 	and.w	r3, r3, #8
 8006e88:	2b08      	cmp	r3, #8
 8006e8a:	d10e      	bne.n	8006eaa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f82f 	bl	8006efe <UART_WaitOnFlagUntilTimeout>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d001      	beq.n	8006eaa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e025      	b.n	8006ef6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0304 	and.w	r3, r3, #4
 8006eb4:	2b04      	cmp	r3, #4
 8006eb6:	d10e      	bne.n	8006ed6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f819 	bl	8006efe <UART_WaitOnFlagUntilTimeout>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e00f      	b.n	8006ef6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b09c      	sub	sp, #112	; 0x70
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	60f8      	str	r0, [r7, #12]
 8006f06:	60b9      	str	r1, [r7, #8]
 8006f08:	603b      	str	r3, [r7, #0]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f0e:	e0a9      	b.n	8007064 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f16:	f000 80a5 	beq.w	8007064 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f1a:	f7fa fe75 	bl	8001c08 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d302      	bcc.n	8006f30 <UART_WaitOnFlagUntilTimeout+0x32>
 8006f2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d140      	bne.n	8006fb2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f38:	e853 3f00 	ldrex	r3, [r3]
 8006f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f44:	667b      	str	r3, [r7, #100]	; 0x64
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f50:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f56:	e841 2300 	strex	r3, r2, [r1]
 8006f5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1e6      	bne.n	8006f30 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	3308      	adds	r3, #8
 8006f68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f6c:	e853 3f00 	ldrex	r3, [r3]
 8006f70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f74:	f023 0301 	bic.w	r3, r3, #1
 8006f78:	663b      	str	r3, [r7, #96]	; 0x60
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	3308      	adds	r3, #8
 8006f80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f82:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f8a:	e841 2300 	strex	r3, r2, [r1]
 8006f8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1e5      	bne.n	8006f62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e069      	b.n	8007086 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0304 	and.w	r3, r3, #4
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d051      	beq.n	8007064 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fce:	d149      	bne.n	8007064 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fd8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe2:	e853 3f00 	ldrex	r3, [r3]
 8006fe6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8006ffa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007000:	e841 2300 	strex	r3, r2, [r1]
 8007004:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1e6      	bne.n	8006fda <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	3308      	adds	r3, #8
 8007012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	e853 3f00 	ldrex	r3, [r3]
 800701a:	613b      	str	r3, [r7, #16]
   return(result);
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f023 0301 	bic.w	r3, r3, #1
 8007022:	66bb      	str	r3, [r7, #104]	; 0x68
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3308      	adds	r3, #8
 800702a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800702c:	623a      	str	r2, [r7, #32]
 800702e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007030:	69f9      	ldr	r1, [r7, #28]
 8007032:	6a3a      	ldr	r2, [r7, #32]
 8007034:	e841 2300 	strex	r3, r2, [r1]
 8007038:	61bb      	str	r3, [r7, #24]
   return(result);
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1e5      	bne.n	800700c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2220      	movs	r2, #32
 8007044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2220      	movs	r2, #32
 800704c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2220      	movs	r2, #32
 8007054:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007060:	2303      	movs	r3, #3
 8007062:	e010      	b.n	8007086 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	69da      	ldr	r2, [r3, #28]
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	4013      	ands	r3, r2
 800706e:	68ba      	ldr	r2, [r7, #8]
 8007070:	429a      	cmp	r2, r3
 8007072:	bf0c      	ite	eq
 8007074:	2301      	moveq	r3, #1
 8007076:	2300      	movne	r3, #0
 8007078:	b2db      	uxtb	r3, r3
 800707a:	461a      	mov	r2, r3
 800707c:	79fb      	ldrb	r3, [r7, #7]
 800707e:	429a      	cmp	r2, r3
 8007080:	f43f af46 	beq.w	8006f10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3770      	adds	r7, #112	; 0x70
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800708e:	b480      	push	{r7}
 8007090:	b085      	sub	sp, #20
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800709c:	2b01      	cmp	r3, #1
 800709e:	d101      	bne.n	80070a4 <HAL_UARTEx_DisableFifoMode+0x16>
 80070a0:	2302      	movs	r3, #2
 80070a2:	e027      	b.n	80070f4 <HAL_UARTEx_DisableFifoMode+0x66>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2224      	movs	r2, #36	; 0x24
 80070b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f022 0201 	bic.w	r2, r2, #1
 80070ca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80070d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2220      	movs	r2, #32
 80070e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007110:	2b01      	cmp	r3, #1
 8007112:	d101      	bne.n	8007118 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007114:	2302      	movs	r3, #2
 8007116:	e02d      	b.n	8007174 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2224      	movs	r2, #36	; 0x24
 8007124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 0201 	bic.w	r2, r2, #1
 800713e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f84f 	bl	80071f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2220      	movs	r2, #32
 8007166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800718c:	2b01      	cmp	r3, #1
 800718e:	d101      	bne.n	8007194 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007190:	2302      	movs	r3, #2
 8007192:	e02d      	b.n	80071f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2224      	movs	r2, #36	; 0x24
 80071a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 0201 	bic.w	r2, r2, #1
 80071ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	430a      	orrs	r2, r1
 80071ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f811 	bl	80071f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2220      	movs	r2, #32
 80071e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007204:	2b00      	cmp	r3, #0
 8007206:	d108      	bne.n	800721a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007218:	e031      	b.n	800727e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800721a:	2308      	movs	r3, #8
 800721c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800721e:	2308      	movs	r3, #8
 8007220:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	0e5b      	lsrs	r3, r3, #25
 800722a:	b2db      	uxtb	r3, r3
 800722c:	f003 0307 	and.w	r3, r3, #7
 8007230:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	0f5b      	lsrs	r3, r3, #29
 800723a:	b2db      	uxtb	r3, r3
 800723c:	f003 0307 	and.w	r3, r3, #7
 8007240:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007242:	7bbb      	ldrb	r3, [r7, #14]
 8007244:	7b3a      	ldrb	r2, [r7, #12]
 8007246:	4911      	ldr	r1, [pc, #68]	; (800728c <UARTEx_SetNbDataToProcess+0x94>)
 8007248:	5c8a      	ldrb	r2, [r1, r2]
 800724a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800724e:	7b3a      	ldrb	r2, [r7, #12]
 8007250:	490f      	ldr	r1, [pc, #60]	; (8007290 <UARTEx_SetNbDataToProcess+0x98>)
 8007252:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007254:	fb93 f3f2 	sdiv	r3, r3, r2
 8007258:	b29a      	uxth	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007260:	7bfb      	ldrb	r3, [r7, #15]
 8007262:	7b7a      	ldrb	r2, [r7, #13]
 8007264:	4909      	ldr	r1, [pc, #36]	; (800728c <UARTEx_SetNbDataToProcess+0x94>)
 8007266:	5c8a      	ldrb	r2, [r1, r2]
 8007268:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800726c:	7b7a      	ldrb	r2, [r7, #13]
 800726e:	4908      	ldr	r1, [pc, #32]	; (8007290 <UARTEx_SetNbDataToProcess+0x98>)
 8007270:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007272:	fb93 f3f2 	sdiv	r3, r3, r2
 8007276:	b29a      	uxth	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800727e:	bf00      	nop
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	08014f40 	.word	0x08014f40
 8007290:	08014f48 	.word	0x08014f48

08007294 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80072a4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80072a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b085      	sub	sp, #20
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80072ca:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80072ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	b29b      	uxth	r3, r3
 80072dc:	43db      	mvns	r3, r3
 80072de:	b29b      	uxth	r3, r3
 80072e0:	4013      	ands	r3, r2
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3714      	adds	r7, #20
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80072f8:	b084      	sub	sp, #16
 80072fa:	b480      	push	{r7}
 80072fc:	b083      	sub	sp, #12
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	f107 0014 	add.w	r0, r7, #20
 8007306:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2201      	movs	r2, #1
 800730e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	b004      	add	sp, #16
 8007338:	4770      	bx	lr
	...

0800733c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800733c:	b480      	push	{r7}
 800733e:	b09d      	sub	sp, #116	; 0x74
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4413      	add	r3, r2
 8007356:	881b      	ldrh	r3, [r3, #0]
 8007358:	b29b      	uxth	r3, r3
 800735a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800735e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007362:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	78db      	ldrb	r3, [r3, #3]
 800736a:	2b03      	cmp	r3, #3
 800736c:	d81f      	bhi.n	80073ae <USB_ActivateEndpoint+0x72>
 800736e:	a201      	add	r2, pc, #4	; (adr r2, 8007374 <USB_ActivateEndpoint+0x38>)
 8007370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007374:	08007385 	.word	0x08007385
 8007378:	080073a1 	.word	0x080073a1
 800737c:	080073b7 	.word	0x080073b7
 8007380:	08007393 	.word	0x08007393
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007384:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007388:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800738c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007390:	e012      	b.n	80073b8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007392:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007396:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800739a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800739e:	e00b      	b.n	80073b8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80073a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80073a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80073a8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80073ac:	e004      	b.n	80073b8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80073b4:	e000      	b.n	80073b8 <USB_ActivateEndpoint+0x7c>
      break;
 80073b6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	441a      	add	r2, r3
 80073c2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80073c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	b21b      	sxth	r3, r3
 80073ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f2:	b21a      	sxth	r2, r3
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	b21b      	sxth	r3, r3
 80073fa:	4313      	orrs	r3, r2
 80073fc:	b21b      	sxth	r3, r3
 80073fe:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	441a      	add	r2, r3
 800740c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800741c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007420:	b29b      	uxth	r3, r3
 8007422:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	7b1b      	ldrb	r3, [r3, #12]
 8007428:	2b00      	cmp	r3, #0
 800742a:	f040 816e 	bne.w	800770a <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	785b      	ldrb	r3, [r3, #1]
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 8084 	beq.w	8007540 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	61bb      	str	r3, [r7, #24]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007442:	b29b      	uxth	r3, r3
 8007444:	461a      	mov	r2, r3
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	4413      	add	r3, r2
 800744a:	61bb      	str	r3, [r7, #24]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	00da      	lsls	r2, r3, #3
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	4413      	add	r3, r2
 8007456:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800745a:	617b      	str	r3, [r7, #20]
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	88db      	ldrh	r3, [r3, #6]
 8007460:	085b      	lsrs	r3, r3, #1
 8007462:	b29b      	uxth	r3, r3
 8007464:	005b      	lsls	r3, r3, #1
 8007466:	b29a      	uxth	r2, r3
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	881b      	ldrh	r3, [r3, #0]
 8007478:	827b      	strh	r3, [r7, #18]
 800747a:	8a7b      	ldrh	r3, [r7, #18]
 800747c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007480:	2b00      	cmp	r3, #0
 8007482:	d01b      	beq.n	80074bc <USB_ActivateEndpoint+0x180>
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	b29b      	uxth	r3, r3
 8007492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800749a:	823b      	strh	r3, [r7, #16]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	441a      	add	r2, r3
 80074a6:	8a3b      	ldrh	r3, [r7, #16]
 80074a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	78db      	ldrb	r3, [r3, #3]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d020      	beq.n	8007506 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	4413      	add	r3, r2
 80074ce:	881b      	ldrh	r3, [r3, #0]
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074da:	81bb      	strh	r3, [r7, #12]
 80074dc:	89bb      	ldrh	r3, [r7, #12]
 80074de:	f083 0320 	eor.w	r3, r3, #32
 80074e2:	81bb      	strh	r3, [r7, #12]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	441a      	add	r2, r3
 80074ee:	89bb      	ldrh	r3, [r7, #12]
 80074f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007500:	b29b      	uxth	r3, r3
 8007502:	8013      	strh	r3, [r2, #0]
 8007504:	e2cb      	b.n	8007a9e <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	b29b      	uxth	r3, r3
 8007514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800751c:	81fb      	strh	r3, [r7, #14]
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	441a      	add	r2, r3
 8007528:	89fb      	ldrh	r3, [r7, #14]
 800752a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800752e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800753a:	b29b      	uxth	r3, r3
 800753c:	8013      	strh	r3, [r2, #0]
 800753e:	e2ae      	b.n	8007a9e <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	633b      	str	r3, [r7, #48]	; 0x30
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800754a:	b29b      	uxth	r3, r3
 800754c:	461a      	mov	r2, r3
 800754e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007550:	4413      	add	r3, r2
 8007552:	633b      	str	r3, [r7, #48]	; 0x30
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	00da      	lsls	r2, r3, #3
 800755a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755c:	4413      	add	r3, r2
 800755e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	88db      	ldrh	r3, [r3, #6]
 8007568:	085b      	lsrs	r3, r3, #1
 800756a:	b29b      	uxth	r3, r3
 800756c:	005b      	lsls	r3, r3, #1
 800756e:	b29a      	uxth	r2, r3
 8007570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007572:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	62bb      	str	r3, [r7, #40]	; 0x28
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800757e:	b29b      	uxth	r3, r3
 8007580:	461a      	mov	r2, r3
 8007582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007584:	4413      	add	r3, r2
 8007586:	62bb      	str	r3, [r7, #40]	; 0x28
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	00da      	lsls	r2, r3, #3
 800758e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007590:	4413      	add	r3, r2
 8007592:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007596:	627b      	str	r3, [r7, #36]	; 0x24
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	2b3e      	cmp	r3, #62	; 0x3e
 800759e:	d918      	bls.n	80075d2 <USB_ActivateEndpoint+0x296>
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	095b      	lsrs	r3, r3, #5
 80075a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	f003 031f 	and.w	r3, r3, #31
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d102      	bne.n	80075ba <USB_ActivateEndpoint+0x27e>
 80075b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075b6:	3b01      	subs	r3, #1
 80075b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80075ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075bc:	b29b      	uxth	r3, r3
 80075be:	029b      	lsls	r3, r3, #10
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ce:	801a      	strh	r2, [r3, #0]
 80075d0:	e029      	b.n	8007626 <USB_ActivateEndpoint+0x2ea>
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d112      	bne.n	8007600 <USB_ActivateEndpoint+0x2c4>
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e8:	801a      	strh	r2, [r3, #0]
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	881b      	ldrh	r3, [r3, #0]
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	801a      	strh	r2, [r3, #0]
 80075fe:	e012      	b.n	8007626 <USB_ActivateEndpoint+0x2ea>
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	085b      	lsrs	r3, r3, #1
 8007606:	66bb      	str	r3, [r7, #104]	; 0x68
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	f003 0301 	and.w	r3, r3, #1
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <USB_ActivateEndpoint+0x2de>
 8007614:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007616:	3301      	adds	r3, #1
 8007618:	66bb      	str	r3, [r7, #104]	; 0x68
 800761a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800761c:	b29b      	uxth	r3, r3
 800761e:	029b      	lsls	r3, r3, #10
 8007620:	b29a      	uxth	r2, r3
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4413      	add	r3, r2
 8007630:	881b      	ldrh	r3, [r3, #0]
 8007632:	847b      	strh	r3, [r7, #34]	; 0x22
 8007634:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d01b      	beq.n	8007676 <USB_ActivateEndpoint+0x33a>
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	b29b      	uxth	r3, r3
 800764c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007654:	843b      	strh	r3, [r7, #32]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	441a      	add	r2, r3
 8007660:	8c3b      	ldrh	r3, [r7, #32]
 8007662:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007666:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800766a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800766e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007672:	b29b      	uxth	r3, r3
 8007674:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d124      	bne.n	80076c8 <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	b29b      	uxth	r3, r3
 800768c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007694:	83bb      	strh	r3, [r7, #28]
 8007696:	8bbb      	ldrh	r3, [r7, #28]
 8007698:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800769c:	83bb      	strh	r3, [r7, #28]
 800769e:	8bbb      	ldrh	r3, [r7, #28]
 80076a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80076a4:	83bb      	strh	r3, [r7, #28]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	441a      	add	r2, r3
 80076b0:	8bbb      	ldrh	r3, [r7, #28]
 80076b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	8013      	strh	r3, [r2, #0]
 80076c6:	e1ea      	b.n	8007a9e <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	881b      	ldrh	r3, [r3, #0]
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076de:	83fb      	strh	r3, [r7, #30]
 80076e0:	8bfb      	ldrh	r3, [r7, #30]
 80076e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80076e6:	83fb      	strh	r3, [r7, #30]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	441a      	add	r2, r3
 80076f2:	8bfb      	ldrh	r3, [r7, #30]
 80076f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007704:	b29b      	uxth	r3, r3
 8007706:	8013      	strh	r3, [r2, #0]
 8007708:	e1c9      	b.n	8007a9e <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	78db      	ldrb	r3, [r3, #3]
 800770e:	2b02      	cmp	r3, #2
 8007710:	d11e      	bne.n	8007750 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	b29b      	uxth	r3, r3
 8007720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007728:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	441a      	add	r2, r3
 8007736:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800773a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800773e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007742:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800774a:	b29b      	uxth	r3, r3
 800774c:	8013      	strh	r3, [r2, #0]
 800774e:	e01d      	b.n	800778c <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4413      	add	r3, r2
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	b29b      	uxth	r3, r3
 800775e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007766:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	441a      	add	r2, r3
 8007774:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800777c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007788:	b29b      	uxth	r3, r3
 800778a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007796:	b29b      	uxth	r3, r3
 8007798:	461a      	mov	r2, r3
 800779a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800779c:	4413      	add	r3, r2
 800779e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	00da      	lsls	r2, r3, #3
 80077a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077a8:	4413      	add	r3, r2
 80077aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	891b      	ldrh	r3, [r3, #8]
 80077b4:	085b      	lsrs	r3, r3, #1
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	005b      	lsls	r3, r3, #1
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077be:	801a      	strh	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	657b      	str	r3, [r7, #84]	; 0x54
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	461a      	mov	r2, r3
 80077ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077d0:	4413      	add	r3, r2
 80077d2:	657b      	str	r3, [r7, #84]	; 0x54
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	00da      	lsls	r2, r3, #3
 80077da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077dc:	4413      	add	r3, r2
 80077de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077e2:	653b      	str	r3, [r7, #80]	; 0x50
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	895b      	ldrh	r3, [r3, #10]
 80077e8:	085b      	lsrs	r3, r3, #1
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077f2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	785b      	ldrb	r3, [r3, #1]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f040 8093 	bne.w	8007924 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	881b      	ldrh	r3, [r3, #0]
 800780a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800780e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d01b      	beq.n	8007852 <USB_ActivateEndpoint+0x516>
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	4413      	add	r3, r2
 8007824:	881b      	ldrh	r3, [r3, #0]
 8007826:	b29b      	uxth	r3, r3
 8007828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800782c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007830:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	441a      	add	r2, r3
 800783c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800783e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007846:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800784a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800784e:	b29b      	uxth	r3, r3
 8007850:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4413      	add	r3, r2
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007860:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007866:	2b00      	cmp	r3, #0
 8007868:	d01b      	beq.n	80078a2 <USB_ActivateEndpoint+0x566>
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	4413      	add	r3, r2
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	b29b      	uxth	r3, r3
 8007878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800787c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007880:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	441a      	add	r2, r3
 800788c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800788e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800789a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800789e:	b29b      	uxth	r3, r3
 80078a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4413      	add	r3, r2
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b8:	873b      	strh	r3, [r7, #56]	; 0x38
 80078ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80078bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078c0:	873b      	strh	r3, [r7, #56]	; 0x38
 80078c2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80078c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80078c8:	873b      	strh	r3, [r7, #56]	; 0x38
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	441a      	add	r2, r3
 80078d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80078d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	4413      	add	r3, r2
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007900:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	441a      	add	r2, r3
 800790c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800790e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800791a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800791e:	b29b      	uxth	r3, r3
 8007920:	8013      	strh	r3, [r2, #0]
 8007922:	e0bc      	b.n	8007a9e <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	4413      	add	r3, r2
 800792e:	881b      	ldrh	r3, [r3, #0]
 8007930:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007934:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d01d      	beq.n	800797c <USB_ActivateEndpoint+0x640>
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	b29b      	uxth	r3, r3
 800794e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007956:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	441a      	add	r2, r3
 8007964:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800796c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007970:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007978:	b29b      	uxth	r3, r3
 800797a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4413      	add	r3, r2
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800798c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007994:	2b00      	cmp	r3, #0
 8007996:	d01d      	beq.n	80079d4 <USB_ActivateEndpoint+0x698>
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	881b      	ldrh	r3, [r3, #0]
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	441a      	add	r2, r3
 80079bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80079c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	78db      	ldrb	r3, [r3, #3]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d024      	beq.n	8007a26 <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4413      	add	r3, r2
 80079e6:	881b      	ldrh	r3, [r3, #0]
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80079f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80079fa:	f083 0320 	eor.w	r3, r3, #32
 80079fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	441a      	add	r2, r3
 8007a0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	8013      	strh	r3, [r2, #0]
 8007a24:	e01d      	b.n	8007a62 <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4413      	add	r3, r2
 8007a30:	881b      	ldrh	r3, [r3, #0]
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a3c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	441a      	add	r2, r3
 8007a4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	881b      	ldrh	r3, [r3, #0]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	441a      	add	r2, r3
 8007a86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007a8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007a9e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3774      	adds	r7, #116	; 0x74
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop

08007ab0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b08d      	sub	sp, #52	; 0x34
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	7b1b      	ldrb	r3, [r3, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f040 808e 	bne.w	8007be0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	785b      	ldrb	r3, [r3, #1]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d044      	beq.n	8007b56 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4413      	add	r3, r2
 8007ad6:	881b      	ldrh	r3, [r3, #0]
 8007ad8:	81bb      	strh	r3, [r7, #12]
 8007ada:	89bb      	ldrh	r3, [r7, #12]
 8007adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d01b      	beq.n	8007b1c <USB_DeactivateEndpoint+0x6c>
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4413      	add	r3, r2
 8007aee:	881b      	ldrh	r3, [r3, #0]
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007afa:	817b      	strh	r3, [r7, #10]
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	441a      	add	r2, r3
 8007b06:	897b      	ldrh	r3, [r7, #10]
 8007b08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b32:	813b      	strh	r3, [r7, #8]
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	441a      	add	r2, r3
 8007b3e:	893b      	ldrh	r3, [r7, #8]
 8007b40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	8013      	strh	r3, [r2, #0]
 8007b54:	e192      	b.n	8007e7c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	881b      	ldrh	r3, [r3, #0]
 8007b62:	827b      	strh	r3, [r7, #18]
 8007b64:	8a7b      	ldrh	r3, [r7, #18]
 8007b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d01b      	beq.n	8007ba6 <USB_DeactivateEndpoint+0xf6>
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	4413      	add	r3, r2
 8007b78:	881b      	ldrh	r3, [r3, #0]
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b84:	823b      	strh	r3, [r7, #16]
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	441a      	add	r2, r3
 8007b90:	8a3b      	ldrh	r3, [r7, #16]
 8007b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	881b      	ldrh	r3, [r3, #0]
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bbc:	81fb      	strh	r3, [r7, #14]
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	441a      	add	r2, r3
 8007bc8:	89fb      	ldrh	r3, [r7, #14]
 8007bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	8013      	strh	r3, [r2, #0]
 8007bde:	e14d      	b.n	8007e7c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	785b      	ldrb	r3, [r3, #1]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f040 80a5 	bne.w	8007d34 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	881b      	ldrh	r3, [r3, #0]
 8007bf6:	843b      	strh	r3, [r7, #32]
 8007bf8:	8c3b      	ldrh	r3, [r7, #32]
 8007bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d01b      	beq.n	8007c3a <USB_DeactivateEndpoint+0x18a>
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	881b      	ldrh	r3, [r3, #0]
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c18:	83fb      	strh	r3, [r7, #30]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	441a      	add	r2, r3
 8007c24:	8bfb      	ldrh	r3, [r7, #30]
 8007c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	881b      	ldrh	r3, [r3, #0]
 8007c46:	83bb      	strh	r3, [r7, #28]
 8007c48:	8bbb      	ldrh	r3, [r7, #28]
 8007c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d01b      	beq.n	8007c8a <USB_DeactivateEndpoint+0x1da>
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	4413      	add	r3, r2
 8007c5c:	881b      	ldrh	r3, [r3, #0]
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c68:	837b      	strh	r3, [r7, #26]
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	441a      	add	r2, r3
 8007c74:	8b7b      	ldrh	r3, [r7, #26]
 8007c76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4413      	add	r3, r2
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca0:	833b      	strh	r3, [r7, #24]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	441a      	add	r2, r3
 8007cac:	8b3b      	ldrh	r3, [r7, #24]
 8007cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4413      	add	r3, r2
 8007ccc:	881b      	ldrh	r3, [r3, #0]
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd8:	82fb      	strh	r3, [r7, #22]
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	441a      	add	r2, r3
 8007ce4:	8afb      	ldrh	r3, [r7, #22]
 8007ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	881b      	ldrh	r3, [r3, #0]
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d10:	82bb      	strh	r3, [r7, #20]
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	441a      	add	r2, r3
 8007d1c:	8abb      	ldrh	r3, [r7, #20]
 8007d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	8013      	strh	r3, [r2, #0]
 8007d32:	e0a3      	b.n	8007e7c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4413      	add	r3, r2
 8007d3e:	881b      	ldrh	r3, [r3, #0]
 8007d40:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007d42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d01b      	beq.n	8007d84 <USB_DeactivateEndpoint+0x2d4>
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4413      	add	r3, r2
 8007d56:	881b      	ldrh	r3, [r3, #0]
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d62:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	441a      	add	r2, r3
 8007d6e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4413      	add	r3, r2
 8007d8e:	881b      	ldrh	r3, [r3, #0]
 8007d90:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007d92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d01b      	beq.n	8007dd4 <USB_DeactivateEndpoint+0x324>
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	4413      	add	r3, r2
 8007da6:	881b      	ldrh	r3, [r3, #0]
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db2:	853b      	strh	r3, [r7, #40]	; 0x28
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	441a      	add	r2, r3
 8007dbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007dc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dea:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	441a      	add	r2, r3
 8007df6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	881b      	ldrh	r3, [r3, #0]
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e22:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	441a      	add	r2, r3
 8007e2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	881b      	ldrh	r3, [r3, #0]
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e5a:	847b      	strh	r3, [r7, #34]	; 0x22
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	441a      	add	r2, r3
 8007e66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3734      	adds	r7, #52	; 0x34
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b0c2      	sub	sp, #264	; 0x108
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e98:	6018      	str	r0, [r3, #0]
 8007e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ea2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	785b      	ldrb	r3, [r3, #1]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	f040 867b 	bne.w	8008bac <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	699a      	ldr	r2, [r3, #24]
 8007ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d908      	bls.n	8007ee4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ed6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007ee2:	e007      	b.n	8007ef4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	7b1b      	ldrb	r3, [r3, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d13a      	bne.n	8007f7a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6959      	ldr	r1, [r3, #20]
 8007f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	88da      	ldrh	r2, [r3, #6]
 8007f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007f26:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007f2a:	6800      	ldr	r0, [r0, #0]
 8007f2c:	f001 fc1d 	bl	800976a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	613b      	str	r3, [r7, #16]
 8007f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	4413      	add	r3, r2
 8007f52:	613b      	str	r3, [r7, #16]
 8007f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	00da      	lsls	r2, r3, #3
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	4413      	add	r3, r2
 8007f66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f6a:	60fb      	str	r3, [r7, #12]
 8007f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	801a      	strh	r2, [r3, #0]
 8007f76:	f000 bde3 	b.w	8008b40 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	78db      	ldrb	r3, [r3, #3]
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	f040 843a 	bne.w	8008800 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6a1a      	ldr	r2, [r3, #32]
 8007f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	f240 83b7 	bls.w	8008718 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	881b      	ldrh	r3, [r3, #0]
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007fd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	441a      	add	r2, r3
 8007fee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ffa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008002:	b29b      	uxth	r3, r3
 8008004:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800800a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6a1a      	ldr	r2, [r3, #32]
 8008012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008016:	1ad2      	subs	r2, r2, r3
 8008018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800801c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008028:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4413      	add	r3, r2
 800803e:	881b      	ldrh	r3, [r3, #0]
 8008040:	b29b      	uxth	r3, r3
 8008042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008046:	2b00      	cmp	r3, #0
 8008048:	f000 81b3 	beq.w	80083b2 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800804c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008050:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	633b      	str	r3, [r7, #48]	; 0x30
 8008058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800805c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	785b      	ldrb	r3, [r3, #1]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d16d      	bne.n	8008144 <USB_EPStartXfer+0x2ba>
 8008068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800806c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	62bb      	str	r3, [r7, #40]	; 0x28
 8008074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008078:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008082:	b29b      	uxth	r3, r3
 8008084:	461a      	mov	r2, r3
 8008086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008088:	4413      	add	r3, r2
 800808a:	62bb      	str	r3, [r7, #40]	; 0x28
 800808c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	00da      	lsls	r2, r3, #3
 800809a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809c:	4413      	add	r3, r2
 800809e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80080a2:	627b      	str	r3, [r7, #36]	; 0x24
 80080a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080a8:	2b3e      	cmp	r3, #62	; 0x3e
 80080aa:	d91c      	bls.n	80080e6 <USB_EPStartXfer+0x25c>
 80080ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080b0:	095b      	lsrs	r3, r3, #5
 80080b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80080b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080ba:	f003 031f 	and.w	r3, r3, #31
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d104      	bne.n	80080cc <USB_EPStartXfer+0x242>
 80080c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80080c6:	3b01      	subs	r3, #1
 80080c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80080cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	029b      	lsls	r3, r3, #10
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080de:	b29a      	uxth	r2, r3
 80080e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e2:	801a      	strh	r2, [r3, #0]
 80080e4:	e053      	b.n	800818e <USB_EPStartXfer+0x304>
 80080e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d112      	bne.n	8008114 <USB_EPStartXfer+0x28a>
 80080ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f0:	881b      	ldrh	r3, [r3, #0]
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fc:	801a      	strh	r2, [r3, #0]
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	881b      	ldrh	r3, [r3, #0]
 8008102:	b29b      	uxth	r3, r3
 8008104:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008108:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800810c:	b29a      	uxth	r2, r3
 800810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008110:	801a      	strh	r2, [r3, #0]
 8008112:	e03c      	b.n	800818e <USB_EPStartXfer+0x304>
 8008114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008118:	085b      	lsrs	r3, r3, #1
 800811a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800811e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008122:	f003 0301 	and.w	r3, r3, #1
 8008126:	2b00      	cmp	r3, #0
 8008128:	d004      	beq.n	8008134 <USB_EPStartXfer+0x2aa>
 800812a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800812e:	3301      	adds	r3, #1
 8008130:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008134:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008138:	b29b      	uxth	r3, r3
 800813a:	029b      	lsls	r3, r3, #10
 800813c:	b29a      	uxth	r2, r3
 800813e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008140:	801a      	strh	r2, [r3, #0]
 8008142:	e024      	b.n	800818e <USB_EPStartXfer+0x304>
 8008144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	785b      	ldrb	r3, [r3, #1]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d11c      	bne.n	800818e <USB_EPStartXfer+0x304>
 8008154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008158:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008162:	b29b      	uxth	r3, r3
 8008164:	461a      	mov	r2, r3
 8008166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008168:	4413      	add	r3, r2
 800816a:	633b      	str	r3, [r7, #48]	; 0x30
 800816c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	00da      	lsls	r2, r3, #3
 800817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817c:	4413      	add	r3, r2
 800817e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008188:	b29a      	uxth	r2, r3
 800818a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800818c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800818e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	895b      	ldrh	r3, [r3, #10]
 800819a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800819e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	6959      	ldr	r1, [r3, #20]
 80081aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80081b4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80081b8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80081bc:	6800      	ldr	r0, [r0, #0]
 80081be:	f001 fad4 	bl	800976a <USB_WritePMA>
            ep->xfer_buff += len;
 80081c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	695a      	ldr	r2, [r3, #20]
 80081ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d2:	441a      	add	r2, r3
 80081d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80081e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	6a1a      	ldr	r2, [r3, #32]
 80081ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d90f      	bls.n	800821c <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 80081fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	6a1a      	ldr	r2, [r3, #32]
 8008208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800820c:	1ad2      	subs	r2, r2, r3
 800820e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	621a      	str	r2, [r3, #32]
 800821a:	e00e      	b.n	800823a <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800821c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	6a1b      	ldr	r3, [r3, #32]
 8008228:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800822c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2200      	movs	r2, #0
 8008238:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800823a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800823e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	785b      	ldrb	r3, [r3, #1]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d16d      	bne.n	8008326 <USB_EPStartXfer+0x49c>
 800824a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800824e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	61bb      	str	r3, [r7, #24]
 8008256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800825a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008264:	b29b      	uxth	r3, r3
 8008266:	461a      	mov	r2, r3
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	4413      	add	r3, r2
 800826c:	61bb      	str	r3, [r7, #24]
 800826e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	00da      	lsls	r2, r3, #3
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	4413      	add	r3, r2
 8008280:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008284:	617b      	str	r3, [r7, #20]
 8008286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800828a:	2b3e      	cmp	r3, #62	; 0x3e
 800828c:	d91c      	bls.n	80082c8 <USB_EPStartXfer+0x43e>
 800828e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008292:	095b      	lsrs	r3, r3, #5
 8008294:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800829c:	f003 031f 	and.w	r3, r3, #31
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d104      	bne.n	80082ae <USB_EPStartXfer+0x424>
 80082a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082a8:	3b01      	subs	r3, #1
 80082aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80082ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	029b      	lsls	r3, r3, #10
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	801a      	strh	r2, [r3, #0]
 80082c6:	e059      	b.n	800837c <USB_EPStartXfer+0x4f2>
 80082c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d112      	bne.n	80082f6 <USB_EPStartXfer+0x46c>
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	881b      	ldrh	r3, [r3, #0]
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082da:	b29a      	uxth	r2, r3
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	801a      	strh	r2, [r3, #0]
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	881b      	ldrh	r3, [r3, #0]
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	801a      	strh	r2, [r3, #0]
 80082f4:	e042      	b.n	800837c <USB_EPStartXfer+0x4f2>
 80082f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082fa:	085b      	lsrs	r3, r3, #1
 80082fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008304:	f003 0301 	and.w	r3, r3, #1
 8008308:	2b00      	cmp	r3, #0
 800830a:	d004      	beq.n	8008316 <USB_EPStartXfer+0x48c>
 800830c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008310:	3301      	adds	r3, #1
 8008312:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800831a:	b29b      	uxth	r3, r3
 800831c:	029b      	lsls	r3, r3, #10
 800831e:	b29a      	uxth	r2, r3
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	801a      	strh	r2, [r3, #0]
 8008324:	e02a      	b.n	800837c <USB_EPStartXfer+0x4f2>
 8008326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800832a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	785b      	ldrb	r3, [r3, #1]
 8008332:	2b01      	cmp	r3, #1
 8008334:	d122      	bne.n	800837c <USB_EPStartXfer+0x4f2>
 8008336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800833a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	623b      	str	r3, [r7, #32]
 8008342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008346:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008350:	b29b      	uxth	r3, r3
 8008352:	461a      	mov	r2, r3
 8008354:	6a3b      	ldr	r3, [r7, #32]
 8008356:	4413      	add	r3, r2
 8008358:	623b      	str	r3, [r7, #32]
 800835a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800835e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	00da      	lsls	r2, r3, #3
 8008368:	6a3b      	ldr	r3, [r7, #32]
 800836a:	4413      	add	r3, r2
 800836c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008370:	61fb      	str	r3, [r7, #28]
 8008372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008376:	b29a      	uxth	r2, r3
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800837c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	891b      	ldrh	r3, [r3, #8]
 8008388:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800838c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	6959      	ldr	r1, [r3, #20]
 8008398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800839c:	b29b      	uxth	r3, r3
 800839e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80083a2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80083a6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80083aa:	6800      	ldr	r0, [r0, #0]
 80083ac:	f001 f9dd 	bl	800976a <USB_WritePMA>
 80083b0:	e3c6      	b.n	8008b40 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80083b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	785b      	ldrb	r3, [r3, #1]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d16d      	bne.n	800849e <USB_EPStartXfer+0x614>
 80083c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80083ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083dc:	b29b      	uxth	r3, r3
 80083de:	461a      	mov	r2, r3
 80083e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083e2:	4413      	add	r3, r2
 80083e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80083e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	00da      	lsls	r2, r3, #3
 80083f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083f6:	4413      	add	r3, r2
 80083f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80083fc:	647b      	str	r3, [r7, #68]	; 0x44
 80083fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008402:	2b3e      	cmp	r3, #62	; 0x3e
 8008404:	d91c      	bls.n	8008440 <USB_EPStartXfer+0x5b6>
 8008406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800840a:	095b      	lsrs	r3, r3, #5
 800840c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008414:	f003 031f 	and.w	r3, r3, #31
 8008418:	2b00      	cmp	r3, #0
 800841a:	d104      	bne.n	8008426 <USB_EPStartXfer+0x59c>
 800841c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008420:	3b01      	subs	r3, #1
 8008422:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008426:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800842a:	b29b      	uxth	r3, r3
 800842c:	029b      	lsls	r3, r3, #10
 800842e:	b29b      	uxth	r3, r3
 8008430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008438:	b29a      	uxth	r2, r3
 800843a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800843c:	801a      	strh	r2, [r3, #0]
 800843e:	e059      	b.n	80084f4 <USB_EPStartXfer+0x66a>
 8008440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008444:	2b00      	cmp	r3, #0
 8008446:	d112      	bne.n	800846e <USB_EPStartXfer+0x5e4>
 8008448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	b29b      	uxth	r3, r3
 800844e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008452:	b29a      	uxth	r2, r3
 8008454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008456:	801a      	strh	r2, [r3, #0]
 8008458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800845a:	881b      	ldrh	r3, [r3, #0]
 800845c:	b29b      	uxth	r3, r3
 800845e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008466:	b29a      	uxth	r2, r3
 8008468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800846a:	801a      	strh	r2, [r3, #0]
 800846c:	e042      	b.n	80084f4 <USB_EPStartXfer+0x66a>
 800846e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008472:	085b      	lsrs	r3, r3, #1
 8008474:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800847c:	f003 0301 	and.w	r3, r3, #1
 8008480:	2b00      	cmp	r3, #0
 8008482:	d004      	beq.n	800848e <USB_EPStartXfer+0x604>
 8008484:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008488:	3301      	adds	r3, #1
 800848a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800848e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008492:	b29b      	uxth	r3, r3
 8008494:	029b      	lsls	r3, r3, #10
 8008496:	b29a      	uxth	r2, r3
 8008498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800849a:	801a      	strh	r2, [r3, #0]
 800849c:	e02a      	b.n	80084f4 <USB_EPStartXfer+0x66a>
 800849e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	785b      	ldrb	r3, [r3, #1]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d122      	bne.n	80084f4 <USB_EPStartXfer+0x66a>
 80084ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	653b      	str	r3, [r7, #80]	; 0x50
 80084ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	461a      	mov	r2, r3
 80084cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084ce:	4413      	add	r3, r2
 80084d0:	653b      	str	r3, [r7, #80]	; 0x50
 80084d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	00da      	lsls	r2, r3, #3
 80084e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084e2:	4413      	add	r3, r2
 80084e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80084e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80084f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	891b      	ldrh	r3, [r3, #8]
 8008500:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	6959      	ldr	r1, [r3, #20]
 8008510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008514:	b29b      	uxth	r3, r3
 8008516:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800851a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800851e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008522:	6800      	ldr	r0, [r0, #0]
 8008524:	f001 f921 	bl	800976a <USB_WritePMA>
            ep->xfer_buff += len;
 8008528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800852c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	695a      	ldr	r2, [r3, #20]
 8008534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008538:	441a      	add	r2, r3
 800853a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800853e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800854a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6a1a      	ldr	r2, [r3, #32]
 8008552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	429a      	cmp	r2, r3
 8008560:	d90f      	bls.n	8008582 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8008562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6a1a      	ldr	r2, [r3, #32]
 800856e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008572:	1ad2      	subs	r2, r2, r3
 8008574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	621a      	str	r2, [r3, #32]
 8008580:	e00e      	b.n	80085a0 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8008582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008596:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2200      	movs	r2, #0
 800859e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80085a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	643b      	str	r3, [r7, #64]	; 0x40
 80085ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	785b      	ldrb	r3, [r3, #1]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d16d      	bne.n	8008698 <USB_EPStartXfer+0x80e>
 80085bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80085c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	461a      	mov	r2, r3
 80085da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085dc:	4413      	add	r3, r2
 80085de:	63bb      	str	r3, [r7, #56]	; 0x38
 80085e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	00da      	lsls	r2, r3, #3
 80085ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f0:	4413      	add	r3, r2
 80085f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80085f6:	637b      	str	r3, [r7, #52]	; 0x34
 80085f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085fc:	2b3e      	cmp	r3, #62	; 0x3e
 80085fe:	d91c      	bls.n	800863a <USB_EPStartXfer+0x7b0>
 8008600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008604:	095b      	lsrs	r3, r3, #5
 8008606:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800860a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800860e:	f003 031f 	and.w	r3, r3, #31
 8008612:	2b00      	cmp	r3, #0
 8008614:	d104      	bne.n	8008620 <USB_EPStartXfer+0x796>
 8008616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800861a:	3b01      	subs	r3, #1
 800861c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008624:	b29b      	uxth	r3, r3
 8008626:	029b      	lsls	r3, r3, #10
 8008628:	b29b      	uxth	r3, r3
 800862a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800862e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008632:	b29a      	uxth	r2, r3
 8008634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008636:	801a      	strh	r2, [r3, #0]
 8008638:	e053      	b.n	80086e2 <USB_EPStartXfer+0x858>
 800863a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800863e:	2b00      	cmp	r3, #0
 8008640:	d112      	bne.n	8008668 <USB_EPStartXfer+0x7de>
 8008642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	b29b      	uxth	r3, r3
 8008648:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800864c:	b29a      	uxth	r2, r3
 800864e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008650:	801a      	strh	r2, [r3, #0]
 8008652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008654:	881b      	ldrh	r3, [r3, #0]
 8008656:	b29b      	uxth	r3, r3
 8008658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800865c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008660:	b29a      	uxth	r2, r3
 8008662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008664:	801a      	strh	r2, [r3, #0]
 8008666:	e03c      	b.n	80086e2 <USB_EPStartXfer+0x858>
 8008668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800866c:	085b      	lsrs	r3, r3, #1
 800866e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	2b00      	cmp	r3, #0
 800867c:	d004      	beq.n	8008688 <USB_EPStartXfer+0x7fe>
 800867e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008682:	3301      	adds	r3, #1
 8008684:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800868c:	b29b      	uxth	r3, r3
 800868e:	029b      	lsls	r3, r3, #10
 8008690:	b29a      	uxth	r2, r3
 8008692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008694:	801a      	strh	r2, [r3, #0]
 8008696:	e024      	b.n	80086e2 <USB_EPStartXfer+0x858>
 8008698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800869c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	785b      	ldrb	r3, [r3, #1]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d11c      	bne.n	80086e2 <USB_EPStartXfer+0x858>
 80086a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	461a      	mov	r2, r3
 80086ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086bc:	4413      	add	r3, r2
 80086be:	643b      	str	r3, [r7, #64]	; 0x40
 80086c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	00da      	lsls	r2, r3, #3
 80086ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086d0:	4413      	add	r3, r2
 80086d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80086d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086dc:	b29a      	uxth	r2, r3
 80086de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80086e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	895b      	ldrh	r3, [r3, #10]
 80086ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	6959      	ldr	r1, [r3, #20]
 80086fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008702:	b29b      	uxth	r3, r3
 8008704:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008708:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800870c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008710:	6800      	ldr	r0, [r0, #0]
 8008712:	f001 f82a 	bl	800976a <USB_WritePMA>
 8008716:	e213      	b.n	8008b40 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800871c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	6a1b      	ldr	r3, [r3, #32]
 8008724:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800872c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4413      	add	r3, r2
 8008742:	881b      	ldrh	r3, [r3, #0]
 8008744:	b29b      	uxth	r3, r3
 8008746:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800874a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800874e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008756:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	441a      	add	r2, r3
 800876c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800877c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008780:	b29b      	uxth	r3, r3
 8008782:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008788:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008794:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800879e:	b29b      	uxth	r3, r3
 80087a0:	461a      	mov	r2, r3
 80087a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087a4:	4413      	add	r3, r2
 80087a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	00da      	lsls	r2, r3, #3
 80087b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087b8:	4413      	add	r3, r2
 80087ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80087be:	65bb      	str	r3, [r7, #88]	; 0x58
 80087c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087c8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80087ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	891b      	ldrh	r3, [r3, #8]
 80087d6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6959      	ldr	r1, [r3, #20]
 80087e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80087f0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80087f4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80087f8:	6800      	ldr	r0, [r0, #0]
 80087fa:	f000 ffb6 	bl	800976a <USB_WritePMA>
 80087fe:	e19f      	b.n	8008b40 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	6a1a      	ldr	r2, [r3, #32]
 800880c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008810:	1ad2      	subs	r2, r2, r3
 8008812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800881e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008822:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800882c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	4413      	add	r3, r2
 8008838:	881b      	ldrh	r3, [r3, #0]
 800883a:	b29b      	uxth	r3, r3
 800883c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008840:	2b00      	cmp	r3, #0
 8008842:	f000 80bc 	beq.w	80089be <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800884a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	673b      	str	r3, [r7, #112]	; 0x70
 8008852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	785b      	ldrb	r3, [r3, #1]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d16d      	bne.n	800893e <USB_EPStartXfer+0xab4>
 8008862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008866:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	66bb      	str	r3, [r7, #104]	; 0x68
 800886e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008872:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800887c:	b29b      	uxth	r3, r3
 800887e:	461a      	mov	r2, r3
 8008880:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008882:	4413      	add	r3, r2
 8008884:	66bb      	str	r3, [r7, #104]	; 0x68
 8008886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800888a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	00da      	lsls	r2, r3, #3
 8008894:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008896:	4413      	add	r3, r2
 8008898:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800889c:	667b      	str	r3, [r7, #100]	; 0x64
 800889e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088a2:	2b3e      	cmp	r3, #62	; 0x3e
 80088a4:	d91c      	bls.n	80088e0 <USB_EPStartXfer+0xa56>
 80088a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088aa:	095b      	lsrs	r3, r3, #5
 80088ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80088b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088b4:	f003 031f 	and.w	r3, r3, #31
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d104      	bne.n	80088c6 <USB_EPStartXfer+0xa3c>
 80088bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80088c0:	3b01      	subs	r3, #1
 80088c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80088c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	029b      	lsls	r3, r3, #10
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088d8:	b29a      	uxth	r2, r3
 80088da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088dc:	801a      	strh	r2, [r3, #0]
 80088de:	e053      	b.n	8008988 <USB_EPStartXfer+0xafe>
 80088e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d112      	bne.n	800890e <USB_EPStartXfer+0xa84>
 80088e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088ea:	881b      	ldrh	r3, [r3, #0]
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088f6:	801a      	strh	r2, [r3, #0]
 80088f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008906:	b29a      	uxth	r2, r3
 8008908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800890a:	801a      	strh	r2, [r3, #0]
 800890c:	e03c      	b.n	8008988 <USB_EPStartXfer+0xafe>
 800890e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008912:	085b      	lsrs	r3, r3, #1
 8008914:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800891c:	f003 0301 	and.w	r3, r3, #1
 8008920:	2b00      	cmp	r3, #0
 8008922:	d004      	beq.n	800892e <USB_EPStartXfer+0xaa4>
 8008924:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008928:	3301      	adds	r3, #1
 800892a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800892e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008932:	b29b      	uxth	r3, r3
 8008934:	029b      	lsls	r3, r3, #10
 8008936:	b29a      	uxth	r2, r3
 8008938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800893a:	801a      	strh	r2, [r3, #0]
 800893c:	e024      	b.n	8008988 <USB_EPStartXfer+0xafe>
 800893e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	785b      	ldrb	r3, [r3, #1]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d11c      	bne.n	8008988 <USB_EPStartXfer+0xafe>
 800894e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008952:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800895c:	b29b      	uxth	r3, r3
 800895e:	461a      	mov	r2, r3
 8008960:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008962:	4413      	add	r3, r2
 8008964:	673b      	str	r3, [r7, #112]	; 0x70
 8008966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800896a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	00da      	lsls	r2, r3, #3
 8008974:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008976:	4413      	add	r3, r2
 8008978:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800897c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800897e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008982:	b29a      	uxth	r2, r3
 8008984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008986:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800898c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	895b      	ldrh	r3, [r3, #10]
 8008994:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800899c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	6959      	ldr	r1, [r3, #20]
 80089a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80089ae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80089b2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80089b6:	6800      	ldr	r0, [r0, #0]
 80089b8:	f000 fed7 	bl	800976a <USB_WritePMA>
 80089bc:	e0c0      	b.n	8008b40 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80089be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	785b      	ldrb	r3, [r3, #1]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d16d      	bne.n	8008aaa <USB_EPStartXfer+0xc20>
 80089ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80089da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	461a      	mov	r2, r3
 80089ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80089ee:	4413      	add	r3, r2
 80089f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80089f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	00da      	lsls	r2, r3, #3
 8008a00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a02:	4413      	add	r3, r2
 8008a04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008a08:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a0e:	2b3e      	cmp	r3, #62	; 0x3e
 8008a10:	d91c      	bls.n	8008a4c <USB_EPStartXfer+0xbc2>
 8008a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a16:	095b      	lsrs	r3, r3, #5
 8008a18:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a20:	f003 031f 	and.w	r3, r3, #31
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d104      	bne.n	8008a32 <USB_EPStartXfer+0xba8>
 8008a28:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008a32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	029b      	lsls	r3, r3, #10
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a48:	801a      	strh	r2, [r3, #0]
 8008a4a:	e05f      	b.n	8008b0c <USB_EPStartXfer+0xc82>
 8008a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d112      	bne.n	8008a7a <USB_EPStartXfer+0xbf0>
 8008a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a56:	881b      	ldrh	r3, [r3, #0]
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a62:	801a      	strh	r2, [r3, #0]
 8008a64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a66:	881b      	ldrh	r3, [r3, #0]
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a76:	801a      	strh	r2, [r3, #0]
 8008a78:	e048      	b.n	8008b0c <USB_EPStartXfer+0xc82>
 8008a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a7e:	085b      	lsrs	r3, r3, #1
 8008a80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a88:	f003 0301 	and.w	r3, r3, #1
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d004      	beq.n	8008a9a <USB_EPStartXfer+0xc10>
 8008a90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008a94:	3301      	adds	r3, #1
 8008a96:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008a9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	029b      	lsls	r3, r3, #10
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008aa6:	801a      	strh	r2, [r3, #0]
 8008aa8:	e030      	b.n	8008b0c <USB_EPStartXfer+0xc82>
 8008aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	785b      	ldrb	r3, [r3, #1]
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d128      	bne.n	8008b0c <USB_EPStartXfer+0xc82>
 8008aba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008abe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008acc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	461a      	mov	r2, r3
 8008ada:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ade:	4413      	add	r3, r2
 8008ae0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	00da      	lsls	r2, r3, #3
 8008af2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008af6:	4413      	add	r3, r2
 8008af8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008afc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b04:	b29a      	uxth	r2, r3
 8008b06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b0a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	891b      	ldrh	r3, [r3, #8]
 8008b18:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	6959      	ldr	r1, [r3, #20]
 8008b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008b32:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008b36:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008b3a:	6800      	ldr	r0, [r0, #0]
 8008b3c:	f000 fe15 	bl	800976a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b66:	817b      	strh	r3, [r7, #10]
 8008b68:	897b      	ldrh	r3, [r7, #10]
 8008b6a:	f083 0310 	eor.w	r3, r3, #16
 8008b6e:	817b      	strh	r3, [r7, #10]
 8008b70:	897b      	ldrh	r3, [r7, #10]
 8008b72:	f083 0320 	eor.w	r3, r3, #32
 8008b76:	817b      	strh	r3, [r7, #10]
 8008b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	441a      	add	r2, r3
 8008b92:	897b      	ldrh	r3, [r7, #10]
 8008b94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	8013      	strh	r3, [r2, #0]
 8008ba8:	f000 bc9f 	b.w	80094ea <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008bac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	7b1b      	ldrb	r3, [r3, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f040 80ae 	bne.w	8008d1a <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	699a      	ldr	r2, [r3, #24]
 8008bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d917      	bls.n	8008c0a <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8008bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	699a      	ldr	r2, [r3, #24]
 8008bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bfa:	1ad2      	subs	r2, r2, r3
 8008bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	619a      	str	r2, [r3, #24]
 8008c08:	e00e      	b.n	8008c28 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8008c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2200      	movs	r2, #0
 8008c26:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	461a      	mov	r2, r3
 8008c48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	00da      	lsls	r2, r3, #3
 8008c60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c64:	4413      	add	r3, r2
 8008c66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c72:	2b3e      	cmp	r3, #62	; 0x3e
 8008c74:	d91d      	bls.n	8008cb2 <USB_EPStartXfer+0xe28>
 8008c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c7a:	095b      	lsrs	r3, r3, #5
 8008c7c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c84:	f003 031f 	and.w	r3, r3, #31
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d104      	bne.n	8008c96 <USB_EPStartXfer+0xe0c>
 8008c8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008c90:	3b01      	subs	r3, #1
 8008c92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	029b      	lsls	r3, r3, #10
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cae:	801a      	strh	r2, [r3, #0]
 8008cb0:	e3e1      	b.n	8009476 <USB_EPStartXfer+0x15ec>
 8008cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d116      	bne.n	8008ce8 <USB_EPStartXfer+0xe5e>
 8008cba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cbe:	881b      	ldrh	r3, [r3, #0]
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ccc:	801a      	strh	r2, [r3, #0]
 8008cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cd2:	881b      	ldrh	r3, [r3, #0]
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ce4:	801a      	strh	r2, [r3, #0]
 8008ce6:	e3c6      	b.n	8009476 <USB_EPStartXfer+0x15ec>
 8008ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cec:	085b      	lsrs	r3, r3, #1
 8008cee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cf6:	f003 0301 	and.w	r3, r3, #1
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d004      	beq.n	8008d08 <USB_EPStartXfer+0xe7e>
 8008cfe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d02:	3301      	adds	r3, #1
 8008d04:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	029b      	lsls	r3, r3, #10
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d16:	801a      	strh	r2, [r3, #0]
 8008d18:	e3ad      	b.n	8009476 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	78db      	ldrb	r3, [r3, #3]
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	f040 8200 	bne.w	800912c <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	785b      	ldrb	r3, [r3, #1]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f040 8091 	bne.w	8008e60 <USB_EPStartXfer+0xfd6>
 8008d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d62:	4413      	add	r3, r2
 8008d64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	00da      	lsls	r2, r3, #3
 8008d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d7a:	4413      	add	r3, r2
 8008d7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	2b3e      	cmp	r3, #62	; 0x3e
 8008d92:	d925      	bls.n	8008de0 <USB_EPStartXfer+0xf56>
 8008d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	095b      	lsrs	r3, r3, #5
 8008da2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008daa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	f003 031f 	and.w	r3, r3, #31
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d104      	bne.n	8008dc4 <USB_EPStartXfer+0xf3a>
 8008dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	029b      	lsls	r3, r3, #10
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ddc:	801a      	strh	r2, [r3, #0]
 8008dde:	e074      	b.n	8008eca <USB_EPStartXfer+0x1040>
 8008de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008de4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d116      	bne.n	8008e1e <USB_EPStartXfer+0xf94>
 8008df0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008df4:	881b      	ldrh	r3, [r3, #0]
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e02:	801a      	strh	r2, [r3, #0]
 8008e04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e08:	881b      	ldrh	r3, [r3, #0]
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e14:	b29a      	uxth	r2, r3
 8008e16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e1a:	801a      	strh	r2, [r3, #0]
 8008e1c:	e055      	b.n	8008eca <USB_EPStartXfer+0x1040>
 8008e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	085b      	lsrs	r3, r3, #1
 8008e2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	f003 0301 	and.w	r3, r3, #1
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d004      	beq.n	8008e4e <USB_EPStartXfer+0xfc4>
 8008e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e48:	3301      	adds	r3, #1
 8008e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	029b      	lsls	r3, r3, #10
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e5c:	801a      	strh	r2, [r3, #0]
 8008e5e:	e034      	b.n	8008eca <USB_EPStartXfer+0x1040>
 8008e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	785b      	ldrb	r3, [r3, #1]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d12c      	bne.n	8008eca <USB_EPStartXfer+0x1040>
 8008e70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	461a      	mov	r2, r3
 8008e90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e94:	4413      	add	r3, r2
 8008e96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	00da      	lsls	r2, r3, #3
 8008ea8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008eac:	4413      	add	r3, r2
 8008eae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008ec8:	801a      	strh	r2, [r3, #0]
 8008eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ece:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008edc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	785b      	ldrb	r3, [r3, #1]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f040 8091 	bne.w	800900c <USB_EPStartXfer+0x1182>
 8008eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008efc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	461a      	mov	r2, r3
 8008f0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f0e:	4413      	add	r3, r2
 8008f10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	00da      	lsls	r2, r3, #3
 8008f22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f26:	4413      	add	r3, r2
 8008f28:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008f2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	2b3e      	cmp	r3, #62	; 0x3e
 8008f3e:	d925      	bls.n	8008f8c <USB_EPStartXfer+0x1102>
 8008f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	095b      	lsrs	r3, r3, #5
 8008f4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	f003 031f 	and.w	r3, r3, #31
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d104      	bne.n	8008f70 <USB_EPStartXfer+0x10e6>
 8008f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	029b      	lsls	r3, r3, #10
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f88:	801a      	strh	r2, [r3, #0]
 8008f8a:	e06d      	b.n	8009068 <USB_EPStartXfer+0x11de>
 8008f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d116      	bne.n	8008fca <USB_EPStartXfer+0x1140>
 8008f9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008fa0:	881b      	ldrh	r3, [r3, #0]
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008fae:	801a      	strh	r2, [r3, #0]
 8008fb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008fb4:	881b      	ldrh	r3, [r3, #0]
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008fc6:	801a      	strh	r2, [r3, #0]
 8008fc8:	e04e      	b.n	8009068 <USB_EPStartXfer+0x11de>
 8008fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	085b      	lsrs	r3, r3, #1
 8008fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	f003 0301 	and.w	r3, r3, #1
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d004      	beq.n	8008ffa <USB_EPStartXfer+0x1170>
 8008ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	029b      	lsls	r3, r3, #10
 8009002:	b29a      	uxth	r2, r3
 8009004:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009008:	801a      	strh	r2, [r3, #0]
 800900a:	e02d      	b.n	8009068 <USB_EPStartXfer+0x11de>
 800900c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	785b      	ldrb	r3, [r3, #1]
 8009018:	2b01      	cmp	r3, #1
 800901a:	d125      	bne.n	8009068 <USB_EPStartXfer+0x11de>
 800901c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009020:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800902a:	b29b      	uxth	r3, r3
 800902c:	461a      	mov	r2, r3
 800902e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009032:	4413      	add	r3, r2
 8009034:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800903c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	00da      	lsls	r2, r3, #3
 8009046:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800904a:	4413      	add	r3, r2
 800904c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009050:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009058:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	b29a      	uxth	r2, r3
 8009062:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009066:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800906c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	69db      	ldr	r3, [r3, #28]
 8009074:	2b00      	cmp	r3, #0
 8009076:	f000 81fe 	beq.w	8009476 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800907a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800907e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	4413      	add	r3, r2
 8009094:	881b      	ldrh	r3, [r3, #0]
 8009096:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800909a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800909e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d005      	beq.n	80090b2 <USB_EPStartXfer+0x1228>
 80090a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80090aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10d      	bne.n	80090ce <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80090b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80090b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f040 81db 	bne.w	8009476 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80090c0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80090c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f040 81d4 	bne.w	8009476 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80090ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	4413      	add	r3, r2
 80090e8:	881b      	ldrh	r3, [r3, #0]
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090f4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80090f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	441a      	add	r2, r3
 8009112:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800911a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800911e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009122:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009126:	b29b      	uxth	r3, r3
 8009128:	8013      	strh	r3, [r2, #0]
 800912a:	e1a4      	b.n	8009476 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800912c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	78db      	ldrb	r3, [r3, #3]
 8009138:	2b01      	cmp	r3, #1
 800913a:	f040 819a 	bne.w	8009472 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800913e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	699a      	ldr	r2, [r3, #24]
 800914a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800914e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	429a      	cmp	r2, r3
 8009158:	d917      	bls.n	800918a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800915a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800915e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800916a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800916e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	699a      	ldr	r2, [r3, #24]
 8009176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800917a:	1ad2      	subs	r2, r2, r3
 800917c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	619a      	str	r2, [r3, #24]
 8009188:	e00e      	b.n	80091a8 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800918a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800918e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	699b      	ldr	r3, [r3, #24]
 8009196:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800919a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800919e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2200      	movs	r2, #0
 80091a6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80091a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	785b      	ldrb	r3, [r3, #1]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d178      	bne.n	80092aa <USB_EPStartXfer+0x1420>
 80091b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80091c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	461a      	mov	r2, r3
 80091d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80091dc:	4413      	add	r3, r2
 80091de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80091e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	00da      	lsls	r2, r3, #3
 80091f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80091f4:	4413      	add	r3, r2
 80091f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80091fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80091fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009202:	2b3e      	cmp	r3, #62	; 0x3e
 8009204:	d91d      	bls.n	8009242 <USB_EPStartXfer+0x13b8>
 8009206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800920a:	095b      	lsrs	r3, r3, #5
 800920c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009214:	f003 031f 	and.w	r3, r3, #31
 8009218:	2b00      	cmp	r3, #0
 800921a:	d104      	bne.n	8009226 <USB_EPStartXfer+0x139c>
 800921c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009220:	3b01      	subs	r3, #1
 8009222:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800922a:	b29b      	uxth	r3, r3
 800922c:	029b      	lsls	r3, r3, #10
 800922e:	b29b      	uxth	r3, r3
 8009230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009238:	b29a      	uxth	r2, r3
 800923a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800923e:	801a      	strh	r2, [r3, #0]
 8009240:	e064      	b.n	800930c <USB_EPStartXfer+0x1482>
 8009242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009246:	2b00      	cmp	r3, #0
 8009248:	d116      	bne.n	8009278 <USB_EPStartXfer+0x13ee>
 800924a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800924e:	881b      	ldrh	r3, [r3, #0]
 8009250:	b29b      	uxth	r3, r3
 8009252:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009256:	b29a      	uxth	r2, r3
 8009258:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800925c:	801a      	strh	r2, [r3, #0]
 800925e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009262:	881b      	ldrh	r3, [r3, #0]
 8009264:	b29b      	uxth	r3, r3
 8009266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800926a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800926e:	b29a      	uxth	r2, r3
 8009270:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009274:	801a      	strh	r2, [r3, #0]
 8009276:	e049      	b.n	800930c <USB_EPStartXfer+0x1482>
 8009278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800927c:	085b      	lsrs	r3, r3, #1
 800927e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009282:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009286:	f003 0301 	and.w	r3, r3, #1
 800928a:	2b00      	cmp	r3, #0
 800928c:	d004      	beq.n	8009298 <USB_EPStartXfer+0x140e>
 800928e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009292:	3301      	adds	r3, #1
 8009294:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800929c:	b29b      	uxth	r3, r3
 800929e:	029b      	lsls	r3, r3, #10
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092a6:	801a      	strh	r2, [r3, #0]
 80092a8:	e030      	b.n	800930c <USB_EPStartXfer+0x1482>
 80092aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	785b      	ldrb	r3, [r3, #1]
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d128      	bne.n	800930c <USB_EPStartXfer+0x1482>
 80092ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80092c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	461a      	mov	r2, r3
 80092da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80092de:	4413      	add	r3, r2
 80092e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80092e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	00da      	lsls	r2, r3, #3
 80092f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80092f6:	4413      	add	r3, r2
 80092f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80092fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009304:	b29a      	uxth	r2, r3
 8009306:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800930a:	801a      	strh	r2, [r3, #0]
 800930c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009310:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800931a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800931e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	785b      	ldrb	r3, [r3, #1]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d178      	bne.n	800941c <USB_EPStartXfer+0x1592>
 800932a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800932e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800933c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009346:	b29b      	uxth	r3, r3
 8009348:	461a      	mov	r2, r3
 800934a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800934e:	4413      	add	r3, r2
 8009350:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	00da      	lsls	r2, r3, #3
 8009362:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009366:	4413      	add	r3, r2
 8009368:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800936c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009374:	2b3e      	cmp	r3, #62	; 0x3e
 8009376:	d91d      	bls.n	80093b4 <USB_EPStartXfer+0x152a>
 8009378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800937c:	095b      	lsrs	r3, r3, #5
 800937e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009386:	f003 031f 	and.w	r3, r3, #31
 800938a:	2b00      	cmp	r3, #0
 800938c:	d104      	bne.n	8009398 <USB_EPStartXfer+0x150e>
 800938e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009392:	3b01      	subs	r3, #1
 8009394:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009398:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800939c:	b29b      	uxth	r3, r3
 800939e:	029b      	lsls	r3, r3, #10
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80093b0:	801a      	strh	r2, [r3, #0]
 80093b2:	e060      	b.n	8009476 <USB_EPStartXfer+0x15ec>
 80093b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d116      	bne.n	80093ea <USB_EPStartXfer+0x1560>
 80093bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80093c0:	881b      	ldrh	r3, [r3, #0]
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80093ce:	801a      	strh	r2, [r3, #0]
 80093d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80093d4:	881b      	ldrh	r3, [r3, #0]
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093e0:	b29a      	uxth	r2, r3
 80093e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80093e6:	801a      	strh	r2, [r3, #0]
 80093e8:	e045      	b.n	8009476 <USB_EPStartXfer+0x15ec>
 80093ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093ee:	085b      	lsrs	r3, r3, #1
 80093f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80093f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093f8:	f003 0301 	and.w	r3, r3, #1
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d004      	beq.n	800940a <USB_EPStartXfer+0x1580>
 8009400:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009404:	3301      	adds	r3, #1
 8009406:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800940a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800940e:	b29b      	uxth	r3, r3
 8009410:	029b      	lsls	r3, r3, #10
 8009412:	b29a      	uxth	r2, r3
 8009414:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009418:	801a      	strh	r2, [r3, #0]
 800941a:	e02c      	b.n	8009476 <USB_EPStartXfer+0x15ec>
 800941c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	785b      	ldrb	r3, [r3, #1]
 8009428:	2b01      	cmp	r3, #1
 800942a:	d124      	bne.n	8009476 <USB_EPStartXfer+0x15ec>
 800942c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009430:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800943a:	b29b      	uxth	r3, r3
 800943c:	461a      	mov	r2, r3
 800943e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009442:	4413      	add	r3, r2
 8009444:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800944c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	00da      	lsls	r2, r3, #3
 8009456:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800945a:	4413      	add	r3, r2
 800945c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009460:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009468:	b29a      	uxth	r2, r3
 800946a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800946e:	801a      	strh	r2, [r3, #0]
 8009470:	e001      	b.n	8009476 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e03a      	b.n	80094ec <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800947a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	4413      	add	r3, r2
 8009490:	881b      	ldrh	r3, [r3, #0]
 8009492:	b29b      	uxth	r3, r3
 8009494:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800949c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80094a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80094a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80094a8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80094ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80094b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80094b4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80094b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	441a      	add	r2, r3
 80094d2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80094d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80094f6:	b480      	push	{r7}
 80094f8:	b085      	sub	sp, #20
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
 80094fe:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	785b      	ldrb	r3, [r3, #1]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d020      	beq.n	800954a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4413      	add	r3, r2
 8009512:	881b      	ldrh	r3, [r3, #0]
 8009514:	b29b      	uxth	r3, r3
 8009516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800951a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800951e:	81bb      	strh	r3, [r7, #12]
 8009520:	89bb      	ldrh	r3, [r7, #12]
 8009522:	f083 0310 	eor.w	r3, r3, #16
 8009526:	81bb      	strh	r3, [r7, #12]
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	441a      	add	r2, r3
 8009532:	89bb      	ldrh	r3, [r7, #12]
 8009534:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009538:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800953c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009544:	b29b      	uxth	r3, r3
 8009546:	8013      	strh	r3, [r2, #0]
 8009548:	e01f      	b.n	800958a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4413      	add	r3, r2
 8009554:	881b      	ldrh	r3, [r3, #0]
 8009556:	b29b      	uxth	r3, r3
 8009558:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800955c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009560:	81fb      	strh	r3, [r7, #14]
 8009562:	89fb      	ldrh	r3, [r7, #14]
 8009564:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009568:	81fb      	strh	r3, [r7, #14]
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	441a      	add	r2, r3
 8009574:	89fb      	ldrh	r3, [r7, #14]
 8009576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800957a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800957e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009586:	b29b      	uxth	r3, r3
 8009588:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009598:	b480      	push	{r7}
 800959a:	b087      	sub	sp, #28
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	7b1b      	ldrb	r3, [r3, #12]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f040 809d 	bne.w	80096e6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	785b      	ldrb	r3, [r3, #1]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d04c      	beq.n	800964e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4413      	add	r3, r2
 80095be:	881b      	ldrh	r3, [r3, #0]
 80095c0:	823b      	strh	r3, [r7, #16]
 80095c2:	8a3b      	ldrh	r3, [r7, #16]
 80095c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d01b      	beq.n	8009604 <USB_EPClearStall+0x6c>
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	4413      	add	r3, r2
 80095d6:	881b      	ldrh	r3, [r3, #0]
 80095d8:	b29b      	uxth	r3, r3
 80095da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095e2:	81fb      	strh	r3, [r7, #14]
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	441a      	add	r2, r3
 80095ee:	89fb      	ldrh	r3, [r7, #14]
 80095f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009600:	b29b      	uxth	r3, r3
 8009602:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	78db      	ldrb	r3, [r3, #3]
 8009608:	2b01      	cmp	r3, #1
 800960a:	d06c      	beq.n	80096e6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	4413      	add	r3, r2
 8009616:	881b      	ldrh	r3, [r3, #0]
 8009618:	b29b      	uxth	r3, r3
 800961a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800961e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009622:	81bb      	strh	r3, [r7, #12]
 8009624:	89bb      	ldrh	r3, [r7, #12]
 8009626:	f083 0320 	eor.w	r3, r3, #32
 800962a:	81bb      	strh	r3, [r7, #12]
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	441a      	add	r2, r3
 8009636:	89bb      	ldrh	r3, [r7, #12]
 8009638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800963c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009648:	b29b      	uxth	r3, r3
 800964a:	8013      	strh	r3, [r2, #0]
 800964c:	e04b      	b.n	80096e6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	4413      	add	r3, r2
 8009658:	881b      	ldrh	r3, [r3, #0]
 800965a:	82fb      	strh	r3, [r7, #22]
 800965c:	8afb      	ldrh	r3, [r7, #22]
 800965e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d01b      	beq.n	800969e <USB_EPClearStall+0x106>
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	4413      	add	r3, r2
 8009670:	881b      	ldrh	r3, [r3, #0]
 8009672:	b29b      	uxth	r3, r3
 8009674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800967c:	82bb      	strh	r3, [r7, #20]
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	441a      	add	r2, r3
 8009688:	8abb      	ldrh	r3, [r7, #20]
 800968a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800968e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009692:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800969a:	b29b      	uxth	r3, r3
 800969c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	4413      	add	r3, r2
 80096a8:	881b      	ldrh	r3, [r3, #0]
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096b4:	827b      	strh	r3, [r7, #18]
 80096b6:	8a7b      	ldrh	r3, [r7, #18]
 80096b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80096bc:	827b      	strh	r3, [r7, #18]
 80096be:	8a7b      	ldrh	r3, [r7, #18]
 80096c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80096c4:	827b      	strh	r3, [r7, #18]
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	441a      	add	r2, r3
 80096d0:	8a7b      	ldrh	r3, [r7, #18]
 80096d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	371c      	adds	r7, #28
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	460b      	mov	r3, r1
 80096fe:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009700:	78fb      	ldrb	r3, [r7, #3]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d103      	bne.n	800970e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2280      	movs	r2, #128	; 0x80
 800970a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800972a:	b29b      	uxth	r3, r3
 800972c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009734:	b29a      	uxth	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	370c      	adds	r7, #12
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr

0800974a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800974a:	b480      	push	{r7}
 800974c:	b085      	sub	sp, #20
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009758:	b29b      	uxth	r3, r3
 800975a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800975c:	68fb      	ldr	r3, [r7, #12]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3714      	adds	r7, #20
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr

0800976a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800976a:	b480      	push	{r7}
 800976c:	b08b      	sub	sp, #44	; 0x2c
 800976e:	af00      	add	r7, sp, #0
 8009770:	60f8      	str	r0, [r7, #12]
 8009772:	60b9      	str	r1, [r7, #8]
 8009774:	4611      	mov	r1, r2
 8009776:	461a      	mov	r2, r3
 8009778:	460b      	mov	r3, r1
 800977a:	80fb      	strh	r3, [r7, #6]
 800977c:	4613      	mov	r3, r2
 800977e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009780:	88bb      	ldrh	r3, [r7, #4]
 8009782:	3301      	adds	r3, #1
 8009784:	085b      	lsrs	r3, r3, #1
 8009786:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009790:	88fa      	ldrh	r2, [r7, #6]
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	4413      	add	r3, r2
 8009796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800979a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	627b      	str	r3, [r7, #36]	; 0x24
 80097a0:	e01b      	b.n	80097da <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	3301      	adds	r3, #1
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	021b      	lsls	r3, r3, #8
 80097b0:	b21a      	sxth	r2, r3
 80097b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	b21b      	sxth	r3, r3
 80097ba:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80097bc:	6a3b      	ldr	r3, [r7, #32]
 80097be:	8a7a      	ldrh	r2, [r7, #18]
 80097c0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80097c2:	6a3b      	ldr	r3, [r7, #32]
 80097c4:	3302      	adds	r3, #2
 80097c6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	3301      	adds	r3, #1
 80097cc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	3301      	adds	r3, #1
 80097d2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80097d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d6:	3b01      	subs	r3, #1
 80097d8:	627b      	str	r3, [r7, #36]	; 0x24
 80097da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d1e0      	bne.n	80097a2 <USB_WritePMA+0x38>
  }
}
 80097e0:	bf00      	nop
 80097e2:	bf00      	nop
 80097e4:	372c      	adds	r7, #44	; 0x2c
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b08b      	sub	sp, #44	; 0x2c
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	60f8      	str	r0, [r7, #12]
 80097f6:	60b9      	str	r1, [r7, #8]
 80097f8:	4611      	mov	r1, r2
 80097fa:	461a      	mov	r2, r3
 80097fc:	460b      	mov	r3, r1
 80097fe:	80fb      	strh	r3, [r7, #6]
 8009800:	4613      	mov	r3, r2
 8009802:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009804:	88bb      	ldrh	r3, [r7, #4]
 8009806:	085b      	lsrs	r3, r3, #1
 8009808:	b29b      	uxth	r3, r3
 800980a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009814:	88fa      	ldrh	r2, [r7, #6]
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	4413      	add	r3, r2
 800981a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800981e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	627b      	str	r3, [r7, #36]	; 0x24
 8009824:	e018      	b.n	8009858 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009826:	6a3b      	ldr	r3, [r7, #32]
 8009828:	881b      	ldrh	r3, [r3, #0]
 800982a:	b29b      	uxth	r3, r3
 800982c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800982e:	6a3b      	ldr	r3, [r7, #32]
 8009830:	3302      	adds	r3, #2
 8009832:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	b2da      	uxtb	r2, r3
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	3301      	adds	r3, #1
 8009840:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	0a1b      	lsrs	r3, r3, #8
 8009846:	b2da      	uxtb	r2, r3
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	3301      	adds	r3, #1
 8009850:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009854:	3b01      	subs	r3, #1
 8009856:	627b      	str	r3, [r7, #36]	; 0x24
 8009858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1e3      	bne.n	8009826 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800985e:	88bb      	ldrh	r3, [r7, #4]
 8009860:	f003 0301 	and.w	r3, r3, #1
 8009864:	b29b      	uxth	r3, r3
 8009866:	2b00      	cmp	r3, #0
 8009868:	d007      	beq.n	800987a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800986a:	6a3b      	ldr	r3, [r7, #32]
 800986c:	881b      	ldrh	r3, [r3, #0]
 800986e:	b29b      	uxth	r3, r3
 8009870:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	b2da      	uxtb	r2, r3
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	701a      	strb	r2, [r3, #0]
  }
}
 800987a:	bf00      	nop
 800987c:	372c      	adds	r7, #44	; 0x2c
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <VL53L0X_GetRangeStatusString>:
	return Status;
}

VL53L0X_Error VL53L0X_GetRangeStatusString(uint8_t RangeStatus,
	char *pRangeStatusString)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b084      	sub	sp, #16
 800988a:	af00      	add	r7, sp, #0
 800988c:	4603      	mov	r3, r0
 800988e:	6039      	str	r1, [r7, #0]
 8009890:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009892:	2300      	movs	r3, #0
 8009894:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_range_status_string(RangeStatus,
 8009896:	79fb      	ldrb	r3, [r7, #7]
 8009898:	6839      	ldr	r1, [r7, #0]
 800989a:	4618      	mov	r0, r3
 800989c:	f004 faaa 	bl	800ddf4 <VL53L0X_get_range_status_string>
 80098a0:	4603      	mov	r3, r0
 80098a2:	73fb      	strb	r3, [r7, #15]
		pRangeStatusString);

	LOG_FUNCTION_END(Status);
	return Status;
 80098a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <VL53L0X_GetPalErrorString>:

VL53L0X_Error VL53L0X_GetPalErrorString(VL53L0X_Error PalErrorCode,
	char *pPalErrorString)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	4603      	mov	r3, r0
 80098b8:	6039      	str	r1, [r7, #0]
 80098ba:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098bc:	2300      	movs	r3, #0
 80098be:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_pal_error_string(PalErrorCode, pPalErrorString);
 80098c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098c4:	6839      	ldr	r1, [r7, #0]
 80098c6:	4618      	mov	r0, r3
 80098c8:	f004 fb0e 	bl	800dee8 <VL53L0X_get_pal_error_string>
 80098cc:	4603      	mov	r3, r0
 80098ce:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80098d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b084      	sub	sp, #16
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098e6:	2300      	movs	r3, #0
 80098e8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80098ea:	6839      	ldr	r1, [r7, #0]
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f001 fba2 	bl	800b036 <VL53L0X_get_offset_calibration_data_micro_meter>
 80098f2:	4603      	mov	r3, r0
 80098f4:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80098f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
	...

08009904 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8009904:	b5b0      	push	{r4, r5, r7, lr}
 8009906:	b09e      	sub	sp, #120	; 0x78
 8009908:	af02      	add	r7, sp, #8
 800990a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800990c:	2300      	movs	r3, #0
 800990e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8009912:	f107 031c 	add.w	r3, r7, #28
 8009916:	2240      	movs	r2, #64	; 0x40
 8009918:	2100      	movs	r1, #0
 800991a:	4618      	mov	r0, r3
 800991c:	f00a fabe 	bl	8013e9c <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8009920:	2300      	movs	r3, #0
 8009922:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8009924:	2300      	movs	r3, #0
 8009926:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8009928:	2300      	movs	r3, #0
 800992a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800992e:	2300      	movs	r3, #0
 8009930:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8009932:	2300      	movs	r3, #0
 8009934:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8009936:	2300      	movs	r3, #0
 8009938:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800993a:	2300      	movs	r3, #0
 800993c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8009940:	2101      	movs	r1, #1
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f002 fabe 	bl	800bec4 <VL53L0X_get_info_from_device>
 8009948:	4603      	mov	r3, r0
 800994a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8009954:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800995c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8009960:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009964:	2b01      	cmp	r3, #1
 8009966:	d80d      	bhi.n	8009984 <VL53L0X_StaticInit+0x80>
 8009968:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800996c:	2b01      	cmp	r3, #1
 800996e:	d102      	bne.n	8009976 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8009970:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009972:	2b20      	cmp	r3, #32
 8009974:	d806      	bhi.n	8009984 <VL53L0X_StaticInit+0x80>
 8009976:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10e      	bne.n	800999c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800997e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009980:	2b0c      	cmp	r3, #12
 8009982:	d90b      	bls.n	800999c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8009984:	f107 0218 	add.w	r2, r7, #24
 8009988:	f107 0314 	add.w	r3, r7, #20
 800998c:	4619      	mov	r1, r3
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f001 fd50 	bl	800b434 <VL53L0X_perform_ref_spad_management>
 8009994:	4603      	mov	r3, r0
 8009996:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800999a:	e009      	b.n	80099b0 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800999c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099a0:	461a      	mov	r2, r3
 80099a2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f001 ff51 	bl	800b84c <VL53L0X_set_reference_spads>
 80099aa:	4603      	mov	r3, r0
 80099ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80099b0:	4b94      	ldr	r3, [pc, #592]	; (8009c04 <VL53L0X_StaticInit+0x300>)
 80099b2:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80099b4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d10f      	bne.n	80099dc <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80099c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80099c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d104      	bne.n	80099d8 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80099d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80099d6:	e001      	b.n	80099dc <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80099d8:	4b8a      	ldr	r3, [pc, #552]	; (8009c04 <VL53L0X_StaticInit+0x300>)
 80099da:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80099dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d106      	bne.n	80099f2 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80099e4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f003 fb8a 	bl	800d100 <VL53L0X_load_tuning_settings>
 80099ec:	4603      	mov	r3, r0
 80099ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80099f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10a      	bne.n	8009a10 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80099fa:	2300      	movs	r3, #0
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	2304      	movs	r3, #4
 8009a00:	2200      	movs	r2, #0
 8009a02:	2100      	movs	r1, #0
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f001 f941 	bl	800ac8c <VL53L0X_SetGpioConfig>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009a10:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d121      	bne.n	8009a5c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009a18:	2201      	movs	r2, #1
 8009a1a:	21ff      	movs	r1, #255	; 0xff
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f004 fde1 	bl	800e5e4 <VL53L0X_WrByte>
 8009a22:	4603      	mov	r3, r0
 8009a24:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8009a28:	f107 031a 	add.w	r3, r7, #26
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	2184      	movs	r1, #132	; 0x84
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f004 fe74 	bl	800e71e <VL53L0X_RdWord>
 8009a36:	4603      	mov	r3, r0
 8009a38:	461a      	mov	r2, r3
 8009a3a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009a44:	2200      	movs	r2, #0
 8009a46:	21ff      	movs	r1, #255	; 0xff
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f004 fdcb 	bl	800e5e4 <VL53L0X_WrByte>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	461a      	mov	r2, r3
 8009a52:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009a56:	4313      	orrs	r3, r2
 8009a58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009a5c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d105      	bne.n	8009a70 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8009a64:	8b7b      	ldrh	r3, [r7, #26]
 8009a66:	011b      	lsls	r3, r3, #4
 8009a68:	461a      	mov	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8009a70:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d108      	bne.n	8009a8a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8009a78:	f107 031c 	add.w	r3, r7, #28
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 f8c2 	bl	8009c08 <VL53L0X_GetDeviceParameters>
 8009a84:	4603      	mov	r3, r0
 8009a86:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8009a8a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d110      	bne.n	8009ab4 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8009a92:	f107 0319 	add.w	r3, r7, #25
 8009a96:	4619      	mov	r1, r3
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 f984 	bl	8009da6 <VL53L0X_GetFractionEnable>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8009aa4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d103      	bne.n	8009ab4 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8009aac:	7e7a      	ldrb	r2, [r7, #25]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8009ab4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d10e      	bne.n	8009ada <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f103 0410 	add.w	r4, r3, #16
 8009ac2:	f107 051c 	add.w	r5, r7, #28
 8009ac6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ac8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009aca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009acc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ace:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ad0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ad2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009ad6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8009ada:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d111      	bne.n	8009b06 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8009ae2:	f107 0319 	add.w	r3, r7, #25
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	2101      	movs	r1, #1
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f004 fdf8 	bl	800e6e0 <VL53L0X_RdByte>
 8009af0:	4603      	mov	r3, r0
 8009af2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8009af6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d103      	bne.n	8009b06 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8009afe:	7e7a      	ldrb	r2, [r7, #25]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8009b06:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d107      	bne.n	8009b1e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8009b0e:	2200      	movs	r2, #0
 8009b10:	2100      	movs	r1, #0
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f9a4 	bl	8009e60 <VL53L0X_SetSequenceStepEnable>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8009b1e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d107      	bne.n	8009b36 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8009b26:	2200      	movs	r2, #0
 8009b28:	2102      	movs	r1, #2
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 f998 	bl	8009e60 <VL53L0X_SetSequenceStepEnable>
 8009b30:	4603      	mov	r3, r0
 8009b32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8009b36:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d103      	bne.n	8009b46 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2203      	movs	r2, #3
 8009b42:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8009b46:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d109      	bne.n	8009b62 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8009b4e:	f107 0313 	add.w	r3, r7, #19
 8009b52:	461a      	mov	r2, r3
 8009b54:	2100      	movs	r1, #0
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f96a 	bl	8009e30 <VL53L0X_GetVcselPulsePeriod>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009b62:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d103      	bne.n	8009b72 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009b6a:	7cfa      	ldrb	r2, [r7, #19]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8009b72:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d109      	bne.n	8009b8e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8009b7a:	f107 0313 	add.w	r3, r7, #19
 8009b7e:	461a      	mov	r2, r3
 8009b80:	2101      	movs	r1, #1
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f954 	bl	8009e30 <VL53L0X_GetVcselPulsePeriod>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009b8e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d103      	bne.n	8009b9e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009b96:	7cfa      	ldrb	r2, [r7, #19]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8009b9e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d109      	bne.n	8009bba <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8009ba6:	f107 030c 	add.w	r3, r7, #12
 8009baa:	461a      	mov	r2, r3
 8009bac:	2103      	movs	r1, #3
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f002 ff0a 	bl	800c9c8 <get_sequence_step_timeout>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009bba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d103      	bne.n	8009bca <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8009bca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d109      	bne.n	8009be6 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8009bd2:	f107 030c 	add.w	r3, r7, #12
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	2104      	movs	r1, #4
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f002 fef4 	bl	800c9c8 <get_sequence_step_timeout>
 8009be0:	4603      	mov	r3, r0
 8009be2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009be6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d103      	bne.n	8009bf6 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009bf6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3770      	adds	r7, #112	; 0x70
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bdb0      	pop	{r4, r5, r7, pc}
 8009c02:	bf00      	nop
 8009c04:	20000014 	.word	0x20000014

08009c08 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c12:	2300      	movs	r3, #0
 8009c14:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	4619      	mov	r1, r3
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 f8b0 	bl	8009d80 <VL53L0X_GetDeviceMode>
 8009c20:	4603      	mov	r3, r0
 8009c22:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d107      	bne.n	8009c3c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	3308      	adds	r3, #8
 8009c30:	4619      	mov	r1, r3
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fa60 	bl	800a0f8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8009c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d102      	bne.n	8009c4a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	2200      	movs	r2, #0
 8009c48:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8009c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d107      	bne.n	8009c62 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	3310      	adds	r3, #16
 8009c56:	4619      	mov	r1, r3
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 fa96 	bl	800a18a <VL53L0X_GetXTalkCompensationRateMegaCps>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8009c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d107      	bne.n	8009c7a <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	3314      	adds	r3, #20
 8009c6e:	4619      	mov	r1, r3
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f7ff fe33 	bl	80098dc <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8009c76:	4603      	mov	r3, r0
 8009c78:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8009c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d134      	bne.n	8009cec <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009c82:	2300      	movs	r3, #0
 8009c84:	60bb      	str	r3, [r7, #8]
 8009c86:	e02a      	b.n	8009cde <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8009c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d12a      	bne.n	8009ce6 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	b299      	uxth	r1, r3
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	3308      	adds	r3, #8
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	683a      	ldr	r2, [r7, #0]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 fbb6 	bl	800a414 <VL53L0X_GetLimitCheckValue>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	461a      	mov	r2, r3
 8009cac:	7bfb      	ldrb	r3, [r7, #15]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8009cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d117      	bne.n	8009cea <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	b299      	uxth	r1, r3
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	3318      	adds	r3, #24
 8009cc2:	683a      	ldr	r2, [r7, #0]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 fb1d 	bl	800a308 <VL53L0X_GetLimitCheckEnable>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	7bfb      	ldrb	r3, [r7, #15]
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	60bb      	str	r3, [r7, #8]
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	2b05      	cmp	r3, #5
 8009ce2:	ddd1      	ble.n	8009c88 <VL53L0X_GetDeviceParameters+0x80>
 8009ce4:	e002      	b.n	8009cec <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8009ce6:	bf00      	nop
 8009ce8:	e000      	b.n	8009cec <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8009cea:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d107      	bne.n	8009d04 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	333c      	adds	r3, #60	; 0x3c
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 fc8e 	bl	800a61c <VL53L0X_GetWrapAroundCheckEnable>
 8009d00:	4603      	mov	r3, r0
 8009d02:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8009d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d107      	bne.n	8009d1c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	3304      	adds	r3, #4
 8009d10:	4619      	mov	r1, r3
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 f879 	bl	8009e0a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3710      	adds	r7, #16
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	460b      	mov	r3, r1
 8009d32:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d34:	2300      	movs	r3, #0
 8009d36:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8009d38:	78fb      	ldrb	r3, [r7, #3]
 8009d3a:	2b15      	cmp	r3, #21
 8009d3c:	bf8c      	ite	hi
 8009d3e:	2201      	movhi	r2, #1
 8009d40:	2200      	movls	r2, #0
 8009d42:	b2d2      	uxtb	r2, r2
 8009d44:	2a00      	cmp	r2, #0
 8009d46:	d10e      	bne.n	8009d66 <VL53L0X_SetDeviceMode+0x3e>
 8009d48:	2201      	movs	r2, #1
 8009d4a:	409a      	lsls	r2, r3
 8009d4c:	4b0b      	ldr	r3, [pc, #44]	; (8009d7c <VL53L0X_SetDeviceMode+0x54>)
 8009d4e:	4013      	ands	r3, r2
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	bf14      	ite	ne
 8009d54:	2301      	movne	r3, #1
 8009d56:	2300      	moveq	r3, #0
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d003      	beq.n	8009d66 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	78fa      	ldrb	r2, [r7, #3]
 8009d62:	741a      	strb	r2, [r3, #16]
		break;
 8009d64:	e001      	b.n	8009d6a <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8009d66:	23f8      	movs	r3, #248	; 0xf8
 8009d68:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3714      	adds	r7, #20
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr
 8009d7a:	bf00      	nop
 8009d7c:	0030000b 	.word	0x0030000b

08009d80 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	7c1a      	ldrb	r2, [r3, #16]
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3714      	adds	r7, #20
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr

08009da6 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b084      	sub	sp, #16
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
 8009dae:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009db0:	2300      	movs	r3, #0
 8009db2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	2109      	movs	r1, #9
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f004 fc91 	bl	800e6e0 <VL53L0X_RdByte>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d106      	bne.n	8009dd8 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	f003 0301 	and.w	r3, r3, #1
 8009dd2:	b2da      	uxtb	r2, r3
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009dee:	2300      	movs	r3, #0
 8009df0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8009df2:	6839      	ldr	r1, [r7, #0]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f002 fff1 	bl	800cddc <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8009dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3710      	adds	r7, #16
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b084      	sub	sp, #16
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
 8009e12:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e14:	2300      	movs	r3, #0
 8009e16:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8009e18:	6839      	ldr	r1, [r7, #0]
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f003 f8be 	bl	800cf9c <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8009e20:	4603      	mov	r3, r0
 8009e22:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8009e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b086      	sub	sp, #24
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	460b      	mov	r3, r1
 8009e3a:	607a      	str	r2, [r7, #4]
 8009e3c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8009e42:	7afb      	ldrb	r3, [r7, #11]
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	4619      	mov	r1, r3
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f002 ff90 	bl	800cd6e <VL53L0X_get_vcsel_pulse_period>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8009e52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3718      	adds	r7, #24
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
	...

08009e60 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b086      	sub	sp, #24
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	460b      	mov	r3, r1
 8009e6a:	70fb      	strb	r3, [r7, #3]
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e70:	2300      	movs	r3, #0
 8009e72:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009e74:	2300      	movs	r3, #0
 8009e76:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009e7c:	f107 030f 	add.w	r3, r7, #15
 8009e80:	461a      	mov	r2, r3
 8009e82:	2101      	movs	r1, #1
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f004 fc2b 	bl	800e6e0 <VL53L0X_RdByte>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8009e8e:	7bfb      	ldrb	r3, [r7, #15]
 8009e90:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8009e92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d15a      	bne.n	8009f50 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8009e9a:	78bb      	ldrb	r3, [r7, #2]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d12b      	bne.n	8009ef8 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8009ea0:	78fb      	ldrb	r3, [r7, #3]
 8009ea2:	2b04      	cmp	r3, #4
 8009ea4:	d825      	bhi.n	8009ef2 <VL53L0X_SetSequenceStepEnable+0x92>
 8009ea6:	a201      	add	r2, pc, #4	; (adr r2, 8009eac <VL53L0X_SetSequenceStepEnable+0x4c>)
 8009ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eac:	08009ec1 	.word	0x08009ec1
 8009eb0:	08009ecb 	.word	0x08009ecb
 8009eb4:	08009ed5 	.word	0x08009ed5
 8009eb8:	08009edf 	.word	0x08009edf
 8009ebc:	08009ee9 	.word	0x08009ee9
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8009ec0:	7dbb      	ldrb	r3, [r7, #22]
 8009ec2:	f043 0310 	orr.w	r3, r3, #16
 8009ec6:	75bb      	strb	r3, [r7, #22]
				break;
 8009ec8:	e043      	b.n	8009f52 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8009eca:	7dbb      	ldrb	r3, [r7, #22]
 8009ecc:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8009ed0:	75bb      	strb	r3, [r7, #22]
				break;
 8009ed2:	e03e      	b.n	8009f52 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8009ed4:	7dbb      	ldrb	r3, [r7, #22]
 8009ed6:	f043 0304 	orr.w	r3, r3, #4
 8009eda:	75bb      	strb	r3, [r7, #22]
				break;
 8009edc:	e039      	b.n	8009f52 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8009ede:	7dbb      	ldrb	r3, [r7, #22]
 8009ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ee4:	75bb      	strb	r3, [r7, #22]
				break;
 8009ee6:	e034      	b.n	8009f52 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8009ee8:	7dbb      	ldrb	r3, [r7, #22]
 8009eea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009eee:	75bb      	strb	r3, [r7, #22]
				break;
 8009ef0:	e02f      	b.n	8009f52 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009ef2:	23fc      	movs	r3, #252	; 0xfc
 8009ef4:	75fb      	strb	r3, [r7, #23]
 8009ef6:	e02c      	b.n	8009f52 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8009ef8:	78fb      	ldrb	r3, [r7, #3]
 8009efa:	2b04      	cmp	r3, #4
 8009efc:	d825      	bhi.n	8009f4a <VL53L0X_SetSequenceStepEnable+0xea>
 8009efe:	a201      	add	r2, pc, #4	; (adr r2, 8009f04 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8009f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f04:	08009f19 	.word	0x08009f19
 8009f08:	08009f23 	.word	0x08009f23
 8009f0c:	08009f2d 	.word	0x08009f2d
 8009f10:	08009f37 	.word	0x08009f37
 8009f14:	08009f41 	.word	0x08009f41
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8009f18:	7dbb      	ldrb	r3, [r7, #22]
 8009f1a:	f023 0310 	bic.w	r3, r3, #16
 8009f1e:	75bb      	strb	r3, [r7, #22]
				break;
 8009f20:	e017      	b.n	8009f52 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8009f22:	7dbb      	ldrb	r3, [r7, #22]
 8009f24:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8009f28:	75bb      	strb	r3, [r7, #22]
				break;
 8009f2a:	e012      	b.n	8009f52 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8009f2c:	7dbb      	ldrb	r3, [r7, #22]
 8009f2e:	f023 0304 	bic.w	r3, r3, #4
 8009f32:	75bb      	strb	r3, [r7, #22]
				break;
 8009f34:	e00d      	b.n	8009f52 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8009f36:	7dbb      	ldrb	r3, [r7, #22]
 8009f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f3c:	75bb      	strb	r3, [r7, #22]
				break;
 8009f3e:	e008      	b.n	8009f52 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8009f40:	7dbb      	ldrb	r3, [r7, #22]
 8009f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f46:	75bb      	strb	r3, [r7, #22]
				break;
 8009f48:	e003      	b.n	8009f52 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009f4a:	23fc      	movs	r3, #252	; 0xfc
 8009f4c:	75fb      	strb	r3, [r7, #23]
 8009f4e:	e000      	b.n	8009f52 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8009f50:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8009f52:	7bfb      	ldrb	r3, [r7, #15]
 8009f54:	7dba      	ldrb	r2, [r7, #22]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d01e      	beq.n	8009f98 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8009f5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d107      	bne.n	8009f72 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8009f62:	7dbb      	ldrb	r3, [r7, #22]
 8009f64:	461a      	mov	r2, r3
 8009f66:	2101      	movs	r1, #1
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f004 fb3b 	bl	800e5e4 <VL53L0X_WrByte>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8009f72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d103      	bne.n	8009f82 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	7dba      	ldrb	r2, [r7, #22]
 8009f7e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8009f82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d106      	bne.n	8009f98 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	695b      	ldr	r3, [r3, #20]
 8009f8e:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8009f90:	6939      	ldr	r1, [r7, #16]
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f7ff ff26 	bl	8009de4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8009f98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3718      	adds	r7, #24
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b087      	sub	sp, #28
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	607b      	str	r3, [r7, #4]
 8009fae:	460b      	mov	r3, r1
 8009fb0:	72fb      	strb	r3, [r7, #11]
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8009fc0:	7afb      	ldrb	r3, [r7, #11]
 8009fc2:	2b04      	cmp	r3, #4
 8009fc4:	d836      	bhi.n	800a034 <sequence_step_enabled+0x90>
 8009fc6:	a201      	add	r2, pc, #4	; (adr r2, 8009fcc <sequence_step_enabled+0x28>)
 8009fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fcc:	08009fe1 	.word	0x08009fe1
 8009fd0:	08009ff3 	.word	0x08009ff3
 8009fd4:	0800a005 	.word	0x0800a005
 8009fd8:	0800a017 	.word	0x0800a017
 8009fdc:	0800a029 	.word	0x0800a029
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8009fe0:	7abb      	ldrb	r3, [r7, #10]
 8009fe2:	111b      	asrs	r3, r3, #4
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	f003 0301 	and.w	r3, r3, #1
 8009fea:	b2da      	uxtb	r2, r3
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	701a      	strb	r2, [r3, #0]
		break;
 8009ff0:	e022      	b.n	800a038 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8009ff2:	7abb      	ldrb	r3, [r7, #10]
 8009ff4:	10db      	asrs	r3, r3, #3
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	f003 0301 	and.w	r3, r3, #1
 8009ffc:	b2da      	uxtb	r2, r3
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	701a      	strb	r2, [r3, #0]
		break;
 800a002:	e019      	b.n	800a038 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800a004:	7abb      	ldrb	r3, [r7, #10]
 800a006:	109b      	asrs	r3, r3, #2
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	f003 0301 	and.w	r3, r3, #1
 800a00e:	b2da      	uxtb	r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	701a      	strb	r2, [r3, #0]
		break;
 800a014:	e010      	b.n	800a038 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800a016:	7abb      	ldrb	r3, [r7, #10]
 800a018:	119b      	asrs	r3, r3, #6
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	f003 0301 	and.w	r3, r3, #1
 800a020:	b2da      	uxtb	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	701a      	strb	r2, [r3, #0]
		break;
 800a026:	e007      	b.n	800a038 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800a028:	7abb      	ldrb	r3, [r7, #10]
 800a02a:	09db      	lsrs	r3, r3, #7
 800a02c:	b2da      	uxtb	r2, r3
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	701a      	strb	r2, [r3, #0]
		break;
 800a032:	e001      	b.n	800a038 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a034:	23fc      	movs	r3, #252	; 0xfc
 800a036:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a038:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	371c      	adds	r7, #28
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a052:	2300      	movs	r3, #0
 800a054:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800a056:	2300      	movs	r3, #0
 800a058:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a05a:	f107 030e 	add.w	r3, r7, #14
 800a05e:	461a      	mov	r2, r3
 800a060:	2101      	movs	r1, #1
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f004 fb3c 	bl	800e6e0 <VL53L0X_RdByte>
 800a068:	4603      	mov	r3, r0
 800a06a:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800a06c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d107      	bne.n	800a084 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800a074:	7bba      	ldrb	r2, [r7, #14]
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	2100      	movs	r1, #0
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7ff ff92 	bl	8009fa4 <sequence_step_enabled>
 800a080:	4603      	mov	r3, r0
 800a082:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d108      	bne.n	800a09e <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800a08c:	7bba      	ldrb	r2, [r7, #14]
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	3302      	adds	r3, #2
 800a092:	2101      	movs	r1, #1
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f7ff ff85 	bl	8009fa4 <sequence_step_enabled>
 800a09a:	4603      	mov	r3, r0
 800a09c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a09e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d108      	bne.n	800a0b8 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800a0a6:	7bba      	ldrb	r2, [r7, #14]
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	2102      	movs	r1, #2
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f7ff ff78 	bl	8009fa4 <sequence_step_enabled>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a0b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d108      	bne.n	800a0d2 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800a0c0:	7bba      	ldrb	r2, [r7, #14]
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	3303      	adds	r3, #3
 800a0c6:	2103      	movs	r1, #3
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f7ff ff6b 	bl	8009fa4 <sequence_step_enabled>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a0d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d108      	bne.n	800a0ec <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800a0da:	7bba      	ldrb	r2, [r7, #14]
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	3304      	adds	r3, #4
 800a0e0:	2104      	movs	r1, #4
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f7ff ff5e 	bl	8009fa4 <sequence_step_enabled>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a0ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3710      	adds	r7, #16
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a102:	2300      	movs	r3, #0
 800a104:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800a106:	f107 030c 	add.w	r3, r7, #12
 800a10a:	461a      	mov	r2, r3
 800a10c:	21f8      	movs	r1, #248	; 0xf8
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f004 fb05 	bl	800e71e <VL53L0X_RdWord>
 800a114:	4603      	mov	r3, r0
 800a116:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800a118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d108      	bne.n	800a132 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800a120:	f107 0308 	add.w	r3, r7, #8
 800a124:	461a      	mov	r2, r3
 800a126:	2104      	movs	r1, #4
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f004 fb17 	bl	800e75c <VL53L0X_RdDWord>
 800a12e:	4603      	mov	r3, r0
 800a130:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d10c      	bne.n	800a154 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800a13a:	89bb      	ldrh	r3, [r7, #12]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d005      	beq.n	800a14c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	89ba      	ldrh	r2, [r7, #12]
 800a144:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a154:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800a160:	b480      	push	{r7}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a16a:	2300      	movs	r3, #0
 800a16c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	7f1b      	ldrb	r3, [r3, #28]
 800a172:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	7bba      	ldrb	r2, [r7, #14]
 800a178:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a17a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3714      	adds	r7, #20
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr

0800a18a <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b086      	sub	sp, #24
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
 800a192:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a194:	2300      	movs	r3, #0
 800a196:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800a198:	f107 030e 	add.w	r3, r7, #14
 800a19c:	461a      	mov	r2, r3
 800a19e:	2120      	movs	r1, #32
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f004 fabc 	bl	800e71e <VL53L0X_RdWord>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800a1aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d118      	bne.n	800a1e4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800a1b2:	89fb      	ldrh	r3, [r7, #14]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d109      	bne.n	800a1cc <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6a1b      	ldr	r3, [r3, #32]
 800a1bc:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	693a      	ldr	r2, [r7, #16]
 800a1c2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	771a      	strb	r2, [r3, #28]
 800a1ca:	e00b      	b.n	800a1e4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800a1cc:	89fb      	ldrh	r3, [r7, #14]
 800a1ce:	00db      	lsls	r3, r3, #3
 800a1d0:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	693a      	ldr	r2, [r7, #16]
 800a1d6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	693a      	ldr	r2, [r7, #16]
 800a1dc:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a1e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3718      	adds	r7, #24
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b086      	sub	sp, #24
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	807b      	strh	r3, [r7, #2]
 800a1fc:	4613      	mov	r3, r2
 800a1fe:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a200:	2300      	movs	r3, #0
 800a202:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800a204:	2300      	movs	r3, #0
 800a206:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800a208:	2300      	movs	r3, #0
 800a20a:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800a20c:	2300      	movs	r3, #0
 800a20e:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800a210:	887b      	ldrh	r3, [r7, #2]
 800a212:	2b05      	cmp	r3, #5
 800a214:	d902      	bls.n	800a21c <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a216:	23fc      	movs	r3, #252	; 0xfc
 800a218:	75fb      	strb	r3, [r7, #23]
 800a21a:	e05b      	b.n	800a2d4 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800a21c:	787b      	ldrb	r3, [r7, #1]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d106      	bne.n	800a230 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800a222:	2300      	movs	r3, #0
 800a224:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800a226:	2300      	movs	r3, #0
 800a228:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800a22a:	2301      	movs	r3, #1
 800a22c:	73bb      	strb	r3, [r7, #14]
 800a22e:	e00a      	b.n	800a246 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a230:	887b      	ldrh	r3, [r7, #2]
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	330c      	adds	r3, #12
 800a236:	009b      	lsls	r3, r3, #2
 800a238:	4413      	add	r3, r2
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800a23e:	2300      	movs	r3, #0
 800a240:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800a242:	2301      	movs	r3, #1
 800a244:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800a246:	887b      	ldrh	r3, [r7, #2]
 800a248:	2b05      	cmp	r3, #5
 800a24a:	d841      	bhi.n	800a2d0 <VL53L0X_SetLimitCheckEnable+0xe0>
 800a24c:	a201      	add	r2, pc, #4	; (adr r2, 800a254 <VL53L0X_SetLimitCheckEnable+0x64>)
 800a24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a252:	bf00      	nop
 800a254:	0800a26d 	.word	0x0800a26d
 800a258:	0800a277 	.word	0x0800a277
 800a25c:	0800a28d 	.word	0x0800a28d
 800a260:	0800a297 	.word	0x0800a297
 800a264:	0800a2a1 	.word	0x0800a2a1
 800a268:	0800a2b9 	.word	0x0800a2b9

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	7bfa      	ldrb	r2, [r7, #15]
 800a270:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800a274:	e02e      	b.n	800a2d4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	461a      	mov	r2, r3
 800a27e:	2144      	movs	r1, #68	; 0x44
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f004 f9cf 	bl	800e624 <VL53L0X_WrWord>
 800a286:	4603      	mov	r3, r0
 800a288:	75fb      	strb	r3, [r7, #23]

			break;
 800a28a:	e023      	b.n	800a2d4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	7bfa      	ldrb	r2, [r7, #15]
 800a290:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800a294:	e01e      	b.n	800a2d4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	7bfa      	ldrb	r2, [r7, #15]
 800a29a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800a29e:	e019      	b.n	800a2d4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800a2a0:	7bbb      	ldrb	r3, [r7, #14]
 800a2a2:	005b      	lsls	r3, r3, #1
 800a2a4:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800a2a6:	7b7b      	ldrb	r3, [r7, #13]
 800a2a8:	22fe      	movs	r2, #254	; 0xfe
 800a2aa:	2160      	movs	r1, #96	; 0x60
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f004 f9d9 	bl	800e664 <VL53L0X_UpdateByte>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800a2b6:	e00d      	b.n	800a2d4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800a2b8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ba:	011b      	lsls	r3, r3, #4
 800a2bc:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800a2be:	7b7b      	ldrb	r3, [r7, #13]
 800a2c0:	22ef      	movs	r2, #239	; 0xef
 800a2c2:	2160      	movs	r1, #96	; 0x60
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f004 f9cd 	bl	800e664 <VL53L0X_UpdateByte>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800a2ce:	e001      	b.n	800a2d4 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a2d0:	23fc      	movs	r3, #252	; 0xfc
 800a2d2:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a2d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d10f      	bne.n	800a2fc <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800a2dc:	787b      	ldrb	r3, [r7, #1]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d106      	bne.n	800a2f0 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a2e2:	887b      	ldrh	r3, [r7, #2]
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	4413      	add	r3, r2
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a2ee:	e005      	b.n	800a2fc <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a2f0:	887b      	ldrh	r3, [r7, #2]
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a2fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a300:	4618      	mov	r0, r3
 800a302:	3718      	adds	r7, #24
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800a308:	b480      	push	{r7}
 800a30a:	b087      	sub	sp, #28
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	460b      	mov	r3, r1
 800a312:	607a      	str	r2, [r7, #4]
 800a314:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a316:	2300      	movs	r3, #0
 800a318:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800a31a:	897b      	ldrh	r3, [r7, #10]
 800a31c:	2b05      	cmp	r3, #5
 800a31e:	d905      	bls.n	800a32c <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a320:	23fc      	movs	r3, #252	; 0xfc
 800a322:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	701a      	strb	r2, [r3, #0]
 800a32a:	e008      	b.n	800a33e <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a32c:	897b      	ldrh	r3, [r7, #10]
 800a32e:	68fa      	ldr	r2, [r7, #12]
 800a330:	4413      	add	r3, r2
 800a332:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a336:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	7dba      	ldrb	r2, [r7, #22]
 800a33c:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a33e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a342:	4618      	mov	r0, r3
 800a344:	371c      	adds	r7, #28
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
	...

0800a350 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	460b      	mov	r3, r1
 800a35a:	607a      	str	r2, [r7, #4]
 800a35c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a35e:	2300      	movs	r3, #0
 800a360:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800a362:	897b      	ldrh	r3, [r7, #10]
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	4413      	add	r3, r2
 800a368:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a36c:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800a36e:	7dbb      	ldrb	r3, [r7, #22]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d107      	bne.n	800a384 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a374:	897b      	ldrh	r3, [r7, #10]
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	330c      	adds	r3, #12
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	4413      	add	r3, r2
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	605a      	str	r2, [r3, #4]
 800a382:	e040      	b.n	800a406 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800a384:	897b      	ldrh	r3, [r7, #10]
 800a386:	2b05      	cmp	r3, #5
 800a388:	d830      	bhi.n	800a3ec <VL53L0X_SetLimitCheckValue+0x9c>
 800a38a:	a201      	add	r2, pc, #4	; (adr r2, 800a390 <VL53L0X_SetLimitCheckValue+0x40>)
 800a38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a390:	0800a3a9 	.word	0x0800a3a9
 800a394:	0800a3b1 	.word	0x0800a3b1
 800a398:	0800a3c7 	.word	0x0800a3c7
 800a39c:	0800a3cf 	.word	0x0800a3cf
 800a3a0:	0800a3d7 	.word	0x0800a3d7
 800a3a4:	0800a3d7 	.word	0x0800a3d7

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800a3ae:	e01f      	b.n	800a3f0 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	2144      	movs	r1, #68	; 0x44
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	f004 f932 	bl	800e624 <VL53L0X_WrWord>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800a3c4:	e014      	b.n	800a3f0 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800a3cc:	e010      	b.n	800a3f0 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800a3d4:	e00c      	b.n	800a3f0 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	461a      	mov	r2, r3
 800a3de:	2164      	movs	r1, #100	; 0x64
 800a3e0:	68f8      	ldr	r0, [r7, #12]
 800a3e2:	f004 f91f 	bl	800e624 <VL53L0X_WrWord>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800a3ea:	e001      	b.n	800a3f0 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a3ec:	23fc      	movs	r3, #252	; 0xfc
 800a3ee:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a3f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d106      	bne.n	800a406 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a3f8:	897b      	ldrh	r3, [r7, #10]
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	330c      	adds	r3, #12
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	4413      	add	r3, r2
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a406:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3718      	adds	r7, #24
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop

0800a414 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b088      	sub	sp, #32
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	460b      	mov	r3, r1
 800a41e:	607a      	str	r2, [r7, #4]
 800a420:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a422:	2300      	movs	r3, #0
 800a424:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800a426:	2300      	movs	r3, #0
 800a428:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800a42a:	897b      	ldrh	r3, [r7, #10]
 800a42c:	2b05      	cmp	r3, #5
 800a42e:	d847      	bhi.n	800a4c0 <VL53L0X_GetLimitCheckValue+0xac>
 800a430:	a201      	add	r2, pc, #4	; (adr r2, 800a438 <VL53L0X_GetLimitCheckValue+0x24>)
 800a432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a436:	bf00      	nop
 800a438:	0800a451 	.word	0x0800a451
 800a43c:	0800a45d 	.word	0x0800a45d
 800a440:	0800a483 	.word	0x0800a483
 800a444:	0800a48f 	.word	0x0800a48f
 800a448:	0800a49b 	.word	0x0800a49b
 800a44c:	0800a49b 	.word	0x0800a49b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a454:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800a456:	2300      	movs	r3, #0
 800a458:	77bb      	strb	r3, [r7, #30]
		break;
 800a45a:	e033      	b.n	800a4c4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800a45c:	f107 0316 	add.w	r3, r7, #22
 800a460:	461a      	mov	r2, r3
 800a462:	2144      	movs	r1, #68	; 0x44
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f004 f95a 	bl	800e71e <VL53L0X_RdWord>
 800a46a:	4603      	mov	r3, r0
 800a46c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800a46e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d102      	bne.n	800a47c <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800a476:	8afb      	ldrh	r3, [r7, #22]
 800a478:	025b      	lsls	r3, r3, #9
 800a47a:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800a47c:	2301      	movs	r3, #1
 800a47e:	77bb      	strb	r3, [r7, #30]
		break;
 800a480:	e020      	b.n	800a4c4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a486:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800a488:	2300      	movs	r3, #0
 800a48a:	77bb      	strb	r3, [r7, #30]
		break;
 800a48c:	e01a      	b.n	800a4c4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a492:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800a494:	2300      	movs	r3, #0
 800a496:	77bb      	strb	r3, [r7, #30]
		break;
 800a498:	e014      	b.n	800a4c4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800a49a:	f107 0316 	add.w	r3, r7, #22
 800a49e:	461a      	mov	r2, r3
 800a4a0:	2164      	movs	r1, #100	; 0x64
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f004 f93b 	bl	800e71e <VL53L0X_RdWord>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800a4ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d102      	bne.n	800a4ba <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800a4b4:	8afb      	ldrh	r3, [r7, #22]
 800a4b6:	025b      	lsls	r3, r3, #9
 800a4b8:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	77bb      	strb	r3, [r7, #30]
		break;
 800a4be:	e001      	b.n	800a4c4 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a4c0:	23fc      	movs	r3, #252	; 0xfc
 800a4c2:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a4c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d12a      	bne.n	800a522 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800a4cc:	7fbb      	ldrb	r3, [r7, #30]
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d124      	bne.n	800a51c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d110      	bne.n	800a4fa <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800a4d8:	897b      	ldrh	r3, [r7, #10]
 800a4da:	68fa      	ldr	r2, [r7, #12]
 800a4dc:	330c      	adds	r3, #12
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	4413      	add	r3, r2
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	69ba      	ldr	r2, [r7, #24]
 800a4ea:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800a4ec:	897b      	ldrh	r3, [r7, #10]
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a4f8:	e013      	b.n	800a522 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	69ba      	ldr	r2, [r7, #24]
 800a4fe:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800a500:	897b      	ldrh	r3, [r7, #10]
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	330c      	adds	r3, #12
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	4413      	add	r3, r2
 800a50a:	69ba      	ldr	r2, [r7, #24]
 800a50c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800a50e:	897b      	ldrh	r3, [r7, #10]
 800a510:	68fa      	ldr	r2, [r7, #12]
 800a512:	4413      	add	r3, r2
 800a514:	2201      	movs	r2, #1
 800a516:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a51a:	e002      	b.n	800a522 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	69ba      	ldr	r2, [r7, #24]
 800a520:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a522:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800a526:	4618      	mov	r0, r3
 800a528:	3720      	adds	r7, #32
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop

0800a530 <VL53L0X_GetLimitCheckCurrent>:

VL53L0X_Error VL53L0X_GetLimitCheckCurrent(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckCurrent)
{
 800a530:	b4b0      	push	{r4, r5, r7}
 800a532:	b08d      	sub	sp, #52	; 0x34
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	460b      	mov	r3, r1
 800a53a:	607a      	str	r2, [r7, #4]
 800a53c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a53e:	2300      	movs	r3, #0
 800a540:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L0X_RangingMeasurementData_t LastRangeDataBuffer;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800a544:	897b      	ldrh	r3, [r7, #10]
 800a546:	2b05      	cmp	r3, #5
 800a548:	d903      	bls.n	800a552 <VL53L0X_GetLimitCheckCurrent+0x22>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a54a:	23fc      	movs	r3, #252	; 0xfc
 800a54c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a550:	e05d      	b.n	800a60e <VL53L0X_GetLimitCheckCurrent+0xde>
	} else {
		switch (LimitCheckId) {
 800a552:	897b      	ldrh	r3, [r7, #10]
 800a554:	2b05      	cmp	r3, #5
 800a556:	d857      	bhi.n	800a608 <VL53L0X_GetLimitCheckCurrent+0xd8>
 800a558:	a201      	add	r2, pc, #4	; (adr r2, 800a560 <VL53L0X_GetLimitCheckCurrent+0x30>)
 800a55a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a55e:	bf00      	nop
 800a560:	0800a579 	.word	0x0800a579
 800a564:	0800a585 	.word	0x0800a585
 800a568:	0800a5a3 	.word	0x0800a5a3
 800a56c:	0800a5af 	.word	0x0800a5af
 800a570:	0800a5cd 	.word	0x0800a5cd
 800a574:	0800a5eb 	.word	0x0800a5eb
		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* Need to run a ranging to have the latest values */
			*pLimitCheckCurrent = PALDevDataGet(Dev, SigmaEstimate);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	601a      	str	r2, [r3, #0]

			break;
 800a582:	e044      	b.n	800a60e <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f107 0410 	add.w	r4, r7, #16
 800a58a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800a58e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a592:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a596:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 800a59a:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	601a      	str	r2, [r3, #0]

			break;
 800a5a0:	e035      	b.n	800a60e <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
			/* Need to run a ranging to have the latest values */
			*pLimitCheckCurrent = PALDevDataGet(Dev,
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	601a      	str	r2, [r3, #0]
				LastSignalRefMcps);

			break;
 800a5ac:	e02f      	b.n	800a60e <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f107 0410 	add.w	r4, r7, #16
 800a5b4:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800a5b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a5ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a5bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a5c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 800a5c4:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	601a      	str	r2, [r3, #0]

			break;
 800a5ca:	e020      	b.n	800a60e <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f107 0410 	add.w	r4, r7, #16
 800a5d2:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800a5d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a5d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a5da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a5de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 800a5e2:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	601a      	str	r2, [r3, #0]

			break;
 800a5e8:	e011      	b.n	800a60e <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f107 0410 	add.w	r4, r7, #16
 800a5f0:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800a5f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a5f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a5f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a5fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 800a600:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	601a      	str	r2, [r3, #0]

			break;
 800a606:	e002      	b.n	800a60e <VL53L0X_GetLimitCheckCurrent+0xde>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a608:	23fc      	movs	r3, #252	; 0xfc
 800a60a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a60e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f

}
 800a612:	4618      	mov	r0, r3
 800a614:	3734      	adds	r7, #52	; 0x34
 800a616:	46bd      	mov	sp, r7
 800a618:	bcb0      	pop	{r4, r5, r7}
 800a61a:	4770      	bx	lr

0800a61c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a626:	2300      	movs	r3, #0
 800a628:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800a62a:	f107 030e 	add.w	r3, r7, #14
 800a62e:	461a      	mov	r2, r3
 800a630:	2101      	movs	r1, #1
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f004 f854 	bl	800e6e0 <VL53L0X_RdByte>
 800a638:	4603      	mov	r3, r0
 800a63a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800a63c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10e      	bne.n	800a662 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800a644:	7bba      	ldrb	r2, [r7, #14]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800a64c:	7bbb      	ldrb	r3, [r7, #14]
 800a64e:	b25b      	sxtb	r3, r3
 800a650:	2b00      	cmp	r3, #0
 800a652:	da03      	bge.n	800a65c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	2201      	movs	r2, #1
 800a658:	701a      	strb	r2, [r3, #0]
 800a65a:	e002      	b.n	800a662 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	2200      	movs	r2, #0
 800a660:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d104      	bne.n	800a674 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	781a      	ldrb	r2, [r3, #0]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a674:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a688:	2300      	movs	r3, #0
 800a68a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800a68c:	f107 030e 	add.w	r3, r7, #14
 800a690:	4619      	mov	r1, r3
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f7ff fb74 	bl	8009d80 <VL53L0X_GetDeviceMode>
 800a698:	4603      	mov	r3, r0
 800a69a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800a69c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d107      	bne.n	800a6b4 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800a6a4:	7bbb      	ldrb	r3, [r7, #14]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d104      	bne.n	800a6b4 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 f898 	bl	800a7e0 <VL53L0X_StartMeasurement>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800a6b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d104      	bne.n	800a6c6 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f001 fb47 	bl	800bd50 <VL53L0X_measurement_poll_for_completion>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800a6c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d106      	bne.n	800a6dc <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800a6ce:	7bbb      	ldrb	r3, [r7, #14]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d103      	bne.n	800a6dc <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2203      	movs	r2, #3
 800a6d8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800a6dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3710      	adds	r7, #16
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b086      	sub	sp, #24
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	68b9      	ldr	r1, [r7, #8]
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f001 fae9 	bl	800bcd6 <VL53L0X_perform_ref_calibration>
 800a704:	4603      	mov	r3, r0
 800a706:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800a708:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3718      	adds	r7, #24
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b086      	sub	sp, #24
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	460b      	mov	r3, r1
 800a71e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a720:	2300      	movs	r3, #0
 800a722:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800a72a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800a72c:	7dbb      	ldrb	r3, [r7, #22]
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d005      	beq.n	800a73e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800a732:	7dbb      	ldrb	r3, [r7, #22]
 800a734:	2b02      	cmp	r3, #2
 800a736:	d002      	beq.n	800a73e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800a738:	7dbb      	ldrb	r3, [r7, #22]
 800a73a:	2b03      	cmp	r3, #3
 800a73c:	d147      	bne.n	800a7ce <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800a73e:	f107 030c 	add.w	r3, r7, #12
 800a742:	f107 0210 	add.w	r2, r7, #16
 800a746:	2101      	movs	r1, #1
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 fbc3 	bl	800aed4 <VL53L0X_GetInterruptThresholds>
 800a74e:	4603      	mov	r3, r0
 800a750:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800a758:	d803      	bhi.n	800a762 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800a75a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800a75c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800a760:	d935      	bls.n	800a7ce <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800a762:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d131      	bne.n	800a7ce <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800a76a:	78fb      	ldrb	r3, [r7, #3]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d006      	beq.n	800a77e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800a770:	491a      	ldr	r1, [pc, #104]	; (800a7dc <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f002 fcc4 	bl	800d100 <VL53L0X_load_tuning_settings>
 800a778:	4603      	mov	r3, r0
 800a77a:	75fb      	strb	r3, [r7, #23]
 800a77c:	e027      	b.n	800a7ce <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800a77e:	2204      	movs	r2, #4
 800a780:	21ff      	movs	r1, #255	; 0xff
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f003 ff2e 	bl	800e5e4 <VL53L0X_WrByte>
 800a788:	4603      	mov	r3, r0
 800a78a:	461a      	mov	r2, r3
 800a78c:	7dfb      	ldrb	r3, [r7, #23]
 800a78e:	4313      	orrs	r3, r2
 800a790:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800a792:	2200      	movs	r2, #0
 800a794:	2170      	movs	r1, #112	; 0x70
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f003 ff24 	bl	800e5e4 <VL53L0X_WrByte>
 800a79c:	4603      	mov	r3, r0
 800a79e:	461a      	mov	r2, r3
 800a7a0:	7dfb      	ldrb	r3, [r7, #23]
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	21ff      	movs	r1, #255	; 0xff
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f003 ff1a 	bl	800e5e4 <VL53L0X_WrByte>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	7dfb      	ldrb	r3, [r7, #23]
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	2180      	movs	r1, #128	; 0x80
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f003 ff10 	bl	800e5e4 <VL53L0X_WrByte>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	7dfb      	ldrb	r3, [r7, #23]
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800a7ce:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3718      	adds	r7, #24
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	20000108 	.word	0x20000108

0800a7e0 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b086      	sub	sp, #24
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800a7f0:	f107 030e 	add.w	r3, r7, #14
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f7ff fac2 	bl	8009d80 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	2180      	movs	r1, #128	; 0x80
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f003 feef 	bl	800e5e4 <VL53L0X_WrByte>
 800a806:	4603      	mov	r3, r0
 800a808:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a80a:	2201      	movs	r2, #1
 800a80c:	21ff      	movs	r1, #255	; 0xff
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f003 fee8 	bl	800e5e4 <VL53L0X_WrByte>
 800a814:	4603      	mov	r3, r0
 800a816:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a818:	2200      	movs	r2, #0
 800a81a:	2100      	movs	r1, #0
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f003 fee1 	bl	800e5e4 <VL53L0X_WrByte>
 800a822:	4603      	mov	r3, r0
 800a824:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800a82c:	461a      	mov	r2, r3
 800a82e:	2191      	movs	r1, #145	; 0x91
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f003 fed7 	bl	800e5e4 <VL53L0X_WrByte>
 800a836:	4603      	mov	r3, r0
 800a838:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a83a:	2201      	movs	r2, #1
 800a83c:	2100      	movs	r1, #0
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f003 fed0 	bl	800e5e4 <VL53L0X_WrByte>
 800a844:	4603      	mov	r3, r0
 800a846:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a848:	2200      	movs	r2, #0
 800a84a:	21ff      	movs	r1, #255	; 0xff
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f003 fec9 	bl	800e5e4 <VL53L0X_WrByte>
 800a852:	4603      	mov	r3, r0
 800a854:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a856:	2200      	movs	r2, #0
 800a858:	2180      	movs	r1, #128	; 0x80
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f003 fec2 	bl	800e5e4 <VL53L0X_WrByte>
 800a860:	4603      	mov	r3, r0
 800a862:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800a864:	7bbb      	ldrb	r3, [r7, #14]
 800a866:	2b03      	cmp	r3, #3
 800a868:	d054      	beq.n	800a914 <VL53L0X_StartMeasurement+0x134>
 800a86a:	2b03      	cmp	r3, #3
 800a86c:	dc6c      	bgt.n	800a948 <VL53L0X_StartMeasurement+0x168>
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d002      	beq.n	800a878 <VL53L0X_StartMeasurement+0x98>
 800a872:	2b01      	cmp	r3, #1
 800a874:	d034      	beq.n	800a8e0 <VL53L0X_StartMeasurement+0x100>
 800a876:	e067      	b.n	800a948 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800a878:	2201      	movs	r2, #1
 800a87a:	2100      	movs	r1, #0
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f003 feb1 	bl	800e5e4 <VL53L0X_WrByte>
 800a882:	4603      	mov	r3, r0
 800a884:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800a886:	7bfb      	ldrb	r3, [r7, #15]
 800a888:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800a88a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d15d      	bne.n	800a94e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800a892:	2300      	movs	r3, #0
 800a894:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d008      	beq.n	800a8ae <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800a89c:	f107 030d 	add.w	r3, r7, #13
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f003 ff1b 	bl	800e6e0 <VL53L0X_RdByte>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800a8b4:	7b7a      	ldrb	r2, [r7, #13]
 800a8b6:	7bfb      	ldrb	r3, [r7, #15]
 800a8b8:	4013      	ands	r3, r2
 800a8ba:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800a8bc:	7bfa      	ldrb	r2, [r7, #15]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d107      	bne.n	800a8d2 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800a8c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d103      	bne.n	800a8d2 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a8d0:	d3e1      	bcc.n	800a896 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a8d8:	d339      	bcc.n	800a94e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800a8da:	23f9      	movs	r3, #249	; 0xf9
 800a8dc:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800a8de:	e036      	b.n	800a94e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800a8e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d105      	bne.n	800a8f4 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800a8e8:	2101      	movs	r1, #1
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7ff ff12 	bl	800a714 <VL53L0X_CheckAndLoadInterruptSettings>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800a8f4:	2202      	movs	r2, #2
 800a8f6:	2100      	movs	r1, #0
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f003 fe73 	bl	800e5e4 <VL53L0X_WrByte>
 800a8fe:	4603      	mov	r3, r0
 800a900:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800a902:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d123      	bne.n	800a952 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2204      	movs	r2, #4
 800a90e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800a912:	e01e      	b.n	800a952 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800a914:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d105      	bne.n	800a928 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800a91c:	2101      	movs	r1, #1
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f7ff fef8 	bl	800a714 <VL53L0X_CheckAndLoadInterruptSettings>
 800a924:	4603      	mov	r3, r0
 800a926:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800a928:	2204      	movs	r2, #4
 800a92a:	2100      	movs	r1, #0
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f003 fe59 	bl	800e5e4 <VL53L0X_WrByte>
 800a932:	4603      	mov	r3, r0
 800a934:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800a936:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d10b      	bne.n	800a956 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2204      	movs	r2, #4
 800a942:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800a946:	e006      	b.n	800a956 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800a948:	23f8      	movs	r3, #248	; 0xf8
 800a94a:	75fb      	strb	r3, [r7, #23]
 800a94c:	e004      	b.n	800a958 <VL53L0X_StartMeasurement+0x178>
		break;
 800a94e:	bf00      	nop
 800a950:	e002      	b.n	800a958 <VL53L0X_StartMeasurement+0x178>
		break;
 800a952:	bf00      	nop
 800a954:	e000      	b.n	800a958 <VL53L0X_StartMeasurement+0x178>
		break;
 800a956:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800a958:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3718      	adds	r7, #24
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a96e:	2300      	movs	r3, #0
 800a970:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800a978:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800a97a:	7bbb      	ldrb	r3, [r7, #14]
 800a97c:	2b04      	cmp	r3, #4
 800a97e:	d112      	bne.n	800a9a6 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800a980:	f107 0308 	add.w	r3, r7, #8
 800a984:	4619      	mov	r1, r3
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 fb1e 	bl	800afc8 <VL53L0X_GetInterruptMaskStatus>
 800a98c:	4603      	mov	r3, r0
 800a98e:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	2b04      	cmp	r3, #4
 800a994:	d103      	bne.n	800a99e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	2201      	movs	r2, #1
 800a99a:	701a      	strb	r2, [r3, #0]
 800a99c:	e01c      	b.n	800a9d8 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	701a      	strb	r2, [r3, #0]
 800a9a4:	e018      	b.n	800a9d8 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800a9a6:	f107 030d 	add.w	r3, r7, #13
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	2114      	movs	r1, #20
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f003 fe96 	bl	800e6e0 <VL53L0X_RdByte>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800a9b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d10b      	bne.n	800a9d8 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800a9c0:	7b7b      	ldrb	r3, [r7, #13]
 800a9c2:	f003 0301 	and.w	r3, r3, #1
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d003      	beq.n	800a9d2 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	701a      	strb	r2, [r3, #0]
 800a9d0:	e002      	b.n	800a9d8 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a9d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3710      	adds	r7, #16
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800a9e4:	b5b0      	push	{r4, r5, r7, lr}
 800a9e6:	b096      	sub	sp, #88	; 0x58
 800a9e8:	af02      	add	r7, sp, #8
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800a9f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a9f8:	230c      	movs	r3, #12
 800a9fa:	2114      	movs	r1, #20
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f003 fdcc 	bl	800e59a <VL53L0X_ReadMulti>
 800aa02:	4603      	mov	r3, r0
 800aa04:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800aa08:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f040 80d1 	bne.w	800abb4 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	2200      	movs	r2, #0
 800aa16:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800aa1e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	021b      	lsls	r3, r3, #8
 800aa26:	b29a      	uxth	r2, r3
 800aa28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	4413      	add	r3, r2
 800aa30:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	2200      	movs	r2, #0
 800aa38:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800aa3a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	021b      	lsls	r3, r3, #8
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	4413      	add	r3, r2
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	025b      	lsls	r3, r3, #9
 800aa50:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa56:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800aa58:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	021b      	lsls	r3, r3, #8
 800aa60:	b29a      	uxth	r2, r3
 800aa62:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	4413      	add	r3, r2
 800aa6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800aa6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aa72:	025b      	lsls	r3, r3, #9
 800aa74:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800aa7a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	021b      	lsls	r3, r3, #8
 800aa82:	b29a      	uxth	r2, r3
 800aa84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	4413      	add	r3, r2
 800aa8c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800aa96:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800aa98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aa9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800aaa6:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800aaae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800aab2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800aab4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aab8:	d046      	beq.n	800ab48 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800aaba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800aabc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800aac0:	fb02 f303 	mul.w	r3, r2, r3
 800aac4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800aac8:	4a57      	ldr	r2, [pc, #348]	; (800ac28 <VL53L0X_GetRangingMeasurementData+0x244>)
 800aaca:	fb82 1203 	smull	r1, r2, r2, r3
 800aace:	1192      	asrs	r2, r2, #6
 800aad0:	17db      	asrs	r3, r3, #31
 800aad2:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800aad4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a1b      	ldr	r3, [r3, #32]
 800aadc:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	7f1b      	ldrb	r3, [r3, #28]
 800aae2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800aae6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d02c      	beq.n	800ab48 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800aaee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aaf0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800aaf4:	fb02 f303 	mul.w	r3, r2, r3
 800aaf8:	121a      	asrs	r2, r3, #8
					<= 0) {
 800aafa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d10d      	bne.n	800ab1c <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800ab00:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d004      	beq.n	800ab12 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800ab08:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800ab0c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ab10:	e016      	b.n	800ab40 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800ab12:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800ab16:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ab1a:	e011      	b.n	800ab40 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800ab1c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ab20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab22:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800ab26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ab28:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800ab2c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800ab30:	121b      	asrs	r3, r3, #8
 800ab32:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800ab34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab36:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800ab38:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800ab3c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800ab40:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ab44:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800ab48:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00d      	beq.n	800ab6c <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800ab50:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ab54:	089b      	lsrs	r3, r3, #2
 800ab56:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800ab5c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	019b      	lsls	r3, r3, #6
 800ab64:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	75da      	strb	r2, [r3, #23]
 800ab6a:	e006      	b.n	800ab7a <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800ab72:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	2200      	movs	r2, #0
 800ab78:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800ab7a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ab7e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800ab82:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800ab86:	9301      	str	r3, [sp, #4]
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	9300      	str	r3, [sp, #0]
 800ab8c:	4613      	mov	r3, r2
 800ab8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f002 ff53 	bl	800da3c <VL53L0X_get_pal_range_status>
 800ab96:	4603      	mov	r3, r0
 800ab98:	461a      	mov	r2, r3
 800ab9a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800aba4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d103      	bne.n	800abb4 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800abac:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800abb4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d12f      	bne.n	800ac1c <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f107 040c 	add.w	r4, r7, #12
 800abc2:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800abc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800abca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800abce:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800abd6:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800abdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800abe4:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800abea:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800abf0:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800abf6:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800abfc:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800ac02:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800ac0c:	f107 050c 	add.w	r5, r7, #12
 800ac10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ac18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ac1c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3750      	adds	r7, #80	; 0x50
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bdb0      	pop	{r4, r5, r7, pc}
 800ac28:	10624dd3 	.word	0x10624dd3

0800ac2c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac36:	2300      	movs	r3, #0
 800ac38:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f7ff f873 	bl	8009d28 <VL53L0X_SetDeviceMode>
 800ac42:	4603      	mov	r3, r0
 800ac44:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800ac46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d104      	bne.n	800ac58 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f7ff fd16 	bl	800a680 <VL53L0X_PerformSingleMeasurement>
 800ac54:	4603      	mov	r3, r0
 800ac56:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800ac58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d105      	bne.n	800ac6c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800ac60:	6839      	ldr	r1, [r7, #0]
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f7ff febe 	bl	800a9e4 <VL53L0X_GetRangingMeasurementData>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800ac6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d105      	bne.n	800ac80 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800ac74:	2100      	movs	r1, #0
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 f962 	bl	800af40 <VL53L0X_ClearInterruptMask>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800ac80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	4608      	mov	r0, r1
 800ac96:	4611      	mov	r1, r2
 800ac98:	461a      	mov	r2, r3
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	70fb      	strb	r3, [r7, #3]
 800ac9e:	460b      	mov	r3, r1
 800aca0:	70bb      	strb	r3, [r7, #2]
 800aca2:	4613      	mov	r3, r2
 800aca4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aca6:	2300      	movs	r3, #0
 800aca8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800acaa:	78fb      	ldrb	r3, [r7, #3]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d002      	beq.n	800acb6 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800acb0:	23f6      	movs	r3, #246	; 0xf6
 800acb2:	73fb      	strb	r3, [r7, #15]
 800acb4:	e107      	b.n	800aec6 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800acb6:	78bb      	ldrb	r3, [r7, #2]
 800acb8:	2b14      	cmp	r3, #20
 800acba:	d110      	bne.n	800acde <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800acbc:	7e3b      	ldrb	r3, [r7, #24]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d102      	bne.n	800acc8 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800acc2:	2310      	movs	r3, #16
 800acc4:	73bb      	strb	r3, [r7, #14]
 800acc6:	e001      	b.n	800accc <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800acc8:	2301      	movs	r3, #1
 800acca:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800accc:	7bbb      	ldrb	r3, [r7, #14]
 800acce:	461a      	mov	r2, r3
 800acd0:	2184      	movs	r1, #132	; 0x84
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f003 fc86 	bl	800e5e4 <VL53L0X_WrByte>
 800acd8:	4603      	mov	r3, r0
 800acda:	73fb      	strb	r3, [r7, #15]
 800acdc:	e0f3      	b.n	800aec6 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800acde:	78bb      	ldrb	r3, [r7, #2]
 800ace0:	2b15      	cmp	r3, #21
 800ace2:	f040 8097 	bne.w	800ae14 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ace6:	2201      	movs	r2, #1
 800ace8:	21ff      	movs	r1, #255	; 0xff
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f003 fc7a 	bl	800e5e4 <VL53L0X_WrByte>
 800acf0:	4603      	mov	r3, r0
 800acf2:	461a      	mov	r2, r3
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
 800acf6:	4313      	orrs	r3, r2
 800acf8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800acfa:	2200      	movs	r2, #0
 800acfc:	2100      	movs	r1, #0
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f003 fc70 	bl	800e5e4 <VL53L0X_WrByte>
 800ad04:	4603      	mov	r3, r0
 800ad06:	461a      	mov	r2, r3
 800ad08:	7bfb      	ldrb	r3, [r7, #15]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ad0e:	2200      	movs	r2, #0
 800ad10:	21ff      	movs	r1, #255	; 0xff
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f003 fc66 	bl	800e5e4 <VL53L0X_WrByte>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	7bfb      	ldrb	r3, [r7, #15]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800ad22:	2201      	movs	r2, #1
 800ad24:	2180      	movs	r1, #128	; 0x80
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f003 fc5c 	bl	800e5e4 <VL53L0X_WrByte>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	461a      	mov	r2, r3
 800ad30:	7bfb      	ldrb	r3, [r7, #15]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800ad36:	2202      	movs	r2, #2
 800ad38:	2185      	movs	r1, #133	; 0x85
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f003 fc52 	bl	800e5e4 <VL53L0X_WrByte>
 800ad40:	4603      	mov	r3, r0
 800ad42:	461a      	mov	r2, r3
 800ad44:	7bfb      	ldrb	r3, [r7, #15]
 800ad46:	4313      	orrs	r3, r2
 800ad48:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800ad4a:	2204      	movs	r2, #4
 800ad4c:	21ff      	movs	r1, #255	; 0xff
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f003 fc48 	bl	800e5e4 <VL53L0X_WrByte>
 800ad54:	4603      	mov	r3, r0
 800ad56:	461a      	mov	r2, r3
 800ad58:	7bfb      	ldrb	r3, [r7, #15]
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800ad5e:	2200      	movs	r2, #0
 800ad60:	21cd      	movs	r1, #205	; 0xcd
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f003 fc3e 	bl	800e5e4 <VL53L0X_WrByte>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	7bfb      	ldrb	r3, [r7, #15]
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800ad72:	2211      	movs	r2, #17
 800ad74:	21cc      	movs	r1, #204	; 0xcc
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f003 fc34 	bl	800e5e4 <VL53L0X_WrByte>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	461a      	mov	r2, r3
 800ad80:	7bfb      	ldrb	r3, [r7, #15]
 800ad82:	4313      	orrs	r3, r2
 800ad84:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800ad86:	2207      	movs	r2, #7
 800ad88:	21ff      	movs	r1, #255	; 0xff
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f003 fc2a 	bl	800e5e4 <VL53L0X_WrByte>
 800ad90:	4603      	mov	r3, r0
 800ad92:	461a      	mov	r2, r3
 800ad94:	7bfb      	ldrb	r3, [r7, #15]
 800ad96:	4313      	orrs	r3, r2
 800ad98:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	21be      	movs	r1, #190	; 0xbe
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f003 fc20 	bl	800e5e4 <VL53L0X_WrByte>
 800ada4:	4603      	mov	r3, r0
 800ada6:	461a      	mov	r2, r3
 800ada8:	7bfb      	ldrb	r3, [r7, #15]
 800adaa:	4313      	orrs	r3, r2
 800adac:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800adae:	2206      	movs	r2, #6
 800adb0:	21ff      	movs	r1, #255	; 0xff
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f003 fc16 	bl	800e5e4 <VL53L0X_WrByte>
 800adb8:	4603      	mov	r3, r0
 800adba:	461a      	mov	r2, r3
 800adbc:	7bfb      	ldrb	r3, [r7, #15]
 800adbe:	4313      	orrs	r3, r2
 800adc0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800adc2:	2209      	movs	r2, #9
 800adc4:	21cc      	movs	r1, #204	; 0xcc
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f003 fc0c 	bl	800e5e4 <VL53L0X_WrByte>
 800adcc:	4603      	mov	r3, r0
 800adce:	461a      	mov	r2, r3
 800add0:	7bfb      	ldrb	r3, [r7, #15]
 800add2:	4313      	orrs	r3, r2
 800add4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800add6:	2200      	movs	r2, #0
 800add8:	21ff      	movs	r1, #255	; 0xff
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f003 fc02 	bl	800e5e4 <VL53L0X_WrByte>
 800ade0:	4603      	mov	r3, r0
 800ade2:	461a      	mov	r2, r3
 800ade4:	7bfb      	ldrb	r3, [r7, #15]
 800ade6:	4313      	orrs	r3, r2
 800ade8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800adea:	2201      	movs	r2, #1
 800adec:	21ff      	movs	r1, #255	; 0xff
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f003 fbf8 	bl	800e5e4 <VL53L0X_WrByte>
 800adf4:	4603      	mov	r3, r0
 800adf6:	461a      	mov	r2, r3
 800adf8:	7bfb      	ldrb	r3, [r7, #15]
 800adfa:	4313      	orrs	r3, r2
 800adfc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800adfe:	2200      	movs	r2, #0
 800ae00:	2100      	movs	r1, #0
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f003 fbee 	bl	800e5e4 <VL53L0X_WrByte>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	7bfb      	ldrb	r3, [r7, #15]
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	73fb      	strb	r3, [r7, #15]
 800ae12:	e058      	b.n	800aec6 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800ae14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d121      	bne.n	800ae60 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800ae1c:	787b      	ldrb	r3, [r7, #1]
 800ae1e:	2b04      	cmp	r3, #4
 800ae20:	d81b      	bhi.n	800ae5a <VL53L0X_SetGpioConfig+0x1ce>
 800ae22:	a201      	add	r2, pc, #4	; (adr r2, 800ae28 <VL53L0X_SetGpioConfig+0x19c>)
 800ae24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae28:	0800ae3d 	.word	0x0800ae3d
 800ae2c:	0800ae43 	.word	0x0800ae43
 800ae30:	0800ae49 	.word	0x0800ae49
 800ae34:	0800ae4f 	.word	0x0800ae4f
 800ae38:	0800ae55 	.word	0x0800ae55
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	73bb      	strb	r3, [r7, #14]
				break;
 800ae40:	e00f      	b.n	800ae62 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800ae42:	2301      	movs	r3, #1
 800ae44:	73bb      	strb	r3, [r7, #14]
				break;
 800ae46:	e00c      	b.n	800ae62 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800ae48:	2302      	movs	r3, #2
 800ae4a:	73bb      	strb	r3, [r7, #14]
				break;
 800ae4c:	e009      	b.n	800ae62 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800ae4e:	2303      	movs	r3, #3
 800ae50:	73bb      	strb	r3, [r7, #14]
				break;
 800ae52:	e006      	b.n	800ae62 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800ae54:	2304      	movs	r3, #4
 800ae56:	73bb      	strb	r3, [r7, #14]
				break;
 800ae58:	e003      	b.n	800ae62 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800ae5a:	23f5      	movs	r3, #245	; 0xf5
 800ae5c:	73fb      	strb	r3, [r7, #15]
 800ae5e:	e000      	b.n	800ae62 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800ae60:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800ae62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d107      	bne.n	800ae7a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800ae6a:	7bbb      	ldrb	r3, [r7, #14]
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	210a      	movs	r1, #10
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f003 fbb7 	bl	800e5e4 <VL53L0X_WrByte>
 800ae76:	4603      	mov	r3, r0
 800ae78:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800ae7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d10f      	bne.n	800aea2 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800ae82:	7e3b      	ldrb	r3, [r7, #24]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d102      	bne.n	800ae8e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	73bb      	strb	r3, [r7, #14]
 800ae8c:	e001      	b.n	800ae92 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800ae8e:	2310      	movs	r3, #16
 800ae90:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800ae92:	7bbb      	ldrb	r3, [r7, #14]
 800ae94:	22ef      	movs	r2, #239	; 0xef
 800ae96:	2184      	movs	r1, #132	; 0x84
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f003 fbe3 	bl	800e664 <VL53L0X_UpdateByte>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800aea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d103      	bne.n	800aeb2 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	787a      	ldrb	r2, [r7, #1]
 800aeae:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800aeb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d105      	bne.n	800aec6 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800aeba:	2100      	movs	r1, #0
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 f83f 	bl	800af40 <VL53L0X_ClearInterruptMask>
 800aec2:	4603      	mov	r3, r0
 800aec4:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3710      	adds	r7, #16
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop

0800aed4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b086      	sub	sp, #24
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	607a      	str	r2, [r7, #4]
 800aede:	603b      	str	r3, [r7, #0]
 800aee0:	460b      	mov	r3, r1
 800aee2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aee4:	2300      	movs	r3, #0
 800aee6:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800aee8:	f107 0314 	add.w	r3, r7, #20
 800aeec:	461a      	mov	r2, r3
 800aeee:	210e      	movs	r1, #14
 800aef0:	68f8      	ldr	r0, [r7, #12]
 800aef2:	f003 fc14 	bl	800e71e <VL53L0X_RdWord>
 800aef6:	4603      	mov	r3, r0
 800aef8:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800aefa:	8abb      	ldrh	r3, [r7, #20]
 800aefc:	045b      	lsls	r3, r3, #17
 800aefe:	461a      	mov	r2, r3
 800af00:	4b0e      	ldr	r3, [pc, #56]	; (800af3c <VL53L0X_GetInterruptThresholds+0x68>)
 800af02:	4013      	ands	r3, r2
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800af08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d10f      	bne.n	800af30 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800af10:	f107 0314 	add.w	r3, r7, #20
 800af14:	461a      	mov	r2, r3
 800af16:	210c      	movs	r1, #12
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	f003 fc00 	bl	800e71e <VL53L0X_RdWord>
 800af1e:	4603      	mov	r3, r0
 800af20:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800af22:	8abb      	ldrh	r3, [r7, #20]
 800af24:	045b      	lsls	r3, r3, #17
 800af26:	461a      	mov	r2, r3
 800af28:	4b04      	ldr	r3, [pc, #16]	; (800af3c <VL53L0X_GetInterruptThresholds+0x68>)
 800af2a:	4013      	ands	r3, r2
		*pThresholdHigh =
 800af2c:	683a      	ldr	r2, [r7, #0]
 800af2e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800af30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af34:	4618      	mov	r0, r3
 800af36:	3718      	adds	r7, #24
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	1ffe0000 	.word	0x1ffe0000

0800af40 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af4a:	2300      	movs	r3, #0
 800af4c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount= 0;
 800af4e:	2300      	movs	r3, #0
 800af50:	73bb      	strb	r3, [r7, #14]
	uint8_t Byte= 0;
 800af52:	2300      	movs	r3, #0
 800af54:	737b      	strb	r3, [r7, #13]
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800af56:	2300      	movs	r3, #0
 800af58:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800af5a:	2201      	movs	r2, #1
 800af5c:	210b      	movs	r1, #11
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f003 fb40 	bl	800e5e4 <VL53L0X_WrByte>
 800af64:	4603      	mov	r3, r0
 800af66:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800af68:	2200      	movs	r2, #0
 800af6a:	210b      	movs	r1, #11
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f003 fb39 	bl	800e5e4 <VL53L0X_WrByte>
 800af72:	4603      	mov	r3, r0
 800af74:	461a      	mov	r2, r3
 800af76:	7bfb      	ldrb	r3, [r7, #15]
 800af78:	4313      	orrs	r3, r2
 800af7a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800af7c:	f107 030d 	add.w	r3, r7, #13
 800af80:	461a      	mov	r2, r3
 800af82:	2113      	movs	r1, #19
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f003 fbab 	bl	800e6e0 <VL53L0X_RdByte>
 800af8a:	4603      	mov	r3, r0
 800af8c:	461a      	mov	r2, r3
 800af8e:	7bfb      	ldrb	r3, [r7, #15]
 800af90:	4313      	orrs	r3, r2
 800af92:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800af94:	7bbb      	ldrb	r3, [r7, #14]
 800af96:	3301      	adds	r3, #1
 800af98:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800af9a:	7b7b      	ldrb	r3, [r7, #13]
 800af9c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d006      	beq.n	800afb2 <VL53L0X_ClearInterruptMask+0x72>
			&& (LoopCount < 3)
 800afa4:	7bbb      	ldrb	r3, [r7, #14]
 800afa6:	2b02      	cmp	r3, #2
 800afa8:	d803      	bhi.n	800afb2 <VL53L0X_ClearInterruptMask+0x72>
			&& (Status == VL53L0X_ERROR_NONE));
 800afaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d0d3      	beq.n	800af5a <VL53L0X_ClearInterruptMask+0x1a>


	if (LoopCount >= 3)
 800afb2:	7bbb      	ldrb	r3, [r7, #14]
 800afb4:	2b02      	cmp	r3, #2
 800afb6:	d901      	bls.n	800afbc <VL53L0X_ClearInterruptMask+0x7c>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800afb8:	23f4      	movs	r3, #244	; 0xf4
 800afba:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800afbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800afd2:	2300      	movs	r3, #0
 800afd4:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800afd6:	f107 030e 	add.w	r3, r7, #14
 800afda:	461a      	mov	r2, r3
 800afdc:	2113      	movs	r1, #19
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f003 fb7e 	bl	800e6e0 <VL53L0X_RdByte>
 800afe4:	4603      	mov	r3, r0
 800afe6:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800afe8:	7bbb      	ldrb	r3, [r7, #14]
 800afea:	f003 0207 	and.w	r2, r3, #7
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800aff2:	7bbb      	ldrb	r3, [r7, #14]
 800aff4:	f003 0318 	and.w	r3, r3, #24
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d001      	beq.n	800b000 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800affc:	23fa      	movs	r3, #250	; 0xfa
 800affe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800b000:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b004:	4618      	mov	r0, r3
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b086      	sub	sp, #24
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b018:	2300      	movs	r3, #0
 800b01a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	68b9      	ldr	r1, [r7, #8]
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	f000 fa07 	bl	800b434 <VL53L0X_perform_ref_spad_management>
 800b026:	4603      	mov	r3, r0
 800b028:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800b02a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3718      	adds	r7, #24
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b084      	sub	sp, #16
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
 800b03e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b040:	2300      	movs	r3, #0
 800b042:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800b044:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800b048:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800b04a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b04e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800b050:	f107 0308 	add.w	r3, r7, #8
 800b054:	461a      	mov	r2, r3
 800b056:	2128      	movs	r1, #40	; 0x28
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f003 fb60 	bl	800e71e <VL53L0X_RdWord>
 800b05e:	4603      	mov	r3, r0
 800b060:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800b062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d11e      	bne.n	800b0a8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800b06a:	893b      	ldrh	r3, [r7, #8]
 800b06c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b070:	b29b      	uxth	r3, r3
 800b072:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800b074:	893b      	ldrh	r3, [r7, #8]
 800b076:	461a      	mov	r2, r3
 800b078:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	dd0b      	ble.n	800b098 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800b080:	893a      	ldrh	r2, [r7, #8]
 800b082:	897b      	ldrh	r3, [r7, #10]
 800b084:	1ad3      	subs	r3, r2, r3
 800b086:	b29b      	uxth	r3, r3
 800b088:	b21b      	sxth	r3, r3
 800b08a:	461a      	mov	r2, r3
					* 250;
 800b08c:	23fa      	movs	r3, #250	; 0xfa
 800b08e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	601a      	str	r2, [r3, #0]
 800b096:	e007      	b.n	800b0a8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800b098:	893b      	ldrh	r3, [r7, #8]
 800b09a:	b21b      	sxth	r3, r3
 800b09c:	461a      	mov	r2, r3
 800b09e:	23fa      	movs	r3, #250	; 0xfa
 800b0a0:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800b0a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b08b      	sub	sp, #44	; 0x2c
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
 800b0c0:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800b0c2:	2308      	movs	r3, #8
 800b0c4:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b0d0:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0da:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	69ba      	ldr	r2, [r7, #24]
 800b0e0:	fbb3 f2f2 	udiv	r2, r3, r2
 800b0e4:	69b9      	ldr	r1, [r7, #24]
 800b0e6:	fb01 f202 	mul.w	r2, r1, r2
 800b0ea:	1a9b      	subs	r3, r3, r2
 800b0ec:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	627b      	str	r3, [r7, #36]	; 0x24
 800b0f2:	e030      	b.n	800b156 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800b0f8:	68fa      	ldr	r2, [r7, #12]
 800b0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fc:	4413      	add	r3, r2
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800b102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	429a      	cmp	r2, r3
 800b108:	d11e      	bne.n	800b148 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800b10a:	7ffa      	ldrb	r2, [r7, #31]
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	fa42 f303 	asr.w	r3, r2, r3
 800b112:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800b118:	e016      	b.n	800b148 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800b11a:	7ffb      	ldrb	r3, [r7, #31]
 800b11c:	f003 0301 	and.w	r3, r3, #1
 800b120:	2b00      	cmp	r3, #0
 800b122:	d00b      	beq.n	800b13c <get_next_good_spad+0x88>
				success = 1;
 800b124:	2301      	movs	r3, #1
 800b126:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800b128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12a:	69ba      	ldr	r2, [r7, #24]
 800b12c:	fb03 f202 	mul.w	r2, r3, r2
 800b130:	6a3b      	ldr	r3, [r7, #32]
 800b132:	4413      	add	r3, r2
 800b134:	461a      	mov	r2, r3
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	601a      	str	r2, [r3, #0]
				break;
 800b13a:	e009      	b.n	800b150 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800b13c:	7ffb      	ldrb	r3, [r7, #31]
 800b13e:	085b      	lsrs	r3, r3, #1
 800b140:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800b142:	6a3b      	ldr	r3, [r7, #32]
 800b144:	3301      	adds	r3, #1
 800b146:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800b148:	6a3a      	ldr	r2, [r7, #32]
 800b14a:	69bb      	ldr	r3, [r7, #24]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d3e4      	bcc.n	800b11a <get_next_good_spad+0x66>
				coarseIndex++) {
 800b150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b152:	3301      	adds	r3, #1
 800b154:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800b156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d202      	bcs.n	800b164 <get_next_good_spad+0xb0>
 800b15e:	7fbb      	ldrb	r3, [r7, #30]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d0c7      	beq.n	800b0f4 <get_next_good_spad+0x40>
		}

	}
}
 800b164:	bf00      	nop
 800b166:	372c      	adds	r7, #44	; 0x2c
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800b170:	b480      	push	{r7}
 800b172:	b085      	sub	sp, #20
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800b178:	2301      	movs	r3, #1
 800b17a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	099b      	lsrs	r3, r3, #6
 800b180:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800b182:	4a07      	ldr	r2, [pc, #28]	; (800b1a0 <is_aperture+0x30>)
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d101      	bne.n	800b192 <is_aperture+0x22>
		isAperture = 0;
 800b18e:	2300      	movs	r3, #0
 800b190:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800b192:	7bfb      	ldrb	r3, [r7, #15]
}
 800b194:	4618      	mov	r0, r3
 800b196:	3714      	adds	r7, #20
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr
 800b1a0:	200002c0 	.word	0x200002c0

0800b1a4 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b089      	sub	sp, #36	; 0x24
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	60b9      	str	r1, [r7, #8]
 800b1ae:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800b1b4:	2308      	movs	r3, #8
 800b1b6:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1c0:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	69ba      	ldr	r2, [r7, #24]
 800b1c6:	fbb3 f2f2 	udiv	r2, r3, r2
 800b1ca:	69b9      	ldr	r1, [r7, #24]
 800b1cc:	fb01 f202 	mul.w	r2, r1, r2
 800b1d0:	1a9b      	subs	r3, r3, r2
 800b1d2:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800b1d4:	697a      	ldr	r2, [r7, #20]
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d302      	bcc.n	800b1e2 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b1dc:	23ce      	movs	r3, #206	; 0xce
 800b1de:	77fb      	strb	r3, [r7, #31]
 800b1e0:	e010      	b.n	800b204 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800b1e2:	68fa      	ldr	r2, [r7, #12]
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	b25a      	sxtb	r2, r3
 800b1ec:	2101      	movs	r1, #1
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	fa01 f303 	lsl.w	r3, r1, r3
 800b1f4:	b25b      	sxtb	r3, r3
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	b259      	sxtb	r1, r3
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	4413      	add	r3, r2
 800b200:	b2ca      	uxtb	r2, r1
 800b202:	701a      	strb	r2, [r3, #0]

	return status;
 800b204:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3724      	adds	r7, #36	; 0x24
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800b21e:	2306      	movs	r3, #6
 800b220:	683a      	ldr	r2, [r7, #0]
 800b222:	21b0      	movs	r1, #176	; 0xb0
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f003 f991 	bl	800e54c <VL53L0X_WriteMulti>
 800b22a:	4603      	mov	r3, r0
 800b22c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800b22e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b084      	sub	sp, #16
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
 800b242:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800b244:	2306      	movs	r3, #6
 800b246:	683a      	ldr	r2, [r7, #0]
 800b248:	21b0      	movs	r1, #176	; 0xb0
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f003 f9a5 	bl	800e59a <VL53L0X_ReadMulti>
 800b250:	4603      	mov	r3, r0
 800b252:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800b254:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b08c      	sub	sp, #48	; 0x30
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	607a      	str	r2, [r7, #4]
 800b26a:	603b      	str	r3, [r7, #0]
 800b26c:	460b      	mov	r3, r1
 800b26e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b270:	2300      	movs	r3, #0
 800b272:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800b276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b278:	61fb      	str	r3, [r7, #28]
	uint32_t currentSpad;
	uint8_t checkSpadArray[6]= {0,};
 800b27a:	2300      	movs	r3, #0
 800b27c:	617b      	str	r3, [r7, #20]
 800b27e:	2300      	movs	r3, #0
 800b280:	833b      	strh	r3, [r7, #24]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */
//	 VL53L0X_ERROR_REF_SPAD_INIT error. nextGoodSpad= -1
	currentSpad = offset;
 800b282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b284:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800b286:	2300      	movs	r3, #0
 800b288:	62bb      	str	r3, [r7, #40]	; 0x28
 800b28a:	e02b      	b.n	800b2e4 <enable_ref_spads+0x84>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800b28c:	f107 031c 	add.w	r3, r7, #28
 800b290:	6a3a      	ldr	r2, [r7, #32]
 800b292:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f7ff ff0d 	bl	800b0b4 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2a0:	d103      	bne.n	800b2aa <enable_ref_spads+0x4a>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b2a2:	23ce      	movs	r3, #206	; 0xce
 800b2a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800b2a8:	e020      	b.n	800b2ec <enable_ref_spads+0x8c>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800b2aa:	69fb      	ldr	r3, [r7, #28]
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2b0:	4413      	add	r3, r2
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7ff ff5c 	bl	800b170 <is_aperture>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	7afb      	ldrb	r3, [r7, #11]
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d003      	beq.n	800b2ca <enable_ref_spads+0x6a>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b2c2:	23ce      	movs	r3, #206	; 0xce
 800b2c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800b2c8:	e010      	b.n	800b2ec <enable_ref_spads+0x8c>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800b2ca:	69fb      	ldr	r3, [r7, #28]
 800b2cc:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800b2ce:	6a3a      	ldr	r2, [r7, #32]
 800b2d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b2d2:	6838      	ldr	r0, [r7, #0]
 800b2d4:	f7ff ff66 	bl	800b1a4 <enable_spad_bit>
		currentSpad++;
 800b2d8:	6a3b      	ldr	r3, [r7, #32]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800b2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d3cf      	bcc.n	800b28c <enable_ref_spads+0x2c>
	}
	*lastSpad = currentSpad;
 800b2ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2ee:	6a3a      	ldr	r2, [r7, #32]
 800b2f0:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800b2f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d106      	bne.n	800b308 <enable_ref_spads+0xa8>
		status = set_ref_spad_map(Dev, spadArray);
 800b2fa:	6839      	ldr	r1, [r7, #0]
 800b2fc:	68f8      	ldr	r0, [r7, #12]
 800b2fe:	f7ff ff89 	bl	800b214 <set_ref_spad_map>
 800b302:	4603      	mov	r3, r0
 800b304:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800b308:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d121      	bne.n	800b354 <enable_ref_spads+0xf4>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800b310:	f107 0314 	add.w	r3, r7, #20
 800b314:	4619      	mov	r1, r3
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	f7ff ff8f 	bl	800b23a <get_ref_spad_map>
 800b31c:	4603      	mov	r3, r0
 800b31e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800b322:	2300      	movs	r3, #0
 800b324:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800b326:	e011      	b.n	800b34c <enable_ref_spads+0xec>
			if (spadArray[i] != checkSpadArray[i]) {
 800b328:	683a      	ldr	r2, [r7, #0]
 800b32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32c:	4413      	add	r3, r2
 800b32e:	781a      	ldrb	r2, [r3, #0]
 800b330:	f107 0114 	add.w	r1, r7, #20
 800b334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b336:	440b      	add	r3, r1
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d003      	beq.n	800b346 <enable_ref_spads+0xe6>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b33e:	23ce      	movs	r3, #206	; 0xce
 800b340:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800b344:	e006      	b.n	800b354 <enable_ref_spads+0xf4>
			}
			i++;
 800b346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b348:	3301      	adds	r3, #1
 800b34a:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800b34c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b350:	429a      	cmp	r2, r3
 800b352:	d3e9      	bcc.n	800b328 <enable_ref_spads+0xc8>
		}
	}
	return status;
 800b354:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3730      	adds	r7, #48	; 0x30
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b08a      	sub	sp, #40	; 0x28
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b36a:	2300      	movs	r3, #0
 800b36c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800b370:	2300      	movs	r3, #0
 800b372:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b37c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800b380:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b384:	2b00      	cmp	r3, #0
 800b386:	d107      	bne.n	800b398 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800b388:	22c0      	movs	r2, #192	; 0xc0
 800b38a:	2101      	movs	r1, #1
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f003 f929 	bl	800e5e4 <VL53L0X_WrByte>
 800b392:	4603      	mov	r3, r0
 800b394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800b398:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d108      	bne.n	800b3b2 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800b3a0:	f107 0308 	add.w	r3, r7, #8
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f7ff fc40 	bl	800ac2c <VL53L0X_PerformSingleRangingMeasurement>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800b3b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d107      	bne.n	800b3ca <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	21ff      	movs	r1, #255	; 0xff
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f003 f910 	bl	800e5e4 <VL53L0X_WrByte>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800b3ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d107      	bne.n	800b3e2 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800b3d2:	683a      	ldr	r2, [r7, #0]
 800b3d4:	21b6      	movs	r1, #182	; 0xb6
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f003 f9a1 	bl	800e71e <VL53L0X_RdWord>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800b3e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d107      	bne.n	800b3fa <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	21ff      	movs	r1, #255	; 0xff
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f003 f8f8 	bl	800e5e4 <VL53L0X_WrByte>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800b3fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d112      	bne.n	800b428 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b402:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b406:	461a      	mov	r2, r3
 800b408:	2101      	movs	r1, #1
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f003 f8ea 	bl	800e5e4 <VL53L0X_WrByte>
 800b410:	4603      	mov	r3, r0
 800b412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800b416:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d104      	bne.n	800b428 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b424:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800b428:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3728      	adds	r7, #40	; 0x28
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800b434:	b590      	push	{r4, r7, lr}
 800b436:	b09d      	sub	sp, #116	; 0x74
 800b438:	af06      	add	r7, sp, #24
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b440:	2300      	movs	r3, #0
 800b442:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800b446:	23b4      	movs	r3, #180	; 0xb4
 800b448:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800b44c:	2303      	movs	r3, #3
 800b44e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800b450:	232c      	movs	r3, #44	; 0x2c
 800b452:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800b454:	2300      	movs	r3, #0
 800b456:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800b458:	2300      	movs	r3, #0
 800b45a:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800b45c:	2300      	movs	r3, #0
 800b45e:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800b460:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800b464:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800b466:	2300      	movs	r3, #0
 800b468:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800b46a:	2300      	movs	r3, #0
 800b46c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800b46e:	2306      	movs	r3, #6
 800b470:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800b472:	2300      	movs	r3, #0
 800b474:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800b476:	2300      	movs	r3, #0
 800b478:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800b47a:	2300      	movs	r3, #0
 800b47c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800b480:	2300      	movs	r3, #0
 800b482:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800b484:	2300      	movs	r3, #0
 800b486:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800b488:	2300      	movs	r3, #0
 800b48a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800b48c:	2300      	movs	r3, #0
 800b48e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800b498:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800b49a:	2300      	movs	r3, #0
 800b49c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b49e:	e009      	b.n	800b4b4 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800b4a0:	68fa      	ldr	r2, [r7, #12]
 800b4a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4a4:	4413      	add	r3, r2
 800b4a6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800b4ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d3f1      	bcc.n	800b4a0 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b4bc:	2201      	movs	r2, #1
 800b4be:	21ff      	movs	r1, #255	; 0xff
 800b4c0:	68f8      	ldr	r0, [r7, #12]
 800b4c2:	f003 f88f 	bl	800e5e4 <VL53L0X_WrByte>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800b4cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d107      	bne.n	800b4e4 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	214f      	movs	r1, #79	; 0x4f
 800b4d8:	68f8      	ldr	r0, [r7, #12]
 800b4da:	f003 f883 	bl	800e5e4 <VL53L0X_WrByte>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800b4e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d107      	bne.n	800b4fc <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800b4ec:	222c      	movs	r2, #44	; 0x2c
 800b4ee:	214e      	movs	r1, #78	; 0x4e
 800b4f0:	68f8      	ldr	r0, [r7, #12]
 800b4f2:	f003 f877 	bl	800e5e4 <VL53L0X_WrByte>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800b4fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b500:	2b00      	cmp	r3, #0
 800b502:	d107      	bne.n	800b514 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b504:	2200      	movs	r2, #0
 800b506:	21ff      	movs	r1, #255	; 0xff
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	f003 f86b 	bl	800e5e4 <VL53L0X_WrByte>
 800b50e:	4603      	mov	r3, r0
 800b510:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800b514:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d109      	bne.n	800b530 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800b51c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b520:	461a      	mov	r2, r3
 800b522:	21b6      	movs	r1, #182	; 0xb6
 800b524:	68f8      	ldr	r0, [r7, #12]
 800b526:	f003 f85d 	bl	800e5e4 <VL53L0X_WrByte>
 800b52a:	4603      	mov	r3, r0
 800b52c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800b530:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b534:	2b00      	cmp	r3, #0
 800b536:	d107      	bne.n	800b548 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800b538:	2200      	movs	r2, #0
 800b53a:	2180      	movs	r1, #128	; 0x80
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f003 f851 	bl	800e5e4 <VL53L0X_WrByte>
 800b542:	4603      	mov	r3, r0
 800b544:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800b548:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d10a      	bne.n	800b566 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800b550:	f107 0210 	add.w	r2, r7, #16
 800b554:	f107 0111 	add.w	r1, r7, #17
 800b558:	2300      	movs	r3, #0
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	f000 fbbb 	bl	800bcd6 <VL53L0X_perform_ref_calibration>
 800b560:	4603      	mov	r3, r0
 800b562:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);
	// error
	if (Status == VL53L0X_ERROR_NONE) {
 800b566:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d121      	bne.n	800b5b2 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800b56e:	2300      	movs	r3, #0
 800b570:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800b572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b574:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800b576:	2300      	movs	r3, #0
 800b578:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800b57a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b57c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800b58a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b58e:	f107 0218 	add.w	r2, r7, #24
 800b592:	9204      	str	r2, [sp, #16]
 800b594:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b596:	9203      	str	r2, [sp, #12]
 800b598:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b59a:	9202      	str	r2, [sp, #8]
 800b59c:	9301      	str	r3, [sp, #4]
 800b59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a0:	9300      	str	r3, [sp, #0]
 800b5a2:	4623      	mov	r3, r4
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	68f8      	ldr	r0, [r7, #12]
 800b5a8:	f7ff fe5a 	bl	800b260 <enable_ref_spads>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b5b2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d174      	bne.n	800b6a4 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800b5ba:	69bb      	ldr	r3, [r7, #24]
 800b5bc:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800b5be:	f107 0312 	add.w	r3, r7, #18
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	f7ff fecb 	bl	800b360 <perform_ref_signal_measurement>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800b5d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d161      	bne.n	800b69c <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800b5d8:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800b5da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d25d      	bcs.n	800b69c <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5e4:	e009      	b.n	800b5fa <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800b5e6:	68fa      	ldr	r2, [r7, #12]
 800b5e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5ea:	4413      	add	r3, r2
 800b5ec:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800b5f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d3f1      	bcc.n	800b5e6 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800b602:	e002      	b.n	800b60a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800b604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b606:	3301      	adds	r3, #1
 800b608:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800b60a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800b60e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b610:	4413      	add	r3, r2
 800b612:	4618      	mov	r0, r3
 800b614:	f7ff fdac 	bl	800b170 <is_aperture>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d103      	bne.n	800b626 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800b61e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b622:	429a      	cmp	r2, r3
 800b624:	d3ee      	bcc.n	800b604 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800b626:	2301      	movs	r3, #1
 800b628:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800b62a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b62c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800b63a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b63e:	f107 0218 	add.w	r2, r7, #24
 800b642:	9204      	str	r2, [sp, #16]
 800b644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b646:	9203      	str	r2, [sp, #12]
 800b648:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b64a:	9202      	str	r2, [sp, #8]
 800b64c:	9301      	str	r3, [sp, #4]
 800b64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b650:	9300      	str	r3, [sp, #0]
 800b652:	4623      	mov	r3, r4
 800b654:	4602      	mov	r2, r0
 800b656:	68f8      	ldr	r0, [r7, #12]
 800b658:	f7ff fe02 	bl	800b260 <enable_ref_spads>
 800b65c:	4603      	mov	r3, r0
 800b65e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800b662:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b666:	2b00      	cmp	r3, #0
 800b668:	d11b      	bne.n	800b6a2 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800b66e:	f107 0312 	add.w	r3, r7, #18
 800b672:	4619      	mov	r1, r3
 800b674:	68f8      	ldr	r0, [r7, #12]
 800b676:	f7ff fe73 	bl	800b360 <perform_ref_signal_measurement>
 800b67a:	4603      	mov	r3, r0
 800b67c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800b680:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b684:	2b00      	cmp	r3, #0
 800b686:	d10c      	bne.n	800b6a2 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800b688:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800b68a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d208      	bcs.n	800b6a2 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800b690:	2301      	movs	r3, #1
 800b692:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800b696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b698:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800b69a:	e002      	b.n	800b6a2 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800b69c:	2300      	movs	r3, #0
 800b69e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6a0:	e000      	b.n	800b6a4 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800b6a2:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800b6a4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	f040 80af 	bne.w	800b80c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800b6ae:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800b6b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	f240 80aa 	bls.w	800b80c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800b6b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800b6be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6c0:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800b6c8:	f107 031c 	add.w	r3, r7, #28
 800b6cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f008 fbd6 	bl	8013e80 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800b6d4:	8a7b      	ldrh	r3, [r7, #18]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b6da:	1ad3      	subs	r3, r2, r3
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	bfb8      	it	lt
 800b6e0:	425b      	neglt	r3, r3
 800b6e2:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800b6ea:	e086      	b.n	800b7fa <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800b6f2:	f107 0314 	add.w	r3, r7, #20
 800b6f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b6f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6fa:	f7ff fcdb 	bl	800b0b4 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b704:	d103      	bne.n	800b70e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b706:	23ce      	movs	r3, #206	; 0xce
 800b708:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800b70c:	e07e      	b.n	800b80c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800b70e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b712:	697a      	ldr	r2, [r7, #20]
 800b714:	4413      	add	r3, r2
 800b716:	4618      	mov	r0, r3
 800b718:	f7ff fd2a 	bl	800b170 <is_aperture>
 800b71c:	4603      	mov	r3, r0
 800b71e:	461a      	mov	r2, r3
 800b720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b722:	4293      	cmp	r3, r2
 800b724:	d003      	beq.n	800b72e <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800b726:	2301      	movs	r3, #1
 800b728:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800b72c:	e06e      	b.n	800b80c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800b72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b730:	3301      	adds	r3, #1
 800b732:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800b73e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b740:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b742:	4618      	mov	r0, r3
 800b744:	f7ff fd2e 	bl	800b1a4 <enable_spad_bit>
 800b748:	4603      	mov	r3, r0
 800b74a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800b74e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b752:	2b00      	cmp	r3, #0
 800b754:	d10c      	bne.n	800b770 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800b756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b758:	3301      	adds	r3, #1
 800b75a:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800b762:	4619      	mov	r1, r3
 800b764:	68f8      	ldr	r0, [r7, #12]
 800b766:	f7ff fd55 	bl	800b214 <set_ref_spad_map>
 800b76a:	4603      	mov	r3, r0
 800b76c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800b770:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b774:	2b00      	cmp	r3, #0
 800b776:	d146      	bne.n	800b806 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800b778:	f107 0312 	add.w	r3, r7, #18
 800b77c:	4619      	mov	r1, r3
 800b77e:	68f8      	ldr	r0, [r7, #12]
 800b780:	f7ff fdee 	bl	800b360 <perform_ref_signal_measurement>
 800b784:	4603      	mov	r3, r0
 800b786:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800b78a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d13b      	bne.n	800b80a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800b792:	8a7b      	ldrh	r3, [r7, #18]
 800b794:	461a      	mov	r2, r3
 800b796:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b798:	1ad3      	subs	r3, r2, r3
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	bfb8      	it	lt
 800b79e:	425b      	neglt	r3, r3
 800b7a0:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800b7a2:	8a7b      	ldrh	r3, [r7, #18]
 800b7a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d21c      	bcs.n	800b7e4 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800b7aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d914      	bls.n	800b7dc <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800b7b2:	f107 031c 	add.w	r3, r7, #28
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	68f8      	ldr	r0, [r7, #12]
 800b7ba:	f7ff fd2b 	bl	800b214 <set_ref_spad_map>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800b7ca:	f107 011c 	add.w	r1, r7, #28
 800b7ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f008 fb55 	bl	8013e80 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800b7d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7d8:	3b01      	subs	r3, #1
 800b7da:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7e2:	e00a      	b.n	800b7fa <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800b7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e6:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800b7ee:	f107 031c 	add.w	r3, r7, #28
 800b7f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f008 fb43 	bl	8013e80 <memcpy>
		while (!complete) {
 800b7fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	f43f af74 	beq.w	800b6ec <VL53L0X_perform_ref_spad_management+0x2b8>
 800b804:	e002      	b.n	800b80c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800b806:	bf00      	nop
 800b808:	e000      	b.n	800b80c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800b80a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b80c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b810:	2b00      	cmp	r3, #0
 800b812:	d115      	bne.n	800b840 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b818:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800b820:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2201      	movs	r2, #1
 800b826:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	b2da      	uxtb	r2, r3
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	781a      	ldrb	r2, [r3, #0]
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800b840:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800b844:	4618      	mov	r0, r3
 800b846:	375c      	adds	r7, #92	; 0x5c
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd90      	pop	{r4, r7, pc}

0800b84c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800b84c:	b590      	push	{r4, r7, lr}
 800b84e:	b093      	sub	sp, #76	; 0x4c
 800b850:	af06      	add	r7, sp, #24
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	4613      	mov	r3, r2
 800b858:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b85a:	2300      	movs	r3, #0
 800b85c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800b860:	2300      	movs	r3, #0
 800b862:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800b864:	23b4      	movs	r3, #180	; 0xb4
 800b866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800b86a:	2306      	movs	r3, #6
 800b86c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800b86e:	232c      	movs	r3, #44	; 0x2c
 800b870:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b872:	2201      	movs	r2, #1
 800b874:	21ff      	movs	r1, #255	; 0xff
 800b876:	68f8      	ldr	r0, [r7, #12]
 800b878:	f002 feb4 	bl	800e5e4 <VL53L0X_WrByte>
 800b87c:	4603      	mov	r3, r0
 800b87e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800b882:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b886:	2b00      	cmp	r3, #0
 800b888:	d107      	bne.n	800b89a <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800b88a:	2200      	movs	r2, #0
 800b88c:	214f      	movs	r1, #79	; 0x4f
 800b88e:	68f8      	ldr	r0, [r7, #12]
 800b890:	f002 fea8 	bl	800e5e4 <VL53L0X_WrByte>
 800b894:	4603      	mov	r3, r0
 800b896:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800b89a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d107      	bne.n	800b8b2 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800b8a2:	222c      	movs	r2, #44	; 0x2c
 800b8a4:	214e      	movs	r1, #78	; 0x4e
 800b8a6:	68f8      	ldr	r0, [r7, #12]
 800b8a8:	f002 fe9c 	bl	800e5e4 <VL53L0X_WrByte>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800b8b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d107      	bne.n	800b8ca <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	21ff      	movs	r1, #255	; 0xff
 800b8be:	68f8      	ldr	r0, [r7, #12]
 800b8c0:	f002 fe90 	bl	800e5e4 <VL53L0X_WrByte>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800b8ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d109      	bne.n	800b8e6 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800b8d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	21b6      	movs	r1, #182	; 0xb6
 800b8da:	68f8      	ldr	r0, [r7, #12]
 800b8dc:	f002 fe82 	bl	800e5e4 <VL53L0X_WrByte>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	627b      	str	r3, [r7, #36]	; 0x24
 800b8ea:	e009      	b.n	800b900 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800b8ec:	68fa      	ldr	r2, [r7, #12]
 800b8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f0:	4413      	add	r3, r2
 800b8f2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800b8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	627b      	str	r3, [r7, #36]	; 0x24
 800b900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b902:	69fb      	ldr	r3, [r7, #28]
 800b904:	429a      	cmp	r2, r3
 800b906:	d3f1      	bcc.n	800b8ec <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800b908:	79fb      	ldrb	r3, [r7, #7]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d011      	beq.n	800b932 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800b90e:	e002      	b.n	800b916 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800b910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b912:	3301      	adds	r3, #1
 800b914:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800b916:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91c:	4413      	add	r3, r2
 800b91e:	4618      	mov	r0, r3
 800b920:	f7ff fc26 	bl	800b170 <is_aperture>
 800b924:	4603      	mov	r3, r0
 800b926:	2b00      	cmp	r3, #0
 800b928:	d103      	bne.n	800b932 <VL53L0X_set_reference_spads+0xe6>
 800b92a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b92c:	69bb      	ldr	r3, [r7, #24]
 800b92e:	429a      	cmp	r2, r3
 800b930:	d3ee      	bcc.n	800b910 <VL53L0X_set_reference_spads+0xc4>
	}

	// 21.03.01 Status= -50 ?
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800b93e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b942:	79f9      	ldrb	r1, [r7, #7]
 800b944:	f107 0214 	add.w	r2, r7, #20
 800b948:	9204      	str	r2, [sp, #16]
 800b94a:	68ba      	ldr	r2, [r7, #8]
 800b94c:	9203      	str	r2, [sp, #12]
 800b94e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b950:	9202      	str	r2, [sp, #8]
 800b952:	9301      	str	r3, [sp, #4]
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	9300      	str	r3, [sp, #0]
 800b958:	4623      	mov	r3, r4
 800b95a:	4602      	mov	r2, r0
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f7ff fc7f 	bl	800b260 <enable_ref_spads>
 800b962:	4603      	mov	r3, r0
 800b964:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800b968:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d10c      	bne.n	800b98a <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2201      	movs	r2, #1
 800b974:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	b2da      	uxtb	r2, r3
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	79fa      	ldrb	r2, [r7, #7]
 800b986:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800b98a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3734      	adds	r7, #52	; 0x34
 800b992:	46bd      	mov	sp, r7
 800b994:	bd90      	pop	{r4, r7, pc}

0800b996 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800b996:	b580      	push	{r7, lr}
 800b998:	b084      	sub	sp, #16
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	6078      	str	r0, [r7, #4]
 800b99e:	460b      	mov	r3, r1
 800b9a0:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b9a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d10a      	bne.n	800b9c4 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800b9ae:	78fb      	ldrb	r3, [r7, #3]
 800b9b0:	f043 0301 	orr.w	r3, r3, #1
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	2100      	movs	r1, #0
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f002 fe12 	bl	800e5e4 <VL53L0X_WrByte>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800b9c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d104      	bne.n	800b9d6 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 f9bf 	bl	800bd50 <VL53L0X_measurement_poll_for_completion>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b9d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d105      	bne.n	800b9ea <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b9de:	2100      	movs	r1, #0
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f7ff faad 	bl	800af40 <VL53L0X_ClearInterruptMask>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b9ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d106      	bne.n	800ba00 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	2100      	movs	r1, #0
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f002 fdf4 	bl	800e5e4 <VL53L0X_WrByte>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	73fb      	strb	r3, [r7, #15]

	return Status;
 800ba00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b084      	sub	sp, #16
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	4608      	mov	r0, r1
 800ba16:	4611      	mov	r1, r2
 800ba18:	461a      	mov	r2, r3
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	70fb      	strb	r3, [r7, #3]
 800ba1e:	460b      	mov	r3, r1
 800ba20:	70bb      	strb	r3, [r7, #2]
 800ba22:	4613      	mov	r3, r2
 800ba24:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba26:	2300      	movs	r3, #0
 800ba28:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ba2e:	2201      	movs	r2, #1
 800ba30:	21ff      	movs	r1, #255	; 0xff
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f002 fdd6 	bl	800e5e4 <VL53L0X_WrByte>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	7bfb      	ldrb	r3, [r7, #15]
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800ba42:	2200      	movs	r2, #0
 800ba44:	2100      	movs	r1, #0
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f002 fdcc 	bl	800e5e4 <VL53L0X_WrByte>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	461a      	mov	r2, r3
 800ba50:	7bfb      	ldrb	r3, [r7, #15]
 800ba52:	4313      	orrs	r3, r2
 800ba54:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ba56:	2200      	movs	r2, #0
 800ba58:	21ff      	movs	r1, #255	; 0xff
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f002 fdc2 	bl	800e5e4 <VL53L0X_WrByte>
 800ba60:	4603      	mov	r3, r0
 800ba62:	461a      	mov	r2, r3
 800ba64:	7bfb      	ldrb	r3, [r7, #15]
 800ba66:	4313      	orrs	r3, r2
 800ba68:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800ba6a:	78fb      	ldrb	r3, [r7, #3]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d01e      	beq.n	800baae <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800ba70:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d009      	beq.n	800ba8c <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800ba78:	69ba      	ldr	r2, [r7, #24]
 800ba7a:	21cb      	movs	r1, #203	; 0xcb
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f002 fe2f 	bl	800e6e0 <VL53L0X_RdByte>
 800ba82:	4603      	mov	r3, r0
 800ba84:	461a      	mov	r2, r3
 800ba86:	7bfb      	ldrb	r3, [r7, #15]
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800ba8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d02a      	beq.n	800baea <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800ba94:	f107 030e 	add.w	r3, r7, #14
 800ba98:	461a      	mov	r2, r3
 800ba9a:	21ee      	movs	r1, #238	; 0xee
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f002 fe1f 	bl	800e6e0 <VL53L0X_RdByte>
 800baa2:	4603      	mov	r3, r0
 800baa4:	461a      	mov	r2, r3
 800baa6:	7bfb      	ldrb	r3, [r7, #15]
 800baa8:	4313      	orrs	r3, r2
 800baaa:	73fb      	strb	r3, [r7, #15]
 800baac:	e01d      	b.n	800baea <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800baae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d00a      	beq.n	800bacc <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800bab6:	78bb      	ldrb	r3, [r7, #2]
 800bab8:	461a      	mov	r2, r3
 800baba:	21cb      	movs	r1, #203	; 0xcb
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f002 fd91 	bl	800e5e4 <VL53L0X_WrByte>
 800bac2:	4603      	mov	r3, r0
 800bac4:	461a      	mov	r2, r3
 800bac6:	7bfb      	ldrb	r3, [r7, #15]
 800bac8:	4313      	orrs	r3, r2
 800baca:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800bacc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d00a      	beq.n	800baea <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800bad4:	787b      	ldrb	r3, [r7, #1]
 800bad6:	2280      	movs	r2, #128	; 0x80
 800bad8:	21ee      	movs	r1, #238	; 0xee
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f002 fdc2 	bl	800e664 <VL53L0X_UpdateByte>
 800bae0:	4603      	mov	r3, r0
 800bae2:	461a      	mov	r2, r3
 800bae4:	7bfb      	ldrb	r3, [r7, #15]
 800bae6:	4313      	orrs	r3, r2
 800bae8:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800baea:	2201      	movs	r2, #1
 800baec:	21ff      	movs	r1, #255	; 0xff
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f002 fd78 	bl	800e5e4 <VL53L0X_WrByte>
 800baf4:	4603      	mov	r3, r0
 800baf6:	461a      	mov	r2, r3
 800baf8:	7bfb      	ldrb	r3, [r7, #15]
 800bafa:	4313      	orrs	r3, r2
 800bafc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800bafe:	2201      	movs	r2, #1
 800bb00:	2100      	movs	r1, #0
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f002 fd6e 	bl	800e5e4 <VL53L0X_WrByte>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	7bfb      	ldrb	r3, [r7, #15]
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bb12:	2200      	movs	r2, #0
 800bb14:	21ff      	movs	r1, #255	; 0xff
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f002 fd64 	bl	800e5e4 <VL53L0X_WrByte>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	461a      	mov	r2, r3
 800bb20:	7bfb      	ldrb	r3, [r7, #15]
 800bb22:	4313      	orrs	r3, r2
 800bb24:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800bb26:	7bbb      	ldrb	r3, [r7, #14]
 800bb28:	f023 0310 	bic.w	r3, r3, #16
 800bb2c:	b2da      	uxtb	r2, r3
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	701a      	strb	r2, [r3, #0]

	return Status;
 800bb32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b08a      	sub	sp, #40	; 0x28
 800bb42:	af04      	add	r7, sp, #16
 800bb44:	60f8      	str	r0, [r7, #12]
 800bb46:	60b9      	str	r1, [r7, #8]
 800bb48:	4611      	mov	r1, r2
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	71fb      	strb	r3, [r7, #7]
 800bb50:	4613      	mov	r3, r2
 800bb52:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb54:	2300      	movs	r3, #0
 800bb56:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800bb60:	2300      	movs	r3, #0
 800bb62:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800bb64:	2300      	movs	r3, #0
 800bb66:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800bb68:	79bb      	ldrb	r3, [r7, #6]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d003      	beq.n	800bb76 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800bb74:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800bb76:	2201      	movs	r2, #1
 800bb78:	2101      	movs	r1, #1
 800bb7a:	68f8      	ldr	r0, [r7, #12]
 800bb7c:	f002 fd32 	bl	800e5e4 <VL53L0X_WrByte>
 800bb80:	4603      	mov	r3, r0
 800bb82:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800bb84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d105      	bne.n	800bb98 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800bb8c:	2140      	movs	r1, #64	; 0x40
 800bb8e:	68f8      	ldr	r0, [r7, #12]
 800bb90:	f7ff ff01 	bl	800b996 <VL53L0X_perform_single_ref_calibration>
 800bb94:	4603      	mov	r3, r0
 800bb96:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800bb98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d115      	bne.n	800bbcc <VL53L0X_perform_vhv_calibration+0x8e>
 800bba0:	79fb      	ldrb	r3, [r7, #7]
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d112      	bne.n	800bbcc <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800bba6:	7d39      	ldrb	r1, [r7, #20]
 800bba8:	7d7a      	ldrb	r2, [r7, #21]
 800bbaa:	2300      	movs	r3, #0
 800bbac:	9303      	str	r3, [sp, #12]
 800bbae:	2301      	movs	r3, #1
 800bbb0:	9302      	str	r3, [sp, #8]
 800bbb2:	f107 0313 	add.w	r3, r7, #19
 800bbb6:	9301      	str	r3, [sp, #4]
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	9300      	str	r3, [sp, #0]
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	2101      	movs	r1, #1
 800bbc0:	68f8      	ldr	r0, [r7, #12]
 800bbc2:	f7ff ff23 	bl	800ba0c <VL53L0X_ref_calibration_io>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	75fb      	strb	r3, [r7, #23]
 800bbca:	e002      	b.n	800bbd2 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800bbd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d112      	bne.n	800bc00 <VL53L0X_perform_vhv_calibration+0xc2>
 800bbda:	79bb      	ldrb	r3, [r7, #6]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00f      	beq.n	800bc00 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800bbe0:	7dbb      	ldrb	r3, [r7, #22]
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	2101      	movs	r1, #1
 800bbe6:	68f8      	ldr	r0, [r7, #12]
 800bbe8:	f002 fcfc 	bl	800e5e4 <VL53L0X_WrByte>
 800bbec:	4603      	mov	r3, r0
 800bbee:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800bbf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d103      	bne.n	800bc00 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	7dba      	ldrb	r2, [r7, #22]
 800bbfc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800bc00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3718      	adds	r7, #24
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b08a      	sub	sp, #40	; 0x28
 800bc10:	af04      	add	r7, sp, #16
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	4611      	mov	r1, r2
 800bc18:	461a      	mov	r2, r3
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	71fb      	strb	r3, [r7, #7]
 800bc1e:	4613      	mov	r3, r2
 800bc20:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc22:	2300      	movs	r3, #0
 800bc24:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800bc26:	2300      	movs	r3, #0
 800bc28:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800bc32:	79bb      	ldrb	r3, [r7, #6]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d003      	beq.n	800bc40 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800bc3e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800bc40:	2202      	movs	r2, #2
 800bc42:	2101      	movs	r1, #1
 800bc44:	68f8      	ldr	r0, [r7, #12]
 800bc46:	f002 fccd 	bl	800e5e4 <VL53L0X_WrByte>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800bc4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d105      	bne.n	800bc62 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800bc56:	2100      	movs	r1, #0
 800bc58:	68f8      	ldr	r0, [r7, #12]
 800bc5a:	f7ff fe9c 	bl	800b996 <VL53L0X_perform_single_ref_calibration>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800bc62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d115      	bne.n	800bc96 <VL53L0X_perform_phase_calibration+0x8a>
 800bc6a:	79fb      	ldrb	r3, [r7, #7]
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d112      	bne.n	800bc96 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800bc70:	7d39      	ldrb	r1, [r7, #20]
 800bc72:	7d7a      	ldrb	r2, [r7, #21]
 800bc74:	2301      	movs	r3, #1
 800bc76:	9303      	str	r3, [sp, #12]
 800bc78:	2300      	movs	r3, #0
 800bc7a:	9302      	str	r3, [sp, #8]
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	9301      	str	r3, [sp, #4]
 800bc80:	f107 0313 	add.w	r3, r7, #19
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	460b      	mov	r3, r1
 800bc88:	2101      	movs	r1, #1
 800bc8a:	68f8      	ldr	r0, [r7, #12]
 800bc8c:	f7ff febe 	bl	800ba0c <VL53L0X_ref_calibration_io>
 800bc90:	4603      	mov	r3, r0
 800bc92:	75fb      	strb	r3, [r7, #23]
 800bc94:	e002      	b.n	800bc9c <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800bc9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d112      	bne.n	800bcca <VL53L0X_perform_phase_calibration+0xbe>
 800bca4:	79bb      	ldrb	r3, [r7, #6]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00f      	beq.n	800bcca <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800bcaa:	7dbb      	ldrb	r3, [r7, #22]
 800bcac:	461a      	mov	r2, r3
 800bcae:	2101      	movs	r1, #1
 800bcb0:	68f8      	ldr	r0, [r7, #12]
 800bcb2:	f002 fc97 	bl	800e5e4 <VL53L0X_WrByte>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800bcba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d103      	bne.n	800bcca <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	7dba      	ldrb	r2, [r7, #22]
 800bcc6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800bcca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3718      	adds	r7, #24
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}

0800bcd6 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b086      	sub	sp, #24
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	60f8      	str	r0, [r7, #12]
 800bcde:	60b9      	str	r1, [r7, #8]
 800bce0:	607a      	str	r2, [r7, #4]
 800bce2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bce4:	2300      	movs	r3, #0
 800bce6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800bce8:	2300      	movs	r3, #0
 800bcea:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800bcf2:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800bcf4:	78fa      	ldrb	r2, [r7, #3]
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	68b9      	ldr	r1, [r7, #8]
 800bcfa:	68f8      	ldr	r0, [r7, #12]
 800bcfc:	f7ff ff1f 	bl	800bb3e <VL53L0X_perform_vhv_calibration>
 800bd00:	4603      	mov	r3, r0
 800bd02:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800bd04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d107      	bne.n	800bd1c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800bd0c:	78fa      	ldrb	r2, [r7, #3]
 800bd0e:	2300      	movs	r3, #0
 800bd10:	6879      	ldr	r1, [r7, #4]
 800bd12:	68f8      	ldr	r0, [r7, #12]
 800bd14:	f7ff ff7a 	bl	800bc0c <VL53L0X_perform_phase_calibration>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800bd1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d10f      	bne.n	800bd44 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800bd24:	7dbb      	ldrb	r3, [r7, #22]
 800bd26:	461a      	mov	r2, r3
 800bd28:	2101      	movs	r1, #1
 800bd2a:	68f8      	ldr	r0, [r7, #12]
 800bd2c:	f002 fc5a 	bl	800e5e4 <VL53L0X_WrByte>
 800bd30:	4603      	mov	r3, r0
 800bd32:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800bd34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d103      	bne.n	800bd44 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	7dba      	ldrb	r2, [r7, #22]
 800bd40:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800bd44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3718      	adds	r7, #24
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b086      	sub	sp, #24
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800bd60:	2300      	movs	r3, #0
 800bd62:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800bd64:	f107 030f 	add.w	r3, r7, #15
 800bd68:	4619      	mov	r1, r3
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f7fe fdfa 	bl	800a964 <VL53L0X_GetMeasurementDataReady>
 800bd70:	4603      	mov	r3, r0
 800bd72:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800bd74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d110      	bne.n	800bd9e <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800bd7c:	7bfb      	ldrb	r3, [r7, #15]
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d00f      	beq.n	800bda2 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	3301      	adds	r3, #1
 800bd86:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800bd8e:	d302      	bcc.n	800bd96 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800bd90:	23f9      	movs	r3, #249	; 0xf9
 800bd92:	75fb      	strb	r3, [r7, #23]
			break;
 800bd94:	e006      	b.n	800bda4 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f002 fcff 	bl	800e79a <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800bd9c:	e7e2      	b.n	800bd64 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800bd9e:	bf00      	nop
 800bda0:	e000      	b.n	800bda4 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800bda2:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800bda4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3718      	adds	r7, #24
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b085      	sub	sp, #20
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800bdbe:	79fb      	ldrb	r3, [r7, #7]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	b2db      	uxtb	r3, r3
 800bdc4:	005b      	lsls	r3, r3, #1
 800bdc6:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800bdc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3714      	adds	r7, #20
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr

0800bdd6 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800bdd6:	b480      	push	{r7}
 800bdd8:	b085      	sub	sp, #20
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800bdde:	2300      	movs	r3, #0
 800bde0:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800bde2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bde6:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800bde8:	e002      	b.n	800bdf0 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	089b      	lsrs	r3, r3, #2
 800bdee:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800bdf0:	68ba      	ldr	r2, [r7, #8]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d8f8      	bhi.n	800bdea <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800bdf8:	e017      	b.n	800be2a <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	4413      	add	r3, r2
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	429a      	cmp	r2, r3
 800be04:	d30b      	bcc.n	800be1e <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800be06:	68fa      	ldr	r2, [r7, #12]
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	4413      	add	r3, r2
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	1ad3      	subs	r3, r2, r3
 800be10:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	085b      	lsrs	r3, r3, #1
 800be16:	68ba      	ldr	r2, [r7, #8]
 800be18:	4413      	add	r3, r2
 800be1a:	60fb      	str	r3, [r7, #12]
 800be1c:	e002      	b.n	800be24 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	085b      	lsrs	r3, r3, #1
 800be22:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	089b      	lsrs	r3, r3, #2
 800be28:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d1e4      	bne.n	800bdfa <VL53L0X_isqrt+0x24>
	}

	return res;
 800be30:	68fb      	ldr	r3, [r7, #12]
}
 800be32:	4618      	mov	r0, r3
 800be34:	3714      	adds	r7, #20
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr

0800be3e <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800be3e:	b580      	push	{r7, lr}
 800be40:	b086      	sub	sp, #24
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be46:	2300      	movs	r3, #0
 800be48:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800be4a:	2200      	movs	r2, #0
 800be4c:	2183      	movs	r1, #131	; 0x83
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f002 fbc8 	bl	800e5e4 <VL53L0X_WrByte>
 800be54:	4603      	mov	r3, r0
 800be56:	461a      	mov	r2, r3
 800be58:	7dfb      	ldrb	r3, [r7, #23]
 800be5a:	4313      	orrs	r3, r2
 800be5c:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800be5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d11e      	bne.n	800bea4 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800be66:	2300      	movs	r3, #0
 800be68:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800be6a:	f107 030f 	add.w	r3, r7, #15
 800be6e:	461a      	mov	r2, r3
 800be70:	2183      	movs	r1, #131	; 0x83
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f002 fc34 	bl	800e6e0 <VL53L0X_RdByte>
 800be78:	4603      	mov	r3, r0
 800be7a:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800be7c:	7bfb      	ldrb	r3, [r7, #15]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d10a      	bne.n	800be98 <VL53L0X_device_read_strobe+0x5a>
 800be82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d106      	bne.n	800be98 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	3301      	adds	r3, #1
 800be8e:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800be96:	d3e8      	bcc.n	800be6a <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800be9e:	d301      	bcc.n	800bea4 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800bea0:	23f9      	movs	r3, #249	; 0xf9
 800bea2:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800bea4:	2201      	movs	r2, #1
 800bea6:	2183      	movs	r1, #131	; 0x83
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f002 fb9b 	bl	800e5e4 <VL53L0X_WrByte>
 800beae:	4603      	mov	r3, r0
 800beb0:	461a      	mov	r2, r3
 800beb2:	7dfb      	ldrb	r3, [r7, #23]
 800beb4:	4313      	orrs	r3, r2
 800beb6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800beb8:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3718      	adds	r7, #24
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b098      	sub	sp, #96	; 0x60
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	460b      	mov	r3, r1
 800bece:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bed0:	2300      	movs	r3, #0
 800bed2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800bed6:	2300      	movs	r3, #0
 800bed8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800bedc:	2300      	movs	r3, #0
 800bede:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800bee2:	2300      	movs	r3, #0
 800bee4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800bee6:	2300      	movs	r3, #0
 800bee8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800beea:	2300      	movs	r3, #0
 800beec:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800beee:	2300      	movs	r3, #0
 800bef0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800bef4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800bef8:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800befa:	2300      	movs	r3, #0
 800befc:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800befe:	2300      	movs	r3, #0
 800bf00:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800bf02:	2300      	movs	r3, #0
 800bf04:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800bf0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800bf10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bf14:	2b07      	cmp	r3, #7
 800bf16:	f000 8408 	beq.w	800c72a <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	2180      	movs	r1, #128	; 0x80
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f002 fb60 	bl	800e5e4 <VL53L0X_WrByte>
 800bf24:	4603      	mov	r3, r0
 800bf26:	461a      	mov	r2, r3
 800bf28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bf32:	2201      	movs	r2, #1
 800bf34:	21ff      	movs	r1, #255	; 0xff
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f002 fb54 	bl	800e5e4 <VL53L0X_WrByte>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	461a      	mov	r2, r3
 800bf40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf44:	4313      	orrs	r3, r2
 800bf46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	2100      	movs	r1, #0
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f002 fb48 	bl	800e5e4 <VL53L0X_WrByte>
 800bf54:	4603      	mov	r3, r0
 800bf56:	461a      	mov	r2, r3
 800bf58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800bf62:	2206      	movs	r2, #6
 800bf64:	21ff      	movs	r1, #255	; 0xff
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f002 fb3c 	bl	800e5e4 <VL53L0X_WrByte>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	461a      	mov	r2, r3
 800bf70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf74:	4313      	orrs	r3, r2
 800bf76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800bf7a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800bf7e:	461a      	mov	r2, r3
 800bf80:	2183      	movs	r1, #131	; 0x83
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f002 fbac 	bl	800e6e0 <VL53L0X_RdByte>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf90:	4313      	orrs	r3, r2
 800bf92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800bf96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf9a:	f043 0304 	orr.w	r3, r3, #4
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	2183      	movs	r1, #131	; 0x83
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f002 fb1d 	bl	800e5e4 <VL53L0X_WrByte>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	461a      	mov	r2, r3
 800bfae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800bfb8:	2207      	movs	r2, #7
 800bfba:	21ff      	movs	r1, #255	; 0xff
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f002 fb11 	bl	800e5e4 <VL53L0X_WrByte>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	2181      	movs	r1, #129	; 0x81
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f002 fb05 	bl	800e5e4 <VL53L0X_WrByte>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	461a      	mov	r2, r3
 800bfde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f002 fbd6 	bl	800e79a <VL53L0X_PollingDelay>
 800bfee:	4603      	mov	r3, r0
 800bff0:	461a      	mov	r2, r3
 800bff2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bff6:	4313      	orrs	r3, r2
 800bff8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800bffc:	2201      	movs	r2, #1
 800bffe:	2180      	movs	r1, #128	; 0x80
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f002 faef 	bl	800e5e4 <VL53L0X_WrByte>
 800c006:	4603      	mov	r3, r0
 800c008:	461a      	mov	r2, r3
 800c00a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c00e:	4313      	orrs	r3, r2
 800c010:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800c014:	78fb      	ldrb	r3, [r7, #3]
 800c016:	f003 0301 	and.w	r3, r3, #1
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	f000 8098 	beq.w	800c150 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800c020:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c024:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800c028:	2b00      	cmp	r3, #0
 800c02a:	f040 8091 	bne.w	800c150 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800c02e:	226b      	movs	r2, #107	; 0x6b
 800c030:	2194      	movs	r1, #148	; 0x94
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f002 fad6 	bl	800e5e4 <VL53L0X_WrByte>
 800c038:	4603      	mov	r3, r0
 800c03a:	461a      	mov	r2, r3
 800c03c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c040:	4313      	orrs	r3, r2
 800c042:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f7ff fef9 	bl	800be3e <VL53L0X_device_read_strobe>
 800c04c:	4603      	mov	r3, r0
 800c04e:	461a      	mov	r2, r3
 800c050:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c054:	4313      	orrs	r3, r2
 800c056:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c05a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c05e:	461a      	mov	r2, r3
 800c060:	2190      	movs	r1, #144	; 0x90
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f002 fb7a 	bl	800e75c <VL53L0X_RdDWord>
 800c068:	4603      	mov	r3, r0
 800c06a:	461a      	mov	r2, r3
 800c06c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c070:	4313      	orrs	r3, r2
 800c072:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800c076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c078:	0a1b      	lsrs	r3, r3, #8
 800c07a:	b2db      	uxtb	r3, r3
 800c07c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c080:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800c084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c086:	0bdb      	lsrs	r3, r3, #15
 800c088:	b2db      	uxtb	r3, r3
 800c08a:	f003 0301 	and.w	r3, r3, #1
 800c08e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800c092:	2224      	movs	r2, #36	; 0x24
 800c094:	2194      	movs	r1, #148	; 0x94
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f002 faa4 	bl	800e5e4 <VL53L0X_WrByte>
 800c09c:	4603      	mov	r3, r0
 800c09e:	461a      	mov	r2, r3
 800c0a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f7ff fec7 	bl	800be3e <VL53L0X_device_read_strobe>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c0be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	2190      	movs	r1, #144	; 0x90
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f002 fb48 	bl	800e75c <VL53L0X_RdDWord>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800c0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0dc:	0e1b      	lsrs	r3, r3, #24
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800c0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e4:	0c1b      	lsrs	r3, r3, #16
 800c0e6:	b2db      	uxtb	r3, r3
 800c0e8:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800c0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ec:	0a1b      	lsrs	r3, r3, #8
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800c0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f4:	b2db      	uxtb	r3, r3
 800c0f6:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800c0f8:	2225      	movs	r2, #37	; 0x25
 800c0fa:	2194      	movs	r1, #148	; 0x94
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f002 fa71 	bl	800e5e4 <VL53L0X_WrByte>
 800c102:	4603      	mov	r3, r0
 800c104:	461a      	mov	r2, r3
 800c106:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c10a:	4313      	orrs	r3, r2
 800c10c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f7ff fe94 	bl	800be3e <VL53L0X_device_read_strobe>
 800c116:	4603      	mov	r3, r0
 800c118:	461a      	mov	r2, r3
 800c11a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c11e:	4313      	orrs	r3, r2
 800c120:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c124:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c128:	461a      	mov	r2, r3
 800c12a:	2190      	movs	r1, #144	; 0x90
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f002 fb15 	bl	800e75c <VL53L0X_RdDWord>
 800c132:	4603      	mov	r3, r0
 800c134:	461a      	mov	r2, r3
 800c136:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c13a:	4313      	orrs	r3, r2
 800c13c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800c140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c142:	0e1b      	lsrs	r3, r3, #24
 800c144:	b2db      	uxtb	r3, r3
 800c146:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800c148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14a:	0c1b      	lsrs	r3, r3, #16
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800c150:	78fb      	ldrb	r3, [r7, #3]
 800c152:	f003 0302 	and.w	r3, r3, #2
 800c156:	2b00      	cmp	r3, #0
 800c158:	f000 8189 	beq.w	800c46e <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800c15c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c160:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800c164:	2b00      	cmp	r3, #0
 800c166:	f040 8182 	bne.w	800c46e <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800c16a:	2202      	movs	r2, #2
 800c16c:	2194      	movs	r1, #148	; 0x94
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f002 fa38 	bl	800e5e4 <VL53L0X_WrByte>
 800c174:	4603      	mov	r3, r0
 800c176:	461a      	mov	r2, r3
 800c178:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c17c:	4313      	orrs	r3, r2
 800c17e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f7ff fe5b 	bl	800be3e <VL53L0X_device_read_strobe>
 800c188:	4603      	mov	r3, r0
 800c18a:	461a      	mov	r2, r3
 800c18c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c190:	4313      	orrs	r3, r2
 800c192:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800c196:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800c19a:	461a      	mov	r2, r3
 800c19c:	2190      	movs	r1, #144	; 0x90
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f002 fa9e 	bl	800e6e0 <VL53L0X_RdByte>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800c1b2:	227b      	movs	r2, #123	; 0x7b
 800c1b4:	2194      	movs	r1, #148	; 0x94
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f002 fa14 	bl	800e5e4 <VL53L0X_WrByte>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	461a      	mov	r2, r3
 800c1c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f7ff fe37 	bl	800be3e <VL53L0X_device_read_strobe>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800c1de:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	2190      	movs	r1, #144	; 0x90
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f002 fa7a 	bl	800e6e0 <VL53L0X_RdByte>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800c1fa:	2277      	movs	r2, #119	; 0x77
 800c1fc:	2194      	movs	r1, #148	; 0x94
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f002 f9f0 	bl	800e5e4 <VL53L0X_WrByte>
 800c204:	4603      	mov	r3, r0
 800c206:	461a      	mov	r2, r3
 800c208:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c20c:	4313      	orrs	r3, r2
 800c20e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f7ff fe13 	bl	800be3e <VL53L0X_device_read_strobe>
 800c218:	4603      	mov	r3, r0
 800c21a:	461a      	mov	r2, r3
 800c21c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c220:	4313      	orrs	r3, r2
 800c222:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c226:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c22a:	461a      	mov	r2, r3
 800c22c:	2190      	movs	r1, #144	; 0x90
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f002 fa94 	bl	800e75c <VL53L0X_RdDWord>
 800c234:	4603      	mov	r3, r0
 800c236:	461a      	mov	r2, r3
 800c238:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c23c:	4313      	orrs	r3, r2
 800c23e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800c242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c244:	0e5b      	lsrs	r3, r3, #25
 800c246:	b2db      	uxtb	r3, r3
 800c248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800c250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c252:	0c9b      	lsrs	r3, r3, #18
 800c254:	b2db      	uxtb	r3, r3
 800c256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c25a:	b2db      	uxtb	r3, r3
 800c25c:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800c25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c260:	0adb      	lsrs	r3, r3, #11
 800c262:	b2db      	uxtb	r3, r3
 800c264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800c26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26e:	091b      	lsrs	r3, r3, #4
 800c270:	b2db      	uxtb	r3, r3
 800c272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c276:	b2db      	uxtb	r3, r3
 800c278:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800c27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27c:	b2db      	uxtb	r3, r3
 800c27e:	00db      	lsls	r3, r3, #3
 800c280:	b2db      	uxtb	r3, r3
 800c282:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800c286:	b2db      	uxtb	r3, r3
 800c288:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800c28c:	2278      	movs	r2, #120	; 0x78
 800c28e:	2194      	movs	r1, #148	; 0x94
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f002 f9a7 	bl	800e5e4 <VL53L0X_WrByte>
 800c296:	4603      	mov	r3, r0
 800c298:	461a      	mov	r2, r3
 800c29a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f7ff fdca 	bl	800be3e <VL53L0X_device_read_strobe>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c2b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c2bc:	461a      	mov	r2, r3
 800c2be:	2190      	movs	r1, #144	; 0x90
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f002 fa4b 	bl	800e75c <VL53L0X_RdDWord>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800c2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d6:	0f5b      	lsrs	r3, r3, #29
 800c2d8:	b2db      	uxtb	r3, r3
 800c2da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2de:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800c2e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c2e4:	4413      	add	r3, r2
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800c2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ec:	0d9b      	lsrs	r3, r3, #22
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800c2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fa:	0bdb      	lsrs	r3, r3, #15
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c302:	b2db      	uxtb	r3, r3
 800c304:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800c306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c308:	0a1b      	lsrs	r3, r3, #8
 800c30a:	b2db      	uxtb	r3, r3
 800c30c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c310:	b2db      	uxtb	r3, r3
 800c312:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800c314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c316:	085b      	lsrs	r3, r3, #1
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c31e:	b2db      	uxtb	r3, r3
 800c320:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800c322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c324:	b2db      	uxtb	r3, r3
 800c326:	019b      	lsls	r3, r3, #6
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c32e:	b2db      	uxtb	r3, r3
 800c330:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800c334:	2279      	movs	r2, #121	; 0x79
 800c336:	2194      	movs	r1, #148	; 0x94
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f002 f953 	bl	800e5e4 <VL53L0X_WrByte>
 800c33e:	4603      	mov	r3, r0
 800c340:	461a      	mov	r2, r3
 800c342:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c346:	4313      	orrs	r3, r2
 800c348:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f7ff fd76 	bl	800be3e <VL53L0X_device_read_strobe>
 800c352:	4603      	mov	r3, r0
 800c354:	461a      	mov	r2, r3
 800c356:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c35a:	4313      	orrs	r3, r2
 800c35c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c360:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c364:	461a      	mov	r2, r3
 800c366:	2190      	movs	r1, #144	; 0x90
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f002 f9f7 	bl	800e75c <VL53L0X_RdDWord>
 800c36e:	4603      	mov	r3, r0
 800c370:	461a      	mov	r2, r3
 800c372:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c376:	4313      	orrs	r3, r2
 800c378:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800c37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37e:	0e9b      	lsrs	r3, r3, #26
 800c380:	b2db      	uxtb	r3, r3
 800c382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c386:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800c388:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c38c:	4413      	add	r3, r2
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800c392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c394:	0cdb      	lsrs	r3, r3, #19
 800c396:	b2db      	uxtb	r3, r3
 800c398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800c3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a2:	0b1b      	lsrs	r3, r3, #12
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3aa:	b2db      	uxtb	r3, r3
 800c3ac:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800c3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b0:	095b      	lsrs	r3, r3, #5
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800c3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	b2db      	uxtb	r3, r3
 800c3c4:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800c3ce:	227a      	movs	r2, #122	; 0x7a
 800c3d0:	2194      	movs	r1, #148	; 0x94
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f002 f906 	bl	800e5e4 <VL53L0X_WrByte>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	461a      	mov	r2, r3
 800c3dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3e0:	4313      	orrs	r3, r2
 800c3e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f7ff fd29 	bl	800be3e <VL53L0X_device_read_strobe>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c3fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c3fe:	461a      	mov	r2, r3
 800c400:	2190      	movs	r1, #144	; 0x90
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f002 f9aa 	bl	800e75c <VL53L0X_RdDWord>
 800c408:	4603      	mov	r3, r0
 800c40a:	461a      	mov	r2, r3
 800c40c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c410:	4313      	orrs	r3, r2
 800c412:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800c416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c418:	0f9b      	lsrs	r3, r3, #30
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c420:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800c422:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c426:	4413      	add	r3, r2
 800c428:	b2db      	uxtb	r3, r3
 800c42a:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800c42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42e:	0ddb      	lsrs	r3, r3, #23
 800c430:	b2db      	uxtb	r3, r3
 800c432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c436:	b2db      	uxtb	r3, r3
 800c438:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800c43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43c:	0c1b      	lsrs	r3, r3, #16
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c444:	b2db      	uxtb	r3, r3
 800c446:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800c448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44a:	0a5b      	lsrs	r3, r3, #9
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c452:	b2db      	uxtb	r3, r3
 800c454:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800c458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45a:	089b      	lsrs	r3, r3, #2
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c462:	b2db      	uxtb	r3, r3
 800c464:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800c468:	2300      	movs	r3, #0
 800c46a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800c46e:	78fb      	ldrb	r3, [r7, #3]
 800c470:	f003 0304 	and.w	r3, r3, #4
 800c474:	2b00      	cmp	r3, #0
 800c476:	f000 80f1 	beq.w	800c65c <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800c47a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c47e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800c482:	2b00      	cmp	r3, #0
 800c484:	f040 80ea 	bne.w	800c65c <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800c488:	227b      	movs	r2, #123	; 0x7b
 800c48a:	2194      	movs	r1, #148	; 0x94
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f002 f8a9 	bl	800e5e4 <VL53L0X_WrByte>
 800c492:	4603      	mov	r3, r0
 800c494:	461a      	mov	r2, r3
 800c496:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c49a:	4313      	orrs	r3, r2
 800c49c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f7ff fccc 	bl	800be3e <VL53L0X_device_read_strobe>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800c4b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	2190      	movs	r1, #144	; 0x90
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f002 f94d 	bl	800e75c <VL53L0X_RdDWord>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800c4d0:	227c      	movs	r2, #124	; 0x7c
 800c4d2:	2194      	movs	r1, #148	; 0x94
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f002 f885 	bl	800e5e4 <VL53L0X_WrByte>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	461a      	mov	r2, r3
 800c4de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f7ff fca8 	bl	800be3e <VL53L0X_device_read_strobe>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4f6:	4313      	orrs	r3, r2
 800c4f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800c4fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c500:	461a      	mov	r2, r3
 800c502:	2190      	movs	r1, #144	; 0x90
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f002 f929 	bl	800e75c <VL53L0X_RdDWord>
 800c50a:	4603      	mov	r3, r0
 800c50c:	461a      	mov	r2, r3
 800c50e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c512:	4313      	orrs	r3, r2
 800c514:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800c518:	2273      	movs	r2, #115	; 0x73
 800c51a:	2194      	movs	r1, #148	; 0x94
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f002 f861 	bl	800e5e4 <VL53L0X_WrByte>
 800c522:	4603      	mov	r3, r0
 800c524:	461a      	mov	r2, r3
 800c526:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c52a:	4313      	orrs	r3, r2
 800c52c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f7ff fc84 	bl	800be3e <VL53L0X_device_read_strobe>
 800c536:	4603      	mov	r3, r0
 800c538:	461a      	mov	r2, r3
 800c53a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c53e:	4313      	orrs	r3, r2
 800c540:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c544:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c548:	461a      	mov	r2, r3
 800c54a:	2190      	movs	r1, #144	; 0x90
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f002 f905 	bl	800e75c <VL53L0X_RdDWord>
 800c552:	4603      	mov	r3, r0
 800c554:	461a      	mov	r2, r3
 800c556:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c55a:	4313      	orrs	r3, r2
 800c55c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800c560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c562:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800c564:	b29b      	uxth	r3, r3
 800c566:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800c568:	2274      	movs	r2, #116	; 0x74
 800c56a:	2194      	movs	r1, #148	; 0x94
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f002 f839 	bl	800e5e4 <VL53L0X_WrByte>
 800c572:	4603      	mov	r3, r0
 800c574:	461a      	mov	r2, r3
 800c576:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c57a:	4313      	orrs	r3, r2
 800c57c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f7ff fc5c 	bl	800be3e <VL53L0X_device_read_strobe>
 800c586:	4603      	mov	r3, r0
 800c588:	461a      	mov	r2, r3
 800c58a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c58e:	4313      	orrs	r3, r2
 800c590:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c594:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c598:	461a      	mov	r2, r3
 800c59a:	2190      	movs	r1, #144	; 0x90
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f002 f8dd 	bl	800e75c <VL53L0X_RdDWord>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800c5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b2:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800c5b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800c5ba:	2275      	movs	r2, #117	; 0x75
 800c5bc:	2194      	movs	r1, #148	; 0x94
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f002 f810 	bl	800e5e4 <VL53L0X_WrByte>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f7ff fc33 	bl	800be3e <VL53L0X_device_read_strobe>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	461a      	mov	r2, r3
 800c5dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c5e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	2190      	movs	r1, #144	; 0x90
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f002 f8b4 	bl	800e75c <VL53L0X_RdDWord>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5fc:	4313      	orrs	r3, r2
 800c5fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800c602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c604:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800c606:	b29b      	uxth	r3, r3
 800c608:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800c60a:	2276      	movs	r2, #118	; 0x76
 800c60c:	2194      	movs	r1, #148	; 0x94
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f001 ffe8 	bl	800e5e4 <VL53L0X_WrByte>
 800c614:	4603      	mov	r3, r0
 800c616:	461a      	mov	r2, r3
 800c618:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c61c:	4313      	orrs	r3, r2
 800c61e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f7ff fc0b 	bl	800be3e <VL53L0X_device_read_strobe>
 800c628:	4603      	mov	r3, r0
 800c62a:	461a      	mov	r2, r3
 800c62c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c630:	4313      	orrs	r3, r2
 800c632:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c636:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c63a:	461a      	mov	r2, r3
 800c63c:	2190      	movs	r1, #144	; 0x90
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f002 f88c 	bl	800e75c <VL53L0X_RdDWord>
 800c644:	4603      	mov	r3, r0
 800c646:	461a      	mov	r2, r3
 800c648:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c64c:	4313      	orrs	r3, r2
 800c64e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800c652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c654:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800c656:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c658:	4313      	orrs	r3, r2
 800c65a:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800c65c:	2200      	movs	r2, #0
 800c65e:	2181      	movs	r1, #129	; 0x81
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f001 ffbf 	bl	800e5e4 <VL53L0X_WrByte>
 800c666:	4603      	mov	r3, r0
 800c668:	461a      	mov	r2, r3
 800c66a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c66e:	4313      	orrs	r3, r2
 800c670:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800c674:	2206      	movs	r2, #6
 800c676:	21ff      	movs	r1, #255	; 0xff
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f001 ffb3 	bl	800e5e4 <VL53L0X_WrByte>
 800c67e:	4603      	mov	r3, r0
 800c680:	461a      	mov	r2, r3
 800c682:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c686:	4313      	orrs	r3, r2
 800c688:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800c68c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800c690:	461a      	mov	r2, r3
 800c692:	2183      	movs	r1, #131	; 0x83
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f002 f823 	bl	800e6e0 <VL53L0X_RdByte>
 800c69a:	4603      	mov	r3, r0
 800c69c:	461a      	mov	r2, r3
 800c69e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800c6a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c6ac:	f023 0304 	bic.w	r3, r3, #4
 800c6b0:	b2db      	uxtb	r3, r3
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	2183      	movs	r1, #131	; 0x83
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f001 ff94 	bl	800e5e4 <VL53L0X_WrByte>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	461a      	mov	r2, r3
 800c6c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6c4:	4313      	orrs	r3, r2
 800c6c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	21ff      	movs	r1, #255	; 0xff
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f001 ff88 	bl	800e5e4 <VL53L0X_WrByte>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6dc:	4313      	orrs	r3, r2
 800c6de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	2100      	movs	r1, #0
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f001 ff7c 	bl	800e5e4 <VL53L0X_WrByte>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	21ff      	movs	r1, #255	; 0xff
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f001 ff70 	bl	800e5e4 <VL53L0X_WrByte>
 800c704:	4603      	mov	r3, r0
 800c706:	461a      	mov	r2, r3
 800c708:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c70c:	4313      	orrs	r3, r2
 800c70e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c712:	2200      	movs	r2, #0
 800c714:	2180      	movs	r1, #128	; 0x80
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f001 ff64 	bl	800e5e4 <VL53L0X_WrByte>
 800c71c:	4603      	mov	r3, r0
 800c71e:	461a      	mov	r2, r3
 800c720:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c724:	4313      	orrs	r3, r2
 800c726:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800c72a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800c72e:	2b00      	cmp	r3, #0
 800c730:	f040 808f 	bne.w	800c852 <VL53L0X_get_info_from_device+0x98e>
 800c734:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c738:	2b07      	cmp	r3, #7
 800c73a:	f000 808a 	beq.w	800c852 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800c73e:	78fb      	ldrb	r3, [r7, #3]
 800c740:	f003 0301 	and.w	r3, r3, #1
 800c744:	2b00      	cmp	r3, #0
 800c746:	d024      	beq.n	800c792 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800c748:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c74c:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800c750:	2b00      	cmp	r3, #0
 800c752:	d11e      	bne.n	800c792 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800c75a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800c764:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800c768:	2300      	movs	r3, #0
 800c76a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c76c:	e00e      	b.n	800c78c <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800c76e:	f107 0208 	add.w	r2, r7, #8
 800c772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c774:	4413      	add	r3, r2
 800c776:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c77c:	4413      	add	r3, r2
 800c77e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800c782:	460a      	mov	r2, r1
 800c784:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800c786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c788:	3301      	adds	r3, #1
 800c78a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c78c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c78e:	2b05      	cmp	r3, #5
 800c790:	dded      	ble.n	800c76e <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800c792:	78fb      	ldrb	r3, [r7, #3]
 800c794:	f003 0302 	and.w	r3, r3, #2
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d018      	beq.n	800c7ce <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800c79c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c7a0:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d112      	bne.n	800c7ce <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c7a8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c7b2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	33f3      	adds	r3, #243	; 0xf3
 800c7c0:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800c7c2:	f107 0310 	add.w	r3, r7, #16
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c7ca:	f007 fe13 	bl	80143f4 <strcpy>

		}

		if (((option & 4) == 4) &&
 800c7ce:	78fb      	ldrb	r3, [r7, #3]
 800c7d0:	f003 0304 	and.w	r3, r3, #4
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d030      	beq.n	800c83a <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800c7d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c7dc:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d12a      	bne.n	800c83a <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c7e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c7ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800c7f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7f6:	025b      	lsls	r3, r3, #9
 800c7f8:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c7fe:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800c802:	2300      	movs	r3, #0
 800c804:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800c808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d011      	beq.n	800c832 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800c80e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c812:	1ad3      	subs	r3, r2, r3
 800c814:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800c816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c818:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c81c:	fb02 f303 	mul.w	r3, r2, r3
 800c820:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800c822:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800c826:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800c82a:	425b      	negs	r3, r3
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800c832:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800c83a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800c83e:	78fb      	ldrb	r3, [r7, #3]
 800c840:	4313      	orrs	r3, r2
 800c842:	b2db      	uxtb	r3, r3
 800c844:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800c848:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c852:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800c856:	4618      	mov	r0, r3
 800c858:	3760      	adds	r7, #96	; 0x60
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}

0800c85e <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800c85e:	b480      	push	{r7}
 800c860:	b087      	sub	sp, #28
 800c862:	af00      	add	r7, sp, #0
 800c864:	6078      	str	r0, [r7, #4]
 800c866:	460b      	mov	r3, r1
 800c868:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800c86a:	f240 6277 	movw	r2, #1655	; 0x677
 800c86e:	f04f 0300 	mov.w	r3, #0
 800c872:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800c876:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800c87a:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800c87c:	78fb      	ldrb	r3, [r7, #3]
 800c87e:	68fa      	ldr	r2, [r7, #12]
 800c880:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800c884:	693a      	ldr	r2, [r7, #16]
 800c886:	fb02 f303 	mul.w	r3, r2, r3
 800c88a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800c88c:	68bb      	ldr	r3, [r7, #8]
}
 800c88e:	4618      	mov	r0, r3
 800c890:	371c      	adds	r7, #28
 800c892:	46bd      	mov	sp, r7
 800c894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c898:	4770      	bx	lr

0800c89a <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800c89a:	b480      	push	{r7}
 800c89c:	b087      	sub	sp, #28
 800c89e:	af00      	add	r7, sp, #0
 800c8a0:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d017      	beq.n	800c8e4 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	3b01      	subs	r3, #1
 800c8b8:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c8ba:	e005      	b.n	800c8c8 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	085b      	lsrs	r3, r3, #1
 800c8c0:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800c8c2:	89fb      	ldrh	r3, [r7, #14]
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d1f4      	bne.n	800c8bc <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800c8d2:	89fb      	ldrh	r3, [r7, #14]
 800c8d4:	021b      	lsls	r3, r3, #8
 800c8d6:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	b29b      	uxth	r3, r3
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800c8e0:	4413      	add	r3, r2
 800c8e2:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800c8e4:	8afb      	ldrh	r3, [r7, #22]

}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	371c      	adds	r7, #28
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f0:	4770      	bx	lr

0800c8f2 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800c8f2:	b480      	push	{r7}
 800c8f4:	b085      	sub	sp, #20
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c900:	88fb      	ldrh	r3, [r7, #6]
 800c902:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800c904:	88fa      	ldrh	r2, [r7, #6]
 800c906:	0a12      	lsrs	r2, r2, #8
 800c908:	b292      	uxth	r2, r2
 800c90a:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c90c:	3301      	adds	r3, #1
 800c90e:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800c910:	68fb      	ldr	r3, [r7, #12]
}
 800c912:	4618      	mov	r0, r3
 800c914:	3714      	adds	r7, #20
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr
	...

0800c920 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b088      	sub	sp, #32
 800c924:	af00      	add	r7, sp, #0
 800c926:	60f8      	str	r0, [r7, #12]
 800c928:	60b9      	str	r1, [r7, #8]
 800c92a:	4613      	mov	r3, r2
 800c92c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800c92e:	2300      	movs	r3, #0
 800c930:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800c932:	79fb      	ldrb	r3, [r7, #7]
 800c934:	4619      	mov	r1, r3
 800c936:	68f8      	ldr	r0, [r7, #12]
 800c938:	f7ff ff91 	bl	800c85e <VL53L0X_calc_macro_period_ps>
 800c93c:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800c93e:	69bb      	ldr	r3, [r7, #24]
 800c940:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c944:	4a0a      	ldr	r2, [pc, #40]	; (800c970 <VL53L0X_calc_timeout_mclks+0x50>)
 800c946:	fba2 2303 	umull	r2, r3, r2, r3
 800c94a:	099b      	lsrs	r3, r3, #6
 800c94c:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c954:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	085b      	lsrs	r3, r3, #1
 800c95c:	441a      	add	r2, r3
	timeout_period_mclks =
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	fbb2 f3f3 	udiv	r3, r2, r3
 800c964:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800c966:	69fb      	ldr	r3, [r7, #28]
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3720      	adds	r7, #32
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}
 800c970:	10624dd3 	.word	0x10624dd3

0800c974 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b086      	sub	sp, #24
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
 800c97c:	460b      	mov	r3, r1
 800c97e:	807b      	strh	r3, [r7, #2]
 800c980:	4613      	mov	r3, r2
 800c982:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800c984:	2300      	movs	r3, #0
 800c986:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800c988:	787b      	ldrb	r3, [r7, #1]
 800c98a:	4619      	mov	r1, r3
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f7ff ff66 	bl	800c85e <VL53L0X_calc_macro_period_ps>
 800c992:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c99a:	4a0a      	ldr	r2, [pc, #40]	; (800c9c4 <VL53L0X_calc_timeout_us+0x50>)
 800c99c:	fba2 2303 	umull	r2, r3, r2, r3
 800c9a0:	099b      	lsrs	r3, r3, #6
 800c9a2:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800c9a4:	887b      	ldrh	r3, [r7, #2]
 800c9a6:	68fa      	ldr	r2, [r7, #12]
 800c9a8:	fb02 f303 	mul.w	r3, r2, r3
 800c9ac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800c9b0:	4a04      	ldr	r2, [pc, #16]	; (800c9c4 <VL53L0X_calc_timeout_us+0x50>)
 800c9b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9b6:	099b      	lsrs	r3, r3, #6
 800c9b8:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800c9ba:	697b      	ldr	r3, [r7, #20]
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3718      	adds	r7, #24
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}
 800c9c4:	10624dd3 	.word	0x10624dd3

0800c9c8 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b08c      	sub	sp, #48	; 0x30
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	460b      	mov	r3, r1
 800c9d2:	607a      	str	r2, [r7, #4]
 800c9d4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800c9ee:	7afb      	ldrb	r3, [r7, #11]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d005      	beq.n	800ca00 <get_sequence_step_timeout+0x38>
 800c9f4:	7afb      	ldrb	r3, [r7, #11]
 800c9f6:	2b01      	cmp	r3, #1
 800c9f8:	d002      	beq.n	800ca00 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800c9fa:	7afb      	ldrb	r3, [r7, #11]
 800c9fc:	2b02      	cmp	r3, #2
 800c9fe:	d128      	bne.n	800ca52 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ca00:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800ca04:	461a      	mov	r2, r3
 800ca06:	2100      	movs	r1, #0
 800ca08:	68f8      	ldr	r0, [r7, #12]
 800ca0a:	f7fd fa11 	bl	8009e30 <VL53L0X_GetVcselPulsePeriod>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800ca14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d109      	bne.n	800ca30 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800ca1c:	f107 0320 	add.w	r3, r7, #32
 800ca20:	461a      	mov	r2, r3
 800ca22:	2146      	movs	r1, #70	; 0x46
 800ca24:	68f8      	ldr	r0, [r7, #12]
 800ca26:	f001 fe5b 	bl	800e6e0 <VL53L0X_RdByte>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800ca30:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	4618      	mov	r0, r3
 800ca38:	f7ff ff5b 	bl	800c8f2 <VL53L0X_decode_timeout>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800ca40:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ca44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca46:	4619      	mov	r1, r3
 800ca48:	68f8      	ldr	r0, [r7, #12]
 800ca4a:	f7ff ff93 	bl	800c974 <VL53L0X_calc_timeout_us>
 800ca4e:	62b8      	str	r0, [r7, #40]	; 0x28
 800ca50:	e092      	b.n	800cb78 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800ca52:	7afb      	ldrb	r3, [r7, #11]
 800ca54:	2b03      	cmp	r3, #3
 800ca56:	d135      	bne.n	800cac4 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ca58:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	2100      	movs	r1, #0
 800ca60:	68f8      	ldr	r0, [r7, #12]
 800ca62:	f7fd f9e5 	bl	8009e30 <VL53L0X_GetVcselPulsePeriod>
 800ca66:	4603      	mov	r3, r0
 800ca68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800ca6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	f040 8081 	bne.w	800cb78 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ca76:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	2100      	movs	r1, #0
 800ca7e:	68f8      	ldr	r0, [r7, #12]
 800ca80:	f7fd f9d6 	bl	8009e30 <VL53L0X_GetVcselPulsePeriod>
 800ca84:	4603      	mov	r3, r0
 800ca86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800ca8a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d109      	bne.n	800caa6 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800ca92:	f107 031e 	add.w	r3, r7, #30
 800ca96:	461a      	mov	r2, r3
 800ca98:	2151      	movs	r1, #81	; 0x51
 800ca9a:	68f8      	ldr	r0, [r7, #12]
 800ca9c:	f001 fe3f 	bl	800e71e <VL53L0X_RdWord>
 800caa0:	4603      	mov	r3, r0
 800caa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800caa6:	8bfb      	ldrh	r3, [r7, #30]
 800caa8:	4618      	mov	r0, r3
 800caaa:	f7ff ff22 	bl	800c8f2 <VL53L0X_decode_timeout>
 800caae:	4603      	mov	r3, r0
 800cab0:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800cab2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800cab6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cab8:	4619      	mov	r1, r3
 800caba:	68f8      	ldr	r0, [r7, #12]
 800cabc:	f7ff ff5a 	bl	800c974 <VL53L0X_calc_timeout_us>
 800cac0:	62b8      	str	r0, [r7, #40]	; 0x28
 800cac2:	e059      	b.n	800cb78 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800cac4:	7afb      	ldrb	r3, [r7, #11]
 800cac6:	2b04      	cmp	r3, #4
 800cac8:	d156      	bne.n	800cb78 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800caca:	f107 0314 	add.w	r3, r7, #20
 800cace:	4619      	mov	r1, r3
 800cad0:	68f8      	ldr	r0, [r7, #12]
 800cad2:	f7fd fab9 	bl	800a048 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800cad6:	2300      	movs	r3, #0
 800cad8:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800cada:	7dfb      	ldrb	r3, [r7, #23]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d01d      	beq.n	800cb1c <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cae0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800cae4:	461a      	mov	r2, r3
 800cae6:	2100      	movs	r1, #0
 800cae8:	68f8      	ldr	r0, [r7, #12]
 800caea:	f7fd f9a1 	bl	8009e30 <VL53L0X_GetVcselPulsePeriod>
 800caee:	4603      	mov	r3, r0
 800caf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800caf4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d10f      	bne.n	800cb1c <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800cafc:	f107 031e 	add.w	r3, r7, #30
 800cb00:	461a      	mov	r2, r3
 800cb02:	2151      	movs	r1, #81	; 0x51
 800cb04:	68f8      	ldr	r0, [r7, #12]
 800cb06:	f001 fe0a 	bl	800e71e <VL53L0X_RdWord>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800cb10:	8bfb      	ldrh	r3, [r7, #30]
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7ff feed 	bl	800c8f2 <VL53L0X_decode_timeout>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800cb1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d109      	bne.n	800cb38 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cb24:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800cb28:	461a      	mov	r2, r3
 800cb2a:	2101      	movs	r1, #1
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f7fd f97f 	bl	8009e30 <VL53L0X_GetVcselPulsePeriod>
 800cb32:	4603      	mov	r3, r0
 800cb34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800cb38:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d10f      	bne.n	800cb60 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800cb40:	f107 031c 	add.w	r3, r7, #28
 800cb44:	461a      	mov	r2, r3
 800cb46:	2171      	movs	r1, #113	; 0x71
 800cb48:	68f8      	ldr	r0, [r7, #12]
 800cb4a:	f001 fde8 	bl	800e71e <VL53L0X_RdWord>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800cb54:	8bbb      	ldrh	r3, [r7, #28]
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7ff fecb 	bl	800c8f2 <VL53L0X_decode_timeout>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800cb60:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cb62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cb64:	1ad3      	subs	r3, r2, r3
 800cb66:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800cb68:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800cb6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb6e:	4619      	mov	r1, r3
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	f7ff feff 	bl	800c974 <VL53L0X_calc_timeout_us>
 800cb76:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb7c:	601a      	str	r2, [r3, #0]

	return Status;
 800cb7e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3730      	adds	r7, #48	; 0x30
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}

0800cb8a <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800cb8a:	b580      	push	{r7, lr}
 800cb8c:	b08a      	sub	sp, #40	; 0x28
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	60f8      	str	r0, [r7, #12]
 800cb92:	460b      	mov	r3, r1
 800cb94:	607a      	str	r2, [r7, #4]
 800cb96:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800cb9e:	7afb      	ldrb	r3, [r7, #11]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d005      	beq.n	800cbb0 <set_sequence_step_timeout+0x26>
 800cba4:	7afb      	ldrb	r3, [r7, #11]
 800cba6:	2b01      	cmp	r3, #1
 800cba8:	d002      	beq.n	800cbb0 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800cbaa:	7afb      	ldrb	r3, [r7, #11]
 800cbac:	2b02      	cmp	r3, #2
 800cbae:	d138      	bne.n	800cc22 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cbb0:	f107 031b 	add.w	r3, r7, #27
 800cbb4:	461a      	mov	r2, r3
 800cbb6:	2100      	movs	r1, #0
 800cbb8:	68f8      	ldr	r0, [r7, #12]
 800cbba:	f7fd f939 	bl	8009e30 <VL53L0X_GetVcselPulsePeriod>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800cbc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d11a      	bne.n	800cc02 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800cbcc:	7efb      	ldrb	r3, [r7, #27]
 800cbce:	461a      	mov	r2, r3
 800cbd0:	6879      	ldr	r1, [r7, #4]
 800cbd2:	68f8      	ldr	r0, [r7, #12]
 800cbd4:	f7ff fea4 	bl	800c920 <VL53L0X_calc_timeout_mclks>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800cbdc:	8bbb      	ldrh	r3, [r7, #28]
 800cbde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbe2:	d903      	bls.n	800cbec <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800cbe4:	23ff      	movs	r3, #255	; 0xff
 800cbe6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cbea:	e004      	b.n	800cbf6 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800cbec:	8bbb      	ldrh	r3, [r7, #28]
 800cbee:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800cbf0:	3b01      	subs	r3, #1
 800cbf2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cbf6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cbfa:	b29a      	uxth	r2, r3
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800cc02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	f040 80ab 	bne.w	800cd62 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800cc0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc10:	461a      	mov	r2, r3
 800cc12:	2146      	movs	r1, #70	; 0x46
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f001 fce5 	bl	800e5e4 <VL53L0X_WrByte>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800cc20:	e09f      	b.n	800cd62 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800cc22:	7afb      	ldrb	r3, [r7, #11]
 800cc24:	2b03      	cmp	r3, #3
 800cc26:	d135      	bne.n	800cc94 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800cc28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d11b      	bne.n	800cc68 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cc30:	f107 031b 	add.w	r3, r7, #27
 800cc34:	461a      	mov	r2, r3
 800cc36:	2100      	movs	r1, #0
 800cc38:	68f8      	ldr	r0, [r7, #12]
 800cc3a:	f7fd f8f9 	bl	8009e30 <VL53L0X_GetVcselPulsePeriod>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800cc44:	7efb      	ldrb	r3, [r7, #27]
 800cc46:	461a      	mov	r2, r3
 800cc48:	6879      	ldr	r1, [r7, #4]
 800cc4a:	68f8      	ldr	r0, [r7, #12]
 800cc4c:	f7ff fe68 	bl	800c920 <VL53L0X_calc_timeout_mclks>
 800cc50:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800cc52:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800cc54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7ff fe1f 	bl	800c89a <VL53L0X_encode_timeout>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cc60:	8b3a      	ldrh	r2, [r7, #24]
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800cc68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d108      	bne.n	800cc82 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800cc70:	8b3b      	ldrh	r3, [r7, #24]
 800cc72:	461a      	mov	r2, r3
 800cc74:	2151      	movs	r1, #81	; 0x51
 800cc76:	68f8      	ldr	r0, [r7, #12]
 800cc78:	f001 fcd4 	bl	800e624 <VL53L0X_WrWord>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800cc82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d16b      	bne.n	800cd62 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800cc92:	e066      	b.n	800cd62 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800cc94:	7afb      	ldrb	r3, [r7, #11]
 800cc96:	2b04      	cmp	r3, #4
 800cc98:	d160      	bne.n	800cd5c <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800cc9a:	f107 0310 	add.w	r3, r7, #16
 800cc9e:	4619      	mov	r1, r3
 800cca0:	68f8      	ldr	r0, [r7, #12]
 800cca2:	f7fd f9d1 	bl	800a048 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800cca6:	2300      	movs	r3, #0
 800cca8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800ccaa:	7cfb      	ldrb	r3, [r7, #19]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d01d      	beq.n	800ccec <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ccb0:	f107 031b 	add.w	r3, r7, #27
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	2100      	movs	r1, #0
 800ccb8:	68f8      	ldr	r0, [r7, #12]
 800ccba:	f7fd f8b9 	bl	8009e30 <VL53L0X_GetVcselPulsePeriod>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800ccc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d10f      	bne.n	800ccec <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800cccc:	f107 0318 	add.w	r3, r7, #24
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	2151      	movs	r1, #81	; 0x51
 800ccd4:	68f8      	ldr	r0, [r7, #12]
 800ccd6:	f001 fd22 	bl	800e71e <VL53L0X_RdWord>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800cce0:	8b3b      	ldrh	r3, [r7, #24]
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7ff fe05 	bl	800c8f2 <VL53L0X_decode_timeout>
 800cce8:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800ccea:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800ccec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d109      	bne.n	800cd08 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ccf4:	f107 031b 	add.w	r3, r7, #27
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	2101      	movs	r1, #1
 800ccfc:	68f8      	ldr	r0, [r7, #12]
 800ccfe:	f7fd f897 	bl	8009e30 <VL53L0X_GetVcselPulsePeriod>
 800cd02:	4603      	mov	r3, r0
 800cd04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800cd08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d128      	bne.n	800cd62 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800cd10:	7efb      	ldrb	r3, [r7, #27]
 800cd12:	461a      	mov	r2, r3
 800cd14:	6879      	ldr	r1, [r7, #4]
 800cd16:	68f8      	ldr	r0, [r7, #12]
 800cd18:	f7ff fe02 	bl	800c920 <VL53L0X_calc_timeout_mclks>
 800cd1c:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800cd1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd20:	6a3a      	ldr	r2, [r7, #32]
 800cd22:	4413      	add	r3, r2
 800cd24:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800cd26:	6a38      	ldr	r0, [r7, #32]
 800cd28:	f7ff fdb7 	bl	800c89a <VL53L0X_encode_timeout>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800cd30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d108      	bne.n	800cd4a <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800cd38:	8bfb      	ldrh	r3, [r7, #30]
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	2171      	movs	r1, #113	; 0x71
 800cd3e:	68f8      	ldr	r0, [r7, #12]
 800cd40:	f001 fc70 	bl	800e624 <VL53L0X_WrWord>
 800cd44:	4603      	mov	r3, r0
 800cd46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800cd4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d107      	bne.n	800cd62 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800cd5a:	e002      	b.n	800cd62 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cd5c:	23fc      	movs	r3, #252	; 0xfc
 800cd5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800cd62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3728      	adds	r7, #40	; 0x28
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}

0800cd6e <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b086      	sub	sp, #24
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	60f8      	str	r0, [r7, #12]
 800cd76:	460b      	mov	r3, r1
 800cd78:	607a      	str	r2, [r7, #4]
 800cd7a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800cd80:	7afb      	ldrb	r3, [r7, #11]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d002      	beq.n	800cd8c <VL53L0X_get_vcsel_pulse_period+0x1e>
 800cd86:	2b01      	cmp	r3, #1
 800cd88:	d00a      	beq.n	800cda0 <VL53L0X_get_vcsel_pulse_period+0x32>
 800cd8a:	e013      	b.n	800cdb4 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800cd8c:	f107 0316 	add.w	r3, r7, #22
 800cd90:	461a      	mov	r2, r3
 800cd92:	2150      	movs	r1, #80	; 0x50
 800cd94:	68f8      	ldr	r0, [r7, #12]
 800cd96:	f001 fca3 	bl	800e6e0 <VL53L0X_RdByte>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800cd9e:	e00b      	b.n	800cdb8 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800cda0:	f107 0316 	add.w	r3, r7, #22
 800cda4:	461a      	mov	r2, r3
 800cda6:	2170      	movs	r1, #112	; 0x70
 800cda8:	68f8      	ldr	r0, [r7, #12]
 800cdaa:	f001 fc99 	bl	800e6e0 <VL53L0X_RdByte>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800cdb2:	e001      	b.n	800cdb8 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cdb4:	23fc      	movs	r3, #252	; 0xfc
 800cdb6:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800cdb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d107      	bne.n	800cdd0 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800cdc0:	7dbb      	ldrb	r3, [r7, #22]
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f7fe fff4 	bl	800bdb0 <VL53L0X_decode_vcsel_period>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	701a      	strb	r2, [r3, #0]

	return Status;
 800cdd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3718      	adds	r7, #24
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b092      	sub	sp, #72	; 0x48
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cde6:	2300      	movs	r3, #0
 800cde8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800cdec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800cdf0:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800cdf2:	f240 7376 	movw	r3, #1910	; 0x776
 800cdf6:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800cdf8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800cdfc:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800cdfe:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ce02:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800ce04:	f240 234e 	movw	r3, #590	; 0x24e
 800ce08:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800ce0a:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ce0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ce10:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ce14:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ce16:	f240 2326 	movw	r3, #550	; 0x226
 800ce1a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800ce20:	f644 6320 	movw	r3, #20000	; 0x4e20
 800ce24:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800ce26:	2300      	movs	r3, #0
 800ce28:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800ce2a:	683a      	ldr	r2, [r7, #0]
 800ce2c:	6a3b      	ldr	r3, [r7, #32]
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d205      	bcs.n	800ce3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ce32:	23fc      	movs	r3, #252	; 0xfc
 800ce34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800ce38:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ce3c:	e0aa      	b.n	800cf94 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800ce3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce42:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800ce44:	683a      	ldr	r2, [r7, #0]
 800ce46:	1ad3      	subs	r3, r2, r3
 800ce48:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ce4a:	f107 0314 	add.w	r3, r7, #20
 800ce4e:	4619      	mov	r1, r3
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f7fd f8f9 	bl	800a048 <VL53L0X_GetSequenceStepEnables>
 800ce56:	4603      	mov	r3, r0
 800ce58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800ce5c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d15b      	bne.n	800cf1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800ce64:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d105      	bne.n	800ce76 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800ce6a:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d102      	bne.n	800ce76 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800ce70:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d052      	beq.n	800cf1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800ce76:	f107 0310 	add.w	r3, r7, #16
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	2102      	movs	r1, #2
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f7ff fda2 	bl	800c9c8 <get_sequence_step_timeout>
 800ce84:	4603      	mov	r3, r0
 800ce86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800ce8a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d002      	beq.n	800ce98 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800ce92:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ce96:	e07d      	b.n	800cf94 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800ce98:	7d3b      	ldrb	r3, [r7, #20]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d00f      	beq.n	800cebe <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800ce9e:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800cea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cea2:	4413      	add	r3, r2
 800cea4:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800cea6:	69fa      	ldr	r2, [r7, #28]
 800cea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d204      	bcs.n	800ceb8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800ceae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ceb0:	69fb      	ldr	r3, [r7, #28]
 800ceb2:	1ad3      	subs	r3, r2, r3
 800ceb4:	643b      	str	r3, [r7, #64]	; 0x40
 800ceb6:	e002      	b.n	800cebe <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ceb8:	23fc      	movs	r3, #252	; 0xfc
 800ceba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800cebe:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d002      	beq.n	800cecc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800cec6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ceca:	e063      	b.n	800cf94 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800cecc:	7dbb      	ldrb	r3, [r7, #22]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d011      	beq.n	800cef6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800ced2:	693a      	ldr	r2, [r7, #16]
 800ced4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced6:	4413      	add	r3, r2
 800ced8:	005b      	lsls	r3, r3, #1
 800ceda:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800cedc:	69fa      	ldr	r2, [r7, #28]
 800cede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d204      	bcs.n	800ceee <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800cee4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cee6:	69fb      	ldr	r3, [r7, #28]
 800cee8:	1ad3      	subs	r3, r2, r3
 800ceea:	643b      	str	r3, [r7, #64]	; 0x40
 800ceec:	e016      	b.n	800cf1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ceee:	23fc      	movs	r3, #252	; 0xfc
 800cef0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800cef4:	e012      	b.n	800cf1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800cef6:	7d7b      	ldrb	r3, [r7, #21]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d00f      	beq.n	800cf1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf00:	4413      	add	r3, r2
 800cf02:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800cf04:	69fa      	ldr	r2, [r7, #28]
 800cf06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d204      	bcs.n	800cf16 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800cf0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf0e:	69fb      	ldr	r3, [r7, #28]
 800cf10:	1ad3      	subs	r3, r2, r3
 800cf12:	643b      	str	r3, [r7, #64]	; 0x40
 800cf14:	e002      	b.n	800cf1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cf16:	23fc      	movs	r3, #252	; 0xfc
 800cf18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800cf1c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d002      	beq.n	800cf2a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800cf24:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cf28:	e034      	b.n	800cf94 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800cf2a:	7dfb      	ldrb	r3, [r7, #23]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d019      	beq.n	800cf64 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800cf30:	f107 030c 	add.w	r3, r7, #12
 800cf34:	461a      	mov	r2, r3
 800cf36:	2103      	movs	r1, #3
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f7ff fd45 	bl	800c9c8 <get_sequence_step_timeout>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf48:	4413      	add	r3, r2
 800cf4a:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800cf4c:	69fa      	ldr	r2, [r7, #28]
 800cf4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d204      	bcs.n	800cf5e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800cf54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf56:	69fb      	ldr	r3, [r7, #28]
 800cf58:	1ad3      	subs	r3, r2, r3
 800cf5a:	643b      	str	r3, [r7, #64]	; 0x40
 800cf5c:	e002      	b.n	800cf64 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cf5e:	23fc      	movs	r3, #252	; 0xfc
 800cf60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800cf64:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d111      	bne.n	800cf90 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800cf6c:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d00e      	beq.n	800cf90 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800cf72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf76:	1ad3      	subs	r3, r2, r3
 800cf78:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800cf7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf7c:	2104      	movs	r1, #4
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f7ff fe03 	bl	800cb8a <set_sequence_step_timeout>
 800cf84:	4603      	mov	r3, r0
 800cf86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	683a      	ldr	r2, [r7, #0]
 800cf8e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800cf90:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3748      	adds	r7, #72	; 0x48
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b090      	sub	sp, #64	; 0x40
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800cfac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800cfb0:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800cfb2:	f240 7376 	movw	r3, #1910	; 0x776
 800cfb6:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800cfb8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800cfbc:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800cfbe:	f44f 7325 	mov.w	r3, #660	; 0x294
 800cfc2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800cfc4:	f240 234e 	movw	r3, #590	; 0x24e
 800cfc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800cfca:	f240 23b2 	movw	r3, #690	; 0x2b2
 800cfce:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800cfd0:	f44f 7325 	mov.w	r3, #660	; 0x294
 800cfd4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800cfd6:	f240 2326 	movw	r3, #550	; 0x226
 800cfda:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800cfe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfe4:	441a      	add	r2, r3
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800cfea:	f107 0318 	add.w	r3, r7, #24
 800cfee:	4619      	mov	r1, r3
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f7fd f829 	bl	800a048 <VL53L0X_GetSequenceStepEnables>
 800cff6:	4603      	mov	r3, r0
 800cff8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800cffc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d000:	2b00      	cmp	r3, #0
 800d002:	d002      	beq.n	800d00a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800d004:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d008:	e075      	b.n	800d0f6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800d00a:	7e3b      	ldrb	r3, [r7, #24]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d105      	bne.n	800d01c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800d010:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800d012:	2b00      	cmp	r3, #0
 800d014:	d102      	bne.n	800d01c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800d016:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d030      	beq.n	800d07e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800d01c:	f107 0310 	add.w	r3, r7, #16
 800d020:	461a      	mov	r2, r3
 800d022:	2102      	movs	r1, #2
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f7ff fccf 	bl	800c9c8 <get_sequence_step_timeout>
 800d02a:	4603      	mov	r3, r0
 800d02c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800d030:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d034:	2b00      	cmp	r3, #0
 800d036:	d122      	bne.n	800d07e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800d038:	7e3b      	ldrb	r3, [r7, #24]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d007      	beq.n	800d04e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800d042:	6939      	ldr	r1, [r7, #16]
 800d044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d046:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800d048:	441a      	add	r2, r3
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800d04e:	7ebb      	ldrb	r3, [r7, #26]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d009      	beq.n	800d068 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800d058:	6939      	ldr	r1, [r7, #16]
 800d05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05c:	440b      	add	r3, r1
 800d05e:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800d060:	441a      	add	r2, r3
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	601a      	str	r2, [r3, #0]
 800d066:	e00a      	b.n	800d07e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800d068:	7e7b      	ldrb	r3, [r7, #25]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d007      	beq.n	800d07e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800d072:	6939      	ldr	r1, [r7, #16]
 800d074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d076:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800d078:	441a      	add	r2, r3
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d07e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d082:	2b00      	cmp	r3, #0
 800d084:	d114      	bne.n	800d0b0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800d086:	7efb      	ldrb	r3, [r7, #27]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d011      	beq.n	800d0b0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800d08c:	f107 030c 	add.w	r3, r7, #12
 800d090:	461a      	mov	r2, r3
 800d092:	2103      	movs	r1, #3
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f7ff fc97 	bl	800c9c8 <get_sequence_step_timeout>
 800d09a:	4603      	mov	r3, r0
 800d09c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800d0a4:	68f9      	ldr	r1, [r7, #12]
 800d0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a8:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800d0aa:	441a      	add	r2, r3
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d0b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d114      	bne.n	800d0e2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800d0b8:	7f3b      	ldrb	r3, [r7, #28]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d011      	beq.n	800d0e2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800d0be:	f107 0314 	add.w	r3, r7, #20
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	2104      	movs	r1, #4
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f7ff fc7e 	bl	800c9c8 <get_sequence_step_timeout>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800d0d6:	6979      	ldr	r1, [r7, #20]
 800d0d8:	6a3b      	ldr	r3, [r7, #32]
 800d0da:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800d0dc:	441a      	add	r2, r3
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d0e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d103      	bne.n	800d0f2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d0f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3740      	adds	r7, #64	; 0x40
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
	...

0800d100 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b088      	sub	sp, #32
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d10a:	2300      	movs	r3, #0
 800d10c:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800d10e:	2300      	movs	r3, #0
 800d110:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800d112:	e0c6      	b.n	800d2a2 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	683a      	ldr	r2, [r7, #0]
 800d118:	4413      	add	r3, r2
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	74fb      	strb	r3, [r7, #19]
		Index++;
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	3301      	adds	r3, #1
 800d122:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800d124:	7cfb      	ldrb	r3, [r7, #19]
 800d126:	2bff      	cmp	r3, #255	; 0xff
 800d128:	f040 808d 	bne.w	800d246 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	683a      	ldr	r2, [r7, #0]
 800d130:	4413      	add	r3, r2
 800d132:	781b      	ldrb	r3, [r3, #0]
 800d134:	747b      	strb	r3, [r7, #17]
			Index++;
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	3301      	adds	r3, #1
 800d13a:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800d13c:	7c7b      	ldrb	r3, [r7, #17]
 800d13e:	2b03      	cmp	r3, #3
 800d140:	d87e      	bhi.n	800d240 <VL53L0X_load_tuning_settings+0x140>
 800d142:	a201      	add	r2, pc, #4	; (adr r2, 800d148 <VL53L0X_load_tuning_settings+0x48>)
 800d144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d148:	0800d159 	.word	0x0800d159
 800d14c:	0800d193 	.word	0x0800d193
 800d150:	0800d1cd 	.word	0x0800d1cd
 800d154:	0800d207 	.word	0x0800d207
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	683a      	ldr	r2, [r7, #0]
 800d15c:	4413      	add	r3, r2
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	743b      	strb	r3, [r7, #16]
				Index++;
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	3301      	adds	r3, #1
 800d166:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	683a      	ldr	r2, [r7, #0]
 800d16c:	4413      	add	r3, r2
 800d16e:	781b      	ldrb	r3, [r3, #0]
 800d170:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	3301      	adds	r3, #1
 800d176:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d178:	7c3b      	ldrb	r3, [r7, #16]
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	021b      	lsls	r3, r3, #8
 800d17e:	b29a      	uxth	r2, r3
 800d180:	7bfb      	ldrb	r3, [r7, #15]
 800d182:	b29b      	uxth	r3, r3
 800d184:	4413      	add	r3, r2
 800d186:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	89ba      	ldrh	r2, [r7, #12]
 800d18c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800d190:	e087      	b.n	800d2a2 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	683a      	ldr	r2, [r7, #0]
 800d196:	4413      	add	r3, r2
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	743b      	strb	r3, [r7, #16]
				Index++;
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	3301      	adds	r3, #1
 800d1a0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	683a      	ldr	r2, [r7, #0]
 800d1a6:	4413      	add	r3, r2
 800d1a8:	781b      	ldrb	r3, [r3, #0]
 800d1aa:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d1b2:	7c3b      	ldrb	r3, [r7, #16]
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	021b      	lsls	r3, r3, #8
 800d1b8:	b29a      	uxth	r2, r3
 800d1ba:	7bfb      	ldrb	r3, [r7, #15]
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	4413      	add	r3, r2
 800d1c0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	89ba      	ldrh	r2, [r7, #12]
 800d1c6:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800d1ca:	e06a      	b.n	800d2a2 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	683a      	ldr	r2, [r7, #0]
 800d1d0:	4413      	add	r3, r2
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	743b      	strb	r3, [r7, #16]
				Index++;
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	683a      	ldr	r2, [r7, #0]
 800d1e0:	4413      	add	r3, r2
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d1ec:	7c3b      	ldrb	r3, [r7, #16]
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	021b      	lsls	r3, r3, #8
 800d1f2:	b29a      	uxth	r2, r3
 800d1f4:	7bfb      	ldrb	r3, [r7, #15]
 800d1f6:	b29b      	uxth	r3, r3
 800d1f8:	4413      	add	r3, r2
 800d1fa:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	89ba      	ldrh	r2, [r7, #12]
 800d200:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800d204:	e04d      	b.n	800d2a2 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	683a      	ldr	r2, [r7, #0]
 800d20a:	4413      	add	r3, r2
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	743b      	strb	r3, [r7, #16]
				Index++;
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	3301      	adds	r3, #1
 800d214:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	683a      	ldr	r2, [r7, #0]
 800d21a:	4413      	add	r3, r2
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	3301      	adds	r3, #1
 800d224:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d226:	7c3b      	ldrb	r3, [r7, #16]
 800d228:	b29b      	uxth	r3, r3
 800d22a:	021b      	lsls	r3, r3, #8
 800d22c:	b29a      	uxth	r2, r3
 800d22e:	7bfb      	ldrb	r3, [r7, #15]
 800d230:	b29b      	uxth	r3, r3
 800d232:	4413      	add	r3, r2
 800d234:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	89ba      	ldrh	r2, [r7, #12]
 800d23a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800d23e:	e030      	b.n	800d2a2 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d240:	23fc      	movs	r3, #252	; 0xfc
 800d242:	77fb      	strb	r3, [r7, #31]
 800d244:	e02d      	b.n	800d2a2 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800d246:	7cfb      	ldrb	r3, [r7, #19]
 800d248:	2b04      	cmp	r3, #4
 800d24a:	d828      	bhi.n	800d29e <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	683a      	ldr	r2, [r7, #0]
 800d250:	4413      	add	r3, r2
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	74bb      	strb	r3, [r7, #18]
			Index++;
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	3301      	adds	r3, #1
 800d25a:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800d25c:	2300      	movs	r3, #0
 800d25e:	61bb      	str	r3, [r7, #24]
 800d260:	e00f      	b.n	800d282 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	683a      	ldr	r2, [r7, #0]
 800d266:	4413      	add	r3, r2
 800d268:	7819      	ldrb	r1, [r3, #0]
 800d26a:	f107 0208 	add.w	r2, r7, #8
 800d26e:	69bb      	ldr	r3, [r7, #24]
 800d270:	4413      	add	r3, r2
 800d272:	460a      	mov	r2, r1
 800d274:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	3301      	adds	r3, #1
 800d27a:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800d27c:	69bb      	ldr	r3, [r7, #24]
 800d27e:	3301      	adds	r3, #1
 800d280:	61bb      	str	r3, [r7, #24]
 800d282:	7cfb      	ldrb	r3, [r7, #19]
 800d284:	69ba      	ldr	r2, [r7, #24]
 800d286:	429a      	cmp	r2, r3
 800d288:	dbeb      	blt.n	800d262 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800d28a:	7cfb      	ldrb	r3, [r7, #19]
 800d28c:	f107 0208 	add.w	r2, r7, #8
 800d290:	7cb9      	ldrb	r1, [r7, #18]
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f001 f95a 	bl	800e54c <VL53L0X_WriteMulti>
 800d298:	4603      	mov	r3, r0
 800d29a:	77fb      	strb	r3, [r7, #31]
 800d29c:	e001      	b.n	800d2a2 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d29e:	23fc      	movs	r3, #252	; 0xfc
 800d2a0:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	683a      	ldr	r2, [r7, #0]
 800d2a6:	4413      	add	r3, r2
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d004      	beq.n	800d2b8 <VL53L0X_load_tuning_settings+0x1b8>
 800d2ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	f43f af2e 	beq.w	800d114 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d2b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3720      	adds	r7, #32
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b088      	sub	sp, #32
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	60b9      	str	r1, [r7, #8]
 800d2ce:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800d2da:	f107 0313 	add.w	r3, r7, #19
 800d2de:	4619      	mov	r1, r3
 800d2e0:	68f8      	ldr	r0, [r7, #12]
 800d2e2:	f7fc ff3d 	bl	800a160 <VL53L0X_GetXTalkCompensationEnable>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800d2ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d111      	bne.n	800d316 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800d2f2:	7cfb      	ldrb	r3, [r7, #19]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d00e      	beq.n	800d316 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6a1b      	ldr	r3, [r3, #32]
 800d2fc:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	8a9b      	ldrh	r3, [r3, #20]
 800d302:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800d304:	69bb      	ldr	r3, [r7, #24]
 800d306:	fb02 f303 	mul.w	r3, r2, r3
 800d30a:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	3380      	adds	r3, #128	; 0x80
 800d310:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800d316:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3720      	adds	r7, #32
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}

0800d322 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800d322:	b580      	push	{r7, lr}
 800d324:	b086      	sub	sp, #24
 800d326:	af00      	add	r7, sp, #0
 800d328:	60f8      	str	r0, [r7, #12]
 800d32a:	60b9      	str	r1, [r7, #8]
 800d32c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d32e:	2300      	movs	r3, #0
 800d330:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800d33a:	f107 0310 	add.w	r3, r7, #16
 800d33e:	461a      	mov	r2, r3
 800d340:	68b9      	ldr	r1, [r7, #8]
 800d342:	68f8      	ldr	r0, [r7, #12]
 800d344:	f7ff ffbe 	bl	800d2c4 <VL53L0X_get_total_xtalk_rate>
 800d348:	4603      	mov	r3, r0
 800d34a:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800d34c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d105      	bne.n	800d360 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681a      	ldr	r2, [r3, #0]
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	441a      	add	r2, r3
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	601a      	str	r2, [r3, #0]

	return Status;
 800d360:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d364:	4618      	mov	r0, r3
 800d366:	3718      	adds	r7, #24
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b09a      	sub	sp, #104	; 0x68
 800d370:	af00      	add	r7, sp, #0
 800d372:	60f8      	str	r0, [r7, #12]
 800d374:	60b9      	str	r1, [r7, #8]
 800d376:	607a      	str	r2, [r7, #4]
 800d378:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800d37a:	2312      	movs	r3, #18
 800d37c:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800d37e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d382:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800d384:	2342      	movs	r3, #66	; 0x42
 800d386:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800d388:	2306      	movs	r3, #6
 800d38a:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800d38c:	2307      	movs	r3, #7
 800d38e:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d390:	2300      	movs	r3, #0
 800d392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800d39c:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800d3a4:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800d3a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3aa:	fb02 f303 	mul.w	r3, r2, r3
 800d3ae:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800d3b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3b2:	3380      	adds	r3, #128	; 0x80
 800d3b4:	0a1b      	lsrs	r3, r3, #8
 800d3b6:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800d3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d3bc:	fb02 f303 	mul.w	r3, r2, r3
 800d3c0:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d01a      	beq.n	800d402 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	029b      	lsls	r3, r3, #10
 800d3d0:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800d3d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3d8:	4413      	add	r3, r2
 800d3da:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800d3dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3e4:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800d3e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d3e8:	4613      	mov	r3, r2
 800d3ea:	005b      	lsls	r3, r3, #1
 800d3ec:	4413      	add	r3, r2
 800d3ee:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800d3f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3f2:	fb03 f303 	mul.w	r3, r3, r3
 800d3f6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800d3f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3fa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d3fe:	0c1b      	lsrs	r3, r3, #16
 800d400:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d406:	fb02 f303 	mul.w	r3, r2, r3
 800d40a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800d40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d412:	0c1b      	lsrs	r3, r3, #16
 800d414:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800d416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d418:	fb03 f303 	mul.w	r3, r3, r3
 800d41c:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800d41e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d420:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d424:	0c1b      	lsrs	r3, r3, #16
 800d426:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800d428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d42a:	085a      	lsrs	r2, r3, #1
 800d42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42e:	441a      	add	r2, r3
 800d430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d432:	fbb2 f3f3 	udiv	r3, r2, r3
 800d436:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800d438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d43a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d43c:	fb02 f303 	mul.w	r3, r2, r3
 800d440:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800d442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d448:	d302      	bcc.n	800d450 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800d44a:	4b54      	ldr	r3, [pc, #336]	; (800d59c <VL53L0X_calc_dmax+0x230>)
 800d44c:	663b      	str	r3, [r7, #96]	; 0x60
 800d44e:	e015      	b.n	800d47c <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800d450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d452:	085a      	lsrs	r2, r3, #1
 800d454:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d456:	441a      	add	r2, r3
 800d458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d45a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d45e:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800d460:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d462:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d464:	fb02 f303 	mul.w	r3, r2, r3
 800d468:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800d46a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d46c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d470:	0c1b      	lsrs	r3, r3, #16
 800d472:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800d474:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d476:	fb03 f303 	mul.w	r3, r3, r3
 800d47a:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800d47c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d47e:	039b      	lsls	r3, r3, #14
 800d480:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d484:	4a46      	ldr	r2, [pc, #280]	; (800d5a0 <VL53L0X_calc_dmax+0x234>)
 800d486:	fba2 2303 	umull	r2, r3, r2, r3
 800d48a:	099b      	lsrs	r3, r3, #6
 800d48c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800d48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d490:	fb03 f303 	mul.w	r3, r3, r3
 800d494:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800d496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d498:	fb03 f303 	mul.w	r3, r3, r3
 800d49c:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800d49e:	6a3b      	ldr	r3, [r7, #32]
 800d4a0:	3308      	adds	r3, #8
 800d4a2:	091b      	lsrs	r3, r3, #4
 800d4a4:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800d4a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4a8:	6a3b      	ldr	r3, [r7, #32]
 800d4aa:	1ad3      	subs	r3, r2, r3
 800d4ac:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800d4ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4b0:	4613      	mov	r3, r2
 800d4b2:	005b      	lsls	r3, r3, #1
 800d4b4:	4413      	add	r3, r2
 800d4b6:	011b      	lsls	r3, r3, #4
 800d4b8:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800d4ba:	69fb      	ldr	r3, [r7, #28]
 800d4bc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d4c0:	0b9b      	lsrs	r3, r3, #14
 800d4c2:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800d4c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4c8:	4413      	add	r3, r2
 800d4ca:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800d4cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4ce:	085b      	lsrs	r3, r3, #1
 800d4d0:	69ba      	ldr	r2, [r7, #24]
 800d4d2:	4413      	add	r3, r2
 800d4d4:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800d4d6:	69ba      	ldr	r2, [r7, #24]
 800d4d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4da:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4de:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800d4e0:	69bb      	ldr	r3, [r7, #24]
 800d4e2:	039b      	lsls	r3, r3, #14
 800d4e4:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800d4e6:	69fb      	ldr	r3, [r7, #28]
 800d4e8:	085b      	lsrs	r3, r3, #1
 800d4ea:	69ba      	ldr	r2, [r7, #24]
 800d4ec:	4413      	add	r3, r2
 800d4ee:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800d4f0:	69ba      	ldr	r2, [r7, #24]
 800d4f2:	69fb      	ldr	r3, [r7, #28]
 800d4f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4f8:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800d4fa:	69bb      	ldr	r3, [r7, #24]
 800d4fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d4fe:	fb02 f303 	mul.w	r3, r2, r3
 800d502:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800d504:	69bb      	ldr	r3, [r7, #24]
 800d506:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d50a:	4a25      	ldr	r2, [pc, #148]	; (800d5a0 <VL53L0X_calc_dmax+0x234>)
 800d50c:	fba2 2303 	umull	r2, r3, r2, r3
 800d510:	099b      	lsrs	r3, r3, #6
 800d512:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800d514:	69bb      	ldr	r3, [r7, #24]
 800d516:	011b      	lsls	r3, r3, #4
 800d518:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800d51a:	69bb      	ldr	r3, [r7, #24]
 800d51c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d520:	4a1f      	ldr	r2, [pc, #124]	; (800d5a0 <VL53L0X_calc_dmax+0x234>)
 800d522:	fba2 2303 	umull	r2, r3, r2, r3
 800d526:	099b      	lsrs	r3, r3, #6
 800d528:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800d52a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d52c:	3380      	adds	r3, #128	; 0x80
 800d52e:	0a1b      	lsrs	r3, r3, #8
 800d530:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d008      	beq.n	800d54a <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	085a      	lsrs	r2, r3, #1
 800d53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d53e:	441a      	add	r2, r3
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	fbb2 f3f3 	udiv	r3, r2, r3
 800d546:	65bb      	str	r3, [r7, #88]	; 0x58
 800d548:	e001      	b.n	800d54e <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800d54a:	2300      	movs	r3, #0
 800d54c:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800d54e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d550:	f7fe fc41 	bl	800bdd6 <VL53L0X_isqrt>
 800d554:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800d556:	69bb      	ldr	r3, [r7, #24]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d008      	beq.n	800d56e <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800d55c:	69bb      	ldr	r3, [r7, #24]
 800d55e:	085a      	lsrs	r2, r3, #1
 800d560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d562:	441a      	add	r2, r3
 800d564:	69bb      	ldr	r3, [r7, #24]
 800d566:	fbb2 f3f3 	udiv	r3, r2, r3
 800d56a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d56c:	e001      	b.n	800d572 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800d56e:	2300      	movs	r3, #0
 800d570:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800d572:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d574:	f7fe fc2f 	bl	800bdd6 <VL53L0X_isqrt>
 800d578:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800d57a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d57c:	693a      	ldr	r2, [r7, #16]
 800d57e:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800d580:	693a      	ldr	r2, [r7, #16]
 800d582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d584:	429a      	cmp	r2, r3
 800d586:	d902      	bls.n	800d58e <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800d588:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d58a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d58c:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800d58e:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800d592:	4618      	mov	r0, r3
 800d594:	3768      	adds	r7, #104	; 0x68
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	bf00      	nop
 800d59c:	fff00000 	.word	0xfff00000
 800d5a0:	10624dd3 	.word	0x10624dd3

0800d5a4 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b0b4      	sub	sp, #208	; 0xd0
 800d5a8:	af04      	add	r7, sp, #16
 800d5aa:	60f8      	str	r0, [r7, #12]
 800d5ac:	60b9      	str	r1, [r7, #8]
 800d5ae:	607a      	str	r2, [r7, #4]
 800d5b0:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800d5b2:	f44f 7348 	mov.w	r3, #800	; 0x320
 800d5b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800d5ba:	f44f 7316 	mov.w	r3, #600	; 0x258
 800d5be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800d5c2:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800d5c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800d5ca:	f241 235c 	movw	r3, #4700	; 0x125c
 800d5ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800d5d2:	4b9e      	ldr	r3, [pc, #632]	; (800d84c <VL53L0X_calc_sigma_estimate+0x2a8>)
 800d5d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800d5d8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800d5dc:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800d5de:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800d5e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d5e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5ea:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800d5ec:	4b98      	ldr	r3, [pc, #608]	; (800d850 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800d5ee:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800d5f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5f4:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800d5f6:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800d5fa:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800d5fc:	f240 6377 	movw	r3, #1655	; 0x677
 800d600:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d602:	2300      	movs	r3, #0
 800d604:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	6a1b      	ldr	r3, [r3, #32]
 800d60c:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	691b      	ldr	r3, [r3, #16]
 800d612:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d616:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800d61a:	0c1b      	lsrs	r3, r3, #16
 800d61c:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	68db      	ldr	r3, [r3, #12]
 800d622:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800d624:	f107 0310 	add.w	r3, r7, #16
 800d628:	461a      	mov	r2, r3
 800d62a:	68b9      	ldr	r1, [r7, #8]
 800d62c:	68f8      	ldr	r0, [r7, #12]
 800d62e:	f7ff fe78 	bl	800d322 <VL53L0X_get_total_signal_rate>
 800d632:	4603      	mov	r3, r0
 800d634:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800d638:	f107 0314 	add.w	r3, r7, #20
 800d63c:	461a      	mov	r2, r3
 800d63e:	68b9      	ldr	r1, [r7, #8]
 800d640:	68f8      	ldr	r0, [r7, #12]
 800d642:	f7ff fe3f 	bl	800d2c4 <VL53L0X_get_total_xtalk_rate>
 800d646:	4603      	mov	r3, r0
 800d648:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d652:	fb02 f303 	mul.w	r3, r2, r3
 800d656:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800d658:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d65a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d65e:	0c1b      	lsrs	r3, r3, #16
 800d660:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d668:	fb02 f303 	mul.w	r3, r2, r3
 800d66c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800d670:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d676:	429a      	cmp	r2, r3
 800d678:	d902      	bls.n	800d680 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800d67a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d67c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800d680:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d684:	2b00      	cmp	r3, #0
 800d686:	d168      	bne.n	800d75a <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800d68e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800d698:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800d69c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800d6a6:	68f8      	ldr	r0, [r7, #12]
 800d6a8:	f7ff f93a 	bl	800c920 <VL53L0X_calc_timeout_mclks>
 800d6ac:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d6b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800d6be:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800d6c2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800d6cc:	68f8      	ldr	r0, [r7, #12]
 800d6ce:	f7ff f927 	bl	800c920 <VL53L0X_calc_timeout_mclks>
 800d6d2:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800d6d4:	2303      	movs	r3, #3
 800d6d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800d6da:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d6de:	2b08      	cmp	r3, #8
 800d6e0:	d102      	bne.n	800d6e8 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800d6e2:	2302      	movs	r3, #2
 800d6e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800d6e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d6ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6ec:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800d6ee:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d6f2:	fb02 f303 	mul.w	r3, r2, r3
 800d6f6:	02db      	lsls	r3, r3, #11
 800d6f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800d6fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d700:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d704:	4a53      	ldr	r2, [pc, #332]	; (800d854 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d706:	fba2 2303 	umull	r2, r3, r2, r3
 800d70a:	099b      	lsrs	r3, r3, #6
 800d70c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800d710:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d714:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d716:	fb02 f303 	mul.w	r3, r2, r3
 800d71a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800d71e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d722:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d726:	4a4b      	ldr	r2, [pc, #300]	; (800d854 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d728:	fba2 2303 	umull	r2, r3, r2, r3
 800d72c:	099b      	lsrs	r3, r3, #6
 800d72e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	3380      	adds	r3, #128	; 0x80
 800d736:	0a1b      	lsrs	r3, r3, #8
 800d738:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800d73a:	693a      	ldr	r2, [r7, #16]
 800d73c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d740:	fb02 f303 	mul.w	r3, r2, r3
 800d744:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800d748:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d74c:	3380      	adds	r3, #128	; 0x80
 800d74e:	0a1b      	lsrs	r3, r3, #8
 800d750:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	021b      	lsls	r3, r3, #8
 800d758:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800d75a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d002      	beq.n	800d768 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800d762:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d766:	e15e      	b.n	800da26 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800d768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d10c      	bne.n	800d788 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d774:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d77c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	2200      	movs	r2, #0
 800d784:	601a      	str	r2, [r3, #0]
 800d786:	e14c      	b.n	800da22 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800d788:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d102      	bne.n	800d796 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800d790:	2301      	movs	r3, #1
 800d792:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800d796:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d79a:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800d79c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d79e:	041a      	lsls	r2, r3, #16
 800d7a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800d7aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d7ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d902      	bls.n	800d7ba <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800d7b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d7b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800d7ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d7be:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d7c2:	fb02 f303 	mul.w	r3, r2, r3
 800d7c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800d7ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800d7ce:	4613      	mov	r3, r2
 800d7d0:	005b      	lsls	r3, r3, #1
 800d7d2:	4413      	add	r3, r2
 800d7d4:	009b      	lsls	r3, r3, #2
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f7fe fafd 	bl	800bdd6 <VL53L0X_isqrt>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	005b      	lsls	r3, r3, #1
 800d7e0:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	891b      	ldrh	r3, [r3, #8]
 800d7e6:	461a      	mov	r2, r3
 800d7e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7ea:	fb02 f303 	mul.w	r3, r2, r3
 800d7ee:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d7f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7f2:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800d7f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d7f8:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d7fa:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800d7fc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d800:	4a14      	ldr	r2, [pc, #80]	; (800d854 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d802:	fba2 2303 	umull	r2, r3, r2, r3
 800d806:	099b      	lsrs	r3, r3, #6
 800d808:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800d80a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d80c:	041b      	lsls	r3, r3, #16
 800d80e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d812:	4a10      	ldr	r2, [pc, #64]	; (800d854 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d814:	fba2 2303 	umull	r2, r3, r2, r3
 800d818:	099b      	lsrs	r3, r3, #6
 800d81a:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800d81c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d81e:	021b      	lsls	r3, r3, #8
 800d820:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800d822:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d826:	fbb2 f3f3 	udiv	r3, r2, r3
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	bfb8      	it	lt
 800d82e:	425b      	neglt	r3, r3
 800d830:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800d832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d834:	021b      	lsls	r3, r3, #8
 800d836:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	7e1b      	ldrb	r3, [r3, #24]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d00b      	beq.n	800d858 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800d840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d844:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d848:	e033      	b.n	800d8b2 <VL53L0X_calc_sigma_estimate+0x30e>
 800d84a:	bf00      	nop
 800d84c:	028f87ae 	.word	0x028f87ae
 800d850:	0006999a 	.word	0x0006999a
 800d854:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800d858:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d85a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d85e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d862:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800d866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d868:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800d86c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d870:	fb02 f303 	mul.w	r3, r2, r3
 800d874:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800d878:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d87c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d87e:	4413      	add	r3, r2
 800d880:	0c1b      	lsrs	r3, r3, #16
 800d882:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800d886:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d88a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800d88e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800d892:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d896:	085b      	lsrs	r3, r3, #1
 800d898:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800d89c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d8a0:	fb03 f303 	mul.w	r3, r3, r3
 800d8a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800d8a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d8ac:	0b9b      	lsrs	r3, r3, #14
 800d8ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800d8b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d8b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8b8:	fb02 f303 	mul.w	r3, r2, r3
 800d8bc:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800d8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d8c4:	0c1b      	lsrs	r3, r3, #16
 800d8c6:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800d8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ca:	fb03 f303 	mul.w	r3, r3, r3
 800d8ce:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800d8d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d8d4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800d8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d8dc:	0c1b      	lsrs	r3, r3, #16
 800d8de:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800d8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e2:	fb03 f303 	mul.w	r3, r3, r3
 800d8e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800d8e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ec:	4413      	add	r3, r2
 800d8ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800d8f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8f2:	f7fe fa70 	bl	800bdd6 <VL53L0X_isqrt>
 800d8f6:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800d8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fa:	041b      	lsls	r3, r3, #16
 800d8fc:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800d8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d900:	3332      	adds	r3, #50	; 0x32
 800d902:	4a4b      	ldr	r2, [pc, #300]	; (800da30 <VL53L0X_calc_sigma_estimate+0x48c>)
 800d904:	fba2 2303 	umull	r2, r3, r2, r3
 800d908:	095a      	lsrs	r2, r3, #5
 800d90a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d90c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d910:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800d914:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d918:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800d91c:	fb02 f303 	mul.w	r3, r2, r3
 800d920:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800d924:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d928:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800d92c:	3308      	adds	r3, #8
 800d92e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800d932:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d936:	4a3f      	ldr	r2, [pc, #252]	; (800da34 <VL53L0X_calc_sigma_estimate+0x490>)
 800d938:	fba2 2303 	umull	r2, r3, r2, r3
 800d93c:	0b5b      	lsrs	r3, r3, #13
 800d93e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800d942:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d946:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d948:	429a      	cmp	r2, r3
 800d94a:	d902      	bls.n	800d952 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800d94c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d94e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800d952:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d956:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d95a:	4413      	add	r3, r2
 800d95c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800d960:	4a35      	ldr	r2, [pc, #212]	; (800da38 <VL53L0X_calc_sigma_estimate+0x494>)
 800d962:	fba2 2303 	umull	r2, r3, r2, r3
 800d966:	099b      	lsrs	r3, r3, #6
 800d968:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800d96a:	6a3b      	ldr	r3, [r7, #32]
 800d96c:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800d96e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d972:	441a      	add	r2, r3
 800d974:	6a3b      	ldr	r3, [r7, #32]
 800d976:	fbb2 f3f3 	udiv	r3, r2, r3
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7fe fa2b 	bl	800bdd6 <VL53L0X_isqrt>
 800d980:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800d982:	69fb      	ldr	r3, [r7, #28]
 800d984:	021b      	lsls	r3, r3, #8
 800d986:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800d988:	69fb      	ldr	r3, [r7, #28]
 800d98a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d98e:	4a2a      	ldr	r2, [pc, #168]	; (800da38 <VL53L0X_calc_sigma_estimate+0x494>)
 800d990:	fba2 2303 	umull	r2, r3, r2, r3
 800d994:	099b      	lsrs	r3, r3, #6
 800d996:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800d998:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d99c:	fb03 f303 	mul.w	r3, r3, r3
 800d9a0:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800d9a2:	69fb      	ldr	r3, [r7, #28]
 800d9a4:	fb03 f303 	mul.w	r3, r3, r3
 800d9a8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800d9aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ae:	4413      	add	r3, r2
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7fe fa10 	bl	800bdd6 <VL53L0X_isqrt>
 800d9b6:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800d9b8:	69bb      	ldr	r3, [r7, #24]
 800d9ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d9be:	fb02 f303 	mul.w	r3, r2, r3
 800d9c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800d9c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d009      	beq.n	800d9e0 <VL53L0X_calc_sigma_estimate+0x43c>
 800d9cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d005      	beq.n	800d9e0 <VL53L0X_calc_sigma_estimate+0x43c>
 800d9d4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d9d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d903      	bls.n	800d9e8 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800d9e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d9e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d9ee:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681a      	ldr	r2, [r3, #0]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800d9fa:	6939      	ldr	r1, [r7, #16]
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	9303      	str	r3, [sp, #12]
 800da00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800da04:	9302      	str	r3, [sp, #8]
 800da06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800da0a:	9301      	str	r3, [sp, #4]
 800da0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da0e:	9300      	str	r3, [sp, #0]
 800da10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800da14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da16:	68f8      	ldr	r0, [r7, #12]
 800da18:	f7ff fca8 	bl	800d36c <VL53L0X_calc_dmax>
 800da1c:	4603      	mov	r3, r0
 800da1e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800da22:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800da26:	4618      	mov	r0, r3
 800da28:	37c0      	adds	r7, #192	; 0xc0
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop
 800da30:	51eb851f 	.word	0x51eb851f
 800da34:	d1b71759 	.word	0xd1b71759
 800da38:	10624dd3 	.word	0x10624dd3

0800da3c <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b090      	sub	sp, #64	; 0x40
 800da40:	af00      	add	r7, sp, #0
 800da42:	60f8      	str	r0, [r7, #12]
 800da44:	607a      	str	r2, [r7, #4]
 800da46:	461a      	mov	r2, r3
 800da48:	460b      	mov	r3, r1
 800da4a:	72fb      	strb	r3, [r7, #11]
 800da4c:	4613      	mov	r3, r2
 800da4e:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800da50:	2300      	movs	r3, #0
 800da52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800da56:	2300      	movs	r3, #0
 800da58:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800da5c:	2300      	movs	r3, #0
 800da5e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800da62:	2300      	movs	r3, #0
 800da64:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800da68:	2300      	movs	r3, #0
 800da6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800da6e:	2300      	movs	r3, #0
 800da70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800da74:	2300      	movs	r3, #0
 800da76:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800da7a:	2300      	movs	r3, #0
 800da7c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800da80:	2300      	movs	r3, #0
 800da82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800da86:	2300      	movs	r3, #0
 800da88:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800da8a:	2300      	movs	r3, #0
 800da8c:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800da8e:	7afb      	ldrb	r3, [r7, #11]
 800da90:	10db      	asrs	r3, r3, #3
 800da92:	b2db      	uxtb	r3, r3
 800da94:	f003 030f 	and.w	r3, r3, #15
 800da98:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800da9c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d017      	beq.n	800dad4 <VL53L0X_get_pal_range_status+0x98>
 800daa4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800daa8:	2b05      	cmp	r3, #5
 800daaa:	d013      	beq.n	800dad4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800daac:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dab0:	2b07      	cmp	r3, #7
 800dab2:	d00f      	beq.n	800dad4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800dab4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dab8:	2b0c      	cmp	r3, #12
 800daba:	d00b      	beq.n	800dad4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800dabc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dac0:	2b0d      	cmp	r3, #13
 800dac2:	d007      	beq.n	800dad4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800dac4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dac8:	2b0e      	cmp	r3, #14
 800daca:	d003      	beq.n	800dad4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800dacc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dad0:	2b0f      	cmp	r3, #15
 800dad2:	d103      	bne.n	800dadc <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800dad4:	2301      	movs	r3, #1
 800dad6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800dada:	e002      	b.n	800dae2 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800dadc:	2300      	movs	r3, #0
 800dade:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800dae2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d109      	bne.n	800dafe <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800daea:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800daee:	461a      	mov	r2, r3
 800daf0:	2100      	movs	r1, #0
 800daf2:	68f8      	ldr	r0, [r7, #12]
 800daf4:	f7fc fc08 	bl	800a308 <VL53L0X_GetLimitCheckEnable>
 800daf8:	4603      	mov	r3, r0
 800dafa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800dafe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800db02:	2b00      	cmp	r3, #0
 800db04:	d02e      	beq.n	800db64 <VL53L0X_get_pal_range_status+0x128>
 800db06:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d12a      	bne.n	800db64 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800db0e:	f107 0310 	add.w	r3, r7, #16
 800db12:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800db16:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800db18:	68f8      	ldr	r0, [r7, #12]
 800db1a:	f7ff fd43 	bl	800d5a4 <VL53L0X_calc_sigma_estimate>
 800db1e:	4603      	mov	r3, r0
 800db20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800db24:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d103      	bne.n	800db34 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	b29a      	uxth	r2, r3
 800db30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db32:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800db34:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d113      	bne.n	800db64 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800db3c:	f107 0320 	add.w	r3, r7, #32
 800db40:	461a      	mov	r2, r3
 800db42:	2100      	movs	r1, #0
 800db44:	68f8      	ldr	r0, [r7, #12]
 800db46:	f7fc fc65 	bl	800a414 <VL53L0X_GetLimitCheckValue>
 800db4a:	4603      	mov	r3, r0
 800db4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800db50:	6a3b      	ldr	r3, [r7, #32]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d006      	beq.n	800db64 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800db56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db58:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d902      	bls.n	800db64 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800db5e:	2301      	movs	r3, #1
 800db60:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800db64:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d109      	bne.n	800db80 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800db6c:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800db70:	461a      	mov	r2, r3
 800db72:	2102      	movs	r1, #2
 800db74:	68f8      	ldr	r0, [r7, #12]
 800db76:	f7fc fbc7 	bl	800a308 <VL53L0X_GetLimitCheckEnable>
 800db7a:	4603      	mov	r3, r0
 800db7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800db80:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800db84:	2b00      	cmp	r3, #0
 800db86:	d044      	beq.n	800dc12 <VL53L0X_get_pal_range_status+0x1d6>
 800db88:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d140      	bne.n	800dc12 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800db90:	f107 031c 	add.w	r3, r7, #28
 800db94:	461a      	mov	r2, r3
 800db96:	2102      	movs	r1, #2
 800db98:	68f8      	ldr	r0, [r7, #12]
 800db9a:	f7fc fc3b 	bl	800a414 <VL53L0X_GetLimitCheckValue>
 800db9e:	4603      	mov	r3, r0
 800dba0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800dba4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d107      	bne.n	800dbbc <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800dbac:	2201      	movs	r2, #1
 800dbae:	21ff      	movs	r1, #255	; 0xff
 800dbb0:	68f8      	ldr	r0, [r7, #12]
 800dbb2:	f000 fd17 	bl	800e5e4 <VL53L0X_WrByte>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800dbbc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d109      	bne.n	800dbd8 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800dbc4:	f107 0316 	add.w	r3, r7, #22
 800dbc8:	461a      	mov	r2, r3
 800dbca:	21b6      	movs	r1, #182	; 0xb6
 800dbcc:	68f8      	ldr	r0, [r7, #12]
 800dbce:	f000 fda6 	bl	800e71e <VL53L0X_RdWord>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800dbd8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d107      	bne.n	800dbf0 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	21ff      	movs	r1, #255	; 0xff
 800dbe4:	68f8      	ldr	r0, [r7, #12]
 800dbe6:	f000 fcfd 	bl	800e5e4 <VL53L0X_WrByte>
 800dbea:	4603      	mov	r3, r0
 800dbec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800dbf0:	8afb      	ldrh	r3, [r7, #22]
 800dbf2:	025b      	lsls	r3, r3, #9
 800dbf4:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbfa:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800dbfe:	69fb      	ldr	r3, [r7, #28]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d006      	beq.n	800dc12 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800dc04:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800dc06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d902      	bls.n	800dc12 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800dc12:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d109      	bne.n	800dc2e <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800dc1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dc1e:	461a      	mov	r2, r3
 800dc20:	2103      	movs	r1, #3
 800dc22:	68f8      	ldr	r0, [r7, #12]
 800dc24:	f7fc fb70 	bl	800a308 <VL53L0X_GetLimitCheckEnable>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800dc2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d023      	beq.n	800dc7e <VL53L0X_get_pal_range_status+0x242>
 800dc36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d11f      	bne.n	800dc7e <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800dc3e:	893b      	ldrh	r3, [r7, #8]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d102      	bne.n	800dc4a <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800dc44:	2300      	movs	r3, #0
 800dc46:	637b      	str	r3, [r7, #52]	; 0x34
 800dc48:	e005      	b.n	800dc56 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	021a      	lsls	r2, r3, #8
 800dc4e:	893b      	ldrh	r3, [r7, #8]
 800dc50:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc54:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800dc56:	f107 0318 	add.w	r3, r7, #24
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	2103      	movs	r1, #3
 800dc5e:	68f8      	ldr	r0, [r7, #12]
 800dc60:	f7fc fbd8 	bl	800a414 <VL53L0X_GetLimitCheckValue>
 800dc64:	4603      	mov	r3, r0
 800dc66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800dc6a:	69bb      	ldr	r3, [r7, #24]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d006      	beq.n	800dc7e <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800dc70:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800dc72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d202      	bcs.n	800dc7e <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800dc78:	2301      	movs	r3, #1
 800dc7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800dc7e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d14a      	bne.n	800dd1c <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800dc86:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	d103      	bne.n	800dc96 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800dc8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc90:	22ff      	movs	r2, #255	; 0xff
 800dc92:	701a      	strb	r2, [r3, #0]
 800dc94:	e042      	b.n	800dd1c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800dc96:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dc9a:	2b01      	cmp	r3, #1
 800dc9c:	d007      	beq.n	800dcae <VL53L0X_get_pal_range_status+0x272>
 800dc9e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dca2:	2b02      	cmp	r3, #2
 800dca4:	d003      	beq.n	800dcae <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800dca6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dcaa:	2b03      	cmp	r3, #3
 800dcac:	d103      	bne.n	800dcb6 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800dcae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcb0:	2205      	movs	r2, #5
 800dcb2:	701a      	strb	r2, [r3, #0]
 800dcb4:	e032      	b.n	800dd1c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800dcb6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dcba:	2b06      	cmp	r3, #6
 800dcbc:	d003      	beq.n	800dcc6 <VL53L0X_get_pal_range_status+0x28a>
 800dcbe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dcc2:	2b09      	cmp	r3, #9
 800dcc4:	d103      	bne.n	800dcce <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800dcc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcc8:	2204      	movs	r2, #4
 800dcca:	701a      	strb	r2, [r3, #0]
 800dccc:	e026      	b.n	800dd1c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800dcce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dcd2:	2b08      	cmp	r3, #8
 800dcd4:	d007      	beq.n	800dce6 <VL53L0X_get_pal_range_status+0x2aa>
 800dcd6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dcda:	2b0a      	cmp	r3, #10
 800dcdc:	d003      	beq.n	800dce6 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800dcde:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dce2:	2b01      	cmp	r3, #1
 800dce4:	d103      	bne.n	800dcee <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800dce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dce8:	2203      	movs	r2, #3
 800dcea:	701a      	strb	r2, [r3, #0]
 800dcec:	e016      	b.n	800dd1c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800dcee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dcf2:	2b04      	cmp	r3, #4
 800dcf4:	d003      	beq.n	800dcfe <VL53L0X_get_pal_range_status+0x2c2>
 800dcf6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	d103      	bne.n	800dd06 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800dcfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd00:	2202      	movs	r2, #2
 800dd02:	701a      	strb	r2, [r3, #0]
 800dd04:	e00a      	b.n	800dd1c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800dd06:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800dd0a:	2b01      	cmp	r3, #1
 800dd0c:	d103      	bne.n	800dd16 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800dd0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd10:	2201      	movs	r2, #1
 800dd12:	701a      	strb	r2, [r3, #0]
 800dd14:	e002      	b.n	800dd1c <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800dd16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd18:	2200      	movs	r2, #0
 800dd1a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800dd1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d102      	bne.n	800dd2a <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800dd24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd26:	2200      	movs	r2, #0
 800dd28:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800dd2a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800dd2e:	461a      	mov	r2, r3
 800dd30:	2101      	movs	r1, #1
 800dd32:	68f8      	ldr	r0, [r7, #12]
 800dd34:	f7fc fae8 	bl	800a308 <VL53L0X_GetLimitCheckEnable>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800dd3e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d14f      	bne.n	800dde6 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800dd46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d003      	beq.n	800dd56 <VL53L0X_get_pal_range_status+0x31a>
 800dd4e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800dd52:	2b01      	cmp	r3, #1
 800dd54:	d103      	bne.n	800dd5e <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800dd56:	2301      	movs	r3, #1
 800dd58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd5c:	e002      	b.n	800dd64 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800dd6a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800dd6e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dd72:	2b04      	cmp	r3, #4
 800dd74:	d003      	beq.n	800dd7e <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800dd76:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d103      	bne.n	800dd86 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800dd7e:	2301      	movs	r3, #1
 800dd80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd84:	e002      	b.n	800dd8c <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800dd86:	2300      	movs	r3, #0
 800dd88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800dd92:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800dd96:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d003      	beq.n	800dda6 <VL53L0X_get_pal_range_status+0x36a>
 800dd9e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dda2:	2b01      	cmp	r3, #1
 800dda4:	d103      	bne.n	800ddae <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800dda6:	2301      	movs	r3, #1
 800dda8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddac:	e002      	b.n	800ddb4 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ddba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800ddbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d003      	beq.n	800ddce <VL53L0X_get_pal_range_status+0x392>
 800ddc6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d103      	bne.n	800ddd6 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800ddce:	2301      	movs	r3, #1
 800ddd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddd4:	e002      	b.n	800dddc <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800dde2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800dde6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3740      	adds	r7, #64	; 0x40
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
	...

0800ddf4 <VL53L0X_get_range_status_string>:
	return Status;
}

VL53L0X_Error VL53L0X_get_range_status_string(uint8_t RangeStatus,
		char *pRangeStatusString)
{
 800ddf4:	b490      	push	{r4, r7}
 800ddf6:	b084      	sub	sp, #16
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	6039      	str	r1, [r7, #0]
 800ddfe:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800de00:	2300      	movs	r3, #0
 800de02:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	switch (RangeStatus) {
 800de04:	79fb      	ldrb	r3, [r7, #7]
 800de06:	2b05      	cmp	r3, #5
 800de08:	d850      	bhi.n	800deac <VL53L0X_get_range_status_string+0xb8>
 800de0a:	a201      	add	r2, pc, #4	; (adr r2, 800de10 <VL53L0X_get_range_status_string+0x1c>)
 800de0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de10:	0800de29 	.word	0x0800de29
 800de14:	0800de3b 	.word	0x0800de3b
 800de18:	0800de53 	.word	0x0800de53
 800de1c:	0800de65 	.word	0x0800de65
 800de20:	0800de7f 	.word	0x0800de7f
 800de24:	0800de97 	.word	0x0800de97
	case 0:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	4a28      	ldr	r2, [pc, #160]	; (800decc <VL53L0X_get_range_status_string+0xd8>)
 800de2c:	461c      	mov	r4, r3
 800de2e:	4613      	mov	r3, r2
 800de30:	cb07      	ldmia	r3!, {r0, r1, r2}
 800de32:	6020      	str	r0, [r4, #0]
 800de34:	6061      	str	r1, [r4, #4]
 800de36:	60a2      	str	r2, [r4, #8]
			VL53L0X_STRING_RANGESTATUS_RANGEVALID);
	break;
 800de38:	e041      	b.n	800debe <VL53L0X_get_range_status_string+0xca>
	case 1:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	4924      	ldr	r1, [pc, #144]	; (800ded0 <VL53L0X_get_range_status_string+0xdc>)
 800de3e:	461a      	mov	r2, r3
 800de40:	460b      	mov	r3, r1
 800de42:	cb03      	ldmia	r3!, {r0, r1}
 800de44:	6010      	str	r0, [r2, #0]
 800de46:	6051      	str	r1, [r2, #4]
 800de48:	8819      	ldrh	r1, [r3, #0]
 800de4a:	789b      	ldrb	r3, [r3, #2]
 800de4c:	8111      	strh	r1, [r2, #8]
 800de4e:	7293      	strb	r3, [r2, #10]
			VL53L0X_STRING_RANGESTATUS_SIGMA);
	break;
 800de50:	e035      	b.n	800debe <VL53L0X_get_range_status_string+0xca>
	case 2:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	4a1f      	ldr	r2, [pc, #124]	; (800ded4 <VL53L0X_get_range_status_string+0xe0>)
 800de56:	461c      	mov	r4, r3
 800de58:	4613      	mov	r3, r2
 800de5a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800de5c:	6020      	str	r0, [r4, #0]
 800de5e:	6061      	str	r1, [r4, #4]
 800de60:	60a2      	str	r2, [r4, #8]
			VL53L0X_STRING_RANGESTATUS_SIGNAL);
	break;
 800de62:	e02c      	b.n	800debe <VL53L0X_get_range_status_string+0xca>
	case 3:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	4a1c      	ldr	r2, [pc, #112]	; (800ded8 <VL53L0X_get_range_status_string+0xe4>)
 800de68:	461c      	mov	r4, r3
 800de6a:	4613      	mov	r3, r2
 800de6c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800de6e:	6020      	str	r0, [r4, #0]
 800de70:	6061      	str	r1, [r4, #4]
 800de72:	60a2      	str	r2, [r4, #8]
 800de74:	881a      	ldrh	r2, [r3, #0]
 800de76:	789b      	ldrb	r3, [r3, #2]
 800de78:	81a2      	strh	r2, [r4, #12]
 800de7a:	73a3      	strb	r3, [r4, #14]
			VL53L0X_STRING_RANGESTATUS_MINRANGE);
	break;
 800de7c:	e01f      	b.n	800debe <VL53L0X_get_range_status_string+0xca>
	case 4:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	4916      	ldr	r1, [pc, #88]	; (800dedc <VL53L0X_get_range_status_string+0xe8>)
 800de82:	461a      	mov	r2, r3
 800de84:	460b      	mov	r3, r1
 800de86:	cb03      	ldmia	r3!, {r0, r1}
 800de88:	6010      	str	r0, [r2, #0]
 800de8a:	6051      	str	r1, [r2, #4]
 800de8c:	8819      	ldrh	r1, [r3, #0]
 800de8e:	789b      	ldrb	r3, [r3, #2]
 800de90:	8111      	strh	r1, [r2, #8]
 800de92:	7293      	strb	r3, [r2, #10]
			VL53L0X_STRING_RANGESTATUS_PHASE);
	break;
 800de94:	e013      	b.n	800debe <VL53L0X_get_range_status_string+0xca>
	case 5:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	4a11      	ldr	r2, [pc, #68]	; (800dee0 <VL53L0X_get_range_status_string+0xec>)
 800de9a:	461c      	mov	r4, r3
 800de9c:	4613      	mov	r3, r2
 800de9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dea0:	6020      	str	r0, [r4, #0]
 800dea2:	6061      	str	r1, [r4, #4]
 800dea4:	60a2      	str	r2, [r4, #8]
 800dea6:	881b      	ldrh	r3, [r3, #0]
 800dea8:	81a3      	strh	r3, [r4, #12]
			VL53L0X_STRING_RANGESTATUS_HW);
	break;
 800deaa:	e008      	b.n	800debe <VL53L0X_get_range_status_string+0xca>

	default: /**/
		VL53L0X_COPYSTRING(pRangeStatusString,
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	490d      	ldr	r1, [pc, #52]	; (800dee4 <VL53L0X_get_range_status_string+0xf0>)
 800deb0:	461a      	mov	r2, r3
 800deb2:	460b      	mov	r3, r1
 800deb4:	cb03      	ldmia	r3!, {r0, r1}
 800deb6:	6010      	str	r0, [r2, #0]
 800deb8:	6051      	str	r1, [r2, #4]
 800deba:	881b      	ldrh	r3, [r3, #0]
 800debc:	8113      	strh	r3, [r2, #8]
				VL53L0X_STRING_RANGESTATUS_NONE);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800debe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3710      	adds	r7, #16
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bc90      	pop	{r4, r7}
 800deca:	4770      	bx	lr
 800decc:	080149cc 	.word	0x080149cc
 800ded0:	080149d8 	.word	0x080149d8
 800ded4:	080149e4 	.word	0x080149e4
 800ded8:	080149f0 	.word	0x080149f0
 800dedc:	08014a00 	.word	0x08014a00
 800dee0:	08014a0c 	.word	0x08014a0c
 800dee4:	08014864 	.word	0x08014864

0800dee8 <VL53L0X_get_pal_error_string>:

VL53L0X_Error VL53L0X_get_pal_error_string(VL53L0X_Error PalErrorCode,
		char *pPalErrorString)
{
 800dee8:	b4b0      	push	{r4, r5, r7}
 800deea:	b085      	sub	sp, #20
 800deec:	af00      	add	r7, sp, #0
 800deee:	4603      	mov	r3, r0
 800def0:	6039      	str	r1, [r7, #0]
 800def2:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800def4:	2300      	movs	r3, #0
 800def6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	switch (PalErrorCode) {
 800def8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800defc:	3363      	adds	r3, #99	; 0x63
 800defe:	2b63      	cmp	r3, #99	; 0x63
 800df00:	f200 81b9 	bhi.w	800e276 <VL53L0X_get_pal_error_string+0x38e>
 800df04:	a201      	add	r2, pc, #4	; (adr r2, 800df0c <VL53L0X_get_pal_error_string+0x24>)
 800df06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df0a:	bf00      	nop
 800df0c:	0800e25b 	.word	0x0800e25b
 800df10:	0800e277 	.word	0x0800e277
 800df14:	0800e277 	.word	0x0800e277
 800df18:	0800e277 	.word	0x0800e277
 800df1c:	0800e277 	.word	0x0800e277
 800df20:	0800e277 	.word	0x0800e277
 800df24:	0800e277 	.word	0x0800e277
 800df28:	0800e277 	.word	0x0800e277
 800df2c:	0800e277 	.word	0x0800e277
 800df30:	0800e277 	.word	0x0800e277
 800df34:	0800e277 	.word	0x0800e277
 800df38:	0800e277 	.word	0x0800e277
 800df3c:	0800e277 	.word	0x0800e277
 800df40:	0800e277 	.word	0x0800e277
 800df44:	0800e277 	.word	0x0800e277
 800df48:	0800e277 	.word	0x0800e277
 800df4c:	0800e277 	.word	0x0800e277
 800df50:	0800e277 	.word	0x0800e277
 800df54:	0800e277 	.word	0x0800e277
 800df58:	0800e277 	.word	0x0800e277
 800df5c:	0800e277 	.word	0x0800e277
 800df60:	0800e277 	.word	0x0800e277
 800df64:	0800e277 	.word	0x0800e277
 800df68:	0800e277 	.word	0x0800e277
 800df6c:	0800e277 	.word	0x0800e277
 800df70:	0800e277 	.word	0x0800e277
 800df74:	0800e277 	.word	0x0800e277
 800df78:	0800e277 	.word	0x0800e277
 800df7c:	0800e277 	.word	0x0800e277
 800df80:	0800e277 	.word	0x0800e277
 800df84:	0800e277 	.word	0x0800e277
 800df88:	0800e277 	.word	0x0800e277
 800df8c:	0800e277 	.word	0x0800e277
 800df90:	0800e277 	.word	0x0800e277
 800df94:	0800e277 	.word	0x0800e277
 800df98:	0800e277 	.word	0x0800e277
 800df9c:	0800e277 	.word	0x0800e277
 800dfa0:	0800e277 	.word	0x0800e277
 800dfa4:	0800e277 	.word	0x0800e277
 800dfa8:	0800e277 	.word	0x0800e277
 800dfac:	0800e277 	.word	0x0800e277
 800dfb0:	0800e277 	.word	0x0800e277
 800dfb4:	0800e277 	.word	0x0800e277
 800dfb8:	0800e277 	.word	0x0800e277
 800dfbc:	0800e277 	.word	0x0800e277
 800dfc0:	0800e277 	.word	0x0800e277
 800dfc4:	0800e277 	.word	0x0800e277
 800dfc8:	0800e277 	.word	0x0800e277
 800dfcc:	0800e277 	.word	0x0800e277
 800dfd0:	0800e23d 	.word	0x0800e23d
 800dfd4:	0800e277 	.word	0x0800e277
 800dfd8:	0800e277 	.word	0x0800e277
 800dfdc:	0800e277 	.word	0x0800e277
 800dfe0:	0800e277 	.word	0x0800e277
 800dfe4:	0800e277 	.word	0x0800e277
 800dfe8:	0800e277 	.word	0x0800e277
 800dfec:	0800e277 	.word	0x0800e277
 800dff0:	0800e277 	.word	0x0800e277
 800dff4:	0800e277 	.word	0x0800e277
 800dff8:	0800e21b 	.word	0x0800e21b
 800dffc:	0800e277 	.word	0x0800e277
 800e000:	0800e277 	.word	0x0800e277
 800e004:	0800e277 	.word	0x0800e277
 800e008:	0800e277 	.word	0x0800e277
 800e00c:	0800e277 	.word	0x0800e277
 800e010:	0800e277 	.word	0x0800e277
 800e014:	0800e277 	.word	0x0800e277
 800e018:	0800e277 	.word	0x0800e277
 800e01c:	0800e277 	.word	0x0800e277
 800e020:	0800e1ff 	.word	0x0800e1ff
 800e024:	0800e277 	.word	0x0800e277
 800e028:	0800e277 	.word	0x0800e277
 800e02c:	0800e277 	.word	0x0800e277
 800e030:	0800e277 	.word	0x0800e277
 800e034:	0800e277 	.word	0x0800e277
 800e038:	0800e277 	.word	0x0800e277
 800e03c:	0800e277 	.word	0x0800e277
 800e040:	0800e277 	.word	0x0800e277
 800e044:	0800e277 	.word	0x0800e277
 800e048:	0800e1e5 	.word	0x0800e1e5
 800e04c:	0800e277 	.word	0x0800e277
 800e050:	0800e277 	.word	0x0800e277
 800e054:	0800e277 	.word	0x0800e277
 800e058:	0800e277 	.word	0x0800e277
 800e05c:	0800e277 	.word	0x0800e277
 800e060:	0800e277 	.word	0x0800e277
 800e064:	0800e277 	.word	0x0800e277
 800e068:	0800e131 	.word	0x0800e131
 800e06c:	0800e1c7 	.word	0x0800e1c7
 800e070:	0800e1af 	.word	0x0800e1af
 800e074:	0800e197 	.word	0x0800e197
 800e078:	0800e179 	.word	0x0800e179
 800e07c:	0800e15f 	.word	0x0800e15f
 800e080:	0800e14d 	.word	0x0800e14d
 800e084:	0800e119 	.word	0x0800e119
 800e088:	0800e0fb 	.word	0x0800e0fb
 800e08c:	0800e0e7 	.word	0x0800e0e7
 800e090:	0800e0cf 	.word	0x0800e0cf
 800e094:	0800e0b1 	.word	0x0800e0b1
 800e098:	0800e09d 	.word	0x0800e09d
	case VL53L0X_ERROR_NONE:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	4980      	ldr	r1, [pc, #512]	; (800e2a0 <VL53L0X_get_pal_error_string+0x3b8>)
 800e0a0:	461a      	mov	r2, r3
 800e0a2:	460b      	mov	r3, r1
 800e0a4:	cb03      	ldmia	r3!, {r0, r1}
 800e0a6:	6010      	str	r0, [r2, #0]
 800e0a8:	6051      	str	r1, [r2, #4]
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	7213      	strb	r3, [r2, #8]
			VL53L0X_STRING_ERROR_NONE);
	break;
 800e0ae:	e0f0      	b.n	800e292 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_CALIBRATION_WARNING:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	4a7c      	ldr	r2, [pc, #496]	; (800e2a4 <VL53L0X_get_pal_error_string+0x3bc>)
 800e0b4:	461d      	mov	r5, r3
 800e0b6:	4614      	mov	r4, r2
 800e0b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e0ba:	6028      	str	r0, [r5, #0]
 800e0bc:	6069      	str	r1, [r5, #4]
 800e0be:	60aa      	str	r2, [r5, #8]
 800e0c0:	60eb      	str	r3, [r5, #12]
 800e0c2:	cc03      	ldmia	r4!, {r0, r1}
 800e0c4:	6128      	str	r0, [r5, #16]
 800e0c6:	6169      	str	r1, [r5, #20]
 800e0c8:	8823      	ldrh	r3, [r4, #0]
 800e0ca:	832b      	strh	r3, [r5, #24]
			VL53L0X_STRING_ERROR_CALIBRATION_WARNING);
	break;
 800e0cc:	e0e1      	b.n	800e292 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_MIN_CLIPPED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	4a75      	ldr	r2, [pc, #468]	; (800e2a8 <VL53L0X_get_pal_error_string+0x3c0>)
 800e0d2:	461d      	mov	r5, r3
 800e0d4:	4614      	mov	r4, r2
 800e0d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e0d8:	6028      	str	r0, [r5, #0]
 800e0da:	6069      	str	r1, [r5, #4]
 800e0dc:	60aa      	str	r2, [r5, #8]
 800e0de:	60eb      	str	r3, [r5, #12]
 800e0e0:	8823      	ldrh	r3, [r4, #0]
 800e0e2:	822b      	strh	r3, [r5, #16]
			VL53L0X_STRING_ERROR_MIN_CLIPPED);
	break;
 800e0e4:	e0d5      	b.n	800e292 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_UNDEFINED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	4a70      	ldr	r2, [pc, #448]	; (800e2ac <VL53L0X_get_pal_error_string+0x3c4>)
 800e0ea:	461c      	mov	r4, r3
 800e0ec:	4615      	mov	r5, r2
 800e0ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e0f0:	6020      	str	r0, [r4, #0]
 800e0f2:	6061      	str	r1, [r4, #4]
 800e0f4:	60a2      	str	r2, [r4, #8]
 800e0f6:	60e3      	str	r3, [r4, #12]
			VL53L0X_STRING_ERROR_UNDEFINED);
	break;
 800e0f8:	e0cb      	b.n	800e292 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INVALID_PARAMS:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	4a6c      	ldr	r2, [pc, #432]	; (800e2b0 <VL53L0X_get_pal_error_string+0x3c8>)
 800e0fe:	461d      	mov	r5, r3
 800e100:	4614      	mov	r4, r2
 800e102:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e104:	6028      	str	r0, [r5, #0]
 800e106:	6069      	str	r1, [r5, #4]
 800e108:	60aa      	str	r2, [r5, #8]
 800e10a:	60eb      	str	r3, [r5, #12]
 800e10c:	cc03      	ldmia	r4!, {r0, r1}
 800e10e:	6128      	str	r0, [r5, #16]
 800e110:	6169      	str	r1, [r5, #20]
 800e112:	7823      	ldrb	r3, [r4, #0]
 800e114:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_INVALID_PARAMS);
	break;
 800e116:	e0bc      	b.n	800e292 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	4a66      	ldr	r2, [pc, #408]	; (800e2b4 <VL53L0X_get_pal_error_string+0x3cc>)
 800e11c:	461d      	mov	r5, r3
 800e11e:	4614      	mov	r4, r2
 800e120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e122:	6028      	str	r0, [r5, #0]
 800e124:	6069      	str	r1, [r5, #4]
 800e126:	60aa      	str	r2, [r5, #8]
 800e128:	60eb      	str	r3, [r5, #12]
 800e12a:	6820      	ldr	r0, [r4, #0]
 800e12c:	6128      	str	r0, [r5, #16]
			VL53L0X_STRING_ERROR_NOT_SUPPORTED);
	break;
 800e12e:	e0b0      	b.n	800e292 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INTERRUPT_NOT_CLEARED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	4a61      	ldr	r2, [pc, #388]	; (800e2b8 <VL53L0X_get_pal_error_string+0x3d0>)
 800e134:	461d      	mov	r5, r3
 800e136:	4614      	mov	r4, r2
 800e138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e13a:	6028      	str	r0, [r5, #0]
 800e13c:	6069      	str	r1, [r5, #4]
 800e13e:	60aa      	str	r2, [r5, #8]
 800e140:	60eb      	str	r3, [r5, #12]
 800e142:	6820      	ldr	r0, [r4, #0]
 800e144:	6128      	str	r0, [r5, #16]
 800e146:	88a3      	ldrh	r3, [r4, #4]
 800e148:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_INTERRUPT_NOT_CLEARED);
	break;
 800e14a:	e0a2      	b.n	800e292 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_RANGE_ERROR:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	4a5b      	ldr	r2, [pc, #364]	; (800e2bc <VL53L0X_get_pal_error_string+0x3d4>)
 800e150:	461c      	mov	r4, r3
 800e152:	4613      	mov	r3, r2
 800e154:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e156:	6020      	str	r0, [r4, #0]
 800e158:	6061      	str	r1, [r4, #4]
 800e15a:	60a2      	str	r2, [r4, #8]
			VL53L0X_STRING_ERROR_RANGE_ERROR);
	break;
 800e15c:	e099      	b.n	800e292 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_TIME_OUT:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	4a57      	ldr	r2, [pc, #348]	; (800e2c0 <VL53L0X_get_pal_error_string+0x3d8>)
 800e162:	461c      	mov	r4, r3
 800e164:	4613      	mov	r3, r2
 800e166:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e168:	6020      	str	r0, [r4, #0]
 800e16a:	6061      	str	r1, [r4, #4]
 800e16c:	60a2      	str	r2, [r4, #8]
 800e16e:	881a      	ldrh	r2, [r3, #0]
 800e170:	789b      	ldrb	r3, [r3, #2]
 800e172:	81a2      	strh	r2, [r4, #12]
 800e174:	73a3      	strb	r3, [r4, #14]
			VL53L0X_STRING_ERROR_TIME_OUT);
	break;
 800e176:	e08c      	b.n	800e292 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_MODE_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	4a52      	ldr	r2, [pc, #328]	; (800e2c4 <VL53L0X_get_pal_error_string+0x3dc>)
 800e17c:	461d      	mov	r5, r3
 800e17e:	4614      	mov	r4, r2
 800e180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e182:	6028      	str	r0, [r5, #0]
 800e184:	6069      	str	r1, [r5, #4]
 800e186:	60aa      	str	r2, [r5, #8]
 800e188:	60eb      	str	r3, [r5, #12]
 800e18a:	cc03      	ldmia	r4!, {r0, r1}
 800e18c:	6128      	str	r0, [r5, #16]
 800e18e:	6169      	str	r1, [r5, #20]
 800e190:	7823      	ldrb	r3, [r4, #0]
 800e192:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_MODE_NOT_SUPPORTED);
	break;
 800e194:	e07d      	b.n	800e292 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_BUFFER_TOO_SMALL:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	4a4b      	ldr	r2, [pc, #300]	; (800e2c8 <VL53L0X_get_pal_error_string+0x3e0>)
 800e19a:	461d      	mov	r5, r3
 800e19c:	4614      	mov	r4, r2
 800e19e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e1a0:	6028      	str	r0, [r5, #0]
 800e1a2:	6069      	str	r1, [r5, #4]
 800e1a4:	60aa      	str	r2, [r5, #8]
 800e1a6:	60eb      	str	r3, [r5, #12]
 800e1a8:	7823      	ldrb	r3, [r4, #0]
 800e1aa:	742b      	strb	r3, [r5, #16]
			VL53L0X_STRING_ERROR_BUFFER_TOO_SMALL);
	break;
 800e1ac:	e071      	b.n	800e292 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_GPIO_NOT_EXISTING:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	4a46      	ldr	r2, [pc, #280]	; (800e2cc <VL53L0X_get_pal_error_string+0x3e4>)
 800e1b2:	461d      	mov	r5, r3
 800e1b4:	4614      	mov	r4, r2
 800e1b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e1b8:	6028      	str	r0, [r5, #0]
 800e1ba:	6069      	str	r1, [r5, #4]
 800e1bc:	60aa      	str	r2, [r5, #8]
 800e1be:	60eb      	str	r3, [r5, #12]
 800e1c0:	8823      	ldrh	r3, [r4, #0]
 800e1c2:	822b      	strh	r3, [r5, #16]
			VL53L0X_STRING_ERROR_GPIO_NOT_EXISTING);
	break;
 800e1c4:	e065      	b.n	800e292 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	4a41      	ldr	r2, [pc, #260]	; (800e2d0 <VL53L0X_get_pal_error_string+0x3e8>)
 800e1ca:	461d      	mov	r5, r3
 800e1cc:	4614      	mov	r4, r2
 800e1ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e1d0:	6028      	str	r0, [r5, #0]
 800e1d2:	6069      	str	r1, [r5, #4]
 800e1d4:	60aa      	str	r2, [r5, #8]
 800e1d6:	60eb      	str	r3, [r5, #12]
 800e1d8:	cc03      	ldmia	r4!, {r0, r1}
 800e1da:	6128      	str	r0, [r5, #16]
 800e1dc:	6169      	str	r1, [r5, #20]
 800e1de:	7823      	ldrb	r3, [r4, #0]
 800e1e0:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED);
	break;
 800e1e2:	e056      	b.n	800e292 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_CONTROL_INTERFACE:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	4a3b      	ldr	r2, [pc, #236]	; (800e2d4 <VL53L0X_get_pal_error_string+0x3ec>)
 800e1e8:	461d      	mov	r5, r3
 800e1ea:	4614      	mov	r4, r2
 800e1ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e1ee:	6028      	str	r0, [r5, #0]
 800e1f0:	6069      	str	r1, [r5, #4]
 800e1f2:	60aa      	str	r2, [r5, #8]
 800e1f4:	60eb      	str	r3, [r5, #12]
 800e1f6:	cc03      	ldmia	r4!, {r0, r1}
 800e1f8:	6128      	str	r0, [r5, #16]
 800e1fa:	6169      	str	r1, [r5, #20]
			VL53L0X_STRING_ERROR_CONTROL_INTERFACE);
	break;
 800e1fc:	e049      	b.n	800e292 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INVALID_COMMAND:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	4a35      	ldr	r2, [pc, #212]	; (800e2d8 <VL53L0X_get_pal_error_string+0x3f0>)
 800e202:	461d      	mov	r5, r3
 800e204:	4614      	mov	r4, r2
 800e206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e208:	6028      	str	r0, [r5, #0]
 800e20a:	6069      	str	r1, [r5, #4]
 800e20c:	60aa      	str	r2, [r5, #8]
 800e20e:	60eb      	str	r3, [r5, #12]
 800e210:	6820      	ldr	r0, [r4, #0]
 800e212:	6128      	str	r0, [r5, #16]
 800e214:	88a3      	ldrh	r3, [r4, #4]
 800e216:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_INVALID_COMMAND);
	break;
 800e218:	e03b      	b.n	800e292 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_DIVISION_BY_ZERO:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	4a2f      	ldr	r2, [pc, #188]	; (800e2dc <VL53L0X_get_pal_error_string+0x3f4>)
 800e21e:	461c      	mov	r4, r3
 800e220:	4615      	mov	r5, r2
 800e222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e224:	6020      	str	r0, [r4, #0]
 800e226:	6061      	str	r1, [r4, #4]
 800e228:	60a2      	str	r2, [r4, #8]
 800e22a:	60e3      	str	r3, [r4, #12]
 800e22c:	6828      	ldr	r0, [r5, #0]
 800e22e:	6120      	str	r0, [r4, #16]
 800e230:	88ab      	ldrh	r3, [r5, #4]
 800e232:	79aa      	ldrb	r2, [r5, #6]
 800e234:	82a3      	strh	r3, [r4, #20]
 800e236:	4613      	mov	r3, r2
 800e238:	75a3      	strb	r3, [r4, #22]
			VL53L0X_STRING_ERROR_DIVISION_BY_ZERO);
	break;
 800e23a:	e02a      	b.n	800e292 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_REF_SPAD_INIT:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	4a28      	ldr	r2, [pc, #160]	; (800e2e0 <VL53L0X_get_pal_error_string+0x3f8>)
 800e240:	461d      	mov	r5, r3
 800e242:	4614      	mov	r4, r2
 800e244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e246:	6028      	str	r0, [r5, #0]
 800e248:	6069      	str	r1, [r5, #4]
 800e24a:	60aa      	str	r2, [r5, #8]
 800e24c:	60eb      	str	r3, [r5, #12]
 800e24e:	cc03      	ldmia	r4!, {r0, r1}
 800e250:	6128      	str	r0, [r5, #16]
 800e252:	6169      	str	r1, [r5, #20]
 800e254:	8823      	ldrh	r3, [r4, #0]
 800e256:	832b      	strh	r3, [r5, #24]
			VL53L0X_STRING_ERROR_REF_SPAD_INIT);
	break;
 800e258:	e01b      	b.n	800e292 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_NOT_IMPLEMENTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	4a21      	ldr	r2, [pc, #132]	; (800e2e4 <VL53L0X_get_pal_error_string+0x3fc>)
 800e25e:	461d      	mov	r5, r3
 800e260:	4614      	mov	r4, r2
 800e262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e264:	6028      	str	r0, [r5, #0]
 800e266:	6069      	str	r1, [r5, #4]
 800e268:	60aa      	str	r2, [r5, #8]
 800e26a:	60eb      	str	r3, [r5, #12]
 800e26c:	6820      	ldr	r0, [r4, #0]
 800e26e:	6128      	str	r0, [r5, #16]
 800e270:	88a3      	ldrh	r3, [r4, #4]
 800e272:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_NOT_IMPLEMENTED);
	break;
 800e274:	e00d      	b.n	800e292 <VL53L0X_get_pal_error_string+0x3aa>

	default:
		VL53L0X_COPYSTRING(pPalErrorString,
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	4a1b      	ldr	r2, [pc, #108]	; (800e2e8 <VL53L0X_get_pal_error_string+0x400>)
 800e27a:	461d      	mov	r5, r3
 800e27c:	4614      	mov	r4, r2
 800e27e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e280:	6028      	str	r0, [r5, #0]
 800e282:	6069      	str	r1, [r5, #4]
 800e284:	60aa      	str	r2, [r5, #8]
 800e286:	60eb      	str	r3, [r5, #12]
 800e288:	8823      	ldrh	r3, [r4, #0]
 800e28a:	78a2      	ldrb	r2, [r4, #2]
 800e28c:	822b      	strh	r3, [r5, #16]
 800e28e:	4613      	mov	r3, r2
 800e290:	74ab      	strb	r3, [r5, #18]
				VL53L0X_STRING_UNKNOW_ERROR_CODE);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e292:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e296:	4618      	mov	r0, r3
 800e298:	3714      	adds	r7, #20
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bcb0      	pop	{r4, r5, r7}
 800e29e:	4770      	bx	lr
 800e2a0:	08014a1c 	.word	0x08014a1c
 800e2a4:	08014a28 	.word	0x08014a28
 800e2a8:	08014a44 	.word	0x08014a44
 800e2ac:	08014a58 	.word	0x08014a58
 800e2b0:	08014a68 	.word	0x08014a68
 800e2b4:	08014a84 	.word	0x08014a84
 800e2b8:	08014a98 	.word	0x08014a98
 800e2bc:	08014ab0 	.word	0x08014ab0
 800e2c0:	08014abc 	.word	0x08014abc
 800e2c4:	08014acc 	.word	0x08014acc
 800e2c8:	08014ae8 	.word	0x08014ae8
 800e2cc:	08014afc 	.word	0x08014afc
 800e2d0:	08014b10 	.word	0x08014b10
 800e2d4:	08014b2c 	.word	0x08014b2c
 800e2d8:	08014b44 	.word	0x08014b44
 800e2dc:	08014b5c 	.word	0x08014b5c
 800e2e0:	08014b74 	.word	0x08014b74
 800e2e4:	08014b90 	.word	0x08014b90
 800e2e8:	080149b8 	.word	0x080149b8

0800e2ec <VL53L0X_write_multi>:
{
    return VL53L0X_ERROR_NONE;
}
 
int VL53L0X_write_multi(uint8_t deviceAddress, uint8_t index, uint8_t *pdata, uint32_t count)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b088      	sub	sp, #32
 800e2f0:	af02      	add	r7, sp, #8
 800e2f2:	60ba      	str	r2, [r7, #8]
 800e2f4:	607b      	str	r3, [r7, #4]
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	73fb      	strb	r3, [r7, #15]
 800e2fa:	460b      	mov	r3, r1
 800e2fc:	73bb      	strb	r3, [r7, #14]
    static uint8_t data[32];
 
    if (count >=(sizeof (data)-1) )
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2b1e      	cmp	r3, #30
 800e302:	d902      	bls.n	800e30a <VL53L0X_write_multi+0x1e>
    {
        return  VL53L0X_ERROR_UNDEFINED;
 800e304:	f06f 0302 	mvn.w	r3, #2
 800e308:	e01e      	b.n	800e348 <VL53L0X_write_multi+0x5c>
    }
   
    data[0] = index;
 800e30a:	4a11      	ldr	r2, [pc, #68]	; (800e350 <VL53L0X_write_multi+0x64>)
 800e30c:	7bbb      	ldrb	r3, [r7, #14]
 800e30e:	7013      	strb	r3, [r2, #0]
    memcpy(data+1,pdata,count);
 800e310:	4b10      	ldr	r3, [pc, #64]	; (800e354 <VL53L0X_write_multi+0x68>)
 800e312:	687a      	ldr	r2, [r7, #4]
 800e314:	68b9      	ldr	r1, [r7, #8]
 800e316:	4618      	mov	r0, r3
 800e318:	f005 fdb2 	bl	8013e80 <memcpy>
 
//    HAL_StatusTypeDef status= HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)deviceAddress << 1, data, count+1, 1000);
    HAL_StatusTypeDef status= HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)deviceAddress, data, count+1, 1000);
 800e31c:	7bfb      	ldrb	r3, [r7, #15]
 800e31e:	b299      	uxth	r1, r3
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	b29b      	uxth	r3, r3
 800e324:	3301      	adds	r3, #1
 800e326:	b29b      	uxth	r3, r3
 800e328:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e32c:	9200      	str	r2, [sp, #0]
 800e32e:	4a08      	ldr	r2, [pc, #32]	; (800e350 <VL53L0X_write_multi+0x64>)
 800e330:	4809      	ldr	r0, [pc, #36]	; (800e358 <VL53L0X_write_multi+0x6c>)
 800e332:	f7f4 f831 	bl	8002398 <HAL_I2C_Master_Transmit>
 800e336:	4603      	mov	r3, r0
 800e338:	75fb      	strb	r3, [r7, #23]
    return status == HAL_OK ? VL53L0X_ERROR_NONE : VL53L0X_ERROR_UNDEFINED;
 800e33a:	7dfb      	ldrb	r3, [r7, #23]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d101      	bne.n	800e344 <VL53L0X_write_multi+0x58>
 800e340:	2300      	movs	r3, #0
 800e342:	e001      	b.n	800e348 <VL53L0X_write_multi+0x5c>
 800e344:	f06f 0302 	mvn.w	r3, #2
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3718      	adds	r7, #24
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}
 800e350:	200007dc 	.word	0x200007dc
 800e354:	200007dd 	.word	0x200007dd
 800e358:	20000658 	.word	0x20000658

0800e35c <VL53L0X_read_multi>:
 
int VL53L0X_read_multi(uint8_t deviceAddress, uint8_t index, uint8_t *pdata, uint32_t count)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b08a      	sub	sp, #40	; 0x28
 800e360:	af04      	add	r7, sp, #16
 800e362:	60ba      	str	r2, [r7, #8]
 800e364:	607b      	str	r3, [r7, #4]
 800e366:	4603      	mov	r3, r0
 800e368:	73fb      	strb	r3, [r7, #15]
 800e36a:	460b      	mov	r3, r1
 800e36c:	73bb      	strb	r3, [r7, #14]
//    HAL_StatusTypeDef status= HAL_I2C_Mem_Read(&hi2c2, (uint16_t)deviceAddress << 1, index, 1, pdata, count, 1000);
	HAL_StatusTypeDef status= HAL_I2C_Mem_Read(&hi2c1, (uint16_t)deviceAddress, index, 1, pdata, count, 1000);
 800e36e:	7bfb      	ldrb	r3, [r7, #15]
 800e370:	b299      	uxth	r1, r3
 800e372:	7bbb      	ldrb	r3, [r7, #14]
 800e374:	b29a      	uxth	r2, r3
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	b29b      	uxth	r3, r3
 800e37a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e37e:	9002      	str	r0, [sp, #8]
 800e380:	9301      	str	r3, [sp, #4]
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	9300      	str	r3, [sp, #0]
 800e386:	2301      	movs	r3, #1
 800e388:	4807      	ldr	r0, [pc, #28]	; (800e3a8 <VL53L0X_read_multi+0x4c>)
 800e38a:	f7f4 f8f9 	bl	8002580 <HAL_I2C_Mem_Read>
 800e38e:	4603      	mov	r3, r0
 800e390:	75fb      	strb	r3, [r7, #23]
    return status == HAL_OK ? VL53L0X_ERROR_NONE : VL53L0X_ERROR_UNDEFINED;
 800e392:	7dfb      	ldrb	r3, [r7, #23]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d101      	bne.n	800e39c <VL53L0X_read_multi+0x40>
 800e398:	2300      	movs	r3, #0
 800e39a:	e001      	b.n	800e3a0 <VL53L0X_read_multi+0x44>
 800e39c:	f06f 0302 	mvn.w	r3, #2
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3718      	adds	r7, #24
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}
 800e3a8:	20000658 	.word	0x20000658

0800e3ac <VL53L0X_write_byte>:
 
int VL53L0X_write_byte(uint8_t deviceAddress, uint8_t index, uint8_t data)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b086      	sub	sp, #24
 800e3b0:	af02      	add	r7, sp, #8
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	71fb      	strb	r3, [r7, #7]
 800e3b6:	460b      	mov	r3, r1
 800e3b8:	71bb      	strb	r3, [r7, #6]
 800e3ba:	4613      	mov	r3, r2
 800e3bc:	717b      	strb	r3, [r7, #5]
    uint8_t buff[2];
    buff[0] = index;
 800e3be:	79bb      	ldrb	r3, [r7, #6]
 800e3c0:	733b      	strb	r3, [r7, #12]
    buff[1] = data;
 800e3c2:	797b      	ldrb	r3, [r7, #5]
 800e3c4:	737b      	strb	r3, [r7, #13]
 
//    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)deviceAddress << 1, buff, 2, 1000);
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)deviceAddress, buff, 2, 1000);
 800e3c6:	79fb      	ldrb	r3, [r7, #7]
 800e3c8:	b299      	uxth	r1, r3
 800e3ca:	f107 020c 	add.w	r2, r7, #12
 800e3ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e3d2:	9300      	str	r3, [sp, #0]
 800e3d4:	2302      	movs	r3, #2
 800e3d6:	4808      	ldr	r0, [pc, #32]	; (800e3f8 <VL53L0X_write_byte+0x4c>)
 800e3d8:	f7f3 ffde 	bl	8002398 <HAL_I2C_Master_Transmit>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	73fb      	strb	r3, [r7, #15]
    return status == HAL_OK ? VL53L0X_ERROR_NONE : VL53L0X_ERROR_UNDEFINED;
 800e3e0:	7bfb      	ldrb	r3, [r7, #15]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d101      	bne.n	800e3ea <VL53L0X_write_byte+0x3e>
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	e001      	b.n	800e3ee <VL53L0X_write_byte+0x42>
 800e3ea:	f06f 0302 	mvn.w	r3, #2
 
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3710      	adds	r7, #16
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
 800e3f6:	bf00      	nop
 800e3f8:	20000658 	.word	0x20000658

0800e3fc <VL53L0X_write_word>:
 
int VL53L0X_write_word(uint8_t deviceAddress, uint8_t index, uint16_t data)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b086      	sub	sp, #24
 800e400:	af02      	add	r7, sp, #8
 800e402:	4603      	mov	r3, r0
 800e404:	71fb      	strb	r3, [r7, #7]
 800e406:	460b      	mov	r3, r1
 800e408:	71bb      	strb	r3, [r7, #6]
 800e40a:	4613      	mov	r3, r2
 800e40c:	80bb      	strh	r3, [r7, #4]
    uint8_t buff[3];
    buff[2] = data & 0xFF;
 800e40e:	88bb      	ldrh	r3, [r7, #4]
 800e410:	b2db      	uxtb	r3, r3
 800e412:	73bb      	strb	r3, [r7, #14]
    buff[1] = data >> 8;
 800e414:	88bb      	ldrh	r3, [r7, #4]
 800e416:	0a1b      	lsrs	r3, r3, #8
 800e418:	b29b      	uxth	r3, r3
 800e41a:	b2db      	uxtb	r3, r3
 800e41c:	737b      	strb	r3, [r7, #13]
    buff[0] = index;
 800e41e:	79bb      	ldrb	r3, [r7, #6]
 800e420:	733b      	strb	r3, [r7, #12]
 
//    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)deviceAddress << 1, buff, 3, 1000);
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)deviceAddress, buff, 3, 1000);
 800e422:	79fb      	ldrb	r3, [r7, #7]
 800e424:	b299      	uxth	r1, r3
 800e426:	f107 020c 	add.w	r2, r7, #12
 800e42a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e42e:	9300      	str	r3, [sp, #0]
 800e430:	2303      	movs	r3, #3
 800e432:	4808      	ldr	r0, [pc, #32]	; (800e454 <VL53L0X_write_word+0x58>)
 800e434:	f7f3 ffb0 	bl	8002398 <HAL_I2C_Master_Transmit>
 800e438:	4603      	mov	r3, r0
 800e43a:	73fb      	strb	r3, [r7, #15]
    return status == HAL_OK ? VL53L0X_ERROR_NONE : VL53L0X_ERROR_UNDEFINED;
 800e43c:	7bfb      	ldrb	r3, [r7, #15]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d101      	bne.n	800e446 <VL53L0X_write_word+0x4a>
 800e442:	2300      	movs	r3, #0
 800e444:	e001      	b.n	800e44a <VL53L0X_write_word+0x4e>
 800e446:	f06f 0302 	mvn.w	r3, #2
 
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3710      	adds	r7, #16
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
 800e452:	bf00      	nop
 800e454:	20000658 	.word	0x20000658

0800e458 <VL53L0X_read_byte>:
    return status == HAL_OK ? VL53L0X_ERROR_NONE : VL53L0X_ERROR_UNDEFINED;
 
}
 
int VL53L0X_read_byte(uint8_t deviceAddress, uint8_t index, uint8_t *data)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b088      	sub	sp, #32
 800e45c:	af04      	add	r7, sp, #16
 800e45e:	4603      	mov	r3, r0
 800e460:	603a      	str	r2, [r7, #0]
 800e462:	71fb      	strb	r3, [r7, #7]
 800e464:	460b      	mov	r3, r1
 800e466:	71bb      	strb	r3, [r7, #6]
//   HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c2, (uint16_t)deviceAddress << 1, index, 1, data, 1, 1000);
   HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, (uint16_t)deviceAddress, index, 1, data, 1, 1000);
 800e468:	79fb      	ldrb	r3, [r7, #7]
 800e46a:	b299      	uxth	r1, r3
 800e46c:	79bb      	ldrb	r3, [r7, #6]
 800e46e:	b29a      	uxth	r2, r3
 800e470:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e474:	9302      	str	r3, [sp, #8]
 800e476:	2301      	movs	r3, #1
 800e478:	9301      	str	r3, [sp, #4]
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	9300      	str	r3, [sp, #0]
 800e47e:	2301      	movs	r3, #1
 800e480:	4807      	ldr	r0, [pc, #28]	; (800e4a0 <VL53L0X_read_byte+0x48>)
 800e482:	f7f4 f87d 	bl	8002580 <HAL_I2C_Mem_Read>
 800e486:	4603      	mov	r3, r0
 800e488:	73fb      	strb	r3, [r7, #15]
   return status == HAL_OK ? VL53L0X_ERROR_NONE : VL53L0X_ERROR_UNDEFINED;
 800e48a:	7bfb      	ldrb	r3, [r7, #15]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d101      	bne.n	800e494 <VL53L0X_read_byte+0x3c>
 800e490:	2300      	movs	r3, #0
 800e492:	e001      	b.n	800e498 <VL53L0X_read_byte+0x40>
 800e494:	f06f 0302 	mvn.w	r3, #2
 
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3710      	adds	r7, #16
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	20000658 	.word	0x20000658

0800e4a4 <VL53L0X_read_word>:
 
int VL53L0X_read_word(uint8_t deviceAddress, uint8_t index, uint16_t *data)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b084      	sub	sp, #16
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	603a      	str	r2, [r7, #0]
 800e4ae:	71fb      	strb	r3, [r7, #7]
 800e4b0:	460b      	mov	r3, r1
 800e4b2:	71bb      	strb	r3, [r7, #6]
    uint8_t buff[2];
    int r = VL53L0X_read_multi(deviceAddress, index, buff, 2);
 800e4b4:	f107 0208 	add.w	r2, r7, #8
 800e4b8:	79b9      	ldrb	r1, [r7, #6]
 800e4ba:	79f8      	ldrb	r0, [r7, #7]
 800e4bc:	2302      	movs	r3, #2
 800e4be:	f7ff ff4d 	bl	800e35c <VL53L0X_read_multi>
 800e4c2:	60f8      	str	r0, [r7, #12]
 
    uint16_t tmp;
    tmp = buff[0];
 800e4c4:	7a3b      	ldrb	r3, [r7, #8]
 800e4c6:	817b      	strh	r3, [r7, #10]
    tmp <<= 8;
 800e4c8:	897b      	ldrh	r3, [r7, #10]
 800e4ca:	021b      	lsls	r3, r3, #8
 800e4cc:	817b      	strh	r3, [r7, #10]
    tmp |= buff[1];
 800e4ce:	7a7b      	ldrb	r3, [r7, #9]
 800e4d0:	b29a      	uxth	r2, r3
 800e4d2:	897b      	ldrh	r3, [r7, #10]
 800e4d4:	4313      	orrs	r3, r2
 800e4d6:	817b      	strh	r3, [r7, #10]
    *data = tmp;
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	897a      	ldrh	r2, [r7, #10]
 800e4dc:	801a      	strh	r2, [r3, #0]
 
    return r;
 800e4de:	68fb      	ldr	r3, [r7, #12]
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3710      	adds	r7, #16
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}

0800e4e8 <VL53L0X_read_dword>:
 
int VL53L0X_read_dword(uint8_t deviceAddress, uint8_t index, uint32_t *data)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b086      	sub	sp, #24
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	603a      	str	r2, [r7, #0]
 800e4f2:	71fb      	strb	r3, [r7, #7]
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	71bb      	strb	r3, [r7, #6]
    uint8_t buff[4];
    int r = VL53L0X_read_multi(deviceAddress, index, buff, 4);
 800e4f8:	f107 020c 	add.w	r2, r7, #12
 800e4fc:	79b9      	ldrb	r1, [r7, #6]
 800e4fe:	79f8      	ldrb	r0, [r7, #7]
 800e500:	2304      	movs	r3, #4
 800e502:	f7ff ff2b 	bl	800e35c <VL53L0X_read_multi>
 800e506:	6178      	str	r0, [r7, #20]
 
    uint32_t tmp;
    tmp = buff[0];
 800e508:	7b3b      	ldrb	r3, [r7, #12]
 800e50a:	613b      	str	r3, [r7, #16]
    tmp <<= 8;
 800e50c:	693b      	ldr	r3, [r7, #16]
 800e50e:	021b      	lsls	r3, r3, #8
 800e510:	613b      	str	r3, [r7, #16]
    tmp |= buff[1];
 800e512:	7b7b      	ldrb	r3, [r7, #13]
 800e514:	461a      	mov	r2, r3
 800e516:	693b      	ldr	r3, [r7, #16]
 800e518:	4313      	orrs	r3, r2
 800e51a:	613b      	str	r3, [r7, #16]
    tmp <<= 8;
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	021b      	lsls	r3, r3, #8
 800e520:	613b      	str	r3, [r7, #16]
    tmp |= buff[2];
 800e522:	7bbb      	ldrb	r3, [r7, #14]
 800e524:	461a      	mov	r2, r3
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	4313      	orrs	r3, r2
 800e52a:	613b      	str	r3, [r7, #16]
    tmp <<= 8;
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	021b      	lsls	r3, r3, #8
 800e530:	613b      	str	r3, [r7, #16]
    tmp |= buff[3];
 800e532:	7bfb      	ldrb	r3, [r7, #15]
 800e534:	461a      	mov	r2, r3
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	4313      	orrs	r3, r2
 800e53a:	613b      	str	r3, [r7, #16]
 
    *data = tmp;
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	693a      	ldr	r2, [r7, #16]
 800e540:	601a      	str	r2, [r3, #0]
 
    return r;
 800e542:	697b      	ldr	r3, [r7, #20]
}
 800e544:	4618      	mov	r0, r3
 800e546:	3718      	adds	r7, #24
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <VL53L0X_WriteMulti>:

    return Status;
}

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b088      	sub	sp, #32
 800e550:	af00      	add	r7, sp, #0
 800e552:	60f8      	str	r0, [r7, #12]
 800e554:	607a      	str	r2, [r7, #4]
 800e556:	603b      	str	r3, [r7, #0]
 800e558:	460b      	mov	r3, r1
 800e55a:	72fb      	strb	r3, [r7, #11]

    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e55c:	2300      	movs	r3, #0
 800e55e:	77fb      	strb	r3, [r7, #31]
    int32_t status_int = 0;
 800e560:	2300      	movs	r3, #0
 800e562:	61bb      	str	r3, [r7, #24]
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	2b3f      	cmp	r3, #63	; 0x3f
 800e568:	d901      	bls.n	800e56e <VL53L0X_WriteMulti+0x22>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e56a:	23fc      	movs	r3, #252	; 0xfc
 800e56c:	77fb      	strb	r3, [r7, #31]
    }

	deviceAddress = Dev->I2cDevAddr;
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800e574:	75fb      	strb	r3, [r7, #23]

	status_int = VL53L0X_write_multi(deviceAddress, index, pdata, count);
 800e576:	7af9      	ldrb	r1, [r7, #11]
 800e578:	7df8      	ldrb	r0, [r7, #23]
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	687a      	ldr	r2, [r7, #4]
 800e57e:	f7ff feb5 	bl	800e2ec <VL53L0X_write_multi>
 800e582:	61b8      	str	r0, [r7, #24]

	if (status_int != 0)
 800e584:	69bb      	ldr	r3, [r7, #24]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d001      	beq.n	800e58e <VL53L0X_WriteMulti+0x42>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e58a:	23ec      	movs	r3, #236	; 0xec
 800e58c:	77fb      	strb	r3, [r7, #31]

    return Status;
 800e58e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e592:	4618      	mov	r0, r3
 800e594:	3720      	adds	r7, #32
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}

0800e59a <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 800e59a:	b580      	push	{r7, lr}
 800e59c:	b086      	sub	sp, #24
 800e59e:	af00      	add	r7, sp, #0
 800e5a0:	60f8      	str	r0, [r7, #12]
 800e5a2:	607a      	str	r2, [r7, #4]
 800e5a4:	603b      	str	r3, [r7, #0]
 800e5a6:	460b      	mov	r3, r1
 800e5a8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_I2C_USER_VAR
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	2b3f      	cmp	r3, #63	; 0x3f
 800e5b2:	d901      	bls.n	800e5b8 <VL53L0X_ReadMulti+0x1e>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e5b4:	23fc      	movs	r3, #252	; 0xfc
 800e5b6:	75fb      	strb	r3, [r7, #23]
    }

    deviceAddress = Dev->I2cDevAddr;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800e5be:	75bb      	strb	r3, [r7, #22]

	status_int = VL53L0X_read_multi(deviceAddress, index, pdata, count);
 800e5c0:	7af9      	ldrb	r1, [r7, #11]
 800e5c2:	7db8      	ldrb	r0, [r7, #22]
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	687a      	ldr	r2, [r7, #4]
 800e5c8:	f7ff fec8 	bl	800e35c <VL53L0X_read_multi>
 800e5cc:	6138      	str	r0, [r7, #16]

	if (status_int != 0)
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d001      	beq.n	800e5d8 <VL53L0X_ReadMulti+0x3e>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e5d4:	23ec      	movs	r3, #236	; 0xec
 800e5d6:	75fb      	strb	r3, [r7, #23]

    return Status;
 800e5d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3718      	adds	r7, #24
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <VL53L0X_WrByte>:


VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data){
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b084      	sub	sp, #16
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	460b      	mov	r3, r1
 800e5ee:	70fb      	strb	r3, [r7, #3]
 800e5f0:	4613      	mov	r3, r2
 800e5f2:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800e5fe:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_byte(deviceAddress, index, data);
 800e600:	78ba      	ldrb	r2, [r7, #2]
 800e602:	78f9      	ldrb	r1, [r7, #3]
 800e604:	7bbb      	ldrb	r3, [r7, #14]
 800e606:	4618      	mov	r0, r3
 800e608:	f7ff fed0 	bl	800e3ac <VL53L0X_write_byte>
 800e60c:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d001      	beq.n	800e618 <VL53L0X_WrByte+0x34>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e614:	23ec      	movs	r3, #236	; 0xec
 800e616:	73fb      	strb	r3, [r7, #15]

    return Status;
 800e618:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3710      	adds	r7, #16
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}

0800e624 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data){
 800e624:	b580      	push	{r7, lr}
 800e626:	b084      	sub	sp, #16
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
 800e62c:	460b      	mov	r3, r1
 800e62e:	70fb      	strb	r3, [r7, #3]
 800e630:	4613      	mov	r3, r2
 800e632:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e634:	2300      	movs	r3, #0
 800e636:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800e63e:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_word(deviceAddress, index, data);
 800e640:	883a      	ldrh	r2, [r7, #0]
 800e642:	78f9      	ldrb	r1, [r7, #3]
 800e644:	7bbb      	ldrb	r3, [r7, #14]
 800e646:	4618      	mov	r0, r3
 800e648:	f7ff fed8 	bl	800e3fc <VL53L0X_write_word>
 800e64c:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d001      	beq.n	800e658 <VL53L0X_WrWord+0x34>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e654:	23ec      	movs	r3, #236	; 0xec
 800e656:	73fb      	strb	r3, [r7, #15]

    return Status;
 800e658:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	3710      	adds	r7, #16
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}

0800e664 <VL53L0X_UpdateByte>:
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData){
 800e664:	b580      	push	{r7, lr}
 800e666:	b086      	sub	sp, #24
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	4608      	mov	r0, r1
 800e66e:	4611      	mov	r1, r2
 800e670:	461a      	mov	r2, r3
 800e672:	4603      	mov	r3, r0
 800e674:	70fb      	strb	r3, [r7, #3]
 800e676:	460b      	mov	r3, r1
 800e678:	70bb      	strb	r3, [r7, #2]
 800e67a:	4613      	mov	r3, r2
 800e67c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e67e:	2300      	movs	r3, #0
 800e680:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;
    uint8_t data;

    deviceAddress = Dev->I2cDevAddr;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800e688:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(deviceAddress, index, &data);
 800e68a:	f107 020f 	add.w	r2, r7, #15
 800e68e:	78f9      	ldrb	r1, [r7, #3]
 800e690:	7dbb      	ldrb	r3, [r7, #22]
 800e692:	4618      	mov	r0, r3
 800e694:	f7ff fee0 	bl	800e458 <VL53L0X_read_byte>
 800e698:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d001      	beq.n	800e6a4 <VL53L0X_UpdateByte+0x40>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e6a0:	23ec      	movs	r3, #236	; 0xec
 800e6a2:	75fb      	strb	r3, [r7, #23]

    if (Status == VL53L0X_ERROR_NONE) {
 800e6a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d113      	bne.n	800e6d4 <VL53L0X_UpdateByte+0x70>
        data = (data & AndData) | OrData;
 800e6ac:	7bfa      	ldrb	r2, [r7, #15]
 800e6ae:	78bb      	ldrb	r3, [r7, #2]
 800e6b0:	4013      	ands	r3, r2
 800e6b2:	b2da      	uxtb	r2, r3
 800e6b4:	787b      	ldrb	r3, [r7, #1]
 800e6b6:	4313      	orrs	r3, r2
 800e6b8:	b2db      	uxtb	r3, r3
 800e6ba:	73fb      	strb	r3, [r7, #15]
        status_int = VL53L0X_write_byte(deviceAddress, index, data);
 800e6bc:	7bfa      	ldrb	r2, [r7, #15]
 800e6be:	78f9      	ldrb	r1, [r7, #3]
 800e6c0:	7dbb      	ldrb	r3, [r7, #22]
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f7ff fe72 	bl	800e3ac <VL53L0X_write_byte>
 800e6c8:	6138      	str	r0, [r7, #16]

        if (status_int != 0)
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d001      	beq.n	800e6d4 <VL53L0X_UpdateByte+0x70>
            Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e6d0:	23ec      	movs	r3, #236	; 0xec
 800e6d2:	75fb      	strb	r3, [r7, #23]
    }

    return Status;
 800e6d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3718      	adds	r7, #24
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data){
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b086      	sub	sp, #24
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	60f8      	str	r0, [r7, #12]
 800e6e8:	460b      	mov	r3, r1
 800e6ea:	607a      	str	r2, [r7, #4]
 800e6ec:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800e6f8:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(deviceAddress, index, data);
 800e6fa:	7af9      	ldrb	r1, [r7, #11]
 800e6fc:	7dbb      	ldrb	r3, [r7, #22]
 800e6fe:	687a      	ldr	r2, [r7, #4]
 800e700:	4618      	mov	r0, r3
 800e702:	f7ff fea9 	bl	800e458 <VL53L0X_read_byte>
 800e706:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d001      	beq.n	800e712 <VL53L0X_RdByte+0x32>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e70e:	23ec      	movs	r3, #236	; 0xec
 800e710:	75fb      	strb	r3, [r7, #23]

    return Status;
 800e712:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e716:	4618      	mov	r0, r3
 800e718:	3718      	adds	r7, #24
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}

0800e71e <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data){
 800e71e:	b580      	push	{r7, lr}
 800e720:	b086      	sub	sp, #24
 800e722:	af00      	add	r7, sp, #0
 800e724:	60f8      	str	r0, [r7, #12]
 800e726:	460b      	mov	r3, r1
 800e728:	607a      	str	r2, [r7, #4]
 800e72a:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e72c:	2300      	movs	r3, #0
 800e72e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800e736:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_word(deviceAddress, index, data);
 800e738:	7af9      	ldrb	r1, [r7, #11]
 800e73a:	7dbb      	ldrb	r3, [r7, #22]
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	4618      	mov	r0, r3
 800e740:	f7ff feb0 	bl	800e4a4 <VL53L0X_read_word>
 800e744:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d001      	beq.n	800e750 <VL53L0X_RdWord+0x32>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e74c:	23ec      	movs	r3, #236	; 0xec
 800e74e:	75fb      	strb	r3, [r7, #23]

    return Status;
 800e750:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e754:	4618      	mov	r0, r3
 800e756:	3718      	adds	r7, #24
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}

0800e75c <VL53L0X_RdDWord>:

VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data){
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b086      	sub	sp, #24
 800e760:	af00      	add	r7, sp, #0
 800e762:	60f8      	str	r0, [r7, #12]
 800e764:	460b      	mov	r3, r1
 800e766:	607a      	str	r2, [r7, #4]
 800e768:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e76a:	2300      	movs	r3, #0
 800e76c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800e774:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_dword(deviceAddress, index, data);
 800e776:	7af9      	ldrb	r1, [r7, #11]
 800e778:	7dbb      	ldrb	r3, [r7, #22]
 800e77a:	687a      	ldr	r2, [r7, #4]
 800e77c:	4618      	mov	r0, r3
 800e77e:	f7ff feb3 	bl	800e4e8 <VL53L0X_read_dword>
 800e782:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d001      	beq.n	800e78e <VL53L0X_RdDWord+0x32>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e78a:	23ec      	movs	r3, #236	; 0xec
 800e78c:	75fb      	strb	r3, [r7, #23]

    return Status;
 800e78e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e792:	4618      	mov	r0, r3
 800e794:	3718      	adds	r7, #24
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}

0800e79a <VL53L0X_PollingDelay>:

#define VL53L0X_POLLINGDELAY_LOOPNB  250
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev){
 800e79a:	b480      	push	{r7}
 800e79c:	b083      	sub	sp, #12
 800e79e:	af00      	add	r7, sp, #0
 800e7a0:	6078      	str	r0, [r7, #4]
//        WaitForSingleObject(hEvent,cTimeout_ms);
//    }
//
//    LOG_FUNCTION_END(status);
//	HAL_Delay(2);
    return VL53L0X_ERROR_NONE;
 800e7a2:	2300      	movs	r3, #0
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	370c      	adds	r7, #12
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ae:	4770      	bx	lr

0800e7b0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b084      	sub	sp, #16
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e7bc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e7c0:	f005 f868 	bl	8013894 <USBD_static_malloc>
 800e7c4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d105      	bne.n	800e7d8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e7d4:	2302      	movs	r3, #2
 800e7d6:	e066      	b.n	800e8a6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	68fa      	ldr	r2, [r7, #12]
 800e7dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	7c1b      	ldrb	r3, [r3, #16]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d119      	bne.n	800e81c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e7e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e7ec:	2202      	movs	r2, #2
 800e7ee:	2181      	movs	r1, #129	; 0x81
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f004 fef4 	bl	80135de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2201      	movs	r2, #1
 800e7fa:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e7fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e800:	2202      	movs	r2, #2
 800e802:	2101      	movs	r1, #1
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f004 feea 	bl	80135de <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2201      	movs	r2, #1
 800e80e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2210      	movs	r2, #16
 800e816:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e81a:	e016      	b.n	800e84a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e81c:	2340      	movs	r3, #64	; 0x40
 800e81e:	2202      	movs	r2, #2
 800e820:	2181      	movs	r1, #129	; 0x81
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f004 fedb 	bl	80135de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2201      	movs	r2, #1
 800e82c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e82e:	2340      	movs	r3, #64	; 0x40
 800e830:	2202      	movs	r2, #2
 800e832:	2101      	movs	r1, #1
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f004 fed2 	bl	80135de <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2201      	movs	r2, #1
 800e83e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2210      	movs	r2, #16
 800e846:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e84a:	2308      	movs	r3, #8
 800e84c:	2203      	movs	r2, #3
 800e84e:	2182      	movs	r1, #130	; 0x82
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f004 fec4 	bl	80135de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2201      	movs	r2, #1
 800e85a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	2200      	movs	r2, #0
 800e86c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	2200      	movs	r2, #0
 800e874:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	7c1b      	ldrb	r3, [r3, #16]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d109      	bne.n	800e894 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e88a:	2101      	movs	r1, #1
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f004 ff96 	bl	80137be <USBD_LL_PrepareReceive>
 800e892:	e007      	b.n	800e8a4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e89a:	2340      	movs	r3, #64	; 0x40
 800e89c:	2101      	movs	r1, #1
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f004 ff8d 	bl	80137be <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e8a4:	2300      	movs	r3, #0
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3710      	adds	r7, #16
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}

0800e8ae <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e8ae:	b580      	push	{r7, lr}
 800e8b0:	b082      	sub	sp, #8
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	6078      	str	r0, [r7, #4]
 800e8b6:	460b      	mov	r3, r1
 800e8b8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e8ba:	2181      	movs	r1, #129	; 0x81
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f004 feb4 	bl	801362a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e8c8:	2101      	movs	r1, #1
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f004 fead 	bl	801362a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e8d8:	2182      	movs	r1, #130	; 0x82
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f004 fea5 	bl	801362a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d00e      	beq.n	800e918 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e900:	685b      	ldr	r3, [r3, #4]
 800e902:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e90a:	4618      	mov	r0, r3
 800e90c:	f004 ffd0 	bl	80138b0 <USBD_static_free>
    pdev->pClassData = NULL;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2200      	movs	r2, #0
 800e914:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e918:	2300      	movs	r3, #0
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	3708      	adds	r7, #8
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}
	...

0800e924 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b086      	sub	sp, #24
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e934:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e936:	2300      	movs	r3, #0
 800e938:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e93a:	2300      	movs	r3, #0
 800e93c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e93e:	2300      	movs	r3, #0
 800e940:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d101      	bne.n	800e94c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e948:	2303      	movs	r3, #3
 800e94a:	e0af      	b.n	800eaac <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	781b      	ldrb	r3, [r3, #0]
 800e950:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e954:	2b00      	cmp	r3, #0
 800e956:	d03f      	beq.n	800e9d8 <USBD_CDC_Setup+0xb4>
 800e958:	2b20      	cmp	r3, #32
 800e95a:	f040 809f 	bne.w	800ea9c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	88db      	ldrh	r3, [r3, #6]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d02e      	beq.n	800e9c4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	781b      	ldrb	r3, [r3, #0]
 800e96a:	b25b      	sxtb	r3, r3
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	da16      	bge.n	800e99e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e976:	689b      	ldr	r3, [r3, #8]
 800e978:	683a      	ldr	r2, [r7, #0]
 800e97a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e97c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e97e:	683a      	ldr	r2, [r7, #0]
 800e980:	88d2      	ldrh	r2, [r2, #6]
 800e982:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	88db      	ldrh	r3, [r3, #6]
 800e988:	2b07      	cmp	r3, #7
 800e98a:	bf28      	it	cs
 800e98c:	2307      	movcs	r3, #7
 800e98e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	89fa      	ldrh	r2, [r7, #14]
 800e994:	4619      	mov	r1, r3
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f001 facf 	bl	800ff3a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e99c:	e085      	b.n	800eaaa <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	785a      	ldrb	r2, [r3, #1]
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	88db      	ldrh	r3, [r3, #6]
 800e9ac:	b2da      	uxtb	r2, r3
 800e9ae:	693b      	ldr	r3, [r7, #16]
 800e9b0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e9b4:	6939      	ldr	r1, [r7, #16]
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	88db      	ldrh	r3, [r3, #6]
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	6878      	ldr	r0, [r7, #4]
 800e9be:	f001 fae8 	bl	800ff92 <USBD_CtlPrepareRx>
      break;
 800e9c2:	e072      	b.n	800eaaa <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e9ca:	689b      	ldr	r3, [r3, #8]
 800e9cc:	683a      	ldr	r2, [r7, #0]
 800e9ce:	7850      	ldrb	r0, [r2, #1]
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	6839      	ldr	r1, [r7, #0]
 800e9d4:	4798      	blx	r3
      break;
 800e9d6:	e068      	b.n	800eaaa <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	785b      	ldrb	r3, [r3, #1]
 800e9dc:	2b0b      	cmp	r3, #11
 800e9de:	d852      	bhi.n	800ea86 <USBD_CDC_Setup+0x162>
 800e9e0:	a201      	add	r2, pc, #4	; (adr r2, 800e9e8 <USBD_CDC_Setup+0xc4>)
 800e9e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9e6:	bf00      	nop
 800e9e8:	0800ea19 	.word	0x0800ea19
 800e9ec:	0800ea95 	.word	0x0800ea95
 800e9f0:	0800ea87 	.word	0x0800ea87
 800e9f4:	0800ea87 	.word	0x0800ea87
 800e9f8:	0800ea87 	.word	0x0800ea87
 800e9fc:	0800ea87 	.word	0x0800ea87
 800ea00:	0800ea87 	.word	0x0800ea87
 800ea04:	0800ea87 	.word	0x0800ea87
 800ea08:	0800ea87 	.word	0x0800ea87
 800ea0c:	0800ea87 	.word	0x0800ea87
 800ea10:	0800ea43 	.word	0x0800ea43
 800ea14:	0800ea6d 	.word	0x0800ea6d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea1e:	b2db      	uxtb	r3, r3
 800ea20:	2b03      	cmp	r3, #3
 800ea22:	d107      	bne.n	800ea34 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ea24:	f107 030a 	add.w	r3, r7, #10
 800ea28:	2202      	movs	r2, #2
 800ea2a:	4619      	mov	r1, r3
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f001 fa84 	bl	800ff3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ea32:	e032      	b.n	800ea9a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ea34:	6839      	ldr	r1, [r7, #0]
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f001 fa0e 	bl	800fe58 <USBD_CtlError>
            ret = USBD_FAIL;
 800ea3c:	2303      	movs	r3, #3
 800ea3e:	75fb      	strb	r3, [r7, #23]
          break;
 800ea40:	e02b      	b.n	800ea9a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea48:	b2db      	uxtb	r3, r3
 800ea4a:	2b03      	cmp	r3, #3
 800ea4c:	d107      	bne.n	800ea5e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ea4e:	f107 030d 	add.w	r3, r7, #13
 800ea52:	2201      	movs	r2, #1
 800ea54:	4619      	mov	r1, r3
 800ea56:	6878      	ldr	r0, [r7, #4]
 800ea58:	f001 fa6f 	bl	800ff3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ea5c:	e01d      	b.n	800ea9a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ea5e:	6839      	ldr	r1, [r7, #0]
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f001 f9f9 	bl	800fe58 <USBD_CtlError>
            ret = USBD_FAIL;
 800ea66:	2303      	movs	r3, #3
 800ea68:	75fb      	strb	r3, [r7, #23]
          break;
 800ea6a:	e016      	b.n	800ea9a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea72:	b2db      	uxtb	r3, r3
 800ea74:	2b03      	cmp	r3, #3
 800ea76:	d00f      	beq.n	800ea98 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800ea78:	6839      	ldr	r1, [r7, #0]
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f001 f9ec 	bl	800fe58 <USBD_CtlError>
            ret = USBD_FAIL;
 800ea80:	2303      	movs	r3, #3
 800ea82:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ea84:	e008      	b.n	800ea98 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ea86:	6839      	ldr	r1, [r7, #0]
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f001 f9e5 	bl	800fe58 <USBD_CtlError>
          ret = USBD_FAIL;
 800ea8e:	2303      	movs	r3, #3
 800ea90:	75fb      	strb	r3, [r7, #23]
          break;
 800ea92:	e002      	b.n	800ea9a <USBD_CDC_Setup+0x176>
          break;
 800ea94:	bf00      	nop
 800ea96:	e008      	b.n	800eaaa <USBD_CDC_Setup+0x186>
          break;
 800ea98:	bf00      	nop
      }
      break;
 800ea9a:	e006      	b.n	800eaaa <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800ea9c:	6839      	ldr	r1, [r7, #0]
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f001 f9da 	bl	800fe58 <USBD_CtlError>
      ret = USBD_FAIL;
 800eaa4:	2303      	movs	r3, #3
 800eaa6:	75fb      	strb	r3, [r7, #23]
      break;
 800eaa8:	bf00      	nop
  }

  return (uint8_t)ret;
 800eaaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3718      	adds	r7, #24
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b084      	sub	sp, #16
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	460b      	mov	r3, r1
 800eabe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eac6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d101      	bne.n	800ead6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ead2:	2303      	movs	r3, #3
 800ead4:	e04f      	b.n	800eb76 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eadc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800eade:	78fa      	ldrb	r2, [r7, #3]
 800eae0:	6879      	ldr	r1, [r7, #4]
 800eae2:	4613      	mov	r3, r2
 800eae4:	009b      	lsls	r3, r3, #2
 800eae6:	4413      	add	r3, r2
 800eae8:	009b      	lsls	r3, r3, #2
 800eaea:	440b      	add	r3, r1
 800eaec:	3318      	adds	r3, #24
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d029      	beq.n	800eb48 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800eaf4:	78fa      	ldrb	r2, [r7, #3]
 800eaf6:	6879      	ldr	r1, [r7, #4]
 800eaf8:	4613      	mov	r3, r2
 800eafa:	009b      	lsls	r3, r3, #2
 800eafc:	4413      	add	r3, r2
 800eafe:	009b      	lsls	r3, r3, #2
 800eb00:	440b      	add	r3, r1
 800eb02:	3318      	adds	r3, #24
 800eb04:	681a      	ldr	r2, [r3, #0]
 800eb06:	78f9      	ldrb	r1, [r7, #3]
 800eb08:	68f8      	ldr	r0, [r7, #12]
 800eb0a:	460b      	mov	r3, r1
 800eb0c:	009b      	lsls	r3, r3, #2
 800eb0e:	440b      	add	r3, r1
 800eb10:	00db      	lsls	r3, r3, #3
 800eb12:	4403      	add	r3, r0
 800eb14:	333c      	adds	r3, #60	; 0x3c
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	fbb2 f1f3 	udiv	r1, r2, r3
 800eb1c:	fb01 f303 	mul.w	r3, r1, r3
 800eb20:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d110      	bne.n	800eb48 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800eb26:	78fa      	ldrb	r2, [r7, #3]
 800eb28:	6879      	ldr	r1, [r7, #4]
 800eb2a:	4613      	mov	r3, r2
 800eb2c:	009b      	lsls	r3, r3, #2
 800eb2e:	4413      	add	r3, r2
 800eb30:	009b      	lsls	r3, r3, #2
 800eb32:	440b      	add	r3, r1
 800eb34:	3318      	adds	r3, #24
 800eb36:	2200      	movs	r2, #0
 800eb38:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800eb3a:	78f9      	ldrb	r1, [r7, #3]
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	2200      	movs	r2, #0
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f004 fe1b 	bl	801377c <USBD_LL_Transmit>
 800eb46:	e015      	b.n	800eb74 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eb56:	691b      	ldr	r3, [r3, #16]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d00b      	beq.n	800eb74 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eb62:	691b      	ldr	r3, [r3, #16]
 800eb64:	68ba      	ldr	r2, [r7, #8]
 800eb66:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800eb6a:	68ba      	ldr	r2, [r7, #8]
 800eb6c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800eb70:	78fa      	ldrb	r2, [r7, #3]
 800eb72:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800eb74:	2300      	movs	r3, #0
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3710      	adds	r7, #16
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}

0800eb7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800eb7e:	b580      	push	{r7, lr}
 800eb80:	b084      	sub	sp, #16
 800eb82:	af00      	add	r7, sp, #0
 800eb84:	6078      	str	r0, [r7, #4]
 800eb86:	460b      	mov	r3, r1
 800eb88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb90:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d101      	bne.n	800eba0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800eb9c:	2303      	movs	r3, #3
 800eb9e:	e015      	b.n	800ebcc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800eba0:	78fb      	ldrb	r3, [r7, #3]
 800eba2:	4619      	mov	r1, r3
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f004 fe2b 	bl	8013800 <USBD_LL_GetRxDataSize>
 800ebaa:	4602      	mov	r2, r0
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ebb8:	68db      	ldr	r3, [r3, #12]
 800ebba:	68fa      	ldr	r2, [r7, #12]
 800ebbc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ebc0:	68fa      	ldr	r2, [r7, #12]
 800ebc2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ebc6:	4611      	mov	r1, r2
 800ebc8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ebca:	2300      	movs	r3, #0
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3710      	adds	r7, #16
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ebe2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d101      	bne.n	800ebee <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800ebea:	2303      	movs	r3, #3
 800ebec:	e01b      	b.n	800ec26 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d015      	beq.n	800ec24 <USBD_CDC_EP0_RxReady+0x50>
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ebfe:	2bff      	cmp	r3, #255	; 0xff
 800ec00:	d010      	beq.n	800ec24 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec08:	689b      	ldr	r3, [r3, #8]
 800ec0a:	68fa      	ldr	r2, [r7, #12]
 800ec0c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ec10:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ec12:	68fa      	ldr	r2, [r7, #12]
 800ec14:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ec18:	b292      	uxth	r2, r2
 800ec1a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	22ff      	movs	r2, #255	; 0xff
 800ec20:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ec24:	2300      	movs	r3, #0
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3710      	adds	r7, #16
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
	...

0800ec30 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b083      	sub	sp, #12
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2243      	movs	r2, #67	; 0x43
 800ec3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ec3e:	4b03      	ldr	r3, [pc, #12]	; (800ec4c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	370c      	adds	r7, #12
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr
 800ec4c:	20000358 	.word	0x20000358

0800ec50 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ec50:	b480      	push	{r7}
 800ec52:	b083      	sub	sp, #12
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2243      	movs	r2, #67	; 0x43
 800ec5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ec5e:	4b03      	ldr	r3, [pc, #12]	; (800ec6c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	370c      	adds	r7, #12
 800ec64:	46bd      	mov	sp, r7
 800ec66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6a:	4770      	bx	lr
 800ec6c:	20000314 	.word	0x20000314

0800ec70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ec70:	b480      	push	{r7}
 800ec72:	b083      	sub	sp, #12
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2243      	movs	r2, #67	; 0x43
 800ec7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ec7e:	4b03      	ldr	r3, [pc, #12]	; (800ec8c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	370c      	adds	r7, #12
 800ec84:	46bd      	mov	sp, r7
 800ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8a:	4770      	bx	lr
 800ec8c:	2000039c 	.word	0x2000039c

0800ec90 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ec90:	b480      	push	{r7}
 800ec92:	b083      	sub	sp, #12
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	220a      	movs	r2, #10
 800ec9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ec9e:	4b03      	ldr	r3, [pc, #12]	; (800ecac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	370c      	adds	r7, #12
 800eca4:	46bd      	mov	sp, r7
 800eca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecaa:	4770      	bx	lr
 800ecac:	200002d0 	.word	0x200002d0

0800ecb0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ecb0:	b480      	push	{r7}
 800ecb2:	b083      	sub	sp, #12
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d101      	bne.n	800ecc4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ecc0:	2303      	movs	r3, #3
 800ecc2:	e004      	b.n	800ecce <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	683a      	ldr	r2, [r7, #0]
 800ecc8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800eccc:	2300      	movs	r3, #0
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	370c      	adds	r7, #12
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd8:	4770      	bx	lr

0800ecda <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ecda:	b480      	push	{r7}
 800ecdc:	b087      	sub	sp, #28
 800ecde:	af00      	add	r7, sp, #0
 800ece0:	60f8      	str	r0, [r7, #12]
 800ece2:	60b9      	str	r1, [r7, #8]
 800ece4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ecec:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d101      	bne.n	800ecf8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ecf4:	2303      	movs	r3, #3
 800ecf6:	e008      	b.n	800ed0a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800ecf8:	697b      	ldr	r3, [r7, #20]
 800ecfa:	68ba      	ldr	r2, [r7, #8]
 800ecfc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	687a      	ldr	r2, [r7, #4]
 800ed04:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ed08:	2300      	movs	r3, #0
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	371c      	adds	r7, #28
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed14:	4770      	bx	lr

0800ed16 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ed16:	b480      	push	{r7}
 800ed18:	b085      	sub	sp, #20
 800ed1a:	af00      	add	r7, sp, #0
 800ed1c:	6078      	str	r0, [r7, #4]
 800ed1e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed26:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d101      	bne.n	800ed32 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ed2e:	2303      	movs	r3, #3
 800ed30:	e004      	b.n	800ed3c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	683a      	ldr	r2, [r7, #0]
 800ed36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ed3a:	2300      	movs	r3, #0
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3714      	adds	r7, #20
 800ed40:	46bd      	mov	sp, r7
 800ed42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed46:	4770      	bx	lr

0800ed48 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b084      	sub	sp, #16
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed56:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ed58:	2301      	movs	r3, #1
 800ed5a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d101      	bne.n	800ed6a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ed66:	2303      	movs	r3, #3
 800ed68:	e01a      	b.n	800eda0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d114      	bne.n	800ed9e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	2201      	movs	r2, #1
 800ed78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ed92:	2181      	movs	r1, #129	; 0x81
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f004 fcf1 	bl	801377c <USBD_LL_Transmit>

    ret = USBD_OK;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ed9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3710      	adds	r7, #16
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}

0800eda8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b084      	sub	sp, #16
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800edb6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d101      	bne.n	800edc6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800edc2:	2303      	movs	r3, #3
 800edc4:	e016      	b.n	800edf4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	7c1b      	ldrb	r3, [r3, #16]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d109      	bne.n	800ede2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800edd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800edd8:	2101      	movs	r1, #1
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f004 fcef 	bl	80137be <USBD_LL_PrepareReceive>
 800ede0:	e007      	b.n	800edf2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ede8:	2340      	movs	r3, #64	; 0x40
 800edea:	2101      	movs	r1, #1
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f004 fce6 	bl	80137be <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800edf2:	2300      	movs	r3, #0
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3710      	adds	r7, #16
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}

0800edfc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b086      	sub	sp, #24
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	60f8      	str	r0, [r7, #12]
 800ee04:	60b9      	str	r1, [r7, #8]
 800ee06:	4613      	mov	r3, r2
 800ee08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d101      	bne.n	800ee14 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ee10:	2303      	movs	r3, #3
 800ee12:	e01f      	b.n	800ee54 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	2200      	movs	r2, #0
 800ee18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	2200      	movs	r2, #0
 800ee20:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	2200      	movs	r2, #0
 800ee28:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d003      	beq.n	800ee3a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	68ba      	ldr	r2, [r7, #8]
 800ee36:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	2201      	movs	r2, #1
 800ee3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	79fa      	ldrb	r2, [r7, #7]
 800ee46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ee48:	68f8      	ldr	r0, [r7, #12]
 800ee4a:	f004 fb4b 	bl	80134e4 <USBD_LL_Init>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ee52:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3718      	adds	r7, #24
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b084      	sub	sp, #16
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ee66:	2300      	movs	r3, #0
 800ee68:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d101      	bne.n	800ee74 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ee70:	2303      	movs	r3, #3
 800ee72:	e016      	b.n	800eea2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	683a      	ldr	r2, [r7, #0]
 800ee78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d00b      	beq.n	800eea0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee90:	f107 020e 	add.w	r2, r7, #14
 800ee94:	4610      	mov	r0, r2
 800ee96:	4798      	blx	r3
 800ee98:	4602      	mov	r2, r0
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800eea0:	2300      	movs	r3, #0
}
 800eea2:	4618      	mov	r0, r3
 800eea4:	3710      	adds	r7, #16
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}

0800eeaa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800eeaa:	b580      	push	{r7, lr}
 800eeac:	b082      	sub	sp, #8
 800eeae:	af00      	add	r7, sp, #0
 800eeb0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f004 fb78 	bl	80135a8 <USBD_LL_Start>
 800eeb8:	4603      	mov	r3, r0
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3708      	adds	r7, #8
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}

0800eec2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800eec2:	b480      	push	{r7}
 800eec4:	b083      	sub	sp, #12
 800eec6:	af00      	add	r7, sp, #0
 800eec8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eeca:	2300      	movs	r3, #0
}
 800eecc:	4618      	mov	r0, r3
 800eece:	370c      	adds	r7, #12
 800eed0:	46bd      	mov	sp, r7
 800eed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed6:	4770      	bx	lr

0800eed8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b084      	sub	sp, #16
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	460b      	mov	r3, r1
 800eee2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800eee4:	2303      	movs	r3, #3
 800eee6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d009      	beq.n	800ef06 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	78fa      	ldrb	r2, [r7, #3]
 800eefc:	4611      	mov	r1, r2
 800eefe:	6878      	ldr	r0, [r7, #4]
 800ef00:	4798      	blx	r3
 800ef02:	4603      	mov	r3, r0
 800ef04:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ef06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3710      	adds	r7, #16
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}

0800ef10 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b082      	sub	sp, #8
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
 800ef18:	460b      	mov	r3, r1
 800ef1a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d007      	beq.n	800ef36 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef2c:	685b      	ldr	r3, [r3, #4]
 800ef2e:	78fa      	ldrb	r2, [r7, #3]
 800ef30:	4611      	mov	r1, r2
 800ef32:	6878      	ldr	r0, [r7, #4]
 800ef34:	4798      	blx	r3
  }

  return USBD_OK;
 800ef36:	2300      	movs	r3, #0
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3708      	adds	r7, #8
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b084      	sub	sp, #16
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
 800ef48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ef50:	6839      	ldr	r1, [r7, #0]
 800ef52:	4618      	mov	r0, r3
 800ef54:	f000 ff46 	bl	800fde4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2201      	movs	r2, #1
 800ef5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ef66:	461a      	mov	r2, r3
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ef74:	f003 031f 	and.w	r3, r3, #31
 800ef78:	2b02      	cmp	r3, #2
 800ef7a:	d01a      	beq.n	800efb2 <USBD_LL_SetupStage+0x72>
 800ef7c:	2b02      	cmp	r3, #2
 800ef7e:	d822      	bhi.n	800efc6 <USBD_LL_SetupStage+0x86>
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d002      	beq.n	800ef8a <USBD_LL_SetupStage+0x4a>
 800ef84:	2b01      	cmp	r3, #1
 800ef86:	d00a      	beq.n	800ef9e <USBD_LL_SetupStage+0x5e>
 800ef88:	e01d      	b.n	800efc6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ef90:	4619      	mov	r1, r3
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f000 f9ee 	bl	800f374 <USBD_StdDevReq>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	73fb      	strb	r3, [r7, #15]
      break;
 800ef9c:	e020      	b.n	800efe0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800efa4:	4619      	mov	r1, r3
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f000 fa52 	bl	800f450 <USBD_StdItfReq>
 800efac:	4603      	mov	r3, r0
 800efae:	73fb      	strb	r3, [r7, #15]
      break;
 800efb0:	e016      	b.n	800efe0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800efb8:	4619      	mov	r1, r3
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	f000 fa91 	bl	800f4e2 <USBD_StdEPReq>
 800efc0:	4603      	mov	r3, r0
 800efc2:	73fb      	strb	r3, [r7, #15]
      break;
 800efc4:	e00c      	b.n	800efe0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800efcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800efd0:	b2db      	uxtb	r3, r3
 800efd2:	4619      	mov	r1, r3
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f004 fb47 	bl	8013668 <USBD_LL_StallEP>
 800efda:	4603      	mov	r3, r0
 800efdc:	73fb      	strb	r3, [r7, #15]
      break;
 800efde:	bf00      	nop
  }

  return ret;
 800efe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3710      	adds	r7, #16
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}

0800efea <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800efea:	b580      	push	{r7, lr}
 800efec:	b086      	sub	sp, #24
 800efee:	af00      	add	r7, sp, #0
 800eff0:	60f8      	str	r0, [r7, #12]
 800eff2:	460b      	mov	r3, r1
 800eff4:	607a      	str	r2, [r7, #4]
 800eff6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800eff8:	7afb      	ldrb	r3, [r7, #11]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d138      	bne.n	800f070 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f004:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f00c:	2b03      	cmp	r3, #3
 800f00e:	d14a      	bne.n	800f0a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f010:	693b      	ldr	r3, [r7, #16]
 800f012:	689a      	ldr	r2, [r3, #8]
 800f014:	693b      	ldr	r3, [r7, #16]
 800f016:	68db      	ldr	r3, [r3, #12]
 800f018:	429a      	cmp	r2, r3
 800f01a:	d913      	bls.n	800f044 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	689a      	ldr	r2, [r3, #8]
 800f020:	693b      	ldr	r3, [r7, #16]
 800f022:	68db      	ldr	r3, [r3, #12]
 800f024:	1ad2      	subs	r2, r2, r3
 800f026:	693b      	ldr	r3, [r7, #16]
 800f028:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f02a:	693b      	ldr	r3, [r7, #16]
 800f02c:	68da      	ldr	r2, [r3, #12]
 800f02e:	693b      	ldr	r3, [r7, #16]
 800f030:	689b      	ldr	r3, [r3, #8]
 800f032:	4293      	cmp	r3, r2
 800f034:	bf28      	it	cs
 800f036:	4613      	movcs	r3, r2
 800f038:	461a      	mov	r2, r3
 800f03a:	6879      	ldr	r1, [r7, #4]
 800f03c:	68f8      	ldr	r0, [r7, #12]
 800f03e:	f000 ffc5 	bl	800ffcc <USBD_CtlContinueRx>
 800f042:	e030      	b.n	800f0a6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f04a:	b2db      	uxtb	r3, r3
 800f04c:	2b03      	cmp	r3, #3
 800f04e:	d10b      	bne.n	800f068 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f056:	691b      	ldr	r3, [r3, #16]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d005      	beq.n	800f068 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f062:	691b      	ldr	r3, [r3, #16]
 800f064:	68f8      	ldr	r0, [r7, #12]
 800f066:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f068:	68f8      	ldr	r0, [r7, #12]
 800f06a:	f000 ffc0 	bl	800ffee <USBD_CtlSendStatus>
 800f06e:	e01a      	b.n	800f0a6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f076:	b2db      	uxtb	r3, r3
 800f078:	2b03      	cmp	r3, #3
 800f07a:	d114      	bne.n	800f0a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f082:	699b      	ldr	r3, [r3, #24]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d00e      	beq.n	800f0a6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f08e:	699b      	ldr	r3, [r3, #24]
 800f090:	7afa      	ldrb	r2, [r7, #11]
 800f092:	4611      	mov	r1, r2
 800f094:	68f8      	ldr	r0, [r7, #12]
 800f096:	4798      	blx	r3
 800f098:	4603      	mov	r3, r0
 800f09a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f09c:	7dfb      	ldrb	r3, [r7, #23]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d001      	beq.n	800f0a6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f0a2:	7dfb      	ldrb	r3, [r7, #23]
 800f0a4:	e000      	b.n	800f0a8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f0a6:	2300      	movs	r3, #0
}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	3718      	adds	r7, #24
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd80      	pop	{r7, pc}

0800f0b0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b086      	sub	sp, #24
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	60f8      	str	r0, [r7, #12]
 800f0b8:	460b      	mov	r3, r1
 800f0ba:	607a      	str	r2, [r7, #4]
 800f0bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f0be:	7afb      	ldrb	r3, [r7, #11]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d16b      	bne.n	800f19c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	3314      	adds	r3, #20
 800f0c8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f0d0:	2b02      	cmp	r3, #2
 800f0d2:	d156      	bne.n	800f182 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f0d4:	693b      	ldr	r3, [r7, #16]
 800f0d6:	689a      	ldr	r2, [r3, #8]
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	68db      	ldr	r3, [r3, #12]
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	d914      	bls.n	800f10a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f0e0:	693b      	ldr	r3, [r7, #16]
 800f0e2:	689a      	ldr	r2, [r3, #8]
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	68db      	ldr	r3, [r3, #12]
 800f0e8:	1ad2      	subs	r2, r2, r3
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	689b      	ldr	r3, [r3, #8]
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	6879      	ldr	r1, [r7, #4]
 800f0f6:	68f8      	ldr	r0, [r7, #12]
 800f0f8:	f000 ff3a 	bl	800ff70 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	2200      	movs	r2, #0
 800f100:	2100      	movs	r1, #0
 800f102:	68f8      	ldr	r0, [r7, #12]
 800f104:	f004 fb5b 	bl	80137be <USBD_LL_PrepareReceive>
 800f108:	e03b      	b.n	800f182 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f10a:	693b      	ldr	r3, [r7, #16]
 800f10c:	68da      	ldr	r2, [r3, #12]
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	689b      	ldr	r3, [r3, #8]
 800f112:	429a      	cmp	r2, r3
 800f114:	d11c      	bne.n	800f150 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f116:	693b      	ldr	r3, [r7, #16]
 800f118:	685a      	ldr	r2, [r3, #4]
 800f11a:	693b      	ldr	r3, [r7, #16]
 800f11c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f11e:	429a      	cmp	r2, r3
 800f120:	d316      	bcc.n	800f150 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f122:	693b      	ldr	r3, [r7, #16]
 800f124:	685a      	ldr	r2, [r3, #4]
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f12c:	429a      	cmp	r2, r3
 800f12e:	d20f      	bcs.n	800f150 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f130:	2200      	movs	r2, #0
 800f132:	2100      	movs	r1, #0
 800f134:	68f8      	ldr	r0, [r7, #12]
 800f136:	f000 ff1b 	bl	800ff70 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2200      	movs	r2, #0
 800f13e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f142:	2300      	movs	r3, #0
 800f144:	2200      	movs	r2, #0
 800f146:	2100      	movs	r1, #0
 800f148:	68f8      	ldr	r0, [r7, #12]
 800f14a:	f004 fb38 	bl	80137be <USBD_LL_PrepareReceive>
 800f14e:	e018      	b.n	800f182 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f156:	b2db      	uxtb	r3, r3
 800f158:	2b03      	cmp	r3, #3
 800f15a:	d10b      	bne.n	800f174 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f162:	68db      	ldr	r3, [r3, #12]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d005      	beq.n	800f174 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f16e:	68db      	ldr	r3, [r3, #12]
 800f170:	68f8      	ldr	r0, [r7, #12]
 800f172:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f174:	2180      	movs	r1, #128	; 0x80
 800f176:	68f8      	ldr	r0, [r7, #12]
 800f178:	f004 fa76 	bl	8013668 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f17c:	68f8      	ldr	r0, [r7, #12]
 800f17e:	f000 ff49 	bl	8010014 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f188:	2b01      	cmp	r3, #1
 800f18a:	d122      	bne.n	800f1d2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f18c:	68f8      	ldr	r0, [r7, #12]
 800f18e:	f7ff fe98 	bl	800eec2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	2200      	movs	r2, #0
 800f196:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f19a:	e01a      	b.n	800f1d2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1a2:	b2db      	uxtb	r3, r3
 800f1a4:	2b03      	cmp	r3, #3
 800f1a6:	d114      	bne.n	800f1d2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1ae:	695b      	ldr	r3, [r3, #20]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d00e      	beq.n	800f1d2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1ba:	695b      	ldr	r3, [r3, #20]
 800f1bc:	7afa      	ldrb	r2, [r7, #11]
 800f1be:	4611      	mov	r1, r2
 800f1c0:	68f8      	ldr	r0, [r7, #12]
 800f1c2:	4798      	blx	r3
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f1c8:	7dfb      	ldrb	r3, [r7, #23]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d001      	beq.n	800f1d2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800f1ce:	7dfb      	ldrb	r3, [r7, #23]
 800f1d0:	e000      	b.n	800f1d4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800f1d2:	2300      	movs	r3, #0
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3718      	adds	r7, #24
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}

0800f1dc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b082      	sub	sp, #8
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2201      	movs	r2, #1
 800f1e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d101      	bne.n	800f210 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800f20c:	2303      	movs	r3, #3
 800f20e:	e02f      	b.n	800f270 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f216:	2b00      	cmp	r3, #0
 800f218:	d00f      	beq.n	800f23a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f220:	685b      	ldr	r3, [r3, #4]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d009      	beq.n	800f23a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f22c:	685b      	ldr	r3, [r3, #4]
 800f22e:	687a      	ldr	r2, [r7, #4]
 800f230:	6852      	ldr	r2, [r2, #4]
 800f232:	b2d2      	uxtb	r2, r2
 800f234:	4611      	mov	r1, r2
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f23a:	2340      	movs	r3, #64	; 0x40
 800f23c:	2200      	movs	r2, #0
 800f23e:	2100      	movs	r1, #0
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f004 f9cc 	bl	80135de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2201      	movs	r2, #1
 800f24a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2240      	movs	r2, #64	; 0x40
 800f252:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f256:	2340      	movs	r3, #64	; 0x40
 800f258:	2200      	movs	r2, #0
 800f25a:	2180      	movs	r1, #128	; 0x80
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f004 f9be 	bl	80135de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2201      	movs	r2, #1
 800f266:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2240      	movs	r2, #64	; 0x40
 800f26c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f26e:	2300      	movs	r3, #0
}
 800f270:	4618      	mov	r0, r3
 800f272:	3708      	adds	r7, #8
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f278:	b480      	push	{r7}
 800f27a:	b083      	sub	sp, #12
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	460b      	mov	r3, r1
 800f282:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	78fa      	ldrb	r2, [r7, #3]
 800f288:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f28a:	2300      	movs	r3, #0
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	370c      	adds	r7, #12
 800f290:	46bd      	mov	sp, r7
 800f292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f296:	4770      	bx	lr

0800f298 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f298:	b480      	push	{r7}
 800f29a:	b083      	sub	sp, #12
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2a6:	b2da      	uxtb	r2, r3
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2204      	movs	r2, #4
 800f2b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f2b6:	2300      	movs	r3, #0
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	370c      	adds	r7, #12
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c2:	4770      	bx	lr

0800f2c4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2d2:	b2db      	uxtb	r3, r3
 800f2d4:	2b04      	cmp	r3, #4
 800f2d6:	d106      	bne.n	800f2e6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f2de:	b2da      	uxtb	r2, r3
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f2e6:	2300      	movs	r3, #0
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	370c      	adds	r7, #12
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f2:	4770      	bx	lr

0800f2f4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b082      	sub	sp, #8
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f302:	2b00      	cmp	r3, #0
 800f304:	d101      	bne.n	800f30a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f306:	2303      	movs	r3, #3
 800f308:	e012      	b.n	800f330 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f310:	b2db      	uxtb	r3, r3
 800f312:	2b03      	cmp	r3, #3
 800f314:	d10b      	bne.n	800f32e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f31c:	69db      	ldr	r3, [r3, #28]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d005      	beq.n	800f32e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f328:	69db      	ldr	r3, [r3, #28]
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f32e:	2300      	movs	r3, #0
}
 800f330:	4618      	mov	r0, r3
 800f332:	3708      	adds	r7, #8
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}

0800f338 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f338:	b480      	push	{r7}
 800f33a:	b087      	sub	sp, #28
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f34a:	697b      	ldr	r3, [r7, #20]
 800f34c:	3301      	adds	r3, #1
 800f34e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f356:	8a3b      	ldrh	r3, [r7, #16]
 800f358:	021b      	lsls	r3, r3, #8
 800f35a:	b21a      	sxth	r2, r3
 800f35c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f360:	4313      	orrs	r3, r2
 800f362:	b21b      	sxth	r3, r3
 800f364:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f366:	89fb      	ldrh	r3, [r7, #14]
}
 800f368:	4618      	mov	r0, r3
 800f36a:	371c      	adds	r7, #28
 800f36c:	46bd      	mov	sp, r7
 800f36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f372:	4770      	bx	lr

0800f374 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b084      	sub	sp, #16
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f37e:	2300      	movs	r3, #0
 800f380:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f38a:	2b40      	cmp	r3, #64	; 0x40
 800f38c:	d005      	beq.n	800f39a <USBD_StdDevReq+0x26>
 800f38e:	2b40      	cmp	r3, #64	; 0x40
 800f390:	d853      	bhi.n	800f43a <USBD_StdDevReq+0xc6>
 800f392:	2b00      	cmp	r3, #0
 800f394:	d00b      	beq.n	800f3ae <USBD_StdDevReq+0x3a>
 800f396:	2b20      	cmp	r3, #32
 800f398:	d14f      	bne.n	800f43a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3a0:	689b      	ldr	r3, [r3, #8]
 800f3a2:	6839      	ldr	r1, [r7, #0]
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	4798      	blx	r3
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	73fb      	strb	r3, [r7, #15]
      break;
 800f3ac:	e04a      	b.n	800f444 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	785b      	ldrb	r3, [r3, #1]
 800f3b2:	2b09      	cmp	r3, #9
 800f3b4:	d83b      	bhi.n	800f42e <USBD_StdDevReq+0xba>
 800f3b6:	a201      	add	r2, pc, #4	; (adr r2, 800f3bc <USBD_StdDevReq+0x48>)
 800f3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3bc:	0800f411 	.word	0x0800f411
 800f3c0:	0800f425 	.word	0x0800f425
 800f3c4:	0800f42f 	.word	0x0800f42f
 800f3c8:	0800f41b 	.word	0x0800f41b
 800f3cc:	0800f42f 	.word	0x0800f42f
 800f3d0:	0800f3ef 	.word	0x0800f3ef
 800f3d4:	0800f3e5 	.word	0x0800f3e5
 800f3d8:	0800f42f 	.word	0x0800f42f
 800f3dc:	0800f407 	.word	0x0800f407
 800f3e0:	0800f3f9 	.word	0x0800f3f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f3e4:	6839      	ldr	r1, [r7, #0]
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f000 f9de 	bl	800f7a8 <USBD_GetDescriptor>
          break;
 800f3ec:	e024      	b.n	800f438 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f3ee:	6839      	ldr	r1, [r7, #0]
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f000 fb6d 	bl	800fad0 <USBD_SetAddress>
          break;
 800f3f6:	e01f      	b.n	800f438 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f3f8:	6839      	ldr	r1, [r7, #0]
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f000 fbac 	bl	800fb58 <USBD_SetConfig>
 800f400:	4603      	mov	r3, r0
 800f402:	73fb      	strb	r3, [r7, #15]
          break;
 800f404:	e018      	b.n	800f438 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f406:	6839      	ldr	r1, [r7, #0]
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f000 fc4b 	bl	800fca4 <USBD_GetConfig>
          break;
 800f40e:	e013      	b.n	800f438 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f410:	6839      	ldr	r1, [r7, #0]
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f000 fc7c 	bl	800fd10 <USBD_GetStatus>
          break;
 800f418:	e00e      	b.n	800f438 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f41a:	6839      	ldr	r1, [r7, #0]
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	f000 fcab 	bl	800fd78 <USBD_SetFeature>
          break;
 800f422:	e009      	b.n	800f438 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f424:	6839      	ldr	r1, [r7, #0]
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	f000 fcba 	bl	800fda0 <USBD_ClrFeature>
          break;
 800f42c:	e004      	b.n	800f438 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f42e:	6839      	ldr	r1, [r7, #0]
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f000 fd11 	bl	800fe58 <USBD_CtlError>
          break;
 800f436:	bf00      	nop
      }
      break;
 800f438:	e004      	b.n	800f444 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f43a:	6839      	ldr	r1, [r7, #0]
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f000 fd0b 	bl	800fe58 <USBD_CtlError>
      break;
 800f442:	bf00      	nop
  }

  return ret;
 800f444:	7bfb      	ldrb	r3, [r7, #15]
}
 800f446:	4618      	mov	r0, r3
 800f448:	3710      	adds	r7, #16
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}
 800f44e:	bf00      	nop

0800f450 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b084      	sub	sp, #16
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f45a:	2300      	movs	r3, #0
 800f45c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f466:	2b40      	cmp	r3, #64	; 0x40
 800f468:	d005      	beq.n	800f476 <USBD_StdItfReq+0x26>
 800f46a:	2b40      	cmp	r3, #64	; 0x40
 800f46c:	d82f      	bhi.n	800f4ce <USBD_StdItfReq+0x7e>
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d001      	beq.n	800f476 <USBD_StdItfReq+0x26>
 800f472:	2b20      	cmp	r3, #32
 800f474:	d12b      	bne.n	800f4ce <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f47c:	b2db      	uxtb	r3, r3
 800f47e:	3b01      	subs	r3, #1
 800f480:	2b02      	cmp	r3, #2
 800f482:	d81d      	bhi.n	800f4c0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	889b      	ldrh	r3, [r3, #4]
 800f488:	b2db      	uxtb	r3, r3
 800f48a:	2b01      	cmp	r3, #1
 800f48c:	d813      	bhi.n	800f4b6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f494:	689b      	ldr	r3, [r3, #8]
 800f496:	6839      	ldr	r1, [r7, #0]
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	4798      	blx	r3
 800f49c:	4603      	mov	r3, r0
 800f49e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	88db      	ldrh	r3, [r3, #6]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d110      	bne.n	800f4ca <USBD_StdItfReq+0x7a>
 800f4a8:	7bfb      	ldrb	r3, [r7, #15]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d10d      	bne.n	800f4ca <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f000 fd9d 	bl	800ffee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f4b4:	e009      	b.n	800f4ca <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f4b6:	6839      	ldr	r1, [r7, #0]
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f000 fccd 	bl	800fe58 <USBD_CtlError>
          break;
 800f4be:	e004      	b.n	800f4ca <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f4c0:	6839      	ldr	r1, [r7, #0]
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f000 fcc8 	bl	800fe58 <USBD_CtlError>
          break;
 800f4c8:	e000      	b.n	800f4cc <USBD_StdItfReq+0x7c>
          break;
 800f4ca:	bf00      	nop
      }
      break;
 800f4cc:	e004      	b.n	800f4d8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f4ce:	6839      	ldr	r1, [r7, #0]
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f000 fcc1 	bl	800fe58 <USBD_CtlError>
      break;
 800f4d6:	bf00      	nop
  }

  return ret;
 800f4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3710      	adds	r7, #16
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}

0800f4e2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4e2:	b580      	push	{r7, lr}
 800f4e4:	b084      	sub	sp, #16
 800f4e6:	af00      	add	r7, sp, #0
 800f4e8:	6078      	str	r0, [r7, #4]
 800f4ea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	889b      	ldrh	r3, [r3, #4]
 800f4f4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	781b      	ldrb	r3, [r3, #0]
 800f4fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f4fe:	2b40      	cmp	r3, #64	; 0x40
 800f500:	d007      	beq.n	800f512 <USBD_StdEPReq+0x30>
 800f502:	2b40      	cmp	r3, #64	; 0x40
 800f504:	f200 8145 	bhi.w	800f792 <USBD_StdEPReq+0x2b0>
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d00c      	beq.n	800f526 <USBD_StdEPReq+0x44>
 800f50c:	2b20      	cmp	r3, #32
 800f50e:	f040 8140 	bne.w	800f792 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f518:	689b      	ldr	r3, [r3, #8]
 800f51a:	6839      	ldr	r1, [r7, #0]
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	4798      	blx	r3
 800f520:	4603      	mov	r3, r0
 800f522:	73fb      	strb	r3, [r7, #15]
      break;
 800f524:	e13a      	b.n	800f79c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f526:	683b      	ldr	r3, [r7, #0]
 800f528:	785b      	ldrb	r3, [r3, #1]
 800f52a:	2b03      	cmp	r3, #3
 800f52c:	d007      	beq.n	800f53e <USBD_StdEPReq+0x5c>
 800f52e:	2b03      	cmp	r3, #3
 800f530:	f300 8129 	bgt.w	800f786 <USBD_StdEPReq+0x2a4>
 800f534:	2b00      	cmp	r3, #0
 800f536:	d07f      	beq.n	800f638 <USBD_StdEPReq+0x156>
 800f538:	2b01      	cmp	r3, #1
 800f53a:	d03c      	beq.n	800f5b6 <USBD_StdEPReq+0xd4>
 800f53c:	e123      	b.n	800f786 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f544:	b2db      	uxtb	r3, r3
 800f546:	2b02      	cmp	r3, #2
 800f548:	d002      	beq.n	800f550 <USBD_StdEPReq+0x6e>
 800f54a:	2b03      	cmp	r3, #3
 800f54c:	d016      	beq.n	800f57c <USBD_StdEPReq+0x9a>
 800f54e:	e02c      	b.n	800f5aa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f550:	7bbb      	ldrb	r3, [r7, #14]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d00d      	beq.n	800f572 <USBD_StdEPReq+0x90>
 800f556:	7bbb      	ldrb	r3, [r7, #14]
 800f558:	2b80      	cmp	r3, #128	; 0x80
 800f55a:	d00a      	beq.n	800f572 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f55c:	7bbb      	ldrb	r3, [r7, #14]
 800f55e:	4619      	mov	r1, r3
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	f004 f881 	bl	8013668 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f566:	2180      	movs	r1, #128	; 0x80
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f004 f87d 	bl	8013668 <USBD_LL_StallEP>
 800f56e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f570:	e020      	b.n	800f5b4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f572:	6839      	ldr	r1, [r7, #0]
 800f574:	6878      	ldr	r0, [r7, #4]
 800f576:	f000 fc6f 	bl	800fe58 <USBD_CtlError>
              break;
 800f57a:	e01b      	b.n	800f5b4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	885b      	ldrh	r3, [r3, #2]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d10e      	bne.n	800f5a2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f584:	7bbb      	ldrb	r3, [r7, #14]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d00b      	beq.n	800f5a2 <USBD_StdEPReq+0xc0>
 800f58a:	7bbb      	ldrb	r3, [r7, #14]
 800f58c:	2b80      	cmp	r3, #128	; 0x80
 800f58e:	d008      	beq.n	800f5a2 <USBD_StdEPReq+0xc0>
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	88db      	ldrh	r3, [r3, #6]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d104      	bne.n	800f5a2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f598:	7bbb      	ldrb	r3, [r7, #14]
 800f59a:	4619      	mov	r1, r3
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f004 f863 	bl	8013668 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f5a2:	6878      	ldr	r0, [r7, #4]
 800f5a4:	f000 fd23 	bl	800ffee <USBD_CtlSendStatus>

              break;
 800f5a8:	e004      	b.n	800f5b4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f5aa:	6839      	ldr	r1, [r7, #0]
 800f5ac:	6878      	ldr	r0, [r7, #4]
 800f5ae:	f000 fc53 	bl	800fe58 <USBD_CtlError>
              break;
 800f5b2:	bf00      	nop
          }
          break;
 800f5b4:	e0ec      	b.n	800f790 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5bc:	b2db      	uxtb	r3, r3
 800f5be:	2b02      	cmp	r3, #2
 800f5c0:	d002      	beq.n	800f5c8 <USBD_StdEPReq+0xe6>
 800f5c2:	2b03      	cmp	r3, #3
 800f5c4:	d016      	beq.n	800f5f4 <USBD_StdEPReq+0x112>
 800f5c6:	e030      	b.n	800f62a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f5c8:	7bbb      	ldrb	r3, [r7, #14]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d00d      	beq.n	800f5ea <USBD_StdEPReq+0x108>
 800f5ce:	7bbb      	ldrb	r3, [r7, #14]
 800f5d0:	2b80      	cmp	r3, #128	; 0x80
 800f5d2:	d00a      	beq.n	800f5ea <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f5d4:	7bbb      	ldrb	r3, [r7, #14]
 800f5d6:	4619      	mov	r1, r3
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f004 f845 	bl	8013668 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f5de:	2180      	movs	r1, #128	; 0x80
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f004 f841 	bl	8013668 <USBD_LL_StallEP>
 800f5e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f5e8:	e025      	b.n	800f636 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f5ea:	6839      	ldr	r1, [r7, #0]
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f000 fc33 	bl	800fe58 <USBD_CtlError>
              break;
 800f5f2:	e020      	b.n	800f636 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	885b      	ldrh	r3, [r3, #2]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d11b      	bne.n	800f634 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f5fc:	7bbb      	ldrb	r3, [r7, #14]
 800f5fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f602:	2b00      	cmp	r3, #0
 800f604:	d004      	beq.n	800f610 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f606:	7bbb      	ldrb	r3, [r7, #14]
 800f608:	4619      	mov	r1, r3
 800f60a:	6878      	ldr	r0, [r7, #4]
 800f60c:	f004 f84b 	bl	80136a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f000 fcec 	bl	800ffee <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f61c:	689b      	ldr	r3, [r3, #8]
 800f61e:	6839      	ldr	r1, [r7, #0]
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	4798      	blx	r3
 800f624:	4603      	mov	r3, r0
 800f626:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f628:	e004      	b.n	800f634 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f62a:	6839      	ldr	r1, [r7, #0]
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f000 fc13 	bl	800fe58 <USBD_CtlError>
              break;
 800f632:	e000      	b.n	800f636 <USBD_StdEPReq+0x154>
              break;
 800f634:	bf00      	nop
          }
          break;
 800f636:	e0ab      	b.n	800f790 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f63e:	b2db      	uxtb	r3, r3
 800f640:	2b02      	cmp	r3, #2
 800f642:	d002      	beq.n	800f64a <USBD_StdEPReq+0x168>
 800f644:	2b03      	cmp	r3, #3
 800f646:	d032      	beq.n	800f6ae <USBD_StdEPReq+0x1cc>
 800f648:	e097      	b.n	800f77a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f64a:	7bbb      	ldrb	r3, [r7, #14]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d007      	beq.n	800f660 <USBD_StdEPReq+0x17e>
 800f650:	7bbb      	ldrb	r3, [r7, #14]
 800f652:	2b80      	cmp	r3, #128	; 0x80
 800f654:	d004      	beq.n	800f660 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f656:	6839      	ldr	r1, [r7, #0]
 800f658:	6878      	ldr	r0, [r7, #4]
 800f65a:	f000 fbfd 	bl	800fe58 <USBD_CtlError>
                break;
 800f65e:	e091      	b.n	800f784 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f660:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f664:	2b00      	cmp	r3, #0
 800f666:	da0b      	bge.n	800f680 <USBD_StdEPReq+0x19e>
 800f668:	7bbb      	ldrb	r3, [r7, #14]
 800f66a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f66e:	4613      	mov	r3, r2
 800f670:	009b      	lsls	r3, r3, #2
 800f672:	4413      	add	r3, r2
 800f674:	009b      	lsls	r3, r3, #2
 800f676:	3310      	adds	r3, #16
 800f678:	687a      	ldr	r2, [r7, #4]
 800f67a:	4413      	add	r3, r2
 800f67c:	3304      	adds	r3, #4
 800f67e:	e00b      	b.n	800f698 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f680:	7bbb      	ldrb	r3, [r7, #14]
 800f682:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f686:	4613      	mov	r3, r2
 800f688:	009b      	lsls	r3, r3, #2
 800f68a:	4413      	add	r3, r2
 800f68c:	009b      	lsls	r3, r3, #2
 800f68e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f692:	687a      	ldr	r2, [r7, #4]
 800f694:	4413      	add	r3, r2
 800f696:	3304      	adds	r3, #4
 800f698:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	2200      	movs	r2, #0
 800f69e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	2202      	movs	r2, #2
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f000 fc47 	bl	800ff3a <USBD_CtlSendData>
              break;
 800f6ac:	e06a      	b.n	800f784 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f6ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	da11      	bge.n	800f6da <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f6b6:	7bbb      	ldrb	r3, [r7, #14]
 800f6b8:	f003 020f 	and.w	r2, r3, #15
 800f6bc:	6879      	ldr	r1, [r7, #4]
 800f6be:	4613      	mov	r3, r2
 800f6c0:	009b      	lsls	r3, r3, #2
 800f6c2:	4413      	add	r3, r2
 800f6c4:	009b      	lsls	r3, r3, #2
 800f6c6:	440b      	add	r3, r1
 800f6c8:	3324      	adds	r3, #36	; 0x24
 800f6ca:	881b      	ldrh	r3, [r3, #0]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d117      	bne.n	800f700 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f6d0:	6839      	ldr	r1, [r7, #0]
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f000 fbc0 	bl	800fe58 <USBD_CtlError>
                  break;
 800f6d8:	e054      	b.n	800f784 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f6da:	7bbb      	ldrb	r3, [r7, #14]
 800f6dc:	f003 020f 	and.w	r2, r3, #15
 800f6e0:	6879      	ldr	r1, [r7, #4]
 800f6e2:	4613      	mov	r3, r2
 800f6e4:	009b      	lsls	r3, r3, #2
 800f6e6:	4413      	add	r3, r2
 800f6e8:	009b      	lsls	r3, r3, #2
 800f6ea:	440b      	add	r3, r1
 800f6ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f6f0:	881b      	ldrh	r3, [r3, #0]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d104      	bne.n	800f700 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f6f6:	6839      	ldr	r1, [r7, #0]
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f000 fbad 	bl	800fe58 <USBD_CtlError>
                  break;
 800f6fe:	e041      	b.n	800f784 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f700:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f704:	2b00      	cmp	r3, #0
 800f706:	da0b      	bge.n	800f720 <USBD_StdEPReq+0x23e>
 800f708:	7bbb      	ldrb	r3, [r7, #14]
 800f70a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f70e:	4613      	mov	r3, r2
 800f710:	009b      	lsls	r3, r3, #2
 800f712:	4413      	add	r3, r2
 800f714:	009b      	lsls	r3, r3, #2
 800f716:	3310      	adds	r3, #16
 800f718:	687a      	ldr	r2, [r7, #4]
 800f71a:	4413      	add	r3, r2
 800f71c:	3304      	adds	r3, #4
 800f71e:	e00b      	b.n	800f738 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f720:	7bbb      	ldrb	r3, [r7, #14]
 800f722:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f726:	4613      	mov	r3, r2
 800f728:	009b      	lsls	r3, r3, #2
 800f72a:	4413      	add	r3, r2
 800f72c:	009b      	lsls	r3, r3, #2
 800f72e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f732:	687a      	ldr	r2, [r7, #4]
 800f734:	4413      	add	r3, r2
 800f736:	3304      	adds	r3, #4
 800f738:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f73a:	7bbb      	ldrb	r3, [r7, #14]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d002      	beq.n	800f746 <USBD_StdEPReq+0x264>
 800f740:	7bbb      	ldrb	r3, [r7, #14]
 800f742:	2b80      	cmp	r3, #128	; 0x80
 800f744:	d103      	bne.n	800f74e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f746:	68bb      	ldr	r3, [r7, #8]
 800f748:	2200      	movs	r2, #0
 800f74a:	601a      	str	r2, [r3, #0]
 800f74c:	e00e      	b.n	800f76c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f74e:	7bbb      	ldrb	r3, [r7, #14]
 800f750:	4619      	mov	r1, r3
 800f752:	6878      	ldr	r0, [r7, #4]
 800f754:	f003 ffc6 	bl	80136e4 <USBD_LL_IsStallEP>
 800f758:	4603      	mov	r3, r0
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d003      	beq.n	800f766 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	2201      	movs	r2, #1
 800f762:	601a      	str	r2, [r3, #0]
 800f764:	e002      	b.n	800f76c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	2200      	movs	r2, #0
 800f76a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	2202      	movs	r2, #2
 800f770:	4619      	mov	r1, r3
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f000 fbe1 	bl	800ff3a <USBD_CtlSendData>
              break;
 800f778:	e004      	b.n	800f784 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f77a:	6839      	ldr	r1, [r7, #0]
 800f77c:	6878      	ldr	r0, [r7, #4]
 800f77e:	f000 fb6b 	bl	800fe58 <USBD_CtlError>
              break;
 800f782:	bf00      	nop
          }
          break;
 800f784:	e004      	b.n	800f790 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f786:	6839      	ldr	r1, [r7, #0]
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f000 fb65 	bl	800fe58 <USBD_CtlError>
          break;
 800f78e:	bf00      	nop
      }
      break;
 800f790:	e004      	b.n	800f79c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f792:	6839      	ldr	r1, [r7, #0]
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f000 fb5f 	bl	800fe58 <USBD_CtlError>
      break;
 800f79a:	bf00      	nop
  }

  return ret;
 800f79c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3710      	adds	r7, #16
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}
	...

0800f7a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b084      	sub	sp, #16
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
 800f7b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	885b      	ldrh	r3, [r3, #2]
 800f7c2:	0a1b      	lsrs	r3, r3, #8
 800f7c4:	b29b      	uxth	r3, r3
 800f7c6:	3b01      	subs	r3, #1
 800f7c8:	2b0e      	cmp	r3, #14
 800f7ca:	f200 8152 	bhi.w	800fa72 <USBD_GetDescriptor+0x2ca>
 800f7ce:	a201      	add	r2, pc, #4	; (adr r2, 800f7d4 <USBD_GetDescriptor+0x2c>)
 800f7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7d4:	0800f845 	.word	0x0800f845
 800f7d8:	0800f85d 	.word	0x0800f85d
 800f7dc:	0800f89d 	.word	0x0800f89d
 800f7e0:	0800fa73 	.word	0x0800fa73
 800f7e4:	0800fa73 	.word	0x0800fa73
 800f7e8:	0800fa13 	.word	0x0800fa13
 800f7ec:	0800fa3f 	.word	0x0800fa3f
 800f7f0:	0800fa73 	.word	0x0800fa73
 800f7f4:	0800fa73 	.word	0x0800fa73
 800f7f8:	0800fa73 	.word	0x0800fa73
 800f7fc:	0800fa73 	.word	0x0800fa73
 800f800:	0800fa73 	.word	0x0800fa73
 800f804:	0800fa73 	.word	0x0800fa73
 800f808:	0800fa73 	.word	0x0800fa73
 800f80c:	0800f811 	.word	0x0800f811
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f816:	69db      	ldr	r3, [r3, #28]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d00b      	beq.n	800f834 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f822:	69db      	ldr	r3, [r3, #28]
 800f824:	687a      	ldr	r2, [r7, #4]
 800f826:	7c12      	ldrb	r2, [r2, #16]
 800f828:	f107 0108 	add.w	r1, r7, #8
 800f82c:	4610      	mov	r0, r2
 800f82e:	4798      	blx	r3
 800f830:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f832:	e126      	b.n	800fa82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f834:	6839      	ldr	r1, [r7, #0]
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f000 fb0e 	bl	800fe58 <USBD_CtlError>
        err++;
 800f83c:	7afb      	ldrb	r3, [r7, #11]
 800f83e:	3301      	adds	r3, #1
 800f840:	72fb      	strb	r3, [r7, #11]
      break;
 800f842:	e11e      	b.n	800fa82 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	687a      	ldr	r2, [r7, #4]
 800f84e:	7c12      	ldrb	r2, [r2, #16]
 800f850:	f107 0108 	add.w	r1, r7, #8
 800f854:	4610      	mov	r0, r2
 800f856:	4798      	blx	r3
 800f858:	60f8      	str	r0, [r7, #12]
      break;
 800f85a:	e112      	b.n	800fa82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	7c1b      	ldrb	r3, [r3, #16]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d10d      	bne.n	800f880 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f86a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f86c:	f107 0208 	add.w	r2, r7, #8
 800f870:	4610      	mov	r0, r2
 800f872:	4798      	blx	r3
 800f874:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	3301      	adds	r3, #1
 800f87a:	2202      	movs	r2, #2
 800f87c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f87e:	e100      	b.n	800fa82 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f888:	f107 0208 	add.w	r2, r7, #8
 800f88c:	4610      	mov	r0, r2
 800f88e:	4798      	blx	r3
 800f890:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	3301      	adds	r3, #1
 800f896:	2202      	movs	r2, #2
 800f898:	701a      	strb	r2, [r3, #0]
      break;
 800f89a:	e0f2      	b.n	800fa82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	885b      	ldrh	r3, [r3, #2]
 800f8a0:	b2db      	uxtb	r3, r3
 800f8a2:	2b05      	cmp	r3, #5
 800f8a4:	f200 80ac 	bhi.w	800fa00 <USBD_GetDescriptor+0x258>
 800f8a8:	a201      	add	r2, pc, #4	; (adr r2, 800f8b0 <USBD_GetDescriptor+0x108>)
 800f8aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8ae:	bf00      	nop
 800f8b0:	0800f8c9 	.word	0x0800f8c9
 800f8b4:	0800f8fd 	.word	0x0800f8fd
 800f8b8:	0800f931 	.word	0x0800f931
 800f8bc:	0800f965 	.word	0x0800f965
 800f8c0:	0800f999 	.word	0x0800f999
 800f8c4:	0800f9cd 	.word	0x0800f9cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8ce:	685b      	ldr	r3, [r3, #4]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d00b      	beq.n	800f8ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8da:	685b      	ldr	r3, [r3, #4]
 800f8dc:	687a      	ldr	r2, [r7, #4]
 800f8de:	7c12      	ldrb	r2, [r2, #16]
 800f8e0:	f107 0108 	add.w	r1, r7, #8
 800f8e4:	4610      	mov	r0, r2
 800f8e6:	4798      	blx	r3
 800f8e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f8ea:	e091      	b.n	800fa10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f8ec:	6839      	ldr	r1, [r7, #0]
 800f8ee:	6878      	ldr	r0, [r7, #4]
 800f8f0:	f000 fab2 	bl	800fe58 <USBD_CtlError>
            err++;
 800f8f4:	7afb      	ldrb	r3, [r7, #11]
 800f8f6:	3301      	adds	r3, #1
 800f8f8:	72fb      	strb	r3, [r7, #11]
          break;
 800f8fa:	e089      	b.n	800fa10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f902:	689b      	ldr	r3, [r3, #8]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d00b      	beq.n	800f920 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f90e:	689b      	ldr	r3, [r3, #8]
 800f910:	687a      	ldr	r2, [r7, #4]
 800f912:	7c12      	ldrb	r2, [r2, #16]
 800f914:	f107 0108 	add.w	r1, r7, #8
 800f918:	4610      	mov	r0, r2
 800f91a:	4798      	blx	r3
 800f91c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f91e:	e077      	b.n	800fa10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f920:	6839      	ldr	r1, [r7, #0]
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f000 fa98 	bl	800fe58 <USBD_CtlError>
            err++;
 800f928:	7afb      	ldrb	r3, [r7, #11]
 800f92a:	3301      	adds	r3, #1
 800f92c:	72fb      	strb	r3, [r7, #11]
          break;
 800f92e:	e06f      	b.n	800fa10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f936:	68db      	ldr	r3, [r3, #12]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d00b      	beq.n	800f954 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f942:	68db      	ldr	r3, [r3, #12]
 800f944:	687a      	ldr	r2, [r7, #4]
 800f946:	7c12      	ldrb	r2, [r2, #16]
 800f948:	f107 0108 	add.w	r1, r7, #8
 800f94c:	4610      	mov	r0, r2
 800f94e:	4798      	blx	r3
 800f950:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f952:	e05d      	b.n	800fa10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f954:	6839      	ldr	r1, [r7, #0]
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f000 fa7e 	bl	800fe58 <USBD_CtlError>
            err++;
 800f95c:	7afb      	ldrb	r3, [r7, #11]
 800f95e:	3301      	adds	r3, #1
 800f960:	72fb      	strb	r3, [r7, #11]
          break;
 800f962:	e055      	b.n	800fa10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f96a:	691b      	ldr	r3, [r3, #16]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d00b      	beq.n	800f988 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f976:	691b      	ldr	r3, [r3, #16]
 800f978:	687a      	ldr	r2, [r7, #4]
 800f97a:	7c12      	ldrb	r2, [r2, #16]
 800f97c:	f107 0108 	add.w	r1, r7, #8
 800f980:	4610      	mov	r0, r2
 800f982:	4798      	blx	r3
 800f984:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f986:	e043      	b.n	800fa10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f988:	6839      	ldr	r1, [r7, #0]
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f000 fa64 	bl	800fe58 <USBD_CtlError>
            err++;
 800f990:	7afb      	ldrb	r3, [r7, #11]
 800f992:	3301      	adds	r3, #1
 800f994:	72fb      	strb	r3, [r7, #11]
          break;
 800f996:	e03b      	b.n	800fa10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f99e:	695b      	ldr	r3, [r3, #20]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d00b      	beq.n	800f9bc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f9aa:	695b      	ldr	r3, [r3, #20]
 800f9ac:	687a      	ldr	r2, [r7, #4]
 800f9ae:	7c12      	ldrb	r2, [r2, #16]
 800f9b0:	f107 0108 	add.w	r1, r7, #8
 800f9b4:	4610      	mov	r0, r2
 800f9b6:	4798      	blx	r3
 800f9b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f9ba:	e029      	b.n	800fa10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f9bc:	6839      	ldr	r1, [r7, #0]
 800f9be:	6878      	ldr	r0, [r7, #4]
 800f9c0:	f000 fa4a 	bl	800fe58 <USBD_CtlError>
            err++;
 800f9c4:	7afb      	ldrb	r3, [r7, #11]
 800f9c6:	3301      	adds	r3, #1
 800f9c8:	72fb      	strb	r3, [r7, #11]
          break;
 800f9ca:	e021      	b.n	800fa10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f9d2:	699b      	ldr	r3, [r3, #24]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d00b      	beq.n	800f9f0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f9de:	699b      	ldr	r3, [r3, #24]
 800f9e0:	687a      	ldr	r2, [r7, #4]
 800f9e2:	7c12      	ldrb	r2, [r2, #16]
 800f9e4:	f107 0108 	add.w	r1, r7, #8
 800f9e8:	4610      	mov	r0, r2
 800f9ea:	4798      	blx	r3
 800f9ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f9ee:	e00f      	b.n	800fa10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f9f0:	6839      	ldr	r1, [r7, #0]
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f000 fa30 	bl	800fe58 <USBD_CtlError>
            err++;
 800f9f8:	7afb      	ldrb	r3, [r7, #11]
 800f9fa:	3301      	adds	r3, #1
 800f9fc:	72fb      	strb	r3, [r7, #11]
          break;
 800f9fe:	e007      	b.n	800fa10 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fa00:	6839      	ldr	r1, [r7, #0]
 800fa02:	6878      	ldr	r0, [r7, #4]
 800fa04:	f000 fa28 	bl	800fe58 <USBD_CtlError>
          err++;
 800fa08:	7afb      	ldrb	r3, [r7, #11]
 800fa0a:	3301      	adds	r3, #1
 800fa0c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800fa0e:	bf00      	nop
      }
      break;
 800fa10:	e037      	b.n	800fa82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	7c1b      	ldrb	r3, [r3, #16]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d109      	bne.n	800fa2e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa22:	f107 0208 	add.w	r2, r7, #8
 800fa26:	4610      	mov	r0, r2
 800fa28:	4798      	blx	r3
 800fa2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fa2c:	e029      	b.n	800fa82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fa2e:	6839      	ldr	r1, [r7, #0]
 800fa30:	6878      	ldr	r0, [r7, #4]
 800fa32:	f000 fa11 	bl	800fe58 <USBD_CtlError>
        err++;
 800fa36:	7afb      	ldrb	r3, [r7, #11]
 800fa38:	3301      	adds	r3, #1
 800fa3a:	72fb      	strb	r3, [r7, #11]
      break;
 800fa3c:	e021      	b.n	800fa82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	7c1b      	ldrb	r3, [r3, #16]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d10d      	bne.n	800fa62 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa4e:	f107 0208 	add.w	r2, r7, #8
 800fa52:	4610      	mov	r0, r2
 800fa54:	4798      	blx	r3
 800fa56:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	2207      	movs	r2, #7
 800fa5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fa60:	e00f      	b.n	800fa82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fa62:	6839      	ldr	r1, [r7, #0]
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f000 f9f7 	bl	800fe58 <USBD_CtlError>
        err++;
 800fa6a:	7afb      	ldrb	r3, [r7, #11]
 800fa6c:	3301      	adds	r3, #1
 800fa6e:	72fb      	strb	r3, [r7, #11]
      break;
 800fa70:	e007      	b.n	800fa82 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800fa72:	6839      	ldr	r1, [r7, #0]
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f000 f9ef 	bl	800fe58 <USBD_CtlError>
      err++;
 800fa7a:	7afb      	ldrb	r3, [r7, #11]
 800fa7c:	3301      	adds	r3, #1
 800fa7e:	72fb      	strb	r3, [r7, #11]
      break;
 800fa80:	bf00      	nop
  }

  if (err != 0U)
 800fa82:	7afb      	ldrb	r3, [r7, #11]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d11e      	bne.n	800fac6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	88db      	ldrh	r3, [r3, #6]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d016      	beq.n	800fabe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800fa90:	893b      	ldrh	r3, [r7, #8]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d00e      	beq.n	800fab4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800fa96:	683b      	ldr	r3, [r7, #0]
 800fa98:	88da      	ldrh	r2, [r3, #6]
 800fa9a:	893b      	ldrh	r3, [r7, #8]
 800fa9c:	4293      	cmp	r3, r2
 800fa9e:	bf28      	it	cs
 800faa0:	4613      	movcs	r3, r2
 800faa2:	b29b      	uxth	r3, r3
 800faa4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800faa6:	893b      	ldrh	r3, [r7, #8]
 800faa8:	461a      	mov	r2, r3
 800faaa:	68f9      	ldr	r1, [r7, #12]
 800faac:	6878      	ldr	r0, [r7, #4]
 800faae:	f000 fa44 	bl	800ff3a <USBD_CtlSendData>
 800fab2:	e009      	b.n	800fac8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fab4:	6839      	ldr	r1, [r7, #0]
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f000 f9ce 	bl	800fe58 <USBD_CtlError>
 800fabc:	e004      	b.n	800fac8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f000 fa95 	bl	800ffee <USBD_CtlSendStatus>
 800fac4:	e000      	b.n	800fac8 <USBD_GetDescriptor+0x320>
    return;
 800fac6:	bf00      	nop
  }
}
 800fac8:	3710      	adds	r7, #16
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}
 800face:	bf00      	nop

0800fad0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b084      	sub	sp, #16
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	889b      	ldrh	r3, [r3, #4]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d131      	bne.n	800fb46 <USBD_SetAddress+0x76>
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	88db      	ldrh	r3, [r3, #6]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d12d      	bne.n	800fb46 <USBD_SetAddress+0x76>
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	885b      	ldrh	r3, [r3, #2]
 800faee:	2b7f      	cmp	r3, #127	; 0x7f
 800faf0:	d829      	bhi.n	800fb46 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	885b      	ldrh	r3, [r3, #2]
 800faf6:	b2db      	uxtb	r3, r3
 800faf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fafc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb04:	b2db      	uxtb	r3, r3
 800fb06:	2b03      	cmp	r3, #3
 800fb08:	d104      	bne.n	800fb14 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fb0a:	6839      	ldr	r1, [r7, #0]
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	f000 f9a3 	bl	800fe58 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb12:	e01d      	b.n	800fb50 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	7bfa      	ldrb	r2, [r7, #15]
 800fb18:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fb1c:	7bfb      	ldrb	r3, [r7, #15]
 800fb1e:	4619      	mov	r1, r3
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f003 fe0c 	bl	801373e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f000 fa61 	bl	800ffee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fb2c:	7bfb      	ldrb	r3, [r7, #15]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d004      	beq.n	800fb3c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2202      	movs	r2, #2
 800fb36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb3a:	e009      	b.n	800fb50 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2201      	movs	r2, #1
 800fb40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb44:	e004      	b.n	800fb50 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fb46:	6839      	ldr	r1, [r7, #0]
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f000 f985 	bl	800fe58 <USBD_CtlError>
  }
}
 800fb4e:	bf00      	nop
 800fb50:	bf00      	nop
 800fb52:	3710      	adds	r7, #16
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}

0800fb58 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b084      	sub	sp, #16
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fb62:	2300      	movs	r3, #0
 800fb64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	885b      	ldrh	r3, [r3, #2]
 800fb6a:	b2da      	uxtb	r2, r3
 800fb6c:	4b4c      	ldr	r3, [pc, #304]	; (800fca0 <USBD_SetConfig+0x148>)
 800fb6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fb70:	4b4b      	ldr	r3, [pc, #300]	; (800fca0 <USBD_SetConfig+0x148>)
 800fb72:	781b      	ldrb	r3, [r3, #0]
 800fb74:	2b01      	cmp	r3, #1
 800fb76:	d905      	bls.n	800fb84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fb78:	6839      	ldr	r1, [r7, #0]
 800fb7a:	6878      	ldr	r0, [r7, #4]
 800fb7c:	f000 f96c 	bl	800fe58 <USBD_CtlError>
    return USBD_FAIL;
 800fb80:	2303      	movs	r3, #3
 800fb82:	e088      	b.n	800fc96 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb8a:	b2db      	uxtb	r3, r3
 800fb8c:	2b02      	cmp	r3, #2
 800fb8e:	d002      	beq.n	800fb96 <USBD_SetConfig+0x3e>
 800fb90:	2b03      	cmp	r3, #3
 800fb92:	d025      	beq.n	800fbe0 <USBD_SetConfig+0x88>
 800fb94:	e071      	b.n	800fc7a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fb96:	4b42      	ldr	r3, [pc, #264]	; (800fca0 <USBD_SetConfig+0x148>)
 800fb98:	781b      	ldrb	r3, [r3, #0]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d01c      	beq.n	800fbd8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800fb9e:	4b40      	ldr	r3, [pc, #256]	; (800fca0 <USBD_SetConfig+0x148>)
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	461a      	mov	r2, r3
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fba8:	4b3d      	ldr	r3, [pc, #244]	; (800fca0 <USBD_SetConfig+0x148>)
 800fbaa:	781b      	ldrb	r3, [r3, #0]
 800fbac:	4619      	mov	r1, r3
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	f7ff f992 	bl	800eed8 <USBD_SetClassConfig>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fbb8:	7bfb      	ldrb	r3, [r7, #15]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d004      	beq.n	800fbc8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800fbbe:	6839      	ldr	r1, [r7, #0]
 800fbc0:	6878      	ldr	r0, [r7, #4]
 800fbc2:	f000 f949 	bl	800fe58 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fbc6:	e065      	b.n	800fc94 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800fbc8:	6878      	ldr	r0, [r7, #4]
 800fbca:	f000 fa10 	bl	800ffee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	2203      	movs	r2, #3
 800fbd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fbd6:	e05d      	b.n	800fc94 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f000 fa08 	bl	800ffee <USBD_CtlSendStatus>
      break;
 800fbde:	e059      	b.n	800fc94 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fbe0:	4b2f      	ldr	r3, [pc, #188]	; (800fca0 <USBD_SetConfig+0x148>)
 800fbe2:	781b      	ldrb	r3, [r3, #0]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d112      	bne.n	800fc0e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2202      	movs	r2, #2
 800fbec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800fbf0:	4b2b      	ldr	r3, [pc, #172]	; (800fca0 <USBD_SetConfig+0x148>)
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	461a      	mov	r2, r3
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fbfa:	4b29      	ldr	r3, [pc, #164]	; (800fca0 <USBD_SetConfig+0x148>)
 800fbfc:	781b      	ldrb	r3, [r3, #0]
 800fbfe:	4619      	mov	r1, r3
 800fc00:	6878      	ldr	r0, [r7, #4]
 800fc02:	f7ff f985 	bl	800ef10 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f000 f9f1 	bl	800ffee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fc0c:	e042      	b.n	800fc94 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800fc0e:	4b24      	ldr	r3, [pc, #144]	; (800fca0 <USBD_SetConfig+0x148>)
 800fc10:	781b      	ldrb	r3, [r3, #0]
 800fc12:	461a      	mov	r2, r3
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	685b      	ldr	r3, [r3, #4]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d02a      	beq.n	800fc72 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	685b      	ldr	r3, [r3, #4]
 800fc20:	b2db      	uxtb	r3, r3
 800fc22:	4619      	mov	r1, r3
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f7ff f973 	bl	800ef10 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fc2a:	4b1d      	ldr	r3, [pc, #116]	; (800fca0 <USBD_SetConfig+0x148>)
 800fc2c:	781b      	ldrb	r3, [r3, #0]
 800fc2e:	461a      	mov	r2, r3
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fc34:	4b1a      	ldr	r3, [pc, #104]	; (800fca0 <USBD_SetConfig+0x148>)
 800fc36:	781b      	ldrb	r3, [r3, #0]
 800fc38:	4619      	mov	r1, r3
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f7ff f94c 	bl	800eed8 <USBD_SetClassConfig>
 800fc40:	4603      	mov	r3, r0
 800fc42:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fc44:	7bfb      	ldrb	r3, [r7, #15]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d00f      	beq.n	800fc6a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800fc4a:	6839      	ldr	r1, [r7, #0]
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f000 f903 	bl	800fe58 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	685b      	ldr	r3, [r3, #4]
 800fc56:	b2db      	uxtb	r3, r3
 800fc58:	4619      	mov	r1, r3
 800fc5a:	6878      	ldr	r0, [r7, #4]
 800fc5c:	f7ff f958 	bl	800ef10 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2202      	movs	r2, #2
 800fc64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fc68:	e014      	b.n	800fc94 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800fc6a:	6878      	ldr	r0, [r7, #4]
 800fc6c:	f000 f9bf 	bl	800ffee <USBD_CtlSendStatus>
      break;
 800fc70:	e010      	b.n	800fc94 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f000 f9bb 	bl	800ffee <USBD_CtlSendStatus>
      break;
 800fc78:	e00c      	b.n	800fc94 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800fc7a:	6839      	ldr	r1, [r7, #0]
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f000 f8eb 	bl	800fe58 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fc82:	4b07      	ldr	r3, [pc, #28]	; (800fca0 <USBD_SetConfig+0x148>)
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	4619      	mov	r1, r3
 800fc88:	6878      	ldr	r0, [r7, #4]
 800fc8a:	f7ff f941 	bl	800ef10 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fc8e:	2303      	movs	r3, #3
 800fc90:	73fb      	strb	r3, [r7, #15]
      break;
 800fc92:	bf00      	nop
  }

  return ret;
 800fc94:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc96:	4618      	mov	r0, r3
 800fc98:	3710      	adds	r7, #16
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}
 800fc9e:	bf00      	nop
 800fca0:	200007fc 	.word	0x200007fc

0800fca4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b082      	sub	sp, #8
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
 800fcac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	88db      	ldrh	r3, [r3, #6]
 800fcb2:	2b01      	cmp	r3, #1
 800fcb4:	d004      	beq.n	800fcc0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fcb6:	6839      	ldr	r1, [r7, #0]
 800fcb8:	6878      	ldr	r0, [r7, #4]
 800fcba:	f000 f8cd 	bl	800fe58 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fcbe:	e023      	b.n	800fd08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fcc6:	b2db      	uxtb	r3, r3
 800fcc8:	2b02      	cmp	r3, #2
 800fcca:	dc02      	bgt.n	800fcd2 <USBD_GetConfig+0x2e>
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	dc03      	bgt.n	800fcd8 <USBD_GetConfig+0x34>
 800fcd0:	e015      	b.n	800fcfe <USBD_GetConfig+0x5a>
 800fcd2:	2b03      	cmp	r3, #3
 800fcd4:	d00b      	beq.n	800fcee <USBD_GetConfig+0x4a>
 800fcd6:	e012      	b.n	800fcfe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	3308      	adds	r3, #8
 800fce2:	2201      	movs	r2, #1
 800fce4:	4619      	mov	r1, r3
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f000 f927 	bl	800ff3a <USBD_CtlSendData>
        break;
 800fcec:	e00c      	b.n	800fd08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	3304      	adds	r3, #4
 800fcf2:	2201      	movs	r2, #1
 800fcf4:	4619      	mov	r1, r3
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f000 f91f 	bl	800ff3a <USBD_CtlSendData>
        break;
 800fcfc:	e004      	b.n	800fd08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fcfe:	6839      	ldr	r1, [r7, #0]
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f000 f8a9 	bl	800fe58 <USBD_CtlError>
        break;
 800fd06:	bf00      	nop
}
 800fd08:	bf00      	nop
 800fd0a:	3708      	adds	r7, #8
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	bd80      	pop	{r7, pc}

0800fd10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b082      	sub	sp, #8
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
 800fd18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd20:	b2db      	uxtb	r3, r3
 800fd22:	3b01      	subs	r3, #1
 800fd24:	2b02      	cmp	r3, #2
 800fd26:	d81e      	bhi.n	800fd66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	88db      	ldrh	r3, [r3, #6]
 800fd2c:	2b02      	cmp	r3, #2
 800fd2e:	d004      	beq.n	800fd3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fd30:	6839      	ldr	r1, [r7, #0]
 800fd32:	6878      	ldr	r0, [r7, #4]
 800fd34:	f000 f890 	bl	800fe58 <USBD_CtlError>
        break;
 800fd38:	e01a      	b.n	800fd70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2201      	movs	r2, #1
 800fd3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d005      	beq.n	800fd56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	68db      	ldr	r3, [r3, #12]
 800fd4e:	f043 0202 	orr.w	r2, r3, #2
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	330c      	adds	r3, #12
 800fd5a:	2202      	movs	r2, #2
 800fd5c:	4619      	mov	r1, r3
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f000 f8eb 	bl	800ff3a <USBD_CtlSendData>
      break;
 800fd64:	e004      	b.n	800fd70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fd66:	6839      	ldr	r1, [r7, #0]
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f000 f875 	bl	800fe58 <USBD_CtlError>
      break;
 800fd6e:	bf00      	nop
  }
}
 800fd70:	bf00      	nop
 800fd72:	3708      	adds	r7, #8
 800fd74:	46bd      	mov	sp, r7
 800fd76:	bd80      	pop	{r7, pc}

0800fd78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b082      	sub	sp, #8
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
 800fd80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	885b      	ldrh	r3, [r3, #2]
 800fd86:	2b01      	cmp	r3, #1
 800fd88:	d106      	bne.n	800fd98 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2201      	movs	r2, #1
 800fd8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f000 f92b 	bl	800ffee <USBD_CtlSendStatus>
  }
}
 800fd98:	bf00      	nop
 800fd9a:	3708      	adds	r7, #8
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}

0800fda0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fdb0:	b2db      	uxtb	r3, r3
 800fdb2:	3b01      	subs	r3, #1
 800fdb4:	2b02      	cmp	r3, #2
 800fdb6:	d80b      	bhi.n	800fdd0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	885b      	ldrh	r3, [r3, #2]
 800fdbc:	2b01      	cmp	r3, #1
 800fdbe:	d10c      	bne.n	800fdda <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	f000 f910 	bl	800ffee <USBD_CtlSendStatus>
      }
      break;
 800fdce:	e004      	b.n	800fdda <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fdd0:	6839      	ldr	r1, [r7, #0]
 800fdd2:	6878      	ldr	r0, [r7, #4]
 800fdd4:	f000 f840 	bl	800fe58 <USBD_CtlError>
      break;
 800fdd8:	e000      	b.n	800fddc <USBD_ClrFeature+0x3c>
      break;
 800fdda:	bf00      	nop
  }
}
 800fddc:	bf00      	nop
 800fdde:	3708      	adds	r7, #8
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}

0800fde4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b084      	sub	sp, #16
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	781a      	ldrb	r2, [r3, #0]
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	3301      	adds	r3, #1
 800fdfe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	781a      	ldrb	r2, [r3, #0]
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	3301      	adds	r3, #1
 800fe0c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fe0e:	68f8      	ldr	r0, [r7, #12]
 800fe10:	f7ff fa92 	bl	800f338 <SWAPBYTE>
 800fe14:	4603      	mov	r3, r0
 800fe16:	461a      	mov	r2, r3
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	3301      	adds	r3, #1
 800fe20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	3301      	adds	r3, #1
 800fe26:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fe28:	68f8      	ldr	r0, [r7, #12]
 800fe2a:	f7ff fa85 	bl	800f338 <SWAPBYTE>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	461a      	mov	r2, r3
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	3301      	adds	r3, #1
 800fe3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	3301      	adds	r3, #1
 800fe40:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fe42:	68f8      	ldr	r0, [r7, #12]
 800fe44:	f7ff fa78 	bl	800f338 <SWAPBYTE>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	461a      	mov	r2, r3
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	80da      	strh	r2, [r3, #6]
}
 800fe50:	bf00      	nop
 800fe52:	3710      	adds	r7, #16
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}

0800fe58 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b082      	sub	sp, #8
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fe62:	2180      	movs	r1, #128	; 0x80
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f003 fbff 	bl	8013668 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fe6a:	2100      	movs	r1, #0
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f003 fbfb 	bl	8013668 <USBD_LL_StallEP>
}
 800fe72:	bf00      	nop
 800fe74:	3708      	adds	r7, #8
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}

0800fe7a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fe7a:	b580      	push	{r7, lr}
 800fe7c:	b086      	sub	sp, #24
 800fe7e:	af00      	add	r7, sp, #0
 800fe80:	60f8      	str	r0, [r7, #12]
 800fe82:	60b9      	str	r1, [r7, #8]
 800fe84:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fe86:	2300      	movs	r3, #0
 800fe88:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d036      	beq.n	800fefe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fe94:	6938      	ldr	r0, [r7, #16]
 800fe96:	f000 f836 	bl	800ff06 <USBD_GetLen>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	3301      	adds	r3, #1
 800fe9e:	b29b      	uxth	r3, r3
 800fea0:	005b      	lsls	r3, r3, #1
 800fea2:	b29a      	uxth	r2, r3
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fea8:	7dfb      	ldrb	r3, [r7, #23]
 800feaa:	68ba      	ldr	r2, [r7, #8]
 800feac:	4413      	add	r3, r2
 800feae:	687a      	ldr	r2, [r7, #4]
 800feb0:	7812      	ldrb	r2, [r2, #0]
 800feb2:	701a      	strb	r2, [r3, #0]
  idx++;
 800feb4:	7dfb      	ldrb	r3, [r7, #23]
 800feb6:	3301      	adds	r3, #1
 800feb8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800feba:	7dfb      	ldrb	r3, [r7, #23]
 800febc:	68ba      	ldr	r2, [r7, #8]
 800febe:	4413      	add	r3, r2
 800fec0:	2203      	movs	r2, #3
 800fec2:	701a      	strb	r2, [r3, #0]
  idx++;
 800fec4:	7dfb      	ldrb	r3, [r7, #23]
 800fec6:	3301      	adds	r3, #1
 800fec8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800feca:	e013      	b.n	800fef4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fecc:	7dfb      	ldrb	r3, [r7, #23]
 800fece:	68ba      	ldr	r2, [r7, #8]
 800fed0:	4413      	add	r3, r2
 800fed2:	693a      	ldr	r2, [r7, #16]
 800fed4:	7812      	ldrb	r2, [r2, #0]
 800fed6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fed8:	693b      	ldr	r3, [r7, #16]
 800feda:	3301      	adds	r3, #1
 800fedc:	613b      	str	r3, [r7, #16]
    idx++;
 800fede:	7dfb      	ldrb	r3, [r7, #23]
 800fee0:	3301      	adds	r3, #1
 800fee2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fee4:	7dfb      	ldrb	r3, [r7, #23]
 800fee6:	68ba      	ldr	r2, [r7, #8]
 800fee8:	4413      	add	r3, r2
 800feea:	2200      	movs	r2, #0
 800feec:	701a      	strb	r2, [r3, #0]
    idx++;
 800feee:	7dfb      	ldrb	r3, [r7, #23]
 800fef0:	3301      	adds	r3, #1
 800fef2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fef4:	693b      	ldr	r3, [r7, #16]
 800fef6:	781b      	ldrb	r3, [r3, #0]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d1e7      	bne.n	800fecc <USBD_GetString+0x52>
 800fefc:	e000      	b.n	800ff00 <USBD_GetString+0x86>
    return;
 800fefe:	bf00      	nop
  }
}
 800ff00:	3718      	adds	r7, #24
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}

0800ff06 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ff06:	b480      	push	{r7}
 800ff08:	b085      	sub	sp, #20
 800ff0a:	af00      	add	r7, sp, #0
 800ff0c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ff0e:	2300      	movs	r3, #0
 800ff10:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ff16:	e005      	b.n	800ff24 <USBD_GetLen+0x1e>
  {
    len++;
 800ff18:	7bfb      	ldrb	r3, [r7, #15]
 800ff1a:	3301      	adds	r3, #1
 800ff1c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	3301      	adds	r3, #1
 800ff22:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ff24:	68bb      	ldr	r3, [r7, #8]
 800ff26:	781b      	ldrb	r3, [r3, #0]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d1f5      	bne.n	800ff18 <USBD_GetLen+0x12>
  }

  return len;
 800ff2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3714      	adds	r7, #20
 800ff32:	46bd      	mov	sp, r7
 800ff34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff38:	4770      	bx	lr

0800ff3a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ff3a:	b580      	push	{r7, lr}
 800ff3c:	b084      	sub	sp, #16
 800ff3e:	af00      	add	r7, sp, #0
 800ff40:	60f8      	str	r0, [r7, #12]
 800ff42:	60b9      	str	r1, [r7, #8]
 800ff44:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	2202      	movs	r2, #2
 800ff4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	687a      	ldr	r2, [r7, #4]
 800ff58:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	68ba      	ldr	r2, [r7, #8]
 800ff5e:	2100      	movs	r1, #0
 800ff60:	68f8      	ldr	r0, [r7, #12]
 800ff62:	f003 fc0b 	bl	801377c <USBD_LL_Transmit>

  return USBD_OK;
 800ff66:	2300      	movs	r3, #0
}
 800ff68:	4618      	mov	r0, r3
 800ff6a:	3710      	adds	r7, #16
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}

0800ff70 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b084      	sub	sp, #16
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	60f8      	str	r0, [r7, #12]
 800ff78:	60b9      	str	r1, [r7, #8]
 800ff7a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	68ba      	ldr	r2, [r7, #8]
 800ff80:	2100      	movs	r1, #0
 800ff82:	68f8      	ldr	r0, [r7, #12]
 800ff84:	f003 fbfa 	bl	801377c <USBD_LL_Transmit>

  return USBD_OK;
 800ff88:	2300      	movs	r3, #0
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	3710      	adds	r7, #16
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd80      	pop	{r7, pc}

0800ff92 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ff92:	b580      	push	{r7, lr}
 800ff94:	b084      	sub	sp, #16
 800ff96:	af00      	add	r7, sp, #0
 800ff98:	60f8      	str	r0, [r7, #12]
 800ff9a:	60b9      	str	r1, [r7, #8]
 800ff9c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	2203      	movs	r2, #3
 800ffa2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	687a      	ldr	r2, [r7, #4]
 800ffaa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	687a      	ldr	r2, [r7, #4]
 800ffb2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	68ba      	ldr	r2, [r7, #8]
 800ffba:	2100      	movs	r1, #0
 800ffbc:	68f8      	ldr	r0, [r7, #12]
 800ffbe:	f003 fbfe 	bl	80137be <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ffc2:	2300      	movs	r3, #0
}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	3710      	adds	r7, #16
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}

0800ffcc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b084      	sub	sp, #16
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	60f8      	str	r0, [r7, #12]
 800ffd4:	60b9      	str	r1, [r7, #8]
 800ffd6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	68ba      	ldr	r2, [r7, #8]
 800ffdc:	2100      	movs	r1, #0
 800ffde:	68f8      	ldr	r0, [r7, #12]
 800ffe0:	f003 fbed 	bl	80137be <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ffe4:	2300      	movs	r3, #0
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	3710      	adds	r7, #16
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}

0800ffee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ffee:	b580      	push	{r7, lr}
 800fff0:	b082      	sub	sp, #8
 800fff2:	af00      	add	r7, sp, #0
 800fff4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2204      	movs	r2, #4
 800fffa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fffe:	2300      	movs	r3, #0
 8010000:	2200      	movs	r2, #0
 8010002:	2100      	movs	r1, #0
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	f003 fbb9 	bl	801377c <USBD_LL_Transmit>

  return USBD_OK;
 801000a:	2300      	movs	r3, #0
}
 801000c:	4618      	mov	r0, r3
 801000e:	3708      	adds	r7, #8
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}

08010014 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b082      	sub	sp, #8
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2205      	movs	r2, #5
 8010020:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010024:	2300      	movs	r3, #0
 8010026:	2200      	movs	r2, #0
 8010028:	2100      	movs	r1, #0
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f003 fbc7 	bl	80137be <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010030:	2300      	movs	r3, #0
}
 8010032:	4618      	mov	r0, r3
 8010034:	3708      	adds	r7, #8
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}

0801003a <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 801003a:	b580      	push	{r7, lr}
 801003c:	b088      	sub	sp, #32
 801003e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8010040:	2300      	movs	r3, #0
 8010042:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010044:	f107 0308 	add.w	r3, r7, #8
 8010048:	2218      	movs	r2, #24
 801004a:	2100      	movs	r1, #0
 801004c:	4618      	mov	r0, r3
 801004e:	f001 f8d8 	bl	8011202 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010052:	233f      	movs	r3, #63	; 0x3f
 8010054:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8010056:	2381      	movs	r3, #129	; 0x81
 8010058:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 801005a:	1dfb      	adds	r3, r7, #7
 801005c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 801005e:	2301      	movs	r3, #1
 8010060:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010062:	f107 0308 	add.w	r3, r7, #8
 8010066:	2100      	movs	r1, #0
 8010068:	4618      	mov	r0, r3
 801006a:	f001 fb53 	bl	8011714 <hci_send_req>
 801006e:	4603      	mov	r3, r0
 8010070:	2b00      	cmp	r3, #0
 8010072:	da01      	bge.n	8010078 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8010074:	23ff      	movs	r3, #255	; 0xff
 8010076:	e000      	b.n	801007a <aci_gap_set_non_discoverable+0x40>
  return status;
 8010078:	79fb      	ldrb	r3, [r7, #7]
}
 801007a:	4618      	mov	r0, r3
 801007c:	3720      	adds	r7, #32
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}

08010082 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8010082:	b5b0      	push	{r4, r5, r7, lr}
 8010084:	b0ce      	sub	sp, #312	; 0x138
 8010086:	af00      	add	r7, sp, #0
 8010088:	4605      	mov	r5, r0
 801008a:	460c      	mov	r4, r1
 801008c:	4610      	mov	r0, r2
 801008e:	4619      	mov	r1, r3
 8010090:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8010094:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8010098:	462a      	mov	r2, r5
 801009a:	701a      	strb	r2, [r3, #0]
 801009c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80100a0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80100a4:	4622      	mov	r2, r4
 80100a6:	801a      	strh	r2, [r3, #0]
 80100a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80100ac:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80100b0:	4602      	mov	r2, r0
 80100b2:	801a      	strh	r2, [r3, #0]
 80100b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80100b8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80100bc:	460a      	mov	r2, r1
 80100be:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80100c0:	f107 0310 	add.w	r3, r7, #16
 80100c4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80100c8:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80100cc:	3308      	adds	r3, #8
 80100ce:	f107 0210 	add.w	r2, r7, #16
 80100d2:	4413      	add	r3, r2
 80100d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80100d8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80100dc:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80100e0:	4413      	add	r3, r2
 80100e2:	3309      	adds	r3, #9
 80100e4:	f107 0210 	add.w	r2, r7, #16
 80100e8:	4413      	add	r3, r2
 80100ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80100ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80100f2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80100f6:	2200      	movs	r2, #0
 80100f8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80100fa:	2300      	movs	r3, #0
 80100fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8010100:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010104:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8010108:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 801010c:	7812      	ldrb	r2, [r2, #0]
 801010e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010110:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010114:	3301      	adds	r3, #1
 8010116:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 801011a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801011e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8010122:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8010126:	8812      	ldrh	r2, [r2, #0]
 8010128:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 801012c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010130:	3302      	adds	r3, #2
 8010132:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8010136:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801013a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801013e:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8010142:	8812      	ldrh	r2, [r2, #0]
 8010144:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8010148:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801014c:	3302      	adds	r3, #2
 801014e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8010152:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010156:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801015a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 801015e:	7812      	ldrb	r2, [r2, #0]
 8010160:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8010162:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010166:	3301      	adds	r3, #1
 8010168:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 801016c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010170:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8010174:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8010176:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801017a:	3301      	adds	r3, #1
 801017c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8010180:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010184:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8010188:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 801018a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801018e:	3301      	adds	r3, #1
 8010190:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8010194:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010198:	3308      	adds	r3, #8
 801019a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 801019e:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80101a2:	4618      	mov	r0, r3
 80101a4:	f001 f81d 	bl	80111e2 <Osal_MemCpy>
    index_input += Local_Name_Length;
 80101a8:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80101ac:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80101b0:	4413      	add	r3, r2
 80101b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80101b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80101ba:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80101be:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80101c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80101c4:	3301      	adds	r3, #1
 80101c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80101ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80101ce:	3301      	adds	r3, #1
 80101d0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80101d4:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80101d8:	4618      	mov	r0, r3
 80101da:	f001 f802 	bl	80111e2 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80101de:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80101e2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80101e6:	4413      	add	r3, r2
 80101e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 80101ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80101f0:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80101f4:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80101f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80101fa:	3302      	adds	r3, #2
 80101fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8010200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010204:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8010208:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 801020a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801020e:	3302      	adds	r3, #2
 8010210:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010214:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010218:	2218      	movs	r2, #24
 801021a:	2100      	movs	r1, #0
 801021c:	4618      	mov	r0, r3
 801021e:	f000 fff0 	bl	8011202 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010222:	233f      	movs	r3, #63	; 0x3f
 8010224:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8010228:	2383      	movs	r3, #131	; 0x83
 801022a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 801022e:	f107 0310 	add.w	r3, r7, #16
 8010232:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8010236:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801023a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 801023e:	f107 030f 	add.w	r3, r7, #15
 8010242:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8010246:	2301      	movs	r3, #1
 8010248:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801024c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010250:	2100      	movs	r1, #0
 8010252:	4618      	mov	r0, r3
 8010254:	f001 fa5e 	bl	8011714 <hci_send_req>
 8010258:	4603      	mov	r3, r0
 801025a:	2b00      	cmp	r3, #0
 801025c:	da01      	bge.n	8010262 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 801025e:	23ff      	movs	r3, #255	; 0xff
 8010260:	e004      	b.n	801026c <aci_gap_set_discoverable+0x1ea>
  return status;
 8010262:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8010266:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 801026a:	781b      	ldrb	r3, [r3, #0]
}
 801026c:	4618      	mov	r0, r3
 801026e:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8010272:	46bd      	mov	sp, r7
 8010274:	bdb0      	pop	{r4, r5, r7, pc}

08010276 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8010276:	b580      	push	{r7, lr}
 8010278:	b0cc      	sub	sp, #304	; 0x130
 801027a:	af00      	add	r7, sp, #0
 801027c:	4602      	mov	r2, r0
 801027e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010282:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8010286:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8010288:	f107 0310 	add.w	r3, r7, #16
 801028c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8010290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010294:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010298:	2200      	movs	r2, #0
 801029a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801029c:	2300      	movs	r3, #0
 801029e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80102a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80102a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80102aa:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80102ae:	7812      	ldrb	r2, [r2, #0]
 80102b0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80102b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80102b6:	3301      	adds	r3, #1
 80102b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80102bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80102c0:	2218      	movs	r2, #24
 80102c2:	2100      	movs	r1, #0
 80102c4:	4618      	mov	r0, r3
 80102c6:	f000 ff9c 	bl	8011202 <Osal_MemSet>
  rq.ogf = 0x3f;
 80102ca:	233f      	movs	r3, #63	; 0x3f
 80102cc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80102d0:	2385      	movs	r3, #133	; 0x85
 80102d2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80102d6:	f107 0310 	add.w	r3, r7, #16
 80102da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80102de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80102e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80102e6:	f107 030f 	add.w	r3, r7, #15
 80102ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80102ee:	2301      	movs	r3, #1
 80102f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80102f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80102f8:	2100      	movs	r1, #0
 80102fa:	4618      	mov	r0, r3
 80102fc:	f001 fa0a 	bl	8011714 <hci_send_req>
 8010300:	4603      	mov	r3, r0
 8010302:	2b00      	cmp	r3, #0
 8010304:	da01      	bge.n	801030a <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8010306:	23ff      	movs	r3, #255	; 0xff
 8010308:	e004      	b.n	8010314 <aci_gap_set_io_capability+0x9e>
  return status;
 801030a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801030e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010312:	781b      	ldrb	r3, [r3, #0]
}
 8010314:	4618      	mov	r0, r3
 8010316:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801031a:	46bd      	mov	sp, r7
 801031c:	bd80      	pop	{r7, pc}

0801031e <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 801031e:	b5b0      	push	{r4, r5, r7, lr}
 8010320:	b0cc      	sub	sp, #304	; 0x130
 8010322:	af00      	add	r7, sp, #0
 8010324:	4605      	mov	r5, r0
 8010326:	460c      	mov	r4, r1
 8010328:	4610      	mov	r0, r2
 801032a:	4619      	mov	r1, r3
 801032c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010330:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8010334:	462a      	mov	r2, r5
 8010336:	701a      	strb	r2, [r3, #0]
 8010338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801033c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8010340:	4622      	mov	r2, r4
 8010342:	701a      	strb	r2, [r3, #0]
 8010344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010348:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 801034c:	4602      	mov	r2, r0
 801034e:	701a      	strb	r2, [r3, #0]
 8010350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010354:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010358:	460a      	mov	r2, r1
 801035a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 801035c:	f107 0310 	add.w	r3, r7, #16
 8010360:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8010364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010368:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801036c:	2200      	movs	r2, #0
 801036e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010370:	2300      	movs	r3, #0
 8010372:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8010376:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801037a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801037e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8010382:	7812      	ldrb	r2, [r2, #0]
 8010384:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010386:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801038a:	3301      	adds	r3, #1
 801038c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8010390:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010394:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010398:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 801039c:	7812      	ldrb	r2, [r2, #0]
 801039e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80103a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80103a4:	3301      	adds	r3, #1
 80103a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80103aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80103ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80103b2:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80103b6:	7812      	ldrb	r2, [r2, #0]
 80103b8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80103ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80103be:	3301      	adds	r3, #1
 80103c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80103c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80103c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80103cc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80103d0:	7812      	ldrb	r2, [r2, #0]
 80103d2:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80103d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80103d8:	3301      	adds	r3, #1
 80103da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80103de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80103e2:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80103e6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80103e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80103ec:	3301      	adds	r3, #1
 80103ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80103f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80103f6:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80103fa:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80103fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010400:	3301      	adds	r3, #1
 8010402:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8010406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801040a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 801040e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8010410:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010414:	3301      	adds	r3, #1
 8010416:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 801041a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801041e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8010422:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8010426:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801042a:	3304      	adds	r3, #4
 801042c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8010430:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010434:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8010438:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 801043a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801043e:	3301      	adds	r3, #1
 8010440:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010444:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010448:	2218      	movs	r2, #24
 801044a:	2100      	movs	r1, #0
 801044c:	4618      	mov	r0, r3
 801044e:	f000 fed8 	bl	8011202 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010452:	233f      	movs	r3, #63	; 0x3f
 8010454:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8010458:	2386      	movs	r3, #134	; 0x86
 801045a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 801045e:	f107 0310 	add.w	r3, r7, #16
 8010462:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8010466:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801046a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 801046e:	f107 030f 	add.w	r3, r7, #15
 8010472:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8010476:	2301      	movs	r3, #1
 8010478:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801047c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010480:	2100      	movs	r1, #0
 8010482:	4618      	mov	r0, r3
 8010484:	f001 f946 	bl	8011714 <hci_send_req>
 8010488:	4603      	mov	r3, r0
 801048a:	2b00      	cmp	r3, #0
 801048c:	da01      	bge.n	8010492 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 801048e:	23ff      	movs	r3, #255	; 0xff
 8010490:	e004      	b.n	801049c <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8010492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010496:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801049a:	781b      	ldrb	r3, [r3, #0]
}
 801049c:	4618      	mov	r0, r3
 801049e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bdb0      	pop	{r4, r5, r7, pc}

080104a6 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80104a6:	b580      	push	{r7, lr}
 80104a8:	b0cc      	sub	sp, #304	; 0x130
 80104aa:	af00      	add	r7, sp, #0
 80104ac:	4602      	mov	r2, r0
 80104ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80104b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80104b6:	6019      	str	r1, [r3, #0]
 80104b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80104bc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80104c0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80104c2:	f107 0310 	add.w	r3, r7, #16
 80104c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80104ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80104ce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80104d2:	2200      	movs	r2, #0
 80104d4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80104d6:	2300      	movs	r3, #0
 80104d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80104dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80104e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80104e4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80104e8:	8812      	ldrh	r2, [r2, #0]
 80104ea:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80104ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80104f0:	3302      	adds	r3, #2
 80104f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 80104f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80104fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80104fe:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8010502:	6812      	ldr	r2, [r2, #0]
 8010504:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8010508:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801050c:	3304      	adds	r3, #4
 801050e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010512:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010516:	2218      	movs	r2, #24
 8010518:	2100      	movs	r1, #0
 801051a:	4618      	mov	r0, r3
 801051c:	f000 fe71 	bl	8011202 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010520:	233f      	movs	r3, #63	; 0x3f
 8010522:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8010526:	2388      	movs	r3, #136	; 0x88
 8010528:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 801052c:	f107 0310 	add.w	r3, r7, #16
 8010530:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8010534:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010538:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 801053c:	f107 030f 	add.w	r3, r7, #15
 8010540:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8010544:	2301      	movs	r3, #1
 8010546:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801054a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801054e:	2100      	movs	r1, #0
 8010550:	4618      	mov	r0, r3
 8010552:	f001 f8df 	bl	8011714 <hci_send_req>
 8010556:	4603      	mov	r3, r0
 8010558:	2b00      	cmp	r3, #0
 801055a:	da01      	bge.n	8010560 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 801055c:	23ff      	movs	r3, #255	; 0xff
 801055e:	e004      	b.n	801056a <aci_gap_pass_key_resp+0xc4>
  return status;
 8010560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010564:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010568:	781b      	ldrb	r3, [r3, #0]
}
 801056a:	4618      	mov	r0, r3
 801056c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}

08010574 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8010574:	b590      	push	{r4, r7, lr}
 8010576:	b0cd      	sub	sp, #308	; 0x134
 8010578:	af00      	add	r7, sp, #0
 801057a:	4604      	mov	r4, r0
 801057c:	4608      	mov	r0, r1
 801057e:	4611      	mov	r1, r2
 8010580:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010584:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8010588:	6013      	str	r3, [r2, #0]
 801058a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801058e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8010592:	4622      	mov	r2, r4
 8010594:	701a      	strb	r2, [r3, #0]
 8010596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801059a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801059e:	4602      	mov	r2, r0
 80105a0:	701a      	strb	r2, [r3, #0]
 80105a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80105a6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80105aa:	460a      	mov	r2, r1
 80105ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80105ae:	f107 0310 	add.w	r3, r7, #16
 80105b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80105b6:	f107 0308 	add.w	r3, r7, #8
 80105ba:	2207      	movs	r2, #7
 80105bc:	2100      	movs	r1, #0
 80105be:	4618      	mov	r0, r3
 80105c0:	f000 fe1f 	bl	8011202 <Osal_MemSet>
  int index_input = 0;
 80105c4:	2300      	movs	r3, #0
 80105c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80105ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80105ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80105d2:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80105d6:	7812      	ldrb	r2, [r2, #0]
 80105d8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80105da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80105de:	3301      	adds	r3, #1
 80105e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80105e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80105e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80105ec:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80105f0:	7812      	ldrb	r2, [r2, #0]
 80105f2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80105f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80105f8:	3301      	adds	r3, #1
 80105fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 80105fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010602:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010606:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 801060a:	7812      	ldrb	r2, [r2, #0]
 801060c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801060e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010612:	3301      	adds	r3, #1
 8010614:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010618:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801061c:	2218      	movs	r2, #24
 801061e:	2100      	movs	r1, #0
 8010620:	4618      	mov	r0, r3
 8010622:	f000 fdee 	bl	8011202 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010626:	233f      	movs	r3, #63	; 0x3f
 8010628:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 801062c:	238a      	movs	r3, #138	; 0x8a
 801062e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8010632:	f107 0310 	add.w	r3, r7, #16
 8010636:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801063a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801063e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8010642:	f107 0308 	add.w	r3, r7, #8
 8010646:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 801064a:	2307      	movs	r3, #7
 801064c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010650:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010654:	2100      	movs	r1, #0
 8010656:	4618      	mov	r0, r3
 8010658:	f001 f85c 	bl	8011714 <hci_send_req>
 801065c:	4603      	mov	r3, r0
 801065e:	2b00      	cmp	r3, #0
 8010660:	da01      	bge.n	8010666 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8010662:	23ff      	movs	r3, #255	; 0xff
 8010664:	e02e      	b.n	80106c4 <aci_gap_init+0x150>
  if ( resp.Status )
 8010666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801066a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801066e:	781b      	ldrb	r3, [r3, #0]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d005      	beq.n	8010680 <aci_gap_init+0x10c>
    return resp.Status;
 8010674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010678:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801067c:	781b      	ldrb	r3, [r3, #0]
 801067e:	e021      	b.n	80106c4 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8010680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010684:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010688:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801068c:	b29a      	uxth	r2, r3
 801068e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 801069a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801069e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80106a2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80106a6:	b29a      	uxth	r2, r3
 80106a8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80106ac:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80106ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80106b2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80106b6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80106ba:	b29a      	uxth	r2, r3
 80106bc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80106c0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80106c2:	2300      	movs	r3, #0
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd90      	pop	{r4, r7, pc}

080106ce <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80106ce:	b580      	push	{r7, lr}
 80106d0:	b0cc      	sub	sp, #304	; 0x130
 80106d2:	af00      	add	r7, sp, #0
 80106d4:	4602      	mov	r2, r0
 80106d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80106da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80106de:	6019      	str	r1, [r3, #0]
 80106e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80106e4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80106e8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80106ea:	f107 0310 	add.w	r3, r7, #16
 80106ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80106f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80106f6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80106fa:	2200      	movs	r2, #0
 80106fc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80106fe:	2300      	movs	r3, #0
 8010700:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8010704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010708:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801070c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8010710:	7812      	ldrb	r2, [r2, #0]
 8010712:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010714:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010718:	3301      	adds	r3, #1
 801071a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 801071e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010722:	1c58      	adds	r0, r3, #1
 8010724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010728:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 801072c:	781a      	ldrb	r2, [r3, #0]
 801072e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010732:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8010736:	6819      	ldr	r1, [r3, #0]
 8010738:	f000 fd53 	bl	80111e2 <Osal_MemCpy>
  index_input += AdvDataLen;
 801073c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010740:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8010744:	781b      	ldrb	r3, [r3, #0]
 8010746:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801074a:	4413      	add	r3, r2
 801074c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010750:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010754:	2218      	movs	r2, #24
 8010756:	2100      	movs	r1, #0
 8010758:	4618      	mov	r0, r3
 801075a:	f000 fd52 	bl	8011202 <Osal_MemSet>
  rq.ogf = 0x3f;
 801075e:	233f      	movs	r3, #63	; 0x3f
 8010760:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8010764:	238e      	movs	r3, #142	; 0x8e
 8010766:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 801076a:	f107 0310 	add.w	r3, r7, #16
 801076e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8010772:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010776:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 801077a:	f107 030f 	add.w	r3, r7, #15
 801077e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8010782:	2301      	movs	r3, #1
 8010784:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010788:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801078c:	2100      	movs	r1, #0
 801078e:	4618      	mov	r0, r3
 8010790:	f000 ffc0 	bl	8011714 <hci_send_req>
 8010794:	4603      	mov	r3, r0
 8010796:	2b00      	cmp	r3, #0
 8010798:	da01      	bge.n	801079e <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 801079a:	23ff      	movs	r3, #255	; 0xff
 801079c:	e004      	b.n	80107a8 <aci_gap_update_adv_data+0xda>
  return status;
 801079e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80107a2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80107a6:	781b      	ldrb	r3, [r3, #0]
}
 80107a8:	4618      	mov	r0, r3
 80107aa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bd80      	pop	{r7, pc}

080107b2 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80107b2:	b580      	push	{r7, lr}
 80107b4:	b088      	sub	sp, #32
 80107b6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80107b8:	2300      	movs	r3, #0
 80107ba:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80107bc:	f107 0308 	add.w	r3, r7, #8
 80107c0:	2218      	movs	r2, #24
 80107c2:	2100      	movs	r1, #0
 80107c4:	4618      	mov	r0, r3
 80107c6:	f000 fd1c 	bl	8011202 <Osal_MemSet>
  rq.ogf = 0x3f;
 80107ca:	233f      	movs	r3, #63	; 0x3f
 80107cc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80107ce:	2392      	movs	r3, #146	; 0x92
 80107d0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80107d2:	1dfb      	adds	r3, r7, #7
 80107d4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80107d6:	2301      	movs	r3, #1
 80107d8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80107da:	f107 0308 	add.w	r3, r7, #8
 80107de:	2100      	movs	r1, #0
 80107e0:	4618      	mov	r0, r3
 80107e2:	f000 ff97 	bl	8011714 <hci_send_req>
 80107e6:	4603      	mov	r3, r0
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	da01      	bge.n	80107f0 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 80107ec:	23ff      	movs	r3, #255	; 0xff
 80107ee:	e000      	b.n	80107f2 <aci_gap_configure_whitelist+0x40>
  return status;
 80107f0:	79fb      	ldrb	r3, [r7, #7]
}
 80107f2:	4618      	mov	r0, r3
 80107f4:	3720      	adds	r7, #32
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd80      	pop	{r7, pc}

080107fa <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80107fa:	b580      	push	{r7, lr}
 80107fc:	b0cc      	sub	sp, #304	; 0x130
 80107fe:	af00      	add	r7, sp, #0
 8010800:	4602      	mov	r2, r0
 8010802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010806:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801080a:	801a      	strh	r2, [r3, #0]
 801080c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010810:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8010814:	460a      	mov	r2, r1
 8010816:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8010818:	f107 0310 	add.w	r3, r7, #16
 801081c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8010820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010824:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010828:	2200      	movs	r2, #0
 801082a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801082c:	2300      	movs	r3, #0
 801082e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8010832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010836:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801083a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 801083e:	8812      	ldrh	r2, [r2, #0]
 8010840:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010842:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010846:	3302      	adds	r3, #2
 8010848:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 801084c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010850:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010854:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8010858:	7812      	ldrb	r2, [r2, #0]
 801085a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801085c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010860:	3301      	adds	r3, #1
 8010862:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010866:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801086a:	2218      	movs	r2, #24
 801086c:	2100      	movs	r1, #0
 801086e:	4618      	mov	r0, r3
 8010870:	f000 fcc7 	bl	8011202 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010874:	233f      	movs	r3, #63	; 0x3f
 8010876:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 801087a:	23a5      	movs	r3, #165	; 0xa5
 801087c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8010880:	f107 0310 	add.w	r3, r7, #16
 8010884:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8010888:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801088c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8010890:	f107 030f 	add.w	r3, r7, #15
 8010894:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8010898:	2301      	movs	r3, #1
 801089a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801089e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80108a2:	2100      	movs	r1, #0
 80108a4:	4618      	mov	r0, r3
 80108a6:	f000 ff35 	bl	8011714 <hci_send_req>
 80108aa:	4603      	mov	r3, r0
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	da01      	bge.n	80108b4 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80108b0:	23ff      	movs	r3, #255	; 0xff
 80108b2:	e004      	b.n	80108be <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80108b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80108b8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80108bc:	781b      	ldrb	r3, [r3, #0]
}
 80108be:	4618      	mov	r0, r3
 80108c0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}

080108c8 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b088      	sub	sp, #32
 80108cc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80108ce:	2300      	movs	r3, #0
 80108d0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80108d2:	f107 0308 	add.w	r3, r7, #8
 80108d6:	2218      	movs	r2, #24
 80108d8:	2100      	movs	r1, #0
 80108da:	4618      	mov	r0, r3
 80108dc:	f000 fc91 	bl	8011202 <Osal_MemSet>
  rq.ogf = 0x3f;
 80108e0:	233f      	movs	r3, #63	; 0x3f
 80108e2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80108e4:	f240 1301 	movw	r3, #257	; 0x101
 80108e8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80108ea:	1dfb      	adds	r3, r7, #7
 80108ec:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80108ee:	2301      	movs	r3, #1
 80108f0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80108f2:	f107 0308 	add.w	r3, r7, #8
 80108f6:	2100      	movs	r1, #0
 80108f8:	4618      	mov	r0, r3
 80108fa:	f000 ff0b 	bl	8011714 <hci_send_req>
 80108fe:	4603      	mov	r3, r0
 8010900:	2b00      	cmp	r3, #0
 8010902:	da01      	bge.n	8010908 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8010904:	23ff      	movs	r3, #255	; 0xff
 8010906:	e000      	b.n	801090a <aci_gatt_init+0x42>
  return status;
 8010908:	79fb      	ldrb	r3, [r7, #7]
}
 801090a:	4618      	mov	r0, r3
 801090c:	3720      	adds	r7, #32
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}

08010912 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8010912:	b590      	push	{r4, r7, lr}
 8010914:	b0cf      	sub	sp, #316	; 0x13c
 8010916:	af00      	add	r7, sp, #0
 8010918:	4604      	mov	r4, r0
 801091a:	f507 709c 	add.w	r0, r7, #312	; 0x138
 801091e:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8010922:	6001      	str	r1, [r0, #0]
 8010924:	4610      	mov	r0, r2
 8010926:	4619      	mov	r1, r3
 8010928:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801092c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8010930:	4622      	mov	r2, r4
 8010932:	701a      	strb	r2, [r3, #0]
 8010934:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8010938:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801093c:	4602      	mov	r2, r0
 801093e:	701a      	strb	r2, [r3, #0]
 8010940:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8010944:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8010948:	460a      	mov	r2, r1
 801094a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 801094c:	f107 0310 	add.w	r3, r7, #16
 8010950:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8010954:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8010958:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 801095c:	781b      	ldrb	r3, [r3, #0]
 801095e:	2b01      	cmp	r3, #1
 8010960:	d00a      	beq.n	8010978 <aci_gatt_add_service+0x66>
 8010962:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8010966:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 801096a:	781b      	ldrb	r3, [r3, #0]
 801096c:	2b02      	cmp	r3, #2
 801096e:	d101      	bne.n	8010974 <aci_gatt_add_service+0x62>
 8010970:	2311      	movs	r3, #17
 8010972:	e002      	b.n	801097a <aci_gatt_add_service+0x68>
 8010974:	2301      	movs	r3, #1
 8010976:	e000      	b.n	801097a <aci_gatt_add_service+0x68>
 8010978:	2303      	movs	r3, #3
 801097a:	f107 0210 	add.w	r2, r7, #16
 801097e:	4413      	add	r3, r2
 8010980:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8010984:	f107 030c 	add.w	r3, r7, #12
 8010988:	2203      	movs	r2, #3
 801098a:	2100      	movs	r1, #0
 801098c:	4618      	mov	r0, r3
 801098e:	f000 fc38 	bl	8011202 <Osal_MemSet>
  int index_input = 0;
 8010992:	2300      	movs	r3, #0
 8010994:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8010998:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801099c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80109a0:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80109a4:	7812      	ldrb	r2, [r2, #0]
 80109a6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80109a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80109ac:	3301      	adds	r3, #1
 80109ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80109b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80109b6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80109ba:	781b      	ldrb	r3, [r3, #0]
 80109bc:	2b01      	cmp	r3, #1
 80109be:	d002      	beq.n	80109c6 <aci_gatt_add_service+0xb4>
 80109c0:	2b02      	cmp	r3, #2
 80109c2:	d004      	beq.n	80109ce <aci_gatt_add_service+0xbc>
 80109c4:	e007      	b.n	80109d6 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80109c6:	2302      	movs	r3, #2
 80109c8:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80109cc:	e005      	b.n	80109da <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80109ce:	2310      	movs	r3, #16
 80109d0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80109d4:	e001      	b.n	80109da <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80109d6:	2397      	movs	r3, #151	; 0x97
 80109d8:	e06c      	b.n	8010ab4 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80109da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80109de:	1c58      	adds	r0, r3, #1
 80109e0:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80109e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80109e8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80109ec:	6819      	ldr	r1, [r3, #0]
 80109ee:	f000 fbf8 	bl	80111e2 <Osal_MemCpy>
    index_input += size;
 80109f2:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80109f6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80109fa:	4413      	add	r3, r2
 80109fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8010a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010a04:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8010a08:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8010a0c:	7812      	ldrb	r2, [r2, #0]
 8010a0e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8010a10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010a14:	3301      	adds	r3, #1
 8010a16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8010a1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010a1e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8010a22:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8010a26:	7812      	ldrb	r2, [r2, #0]
 8010a28:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8010a2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010a2e:	3301      	adds	r3, #1
 8010a30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010a34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a38:	2218      	movs	r2, #24
 8010a3a:	2100      	movs	r1, #0
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f000 fbe0 	bl	8011202 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010a42:	233f      	movs	r3, #63	; 0x3f
 8010a44:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8010a48:	f44f 7381 	mov.w	r3, #258	; 0x102
 8010a4c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8010a50:	f107 0310 	add.w	r3, r7, #16
 8010a54:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8010a58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010a5c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8010a60:	f107 030c 	add.w	r3, r7, #12
 8010a64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8010a68:	2303      	movs	r3, #3
 8010a6a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010a6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a72:	2100      	movs	r1, #0
 8010a74:	4618      	mov	r0, r3
 8010a76:	f000 fe4d 	bl	8011714 <hci_send_req>
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	da01      	bge.n	8010a84 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8010a80:	23ff      	movs	r3, #255	; 0xff
 8010a82:	e017      	b.n	8010ab4 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8010a84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8010a88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010a8c:	781b      	ldrb	r3, [r3, #0]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d005      	beq.n	8010a9e <aci_gatt_add_service+0x18c>
    return resp.Status;
 8010a92:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8010a96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010a9a:	781b      	ldrb	r3, [r3, #0]
 8010a9c:	e00a      	b.n	8010ab4 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8010a9e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8010aa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010aa6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010aaa:	b29a      	uxth	r2, r3
 8010aac:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010ab0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8010ab2:	2300      	movs	r3, #0
}
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bd90      	pop	{r4, r7, pc}

08010abe <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8010abe:	b590      	push	{r4, r7, lr}
 8010ac0:	b0d1      	sub	sp, #324	; 0x144
 8010ac2:	af00      	add	r7, sp, #0
 8010ac4:	4604      	mov	r4, r0
 8010ac6:	4608      	mov	r0, r1
 8010ac8:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8010acc:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8010ad0:	600a      	str	r2, [r1, #0]
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010ad8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8010adc:	4622      	mov	r2, r4
 8010ade:	801a      	strh	r2, [r3, #0]
 8010ae0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010ae4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8010ae8:	4602      	mov	r2, r0
 8010aea:	701a      	strb	r2, [r3, #0]
 8010aec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010af0:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8010af4:	460a      	mov	r2, r1
 8010af6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8010af8:	f107 0318 	add.w	r3, r7, #24
 8010afc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8010b00:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010b04:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8010b08:	781b      	ldrb	r3, [r3, #0]
 8010b0a:	2b01      	cmp	r3, #1
 8010b0c:	d00a      	beq.n	8010b24 <aci_gatt_add_char+0x66>
 8010b0e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010b12:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8010b16:	781b      	ldrb	r3, [r3, #0]
 8010b18:	2b02      	cmp	r3, #2
 8010b1a:	d101      	bne.n	8010b20 <aci_gatt_add_char+0x62>
 8010b1c:	2313      	movs	r3, #19
 8010b1e:	e002      	b.n	8010b26 <aci_gatt_add_char+0x68>
 8010b20:	2303      	movs	r3, #3
 8010b22:	e000      	b.n	8010b26 <aci_gatt_add_char+0x68>
 8010b24:	2305      	movs	r3, #5
 8010b26:	f107 0218 	add.w	r2, r7, #24
 8010b2a:	4413      	add	r3, r2
 8010b2c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8010b30:	f107 0314 	add.w	r3, r7, #20
 8010b34:	2203      	movs	r2, #3
 8010b36:	2100      	movs	r1, #0
 8010b38:	4618      	mov	r0, r3
 8010b3a:	f000 fb62 	bl	8011202 <Osal_MemSet>
  int index_input = 0;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8010b44:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8010b48:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8010b4c:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8010b50:	8812      	ldrh	r2, [r2, #0]
 8010b52:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010b54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010b58:	3302      	adds	r3, #2
 8010b5a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8010b5e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8010b62:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8010b66:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8010b6a:	7812      	ldrb	r2, [r2, #0]
 8010b6c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8010b6e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010b72:	3301      	adds	r3, #1
 8010b74:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8010b78:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010b7c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8010b80:	781b      	ldrb	r3, [r3, #0]
 8010b82:	2b01      	cmp	r3, #1
 8010b84:	d002      	beq.n	8010b8c <aci_gatt_add_char+0xce>
 8010b86:	2b02      	cmp	r3, #2
 8010b88:	d004      	beq.n	8010b94 <aci_gatt_add_char+0xd6>
 8010b8a:	e007      	b.n	8010b9c <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8010b8c:	2302      	movs	r3, #2
 8010b8e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8010b92:	e005      	b.n	8010ba0 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8010b94:	2310      	movs	r3, #16
 8010b96:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8010b9a:	e001      	b.n	8010ba0 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8010b9c:	2397      	movs	r3, #151	; 0x97
 8010b9e:	e091      	b.n	8010cc4 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8010ba0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8010ba4:	1cd8      	adds	r0, r3, #3
 8010ba6:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8010baa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010bae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8010bb2:	6819      	ldr	r1, [r3, #0]
 8010bb4:	f000 fb15 	bl	80111e2 <Osal_MemCpy>
    index_input += size;
 8010bb8:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8010bbc:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8010bc0:	4413      	add	r3, r2
 8010bc2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8010bc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010bca:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8010bce:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8010bd2:	8812      	ldrh	r2, [r2, #0]
 8010bd4:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8010bd6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010bda:	3302      	adds	r3, #2
 8010bdc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8010be0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010be4:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8010be8:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8010bea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010bee:	3301      	adds	r3, #1
 8010bf0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8010bf4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010bf8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8010bfc:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8010bfe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010c02:	3301      	adds	r3, #1
 8010c04:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8010c08:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010c0c:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8010c10:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8010c12:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010c16:	3301      	adds	r3, #1
 8010c18:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8010c1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010c20:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8010c24:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8010c26:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010c2a:	3301      	adds	r3, #1
 8010c2c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8010c30:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010c34:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8010c38:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8010c3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010c3e:	3301      	adds	r3, #1
 8010c40:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010c44:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8010c48:	2218      	movs	r2, #24
 8010c4a:	2100      	movs	r1, #0
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f000 fad8 	bl	8011202 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010c52:	233f      	movs	r3, #63	; 0x3f
 8010c54:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8010c58:	f44f 7382 	mov.w	r3, #260	; 0x104
 8010c5c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8010c60:	f107 0318 	add.w	r3, r7, #24
 8010c64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8010c68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010c6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8010c70:	f107 0314 	add.w	r3, r7, #20
 8010c74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8010c78:	2303      	movs	r3, #3
 8010c7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010c7e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8010c82:	2100      	movs	r1, #0
 8010c84:	4618      	mov	r0, r3
 8010c86:	f000 fd45 	bl	8011714 <hci_send_req>
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	da01      	bge.n	8010c94 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8010c90:	23ff      	movs	r3, #255	; 0xff
 8010c92:	e017      	b.n	8010cc4 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8010c94:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010c98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010c9c:	781b      	ldrb	r3, [r3, #0]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d005      	beq.n	8010cae <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8010ca2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010ca6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010caa:	781b      	ldrb	r3, [r3, #0]
 8010cac:	e00a      	b.n	8010cc4 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8010cae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010cb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010cb6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010cba:	b29a      	uxth	r2, r3
 8010cbc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8010cc0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8010cc2:	2300      	movs	r3, #0
}
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd90      	pop	{r4, r7, pc}

08010cce <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8010cce:	b5b0      	push	{r4, r5, r7, lr}
 8010cd0:	b0cc      	sub	sp, #304	; 0x130
 8010cd2:	af00      	add	r7, sp, #0
 8010cd4:	4605      	mov	r5, r0
 8010cd6:	460c      	mov	r4, r1
 8010cd8:	4610      	mov	r0, r2
 8010cda:	4619      	mov	r1, r3
 8010cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010ce0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8010ce4:	462a      	mov	r2, r5
 8010ce6:	801a      	strh	r2, [r3, #0]
 8010ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010cec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010cf0:	4622      	mov	r2, r4
 8010cf2:	801a      	strh	r2, [r3, #0]
 8010cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010cf8:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8010cfc:	4602      	mov	r2, r0
 8010cfe:	701a      	strb	r2, [r3, #0]
 8010d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010d04:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8010d08:	460a      	mov	r2, r1
 8010d0a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8010d0c:	f107 0310 	add.w	r3, r7, #16
 8010d10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8010d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010d18:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010d20:	2300      	movs	r3, #0
 8010d22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8010d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010d2a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010d2e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8010d32:	8812      	ldrh	r2, [r2, #0]
 8010d34:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010d36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010d3a:	3302      	adds	r3, #2
 8010d3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8010d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010d44:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010d48:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8010d4c:	8812      	ldrh	r2, [r2, #0]
 8010d4e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8010d50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010d54:	3302      	adds	r3, #2
 8010d56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8010d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010d5e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010d62:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8010d66:	7812      	ldrb	r2, [r2, #0]
 8010d68:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8010d6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010d6e:	3301      	adds	r3, #1
 8010d70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8010d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010d78:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010d7c:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8010d80:	7812      	ldrb	r2, [r2, #0]
 8010d82:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8010d84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010d88:	3301      	adds	r3, #1
 8010d8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8010d8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010d92:	1d98      	adds	r0, r3, #6
 8010d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010d98:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8010d9c:	781b      	ldrb	r3, [r3, #0]
 8010d9e:	461a      	mov	r2, r3
 8010da0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8010da4:	f000 fa1d 	bl	80111e2 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8010da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010dac:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8010db0:	781b      	ldrb	r3, [r3, #0]
 8010db2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8010db6:	4413      	add	r3, r2
 8010db8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010dbc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010dc0:	2218      	movs	r2, #24
 8010dc2:	2100      	movs	r1, #0
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	f000 fa1c 	bl	8011202 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010dca:	233f      	movs	r3, #63	; 0x3f
 8010dcc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8010dd0:	f44f 7383 	mov.w	r3, #262	; 0x106
 8010dd4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8010dd8:	f107 0310 	add.w	r3, r7, #16
 8010ddc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8010de0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010de4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8010de8:	f107 030f 	add.w	r3, r7, #15
 8010dec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8010df0:	2301      	movs	r3, #1
 8010df2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010df6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010dfa:	2100      	movs	r1, #0
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f000 fc89 	bl	8011714 <hci_send_req>
 8010e02:	4603      	mov	r3, r0
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	da01      	bge.n	8010e0c <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8010e08:	23ff      	movs	r3, #255	; 0xff
 8010e0a:	e004      	b.n	8010e16 <aci_gatt_update_char_value+0x148>
  return status;
 8010e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010e10:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010e14:	781b      	ldrb	r3, [r3, #0]
}
 8010e16:	4618      	mov	r0, r3
 8010e18:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	bdb0      	pop	{r4, r5, r7, pc}

08010e20 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b0cc      	sub	sp, #304	; 0x130
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8010e2e:	601a      	str	r2, [r3, #0]
 8010e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010e34:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8010e38:	4602      	mov	r2, r0
 8010e3a:	701a      	strb	r2, [r3, #0]
 8010e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010e40:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8010e44:	460a      	mov	r2, r1
 8010e46:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8010e48:	f107 0310 	add.w	r3, r7, #16
 8010e4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8010e50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010e54:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010e58:	2200      	movs	r2, #0
 8010e5a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8010e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010e66:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010e6a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8010e6e:	7812      	ldrb	r2, [r2, #0]
 8010e70:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010e72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010e76:	3301      	adds	r3, #1
 8010e78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8010e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010e80:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010e84:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8010e88:	7812      	ldrb	r2, [r2, #0]
 8010e8a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8010e8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010e90:	3301      	adds	r3, #1
 8010e92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8010e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010e9a:	1c98      	adds	r0, r3, #2
 8010e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010ea0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8010ea4:	781a      	ldrb	r2, [r3, #0]
 8010ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010eaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8010eae:	6819      	ldr	r1, [r3, #0]
 8010eb0:	f000 f997 	bl	80111e2 <Osal_MemCpy>
  index_input += Length;
 8010eb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010eb8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8010ebc:	781b      	ldrb	r3, [r3, #0]
 8010ebe:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8010ec2:	4413      	add	r3, r2
 8010ec4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010ec8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010ecc:	2218      	movs	r2, #24
 8010ece:	2100      	movs	r1, #0
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f000 f996 	bl	8011202 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010ed6:	233f      	movs	r3, #63	; 0x3f
 8010ed8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8010edc:	230c      	movs	r3, #12
 8010ede:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8010ee2:	f107 0310 	add.w	r3, r7, #16
 8010ee6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8010eea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010eee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8010ef2:	f107 030f 	add.w	r3, r7, #15
 8010ef6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8010efa:	2301      	movs	r3, #1
 8010efc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010f00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010f04:	2100      	movs	r1, #0
 8010f06:	4618      	mov	r0, r3
 8010f08:	f000 fc04 	bl	8011714 <hci_send_req>
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	da01      	bge.n	8010f16 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8010f12:	23ff      	movs	r3, #255	; 0xff
 8010f14:	e004      	b.n	8010f20 <aci_hal_write_config_data+0x100>
  return status;
 8010f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010f1a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010f1e:	781b      	ldrb	r3, [r3, #0]
}
 8010f20:	4618      	mov	r0, r3
 8010f22:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}

08010f2a <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8010f2a:	b580      	push	{r7, lr}
 8010f2c:	b0cc      	sub	sp, #304	; 0x130
 8010f2e:	af00      	add	r7, sp, #0
 8010f30:	4602      	mov	r2, r0
 8010f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010f36:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8010f3a:	701a      	strb	r2, [r3, #0]
 8010f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010f40:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8010f44:	460a      	mov	r2, r1
 8010f46:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8010f48:	f107 0310 	add.w	r3, r7, #16
 8010f4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8010f50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010f54:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010f58:	2200      	movs	r2, #0
 8010f5a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8010f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010f66:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010f6a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8010f6e:	7812      	ldrb	r2, [r2, #0]
 8010f70:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010f72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010f76:	3301      	adds	r3, #1
 8010f78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8010f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010f80:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010f84:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8010f88:	7812      	ldrb	r2, [r2, #0]
 8010f8a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8010f8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010f90:	3301      	adds	r3, #1
 8010f92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010f96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010f9a:	2218      	movs	r2, #24
 8010f9c:	2100      	movs	r1, #0
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	f000 f92f 	bl	8011202 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010fa4:	233f      	movs	r3, #63	; 0x3f
 8010fa6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8010faa:	230f      	movs	r3, #15
 8010fac:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8010fb0:	f107 0310 	add.w	r3, r7, #16
 8010fb4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8010fb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010fbc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8010fc0:	f107 030f 	add.w	r3, r7, #15
 8010fc4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8010fc8:	2301      	movs	r3, #1
 8010fca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010fce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010fd2:	2100      	movs	r1, #0
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	f000 fb9d 	bl	8011714 <hci_send_req>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	da01      	bge.n	8010fe4 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8010fe0:	23ff      	movs	r3, #255	; 0xff
 8010fe2:	e004      	b.n	8010fee <aci_hal_set_tx_power_level+0xc4>
  return status;
 8010fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010fe8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010fec:	781b      	ldrb	r3, [r3, #0]
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}

08010ff8 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b0cc      	sub	sp, #304	; 0x130
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	4602      	mov	r2, r0
 8011000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011004:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8011008:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 801100a:	f107 0310 	add.w	r3, r7, #16
 801100e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8011012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011016:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801101a:	2200      	movs	r2, #0
 801101c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801101e:	2300      	movs	r3, #0
 8011020:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8011024:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011028:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801102c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8011030:	8812      	ldrh	r2, [r2, #0]
 8011032:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8011034:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011038:	3302      	adds	r3, #2
 801103a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801103e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011042:	2218      	movs	r2, #24
 8011044:	2100      	movs	r1, #0
 8011046:	4618      	mov	r0, r3
 8011048:	f000 f8db 	bl	8011202 <Osal_MemSet>
  rq.ogf = 0x3f;
 801104c:	233f      	movs	r3, #63	; 0x3f
 801104e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8011052:	2318      	movs	r3, #24
 8011054:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8011058:	f107 0310 	add.w	r3, r7, #16
 801105c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8011060:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011064:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8011068:	f107 030f 	add.w	r3, r7, #15
 801106c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8011070:	2301      	movs	r3, #1
 8011072:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011076:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801107a:	2100      	movs	r1, #0
 801107c:	4618      	mov	r0, r3
 801107e:	f000 fb49 	bl	8011714 <hci_send_req>
 8011082:	4603      	mov	r3, r0
 8011084:	2b00      	cmp	r3, #0
 8011086:	da01      	bge.n	801108c <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8011088:	23ff      	movs	r3, #255	; 0xff
 801108a:	e004      	b.n	8011096 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 801108c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011090:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8011094:	781b      	ldrb	r3, [r3, #0]
}
 8011096:	4618      	mov	r0, r3
 8011098:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801109c:	46bd      	mov	sp, r7
 801109e:	bd80      	pop	{r7, pc}

080110a0 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b088      	sub	sp, #32
 80110a4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80110a6:	2300      	movs	r3, #0
 80110a8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80110aa:	f107 0308 	add.w	r3, r7, #8
 80110ae:	2218      	movs	r2, #24
 80110b0:	2100      	movs	r1, #0
 80110b2:	4618      	mov	r0, r3
 80110b4:	f000 f8a5 	bl	8011202 <Osal_MemSet>
  rq.ogf = 0x03;
 80110b8:	2303      	movs	r3, #3
 80110ba:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80110bc:	2303      	movs	r3, #3
 80110be:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80110c0:	1dfb      	adds	r3, r7, #7
 80110c2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80110c4:	2301      	movs	r3, #1
 80110c6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80110c8:	f107 0308 	add.w	r3, r7, #8
 80110cc:	2100      	movs	r1, #0
 80110ce:	4618      	mov	r0, r3
 80110d0:	f000 fb20 	bl	8011714 <hci_send_req>
 80110d4:	4603      	mov	r3, r0
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	da01      	bge.n	80110de <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80110da:	23ff      	movs	r3, #255	; 0xff
 80110dc:	e000      	b.n	80110e0 <hci_reset+0x40>
  return status;
 80110de:	79fb      	ldrb	r3, [r7, #7]
}
 80110e0:	4618      	mov	r0, r3
 80110e2:	3720      	adds	r7, #32
 80110e4:	46bd      	mov	sp, r7
 80110e6:	bd80      	pop	{r7, pc}

080110e8 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80110e8:	b590      	push	{r4, r7, lr}
 80110ea:	b0cd      	sub	sp, #308	; 0x134
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	4604      	mov	r4, r0
 80110f0:	4608      	mov	r0, r1
 80110f2:	4611      	mov	r1, r2
 80110f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80110f8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80110fc:	4622      	mov	r2, r4
 80110fe:	701a      	strb	r2, [r3, #0]
 8011100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011104:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8011108:	4602      	mov	r2, r0
 801110a:	701a      	strb	r2, [r3, #0]
 801110c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011110:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8011114:	460a      	mov	r2, r1
 8011116:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8011118:	f107 0310 	add.w	r3, r7, #16
 801111c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8011120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011124:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8011128:	2200      	movs	r2, #0
 801112a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801112c:	2300      	movs	r3, #0
 801112e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8011132:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011136:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801113a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 801113e:	7812      	ldrb	r2, [r2, #0]
 8011140:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8011142:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011146:	3301      	adds	r3, #1
 8011148:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 801114c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011150:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8011154:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8011158:	7812      	ldrb	r2, [r2, #0]
 801115a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 801115c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011160:	3301      	adds	r3, #1
 8011162:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8011166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801116a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801116e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8011172:	7812      	ldrb	r2, [r2, #0]
 8011174:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8011176:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801117a:	3301      	adds	r3, #1
 801117c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011180:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011184:	2218      	movs	r2, #24
 8011186:	2100      	movs	r1, #0
 8011188:	4618      	mov	r0, r3
 801118a:	f000 f83a 	bl	8011202 <Osal_MemSet>
  rq.ogf = 0x08;
 801118e:	2308      	movs	r3, #8
 8011190:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8011194:	2331      	movs	r3, #49	; 0x31
 8011196:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 801119a:	f107 0310 	add.w	r3, r7, #16
 801119e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80111a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80111a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80111aa:	f107 030f 	add.w	r3, r7, #15
 80111ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80111b2:	2301      	movs	r3, #1
 80111b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80111b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80111bc:	2100      	movs	r1, #0
 80111be:	4618      	mov	r0, r3
 80111c0:	f000 faa8 	bl	8011714 <hci_send_req>
 80111c4:	4603      	mov	r3, r0
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	da01      	bge.n	80111ce <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80111ca:	23ff      	movs	r3, #255	; 0xff
 80111cc:	e004      	b.n	80111d8 <hci_le_set_default_phy+0xf0>
  return status;
 80111ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80111d2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80111d6:	781b      	ldrb	r3, [r3, #0]
}
 80111d8:	4618      	mov	r0, r3
 80111da:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd90      	pop	{r4, r7, pc}

080111e2 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80111e2:	b580      	push	{r7, lr}
 80111e4:	b084      	sub	sp, #16
 80111e6:	af00      	add	r7, sp, #0
 80111e8:	60f8      	str	r0, [r7, #12]
 80111ea:	60b9      	str	r1, [r7, #8]
 80111ec:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80111ee:	687a      	ldr	r2, [r7, #4]
 80111f0:	68b9      	ldr	r1, [r7, #8]
 80111f2:	68f8      	ldr	r0, [r7, #12]
 80111f4:	f002 fe44 	bl	8013e80 <memcpy>
 80111f8:	4603      	mov	r3, r0
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3710      	adds	r7, #16
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}

08011202 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8011202:	b580      	push	{r7, lr}
 8011204:	b084      	sub	sp, #16
 8011206:	af00      	add	r7, sp, #0
 8011208:	60f8      	str	r0, [r7, #12]
 801120a:	60b9      	str	r1, [r7, #8]
 801120c:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 801120e:	687a      	ldr	r2, [r7, #4]
 8011210:	68b9      	ldr	r1, [r7, #8]
 8011212:	68f8      	ldr	r0, [r7, #12]
 8011214:	f002 fe42 	bl	8013e9c <memset>
 8011218:	4603      	mov	r3, r0
}
 801121a:	4618      	mov	r0, r3
 801121c:	3710      	adds	r7, #16
 801121e:	46bd      	mov	sp, r7
 8011220:	bd80      	pop	{r7, pc}

08011222 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8011222:	b480      	push	{r7}
 8011224:	af00      	add	r7, sp, #0
  return;
 8011226:	bf00      	nop
}
 8011228:	46bd      	mov	sp, r7
 801122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122e:	4770      	bx	lr

08011230 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8011230:	b480      	push	{r7}
 8011232:	af00      	add	r7, sp, #0
  return;
 8011234:	bf00      	nop
}
 8011236:	46bd      	mov	sp, r7
 8011238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123c:	4770      	bx	lr

0801123e <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 801123e:	b480      	push	{r7}
 8011240:	af00      	add	r7, sp, #0
  return;
 8011242:	bf00      	nop
}
 8011244:	46bd      	mov	sp, r7
 8011246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124a:	4770      	bx	lr

0801124c <DIS_Init>:
__WEAK void DIS_Init( void )
{
 801124c:	b480      	push	{r7}
 801124e:	af00      	add	r7, sp, #0
  return;
 8011250:	bf00      	nop
}
 8011252:	46bd      	mov	sp, r7
 8011254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011258:	4770      	bx	lr

0801125a <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 801125a:	b480      	push	{r7}
 801125c:	af00      	add	r7, sp, #0
  return;
 801125e:	bf00      	nop
}
 8011260:	46bd      	mov	sp, r7
 8011262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011266:	4770      	bx	lr

08011268 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8011268:	b480      	push	{r7}
 801126a:	af00      	add	r7, sp, #0
  return;
 801126c:	bf00      	nop
}
 801126e:	46bd      	mov	sp, r7
 8011270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011274:	4770      	bx	lr

08011276 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8011276:	b480      	push	{r7}
 8011278:	af00      	add	r7, sp, #0
  return;
 801127a:	bf00      	nop
}
 801127c:	46bd      	mov	sp, r7
 801127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011282:	4770      	bx	lr

08011284 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8011284:	b480      	push	{r7}
 8011286:	af00      	add	r7, sp, #0
  return;
 8011288:	bf00      	nop
}
 801128a:	46bd      	mov	sp, r7
 801128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011290:	4770      	bx	lr

08011292 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8011292:	b480      	push	{r7}
 8011294:	af00      	add	r7, sp, #0
  return;
 8011296:	bf00      	nop
}
 8011298:	46bd      	mov	sp, r7
 801129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129e:	4770      	bx	lr

080112a0 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80112a0:	b480      	push	{r7}
 80112a2:	af00      	add	r7, sp, #0
  return;
 80112a4:	bf00      	nop
}
 80112a6:	46bd      	mov	sp, r7
 80112a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ac:	4770      	bx	lr

080112ae <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80112ae:	b480      	push	{r7}
 80112b0:	af00      	add	r7, sp, #0
  return;
 80112b2:	bf00      	nop
}
 80112b4:	46bd      	mov	sp, r7
 80112b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ba:	4770      	bx	lr

080112bc <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80112bc:	b480      	push	{r7}
 80112be:	af00      	add	r7, sp, #0
  return;
 80112c0:	bf00      	nop
}
 80112c2:	46bd      	mov	sp, r7
 80112c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c8:	4770      	bx	lr

080112ca <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80112ca:	b480      	push	{r7}
 80112cc:	af00      	add	r7, sp, #0
  return;
 80112ce:	bf00      	nop
}
 80112d0:	46bd      	mov	sp, r7
 80112d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d6:	4770      	bx	lr

080112d8 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80112d8:	b480      	push	{r7}
 80112da:	af00      	add	r7, sp, #0
  return;
 80112dc:	bf00      	nop
}
 80112de:	46bd      	mov	sp, r7
 80112e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e4:	4770      	bx	lr

080112e6 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80112e6:	b480      	push	{r7}
 80112e8:	af00      	add	r7, sp, #0
  return;
 80112ea:	bf00      	nop
}
 80112ec:	46bd      	mov	sp, r7
 80112ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f2:	4770      	bx	lr

080112f4 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80112f4:	b480      	push	{r7}
 80112f6:	af00      	add	r7, sp, #0
  return;
 80112f8:	bf00      	nop
}
 80112fa:	46bd      	mov	sp, r7
 80112fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011300:	4770      	bx	lr

08011302 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8011302:	b480      	push	{r7}
 8011304:	af00      	add	r7, sp, #0
  return;
 8011306:	bf00      	nop
}
 8011308:	46bd      	mov	sp, r7
 801130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130e:	4770      	bx	lr

08011310 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8011310:	b580      	push	{r7, lr}
 8011312:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8011314:	4b04      	ldr	r3, [pc, #16]	; (8011328 <SVCCTL_Init+0x18>)
 8011316:	2200      	movs	r2, #0
 8011318:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 801131a:	4b04      	ldr	r3, [pc, #16]	; (801132c <SVCCTL_Init+0x1c>)
 801131c:	2200      	movs	r2, #0
 801131e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8011320:	f000 f806 	bl	8011330 <SVCCTL_SvcInit>

  return;
 8011324:	bf00      	nop
}
 8011326:	bd80      	pop	{r7, pc}
 8011328:	2000055c 	.word	0x2000055c
 801132c:	2000057c 	.word	0x2000057c

08011330 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8011330:	b580      	push	{r7, lr}
 8011332:	af00      	add	r7, sp, #0
  BAS_Init();
 8011334:	f7ff ff75 	bl	8011222 <BAS_Init>

  BLS_Init();
 8011338:	f7ff ff7a 	bl	8011230 <BLS_Init>

  CRS_STM_Init();
 801133c:	f7ff ff7f 	bl	801123e <CRS_STM_Init>

  DIS_Init();
 8011340:	f7ff ff84 	bl	801124c <DIS_Init>

  EDS_STM_Init();
 8011344:	f7ff ff89 	bl	801125a <EDS_STM_Init>

  HIDS_Init();
 8011348:	f7ff ff8e 	bl	8011268 <HIDS_Init>

  HRS_Init();
 801134c:	f7ff ff93 	bl	8011276 <HRS_Init>

  HTS_Init();
 8011350:	f7ff ff98 	bl	8011284 <HTS_Init>

  IAS_Init();
 8011354:	f7ff ff9d 	bl	8011292 <IAS_Init>

  LLS_Init();
 8011358:	f7ff ffa2 	bl	80112a0 <LLS_Init>

  TPS_Init();
 801135c:	f7ff ffa7 	bl	80112ae <TPS_Init>

  MOTENV_STM_Init();
 8011360:	f7ff ffac 	bl	80112bc <MOTENV_STM_Init>

  P2PS_STM_Init();
 8011364:	f7ff ffb1 	bl	80112ca <P2PS_STM_Init>

  ZDD_STM_Init();
 8011368:	f7ff ffb6 	bl	80112d8 <ZDD_STM_Init>

  OTAS_STM_Init();
 801136c:	f7ff ffbb 	bl	80112e6 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8011370:	f7ff ffc7 	bl	8011302 <BVOPUS_STM_Init>

  MESH_Init();
 8011374:	f7ff ffbe 	bl	80112f4 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8011378:	f001 fac0 	bl	80128fc <SVCCTL_InitCustomSvc>
  
  return;
 801137c:	bf00      	nop
}
 801137e:	bd80      	pop	{r7, pc}

08011380 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8011380:	b480      	push	{r7}
 8011382:	b083      	sub	sp, #12
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8011388:	4b09      	ldr	r3, [pc, #36]	; (80113b0 <SVCCTL_RegisterSvcHandler+0x30>)
 801138a:	7f1b      	ldrb	r3, [r3, #28]
 801138c:	4619      	mov	r1, r3
 801138e:	4a08      	ldr	r2, [pc, #32]	; (80113b0 <SVCCTL_RegisterSvcHandler+0x30>)
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8011396:	4b06      	ldr	r3, [pc, #24]	; (80113b0 <SVCCTL_RegisterSvcHandler+0x30>)
 8011398:	7f1b      	ldrb	r3, [r3, #28]
 801139a:	3301      	adds	r3, #1
 801139c:	b2da      	uxtb	r2, r3
 801139e:	4b04      	ldr	r3, [pc, #16]	; (80113b0 <SVCCTL_RegisterSvcHandler+0x30>)
 80113a0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80113a2:	bf00      	nop
}
 80113a4:	370c      	adds	r7, #12
 80113a6:	46bd      	mov	sp, r7
 80113a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ac:	4770      	bx	lr
 80113ae:	bf00      	nop
 80113b0:	2000055c 	.word	0x2000055c

080113b4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b086      	sub	sp, #24
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	3301      	adds	r3, #1
 80113c0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80113c2:	2300      	movs	r3, #0
 80113c4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80113c6:	693b      	ldr	r3, [r7, #16]
 80113c8:	781b      	ldrb	r3, [r3, #0]
 80113ca:	2bff      	cmp	r3, #255	; 0xff
 80113cc:	d125      	bne.n	801141a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80113ce:	693b      	ldr	r3, [r7, #16]
 80113d0:	3302      	adds	r3, #2
 80113d2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	881b      	ldrh	r3, [r3, #0]
 80113d8:	b29b      	uxth	r3, r3
 80113da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80113de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80113e2:	d118      	bne.n	8011416 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80113e4:	2300      	movs	r3, #0
 80113e6:	757b      	strb	r3, [r7, #21]
 80113e8:	e00d      	b.n	8011406 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80113ea:	7d7b      	ldrb	r3, [r7, #21]
 80113ec:	4a1a      	ldr	r2, [pc, #104]	; (8011458 <SVCCTL_UserEvtRx+0xa4>)
 80113ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80113f2:	6878      	ldr	r0, [r7, #4]
 80113f4:	4798      	blx	r3
 80113f6:	4603      	mov	r3, r0
 80113f8:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80113fa:	7dfb      	ldrb	r3, [r7, #23]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d108      	bne.n	8011412 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8011400:	7d7b      	ldrb	r3, [r7, #21]
 8011402:	3301      	adds	r3, #1
 8011404:	757b      	strb	r3, [r7, #21]
 8011406:	4b14      	ldr	r3, [pc, #80]	; (8011458 <SVCCTL_UserEvtRx+0xa4>)
 8011408:	7f1b      	ldrb	r3, [r3, #28]
 801140a:	7d7a      	ldrb	r2, [r7, #21]
 801140c:	429a      	cmp	r2, r3
 801140e:	d3ec      	bcc.n	80113ea <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8011410:	e002      	b.n	8011418 <SVCCTL_UserEvtRx+0x64>
              break;
 8011412:	bf00      	nop
          break;
 8011414:	e000      	b.n	8011418 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8011416:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8011418:	e000      	b.n	801141c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 801141a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 801141c:	7dfb      	ldrb	r3, [r7, #23]
 801141e:	2b02      	cmp	r3, #2
 8011420:	d00f      	beq.n	8011442 <SVCCTL_UserEvtRx+0x8e>
 8011422:	2b02      	cmp	r3, #2
 8011424:	dc10      	bgt.n	8011448 <SVCCTL_UserEvtRx+0x94>
 8011426:	2b00      	cmp	r3, #0
 8011428:	d002      	beq.n	8011430 <SVCCTL_UserEvtRx+0x7c>
 801142a:	2b01      	cmp	r3, #1
 801142c:	d006      	beq.n	801143c <SVCCTL_UserEvtRx+0x88>
 801142e:	e00b      	b.n	8011448 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8011430:	6878      	ldr	r0, [r7, #4]
 8011432:	f000 ff7b 	bl	801232c <SVCCTL_App_Notification>
 8011436:	4603      	mov	r3, r0
 8011438:	75bb      	strb	r3, [r7, #22]
      break;
 801143a:	e008      	b.n	801144e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 801143c:	2301      	movs	r3, #1
 801143e:	75bb      	strb	r3, [r7, #22]
      break;
 8011440:	e005      	b.n	801144e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8011442:	2300      	movs	r3, #0
 8011444:	75bb      	strb	r3, [r7, #22]
      break;
 8011446:	e002      	b.n	801144e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8011448:	2301      	movs	r3, #1
 801144a:	75bb      	strb	r3, [r7, #22]
      break;
 801144c:	bf00      	nop
  }

  return (return_status);
 801144e:	7dbb      	ldrb	r3, [r7, #22]
}
 8011450:	4618      	mov	r0, r3
 8011452:	3718      	adds	r7, #24
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}
 8011458:	2000055c 	.word	0x2000055c

0801145c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b088      	sub	sp, #32
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8011464:	f107 030c 	add.w	r3, r7, #12
 8011468:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8011470:	69fb      	ldr	r3, [r7, #28]
 8011472:	212c      	movs	r1, #44	; 0x2c
 8011474:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8011478:	f000 fae2 	bl	8011a40 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 801147c:	69fb      	ldr	r3, [r7, #28]
 801147e:	330b      	adds	r3, #11
 8011480:	78db      	ldrb	r3, [r3, #3]
}
 8011482:	4618      	mov	r0, r3
 8011484:	3720      	adds	r7, #32
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}

0801148a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 801148a:	b580      	push	{r7, lr}
 801148c:	b088      	sub	sp, #32
 801148e:	af00      	add	r7, sp, #0
 8011490:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8011492:	f107 030c 	add.w	r3, r7, #12
 8011496:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 801149e:	69fb      	ldr	r3, [r7, #28]
 80114a0:	210f      	movs	r1, #15
 80114a2:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80114a6:	f000 facb 	bl	8011a40 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80114aa:	69fb      	ldr	r3, [r7, #28]
 80114ac:	330b      	adds	r3, #11
 80114ae:	78db      	ldrb	r3, [r3, #3]
}
 80114b0:	4618      	mov	r0, r3
 80114b2:	3720      	adds	r7, #32
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bd80      	pop	{r7, pc}

080114b8 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b088      	sub	sp, #32
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80114c0:	f107 030c 	add.w	r3, r7, #12
 80114c4:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80114c6:	69fb      	ldr	r3, [r7, #28]
 80114c8:	687a      	ldr	r2, [r7, #4]
 80114ca:	210e      	movs	r1, #14
 80114cc:	f64f 4075 	movw	r0, #64629	; 0xfc75
 80114d0:	f000 fab6 	bl	8011a40 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80114d4:	69fb      	ldr	r3, [r7, #28]
 80114d6:	330b      	adds	r3, #11
 80114d8:	78db      	ldrb	r3, [r3, #3]
}
 80114da:	4618      	mov	r0, r3
 80114dc:	3720      	adds	r7, #32
 80114de:	46bd      	mov	sp, r7
 80114e0:	bd80      	pop	{r7, pc}
	...

080114e4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80114e4:	b480      	push	{r7}
 80114e6:	b08b      	sub	sp, #44	; 0x2c
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80114ec:	2300      	movs	r3, #0
 80114ee:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80114f0:	2300      	movs	r3, #0
 80114f2:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80114f4:	2300      	movs	r3, #0
 80114f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80114f8:	2300      	movs	r3, #0
 80114fa:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80114fc:	2300      	movs	r3, #0
 80114fe:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8011500:	2300      	movs	r3, #0
 8011502:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8011504:	2300      	movs	r3, #0
 8011506:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8011508:	2300      	movs	r3, #0
 801150a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 801150c:	4b4a      	ldr	r3, [pc, #296]	; (8011638 <SHCI_GetWirelessFwInfo+0x154>)
 801150e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011510:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011514:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8011516:	693b      	ldr	r3, [r7, #16]
 8011518:	009b      	lsls	r3, r3, #2
 801151a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801151e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	4a44      	ldr	r2, [pc, #272]	; (801163c <SHCI_GetWirelessFwInfo+0x158>)
 801152c:	4293      	cmp	r3, r2
 801152e:	d10f      	bne.n	8011550 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8011530:	68bb      	ldr	r3, [r7, #8]
 8011532:	695b      	ldr	r3, [r3, #20]
 8011534:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	699b      	ldr	r3, [r3, #24]
 801153a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	69db      	ldr	r3, [r3, #28]
 8011540:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	68db      	ldr	r3, [r3, #12]
 8011546:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8011548:	68bb      	ldr	r3, [r7, #8]
 801154a:	691b      	ldr	r3, [r3, #16]
 801154c:	617b      	str	r3, [r7, #20]
 801154e:	e01a      	b.n	8011586 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8011550:	693b      	ldr	r3, [r7, #16]
 8011552:	009b      	lsls	r3, r3, #2
 8011554:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8011558:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 801155c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	691b      	ldr	r3, [r3, #16]
 8011564:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	695b      	ldr	r3, [r3, #20]
 801156c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	699b      	ldr	r3, [r3, #24]
 8011574:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	685b      	ldr	r3, [r3, #4]
 801157c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	689b      	ldr	r3, [r3, #8]
 8011584:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8011586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011588:	0e1b      	lsrs	r3, r3, #24
 801158a:	b2da      	uxtb	r2, r3
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8011590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011592:	0c1b      	lsrs	r3, r3, #16
 8011594:	b2da      	uxtb	r2, r3
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 801159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801159c:	0a1b      	lsrs	r3, r3, #8
 801159e:	b2da      	uxtb	r2, r3
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80115a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115a6:	091b      	lsrs	r3, r3, #4
 80115a8:	b2db      	uxtb	r3, r3
 80115aa:	f003 030f 	and.w	r3, r3, #15
 80115ae:	b2da      	uxtb	r2, r3
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80115b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115b6:	b2db      	uxtb	r3, r3
 80115b8:	f003 030f 	and.w	r3, r3, #15
 80115bc:	b2da      	uxtb	r2, r3
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80115c2:	6a3b      	ldr	r3, [r7, #32]
 80115c4:	0e1b      	lsrs	r3, r3, #24
 80115c6:	b2da      	uxtb	r2, r3
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80115cc:	6a3b      	ldr	r3, [r7, #32]
 80115ce:	0c1b      	lsrs	r3, r3, #16
 80115d0:	b2da      	uxtb	r2, r3
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80115d6:	6a3b      	ldr	r3, [r7, #32]
 80115d8:	0a1b      	lsrs	r3, r3, #8
 80115da:	b2da      	uxtb	r2, r3
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80115e0:	6a3b      	ldr	r3, [r7, #32]
 80115e2:	b2da      	uxtb	r2, r3
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80115e8:	69fb      	ldr	r3, [r7, #28]
 80115ea:	b2da      	uxtb	r2, r3
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80115f0:	69bb      	ldr	r3, [r7, #24]
 80115f2:	0e1b      	lsrs	r3, r3, #24
 80115f4:	b2da      	uxtb	r2, r3
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80115fa:	69bb      	ldr	r3, [r7, #24]
 80115fc:	0c1b      	lsrs	r3, r3, #16
 80115fe:	b2da      	uxtb	r2, r3
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8011604:	69bb      	ldr	r3, [r7, #24]
 8011606:	0a1b      	lsrs	r3, r3, #8
 8011608:	b2da      	uxtb	r2, r3
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	0e1b      	lsrs	r3, r3, #24
 8011612:	b2da      	uxtb	r2, r3
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8011618:	697b      	ldr	r3, [r7, #20]
 801161a:	0c1b      	lsrs	r3, r3, #16
 801161c:	b2da      	uxtb	r2, r3
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	b2da      	uxtb	r2, r3
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 801162a:	2300      	movs	r3, #0
}
 801162c:	4618      	mov	r0, r3
 801162e:	372c      	adds	r7, #44	; 0x2c
 8011630:	46bd      	mov	sp, r7
 8011632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011636:	4770      	bx	lr
 8011638:	58004000 	.word	0x58004000
 801163c:	a94656b9 	.word	0xa94656b9

08011640 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8011640:	b580      	push	{r7, lr}
 8011642:	b082      	sub	sp, #8
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
 8011648:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	685b      	ldr	r3, [r3, #4]
 801164e:	4a08      	ldr	r2, [pc, #32]	; (8011670 <hci_init+0x30>)
 8011650:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8011652:	4a08      	ldr	r2, [pc, #32]	; (8011674 <hci_init+0x34>)
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8011658:	4806      	ldr	r0, [pc, #24]	; (8011674 <hci_init+0x34>)
 801165a:	f000 f973 	bl	8011944 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801165e:	683b      	ldr	r3, [r7, #0]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	4618      	mov	r0, r3
 8011664:	f000 f8d4 	bl	8011810 <TlInit>

  return;
 8011668:	bf00      	nop
}
 801166a:	3708      	adds	r7, #8
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}
 8011670:	20000828 	.word	0x20000828
 8011674:	20000800 	.word	0x20000800

08011678 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b084      	sub	sp, #16
 801167c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 801167e:	4822      	ldr	r0, [pc, #136]	; (8011708 <hci_user_evt_proc+0x90>)
 8011680:	f000 fd28 	bl	80120d4 <LST_is_empty>
 8011684:	4603      	mov	r3, r0
 8011686:	2b00      	cmp	r3, #0
 8011688:	d12b      	bne.n	80116e2 <hci_user_evt_proc+0x6a>
 801168a:	4b20      	ldr	r3, [pc, #128]	; (801170c <hci_user_evt_proc+0x94>)
 801168c:	781b      	ldrb	r3, [r3, #0]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d027      	beq.n	80116e2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8011692:	f107 030c 	add.w	r3, r7, #12
 8011696:	4619      	mov	r1, r3
 8011698:	481b      	ldr	r0, [pc, #108]	; (8011708 <hci_user_evt_proc+0x90>)
 801169a:	f000 fdaa 	bl	80121f2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 801169e:	4b1c      	ldr	r3, [pc, #112]	; (8011710 <hci_user_evt_proc+0x98>)
 80116a0:	69db      	ldr	r3, [r3, #28]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d00c      	beq.n	80116c0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80116aa:	2301      	movs	r3, #1
 80116ac:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80116ae:	4b18      	ldr	r3, [pc, #96]	; (8011710 <hci_user_evt_proc+0x98>)
 80116b0:	69db      	ldr	r3, [r3, #28]
 80116b2:	1d3a      	adds	r2, r7, #4
 80116b4:	4610      	mov	r0, r2
 80116b6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80116b8:	793a      	ldrb	r2, [r7, #4]
 80116ba:	4b14      	ldr	r3, [pc, #80]	; (801170c <hci_user_evt_proc+0x94>)
 80116bc:	701a      	strb	r2, [r3, #0]
 80116be:	e002      	b.n	80116c6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80116c0:	4b12      	ldr	r3, [pc, #72]	; (801170c <hci_user_evt_proc+0x94>)
 80116c2:	2201      	movs	r2, #1
 80116c4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80116c6:	4b11      	ldr	r3, [pc, #68]	; (801170c <hci_user_evt_proc+0x94>)
 80116c8:	781b      	ldrb	r3, [r3, #0]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d004      	beq.n	80116d8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	4618      	mov	r0, r3
 80116d2:	f000 fc03 	bl	8011edc <TL_MM_EvtDone>
 80116d6:	e004      	b.n	80116e2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	4619      	mov	r1, r3
 80116dc:	480a      	ldr	r0, [pc, #40]	; (8011708 <hci_user_evt_proc+0x90>)
 80116de:	f000 fd1b 	bl	8012118 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80116e2:	4809      	ldr	r0, [pc, #36]	; (8011708 <hci_user_evt_proc+0x90>)
 80116e4:	f000 fcf6 	bl	80120d4 <LST_is_empty>
 80116e8:	4603      	mov	r3, r0
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d107      	bne.n	80116fe <hci_user_evt_proc+0x86>
 80116ee:	4b07      	ldr	r3, [pc, #28]	; (801170c <hci_user_evt_proc+0x94>)
 80116f0:	781b      	ldrb	r3, [r3, #0]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d003      	beq.n	80116fe <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80116f6:	4804      	ldr	r0, [pc, #16]	; (8011708 <hci_user_evt_proc+0x90>)
 80116f8:	f001 f830 	bl	801275c <hci_notify_asynch_evt>
  }


  return;
 80116fc:	bf00      	nop
 80116fe:	bf00      	nop
}
 8011700:	3710      	adds	r7, #16
 8011702:	46bd      	mov	sp, r7
 8011704:	bd80      	pop	{r7, pc}
 8011706:	bf00      	nop
 8011708:	20000584 	.word	0x20000584
 801170c:	20000590 	.word	0x20000590
 8011710:	20000800 	.word	0x20000800

08011714 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b088      	sub	sp, #32
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
 801171c:	460b      	mov	r3, r1
 801171e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8011720:	2000      	movs	r0, #0
 8011722:	f000 f8cb 	bl	80118bc <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8011726:	2300      	movs	r3, #0
 8011728:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	885b      	ldrh	r3, [r3, #2]
 801172e:	b21b      	sxth	r3, r3
 8011730:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011734:	b21a      	sxth	r2, r3
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	881b      	ldrh	r3, [r3, #0]
 801173a:	029b      	lsls	r3, r3, #10
 801173c:	b21b      	sxth	r3, r3
 801173e:	4313      	orrs	r3, r2
 8011740:	b21b      	sxth	r3, r3
 8011742:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	68db      	ldr	r3, [r3, #12]
 8011748:	b2d9      	uxtb	r1, r3
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	689a      	ldr	r2, [r3, #8]
 801174e:	8bbb      	ldrh	r3, [r7, #28]
 8011750:	4618      	mov	r0, r3
 8011752:	f000 f88d 	bl	8011870 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8011756:	e04e      	b.n	80117f6 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8011758:	f248 00e8 	movw	r0, #33000	; 0x80e8
 801175c:	f001 f815 	bl	801278a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8011760:	e043      	b.n	80117ea <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8011762:	f107 030c 	add.w	r3, r7, #12
 8011766:	4619      	mov	r1, r3
 8011768:	4828      	ldr	r0, [pc, #160]	; (801180c <hci_send_req+0xf8>)
 801176a:	f000 fd42 	bl	80121f2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	7a5b      	ldrb	r3, [r3, #9]
 8011772:	2b0f      	cmp	r3, #15
 8011774:	d114      	bne.n	80117a0 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	330b      	adds	r3, #11
 801177a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 801177c:	693b      	ldr	r3, [r7, #16]
 801177e:	885b      	ldrh	r3, [r3, #2]
 8011780:	b29b      	uxth	r3, r3
 8011782:	8bba      	ldrh	r2, [r7, #28]
 8011784:	429a      	cmp	r2, r3
 8011786:	d104      	bne.n	8011792 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	691b      	ldr	r3, [r3, #16]
 801178c:	693a      	ldr	r2, [r7, #16]
 801178e:	7812      	ldrb	r2, [r2, #0]
 8011790:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8011792:	693b      	ldr	r3, [r7, #16]
 8011794:	785b      	ldrb	r3, [r3, #1]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d027      	beq.n	80117ea <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 801179a:	2301      	movs	r3, #1
 801179c:	77fb      	strb	r3, [r7, #31]
 801179e:	e024      	b.n	80117ea <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	330b      	adds	r3, #11
 80117a4:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80117a6:	69bb      	ldr	r3, [r7, #24]
 80117a8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80117ac:	b29b      	uxth	r3, r3
 80117ae:	8bba      	ldrh	r2, [r7, #28]
 80117b0:	429a      	cmp	r2, r3
 80117b2:	d114      	bne.n	80117de <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	7a9b      	ldrb	r3, [r3, #10]
 80117b8:	3b03      	subs	r3, #3
 80117ba:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	695a      	ldr	r2, [r3, #20]
 80117c0:	7dfb      	ldrb	r3, [r7, #23]
 80117c2:	429a      	cmp	r2, r3
 80117c4:	bfa8      	it	ge
 80117c6:	461a      	movge	r2, r3
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	6918      	ldr	r0, [r3, #16]
 80117d0:	69bb      	ldr	r3, [r7, #24]
 80117d2:	1cd9      	adds	r1, r3, #3
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	695b      	ldr	r3, [r3, #20]
 80117d8:	461a      	mov	r2, r3
 80117da:	f002 fb51 	bl	8013e80 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80117de:	69bb      	ldr	r3, [r7, #24]
 80117e0:	781b      	ldrb	r3, [r3, #0]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d001      	beq.n	80117ea <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80117e6:	2301      	movs	r3, #1
 80117e8:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80117ea:	4808      	ldr	r0, [pc, #32]	; (801180c <hci_send_req+0xf8>)
 80117ec:	f000 fc72 	bl	80120d4 <LST_is_empty>
 80117f0:	4603      	mov	r3, r0
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d0b5      	beq.n	8011762 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80117f6:	7ffb      	ldrb	r3, [r7, #31]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d0ad      	beq.n	8011758 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80117fc:	2001      	movs	r0, #1
 80117fe:	f000 f85d 	bl	80118bc <NotifyCmdStatus>

  return 0;
 8011802:	2300      	movs	r3, #0
}
 8011804:	4618      	mov	r0, r3
 8011806:	3720      	adds	r7, #32
 8011808:	46bd      	mov	sp, r7
 801180a:	bd80      	pop	{r7, pc}
 801180c:	20000820 	.word	0x20000820

08011810 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b086      	sub	sp, #24
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8011818:	480f      	ldr	r0, [pc, #60]	; (8011858 <TlInit+0x48>)
 801181a:	f000 fc4b 	bl	80120b4 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 801181e:	4a0f      	ldr	r2, [pc, #60]	; (801185c <TlInit+0x4c>)
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8011824:	480e      	ldr	r0, [pc, #56]	; (8011860 <TlInit+0x50>)
 8011826:	f000 fc45 	bl	80120b4 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 801182a:	4b0e      	ldr	r3, [pc, #56]	; (8011864 <TlInit+0x54>)
 801182c:	2201      	movs	r2, #1
 801182e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8011830:	4b0d      	ldr	r3, [pc, #52]	; (8011868 <TlInit+0x58>)
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d00a      	beq.n	801184e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 801183c:	4b0b      	ldr	r3, [pc, #44]	; (801186c <TlInit+0x5c>)
 801183e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8011840:	4b09      	ldr	r3, [pc, #36]	; (8011868 <TlInit+0x58>)
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	f107 0208 	add.w	r2, r7, #8
 8011848:	4610      	mov	r0, r2
 801184a:	4798      	blx	r3
  }

  return;
 801184c:	bf00      	nop
 801184e:	bf00      	nop
}
 8011850:	3718      	adds	r7, #24
 8011852:	46bd      	mov	sp, r7
 8011854:	bd80      	pop	{r7, pc}
 8011856:	bf00      	nop
 8011858:	20000820 	.word	0x20000820
 801185c:	2000058c 	.word	0x2000058c
 8011860:	20000584 	.word	0x20000584
 8011864:	20000590 	.word	0x20000590
 8011868:	20000800 	.word	0x20000800
 801186c:	080118fd 	.word	0x080118fd

08011870 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b082      	sub	sp, #8
 8011874:	af00      	add	r7, sp, #0
 8011876:	4603      	mov	r3, r0
 8011878:	603a      	str	r2, [r7, #0]
 801187a:	80fb      	strh	r3, [r7, #6]
 801187c:	460b      	mov	r3, r1
 801187e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8011880:	4b0c      	ldr	r3, [pc, #48]	; (80118b4 <SendCmd+0x44>)
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	88fa      	ldrh	r2, [r7, #6]
 8011886:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 801188a:	4b0a      	ldr	r3, [pc, #40]	; (80118b4 <SendCmd+0x44>)
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	797a      	ldrb	r2, [r7, #5]
 8011890:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8011892:	4b08      	ldr	r3, [pc, #32]	; (80118b4 <SendCmd+0x44>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	330c      	adds	r3, #12
 8011898:	797a      	ldrb	r2, [r7, #5]
 801189a:	6839      	ldr	r1, [r7, #0]
 801189c:	4618      	mov	r0, r3
 801189e:	f002 faef 	bl	8013e80 <memcpy>

  hciContext.io.Send(0,0);
 80118a2:	4b05      	ldr	r3, [pc, #20]	; (80118b8 <SendCmd+0x48>)
 80118a4:	691b      	ldr	r3, [r3, #16]
 80118a6:	2100      	movs	r1, #0
 80118a8:	2000      	movs	r0, #0
 80118aa:	4798      	blx	r3

  return;
 80118ac:	bf00      	nop
}
 80118ae:	3708      	adds	r7, #8
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}
 80118b4:	2000058c 	.word	0x2000058c
 80118b8:	20000800 	.word	0x20000800

080118bc <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b082      	sub	sp, #8
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	4603      	mov	r3, r0
 80118c4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80118c6:	79fb      	ldrb	r3, [r7, #7]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d108      	bne.n	80118de <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80118cc:	4b0a      	ldr	r3, [pc, #40]	; (80118f8 <NotifyCmdStatus+0x3c>)
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d00d      	beq.n	80118f0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80118d4:	4b08      	ldr	r3, [pc, #32]	; (80118f8 <NotifyCmdStatus+0x3c>)
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	2000      	movs	r0, #0
 80118da:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80118dc:	e008      	b.n	80118f0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80118de:	4b06      	ldr	r3, [pc, #24]	; (80118f8 <NotifyCmdStatus+0x3c>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d004      	beq.n	80118f0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80118e6:	4b04      	ldr	r3, [pc, #16]	; (80118f8 <NotifyCmdStatus+0x3c>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	2001      	movs	r0, #1
 80118ec:	4798      	blx	r3
  return;
 80118ee:	bf00      	nop
 80118f0:	bf00      	nop
}
 80118f2:	3708      	adds	r7, #8
 80118f4:	46bd      	mov	sp, r7
 80118f6:	bd80      	pop	{r7, pc}
 80118f8:	20000828 	.word	0x20000828

080118fc <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b082      	sub	sp, #8
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	7a5b      	ldrb	r3, [r3, #9]
 8011908:	2b0f      	cmp	r3, #15
 801190a:	d003      	beq.n	8011914 <TlEvtReceived+0x18>
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	7a5b      	ldrb	r3, [r3, #9]
 8011910:	2b0e      	cmp	r3, #14
 8011912:	d107      	bne.n	8011924 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8011914:	6879      	ldr	r1, [r7, #4]
 8011916:	4809      	ldr	r0, [pc, #36]	; (801193c <TlEvtReceived+0x40>)
 8011918:	f000 fc24 	bl	8012164 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 801191c:	2000      	movs	r0, #0
 801191e:	f000 ff29 	bl	8012774 <hci_cmd_resp_release>
 8011922:	e006      	b.n	8011932 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8011924:	6879      	ldr	r1, [r7, #4]
 8011926:	4806      	ldr	r0, [pc, #24]	; (8011940 <TlEvtReceived+0x44>)
 8011928:	f000 fc1c 	bl	8012164 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 801192c:	4804      	ldr	r0, [pc, #16]	; (8011940 <TlEvtReceived+0x44>)
 801192e:	f000 ff15 	bl	801275c <hci_notify_asynch_evt>
  }

  return;
 8011932:	bf00      	nop
}
 8011934:	3708      	adds	r7, #8
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}
 801193a:	bf00      	nop
 801193c:	20000820 	.word	0x20000820
 8011940:	20000584 	.word	0x20000584

08011944 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8011944:	b480      	push	{r7}
 8011946:	b083      	sub	sp, #12
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	4a05      	ldr	r2, [pc, #20]	; (8011964 <hci_register_io_bus+0x20>)
 8011950:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	4a04      	ldr	r2, [pc, #16]	; (8011968 <hci_register_io_bus+0x24>)
 8011956:	611a      	str	r2, [r3, #16]

  return;
 8011958:	bf00      	nop
}
 801195a:	370c      	adds	r7, #12
 801195c:	46bd      	mov	sp, r7
 801195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011962:	4770      	bx	lr
 8011964:	08011c55 	.word	0x08011c55
 8011968:	08011cbd 	.word	0x08011cbd

0801196c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b082      	sub	sp, #8
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
 8011974:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8011976:	683b      	ldr	r3, [r7, #0]
 8011978:	685b      	ldr	r3, [r3, #4]
 801197a:	4a08      	ldr	r2, [pc, #32]	; (801199c <shci_init+0x30>)
 801197c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 801197e:	4a08      	ldr	r2, [pc, #32]	; (80119a0 <shci_init+0x34>)
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8011984:	4806      	ldr	r0, [pc, #24]	; (80119a0 <shci_init+0x34>)
 8011986:	f000 f911 	bl	8011bac <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	4618      	mov	r0, r3
 8011990:	f000 f894 	bl	8011abc <TlInit>

  return;
 8011994:	bf00      	nop
}
 8011996:	3708      	adds	r7, #8
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}
 801199c:	2000084c 	.word	0x2000084c
 80119a0:	2000082c 	.word	0x2000082c

080119a4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b084      	sub	sp, #16
 80119a8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80119aa:	4822      	ldr	r0, [pc, #136]	; (8011a34 <shci_user_evt_proc+0x90>)
 80119ac:	f000 fb92 	bl	80120d4 <LST_is_empty>
 80119b0:	4603      	mov	r3, r0
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d12b      	bne.n	8011a0e <shci_user_evt_proc+0x6a>
 80119b6:	4b20      	ldr	r3, [pc, #128]	; (8011a38 <shci_user_evt_proc+0x94>)
 80119b8:	781b      	ldrb	r3, [r3, #0]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d027      	beq.n	8011a0e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80119be:	f107 030c 	add.w	r3, r7, #12
 80119c2:	4619      	mov	r1, r3
 80119c4:	481b      	ldr	r0, [pc, #108]	; (8011a34 <shci_user_evt_proc+0x90>)
 80119c6:	f000 fc14 	bl	80121f2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80119ca:	4b1c      	ldr	r3, [pc, #112]	; (8011a3c <shci_user_evt_proc+0x98>)
 80119cc:	69db      	ldr	r3, [r3, #28]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d00c      	beq.n	80119ec <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80119d6:	2301      	movs	r3, #1
 80119d8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80119da:	4b18      	ldr	r3, [pc, #96]	; (8011a3c <shci_user_evt_proc+0x98>)
 80119dc:	69db      	ldr	r3, [r3, #28]
 80119de:	1d3a      	adds	r2, r7, #4
 80119e0:	4610      	mov	r0, r2
 80119e2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80119e4:	793a      	ldrb	r2, [r7, #4]
 80119e6:	4b14      	ldr	r3, [pc, #80]	; (8011a38 <shci_user_evt_proc+0x94>)
 80119e8:	701a      	strb	r2, [r3, #0]
 80119ea:	e002      	b.n	80119f2 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80119ec:	4b12      	ldr	r3, [pc, #72]	; (8011a38 <shci_user_evt_proc+0x94>)
 80119ee:	2201      	movs	r2, #1
 80119f0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80119f2:	4b11      	ldr	r3, [pc, #68]	; (8011a38 <shci_user_evt_proc+0x94>)
 80119f4:	781b      	ldrb	r3, [r3, #0]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d004      	beq.n	8011a04 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	4618      	mov	r0, r3
 80119fe:	f000 fa6d 	bl	8011edc <TL_MM_EvtDone>
 8011a02:	e004      	b.n	8011a0e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	4619      	mov	r1, r3
 8011a08:	480a      	ldr	r0, [pc, #40]	; (8011a34 <shci_user_evt_proc+0x90>)
 8011a0a:	f000 fb85 	bl	8012118 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8011a0e:	4809      	ldr	r0, [pc, #36]	; (8011a34 <shci_user_evt_proc+0x90>)
 8011a10:	f000 fb60 	bl	80120d4 <LST_is_empty>
 8011a14:	4603      	mov	r3, r0
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d107      	bne.n	8011a2a <shci_user_evt_proc+0x86>
 8011a1a:	4b07      	ldr	r3, [pc, #28]	; (8011a38 <shci_user_evt_proc+0x94>)
 8011a1c:	781b      	ldrb	r3, [r3, #0]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d003      	beq.n	8011a2a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8011a22:	4804      	ldr	r0, [pc, #16]	; (8011a34 <shci_user_evt_proc+0x90>)
 8011a24:	f7ef f8be 	bl	8000ba4 <shci_notify_asynch_evt>
  }


  return;
 8011a28:	bf00      	nop
 8011a2a:	bf00      	nop
}
 8011a2c:	3710      	adds	r7, #16
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}
 8011a32:	bf00      	nop
 8011a34:	20000598 	.word	0x20000598
 8011a38:	200005a8 	.word	0x200005a8
 8011a3c:	2000082c 	.word	0x2000082c

08011a40 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b084      	sub	sp, #16
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	60ba      	str	r2, [r7, #8]
 8011a48:	607b      	str	r3, [r7, #4]
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	81fb      	strh	r3, [r7, #14]
 8011a4e:	460b      	mov	r3, r1
 8011a50:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8011a52:	2000      	movs	r0, #0
 8011a54:	f000 f864 	bl	8011b20 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8011a58:	4b16      	ldr	r3, [pc, #88]	; (8011ab4 <shci_send+0x74>)
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	89fa      	ldrh	r2, [r7, #14]
 8011a5e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8011a62:	4b14      	ldr	r3, [pc, #80]	; (8011ab4 <shci_send+0x74>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	7b7a      	ldrb	r2, [r7, #13]
 8011a68:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8011a6a:	4b12      	ldr	r3, [pc, #72]	; (8011ab4 <shci_send+0x74>)
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	330c      	adds	r3, #12
 8011a70:	7b7a      	ldrb	r2, [r7, #13]
 8011a72:	68b9      	ldr	r1, [r7, #8]
 8011a74:	4618      	mov	r0, r3
 8011a76:	f002 fa03 	bl	8013e80 <memcpy>

  shciContext.io.Send(0,0);
 8011a7a:	4b0f      	ldr	r3, [pc, #60]	; (8011ab8 <shci_send+0x78>)
 8011a7c:	691b      	ldr	r3, [r3, #16]
 8011a7e:	2100      	movs	r1, #0
 8011a80:	2000      	movs	r0, #0
 8011a82:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8011a84:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8011a88:	f7ef f8a3 	bl	8000bd2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	f103 0008 	add.w	r0, r3, #8
 8011a92:	4b08      	ldr	r3, [pc, #32]	; (8011ab4 <shci_send+0x74>)
 8011a94:	6819      	ldr	r1, [r3, #0]
 8011a96:	4b07      	ldr	r3, [pc, #28]	; (8011ab4 <shci_send+0x74>)
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	789b      	ldrb	r3, [r3, #2]
 8011a9c:	3303      	adds	r3, #3
 8011a9e:	461a      	mov	r2, r3
 8011aa0:	f002 f9ee 	bl	8013e80 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8011aa4:	2001      	movs	r0, #1
 8011aa6:	f000 f83b 	bl	8011b20 <Cmd_SetStatus>

  return;
 8011aaa:	bf00      	nop
}
 8011aac:	3710      	adds	r7, #16
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bd80      	pop	{r7, pc}
 8011ab2:	bf00      	nop
 8011ab4:	200005a4 	.word	0x200005a4
 8011ab8:	2000082c 	.word	0x2000082c

08011abc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b086      	sub	sp, #24
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8011ac4:	4a10      	ldr	r2, [pc, #64]	; (8011b08 <TlInit+0x4c>)
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8011aca:	4810      	ldr	r0, [pc, #64]	; (8011b0c <TlInit+0x50>)
 8011acc:	f000 faf2 	bl	80120b4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8011ad0:	2001      	movs	r0, #1
 8011ad2:	f000 f825 	bl	8011b20 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8011ad6:	4b0e      	ldr	r3, [pc, #56]	; (8011b10 <TlInit+0x54>)
 8011ad8:	2201      	movs	r2, #1
 8011ada:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8011adc:	4b0d      	ldr	r3, [pc, #52]	; (8011b14 <TlInit+0x58>)
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d00c      	beq.n	8011afe <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8011ae8:	4b0b      	ldr	r3, [pc, #44]	; (8011b18 <TlInit+0x5c>)
 8011aea:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8011aec:	4b0b      	ldr	r3, [pc, #44]	; (8011b1c <TlInit+0x60>)
 8011aee:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8011af0:	4b08      	ldr	r3, [pc, #32]	; (8011b14 <TlInit+0x58>)
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	f107 020c 	add.w	r2, r7, #12
 8011af8:	4610      	mov	r0, r2
 8011afa:	4798      	blx	r3
  }

  return;
 8011afc:	bf00      	nop
 8011afe:	bf00      	nop
}
 8011b00:	3718      	adds	r7, #24
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}
 8011b06:	bf00      	nop
 8011b08:	200005a4 	.word	0x200005a4
 8011b0c:	20000598 	.word	0x20000598
 8011b10:	200005a8 	.word	0x200005a8
 8011b14:	2000082c 	.word	0x2000082c
 8011b18:	08011b71 	.word	0x08011b71
 8011b1c:	08011b89 	.word	0x08011b89

08011b20 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b082      	sub	sp, #8
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	4603      	mov	r3, r0
 8011b28:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8011b2a:	79fb      	ldrb	r3, [r7, #7]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d10b      	bne.n	8011b48 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8011b30:	4b0d      	ldr	r3, [pc, #52]	; (8011b68 <Cmd_SetStatus+0x48>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d003      	beq.n	8011b40 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8011b38:	4b0b      	ldr	r3, [pc, #44]	; (8011b68 <Cmd_SetStatus+0x48>)
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	2000      	movs	r0, #0
 8011b3e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8011b40:	4b0a      	ldr	r3, [pc, #40]	; (8011b6c <Cmd_SetStatus+0x4c>)
 8011b42:	2200      	movs	r2, #0
 8011b44:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8011b46:	e00b      	b.n	8011b60 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8011b48:	4b08      	ldr	r3, [pc, #32]	; (8011b6c <Cmd_SetStatus+0x4c>)
 8011b4a:	2201      	movs	r2, #1
 8011b4c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8011b4e:	4b06      	ldr	r3, [pc, #24]	; (8011b68 <Cmd_SetStatus+0x48>)
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d004      	beq.n	8011b60 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8011b56:	4b04      	ldr	r3, [pc, #16]	; (8011b68 <Cmd_SetStatus+0x48>)
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	2001      	movs	r0, #1
 8011b5c:	4798      	blx	r3
  return;
 8011b5e:	bf00      	nop
 8011b60:	bf00      	nop
}
 8011b62:	3708      	adds	r7, #8
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}
 8011b68:	2000084c 	.word	0x2000084c
 8011b6c:	200005a0 	.word	0x200005a0

08011b70 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b082      	sub	sp, #8
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8011b78:	2000      	movs	r0, #0
 8011b7a:	f7ef f81f 	bl	8000bbc <shci_cmd_resp_release>

  return;
 8011b7e:	bf00      	nop
}
 8011b80:	3708      	adds	r7, #8
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}
	...

08011b88 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b082      	sub	sp, #8
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8011b90:	6879      	ldr	r1, [r7, #4]
 8011b92:	4805      	ldr	r0, [pc, #20]	; (8011ba8 <TlUserEvtReceived+0x20>)
 8011b94:	f000 fae6 	bl	8012164 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8011b98:	4803      	ldr	r0, [pc, #12]	; (8011ba8 <TlUserEvtReceived+0x20>)
 8011b9a:	f7ef f803 	bl	8000ba4 <shci_notify_asynch_evt>

  return;
 8011b9e:	bf00      	nop
}
 8011ba0:	3708      	adds	r7, #8
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}
 8011ba6:	bf00      	nop
 8011ba8:	20000598 	.word	0x20000598

08011bac <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8011bac:	b480      	push	{r7}
 8011bae:	b083      	sub	sp, #12
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	4a05      	ldr	r2, [pc, #20]	; (8011bcc <shci_register_io_bus+0x20>)
 8011bb8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	4a04      	ldr	r2, [pc, #16]	; (8011bd0 <shci_register_io_bus+0x24>)
 8011bbe:	611a      	str	r2, [r3, #16]

  return;
 8011bc0:	bf00      	nop
}
 8011bc2:	370c      	adds	r7, #12
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bca:	4770      	bx	lr
 8011bcc:	08011d69 	.word	0x08011d69
 8011bd0:	08011dbd 	.word	0x08011dbd

08011bd4 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8011bd8:	f001 f882 	bl	8012ce0 <HW_IPCC_Enable>

  return;
 8011bdc:	bf00      	nop
}
 8011bde:	bd80      	pop	{r7, pc}

08011be0 <TL_Init>:


void TL_Init( void )
{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8011be4:	4b10      	ldr	r3, [pc, #64]	; (8011c28 <TL_Init+0x48>)
 8011be6:	4a11      	ldr	r2, [pc, #68]	; (8011c2c <TL_Init+0x4c>)
 8011be8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8011bea:	4b0f      	ldr	r3, [pc, #60]	; (8011c28 <TL_Init+0x48>)
 8011bec:	4a10      	ldr	r2, [pc, #64]	; (8011c30 <TL_Init+0x50>)
 8011bee:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8011bf0:	4b0d      	ldr	r3, [pc, #52]	; (8011c28 <TL_Init+0x48>)
 8011bf2:	4a10      	ldr	r2, [pc, #64]	; (8011c34 <TL_Init+0x54>)
 8011bf4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8011bf6:	4b0c      	ldr	r3, [pc, #48]	; (8011c28 <TL_Init+0x48>)
 8011bf8:	4a0f      	ldr	r2, [pc, #60]	; (8011c38 <TL_Init+0x58>)
 8011bfa:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8011bfc:	4b0a      	ldr	r3, [pc, #40]	; (8011c28 <TL_Init+0x48>)
 8011bfe:	4a0f      	ldr	r2, [pc, #60]	; (8011c3c <TL_Init+0x5c>)
 8011c00:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8011c02:	4b09      	ldr	r3, [pc, #36]	; (8011c28 <TL_Init+0x48>)
 8011c04:	4a0e      	ldr	r2, [pc, #56]	; (8011c40 <TL_Init+0x60>)
 8011c06:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8011c08:	4b07      	ldr	r3, [pc, #28]	; (8011c28 <TL_Init+0x48>)
 8011c0a:	4a0e      	ldr	r2, [pc, #56]	; (8011c44 <TL_Init+0x64>)
 8011c0c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8011c0e:	4b06      	ldr	r3, [pc, #24]	; (8011c28 <TL_Init+0x48>)
 8011c10:	4a0d      	ldr	r2, [pc, #52]	; (8011c48 <TL_Init+0x68>)
 8011c12:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8011c14:	4b04      	ldr	r3, [pc, #16]	; (8011c28 <TL_Init+0x48>)
 8011c16:	4a0d      	ldr	r2, [pc, #52]	; (8011c4c <TL_Init+0x6c>)
 8011c18:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8011c1a:	4b03      	ldr	r3, [pc, #12]	; (8011c28 <TL_Init+0x48>)
 8011c1c:	4a0c      	ldr	r2, [pc, #48]	; (8011c50 <TL_Init+0x70>)
 8011c1e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8011c20:	f001 f872 	bl	8012d08 <HW_IPCC_Init>

  return;
 8011c24:	bf00      	nop
}
 8011c26:	bd80      	pop	{r7, pc}
 8011c28:	20030000 	.word	0x20030000
 8011c2c:	20030028 	.word	0x20030028
 8011c30:	20030048 	.word	0x20030048
 8011c34:	20030058 	.word	0x20030058
 8011c38:	20030068 	.word	0x20030068
 8011c3c:	20030070 	.word	0x20030070
 8011c40:	20030078 	.word	0x20030078
 8011c44:	20030080 	.word	0x20030080
 8011c48:	2003009c 	.word	0x2003009c
 8011c4c:	200300a0 	.word	0x200300a0
 8011c50:	200300ac 	.word	0x200300ac

08011c54 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b084      	sub	sp, #16
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8011c60:	4811      	ldr	r0, [pc, #68]	; (8011ca8 <TL_BLE_Init+0x54>)
 8011c62:	f000 fa27 	bl	80120b4 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8011c66:	4b11      	ldr	r3, [pc, #68]	; (8011cac <TL_BLE_Init+0x58>)
 8011c68:	685b      	ldr	r3, [r3, #4]
 8011c6a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	689a      	ldr	r2, [r3, #8]
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	68da      	ldr	r2, [r3, #12]
 8011c78:	68bb      	ldr	r3, [r7, #8]
 8011c7a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8011c7c:	68bb      	ldr	r3, [r7, #8]
 8011c7e:	4a0c      	ldr	r2, [pc, #48]	; (8011cb0 <TL_BLE_Init+0x5c>)
 8011c80:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8011c82:	68bb      	ldr	r3, [r7, #8]
 8011c84:	4a08      	ldr	r2, [pc, #32]	; (8011ca8 <TL_BLE_Init+0x54>)
 8011c86:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8011c88:	f001 f854 	bl	8012d34 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	4a08      	ldr	r2, [pc, #32]	; (8011cb4 <TL_BLE_Init+0x60>)
 8011c92:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	685b      	ldr	r3, [r3, #4]
 8011c98:	4a07      	ldr	r2, [pc, #28]	; (8011cb8 <TL_BLE_Init+0x64>)
 8011c9a:	6013      	str	r3, [r2, #0]

  return 0;
 8011c9c:	2300      	movs	r3, #0
}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	3710      	adds	r7, #16
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bd80      	pop	{r7, pc}
 8011ca6:	bf00      	nop
 8011ca8:	200300c8 	.word	0x200300c8
 8011cac:	20030000 	.word	0x20030000
 8011cb0:	20030a58 	.word	0x20030a58
 8011cb4:	20000858 	.word	0x20000858
 8011cb8:	2000085c 	.word	0x2000085c

08011cbc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b082      	sub	sp, #8
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
 8011cc4:	460b      	mov	r3, r1
 8011cc6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8011cc8:	4b09      	ldr	r3, [pc, #36]	; (8011cf0 <TL_BLE_SendCmd+0x34>)
 8011cca:	685b      	ldr	r3, [r3, #4]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	2201      	movs	r2, #1
 8011cd0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8011cd2:	4b07      	ldr	r3, [pc, #28]	; (8011cf0 <TL_BLE_SendCmd+0x34>)
 8011cd4:	685b      	ldr	r3, [r3, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	4619      	mov	r1, r3
 8011cda:	2001      	movs	r0, #1
 8011cdc:	f000 f96c 	bl	8011fb8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8011ce0:	f001 f832 	bl	8012d48 <HW_IPCC_BLE_SendCmd>

  return 0;
 8011ce4:	2300      	movs	r3, #0
}
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	3708      	adds	r7, #8
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bd80      	pop	{r7, pc}
 8011cee:	bf00      	nop
 8011cf0:	20030000 	.word	0x20030000

08011cf4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b082      	sub	sp, #8
 8011cf8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8011cfa:	e01c      	b.n	8011d36 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8011cfc:	1d3b      	adds	r3, r7, #4
 8011cfe:	4619      	mov	r1, r3
 8011d00:	4812      	ldr	r0, [pc, #72]	; (8011d4c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8011d02:	f000 fa76 	bl	80121f2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	7a5b      	ldrb	r3, [r3, #9]
 8011d0a:	2b0f      	cmp	r3, #15
 8011d0c:	d003      	beq.n	8011d16 <HW_IPCC_BLE_RxEvtNot+0x22>
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	7a5b      	ldrb	r3, [r3, #9]
 8011d12:	2b0e      	cmp	r3, #14
 8011d14:	d105      	bne.n	8011d22 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	4619      	mov	r1, r3
 8011d1a:	2002      	movs	r0, #2
 8011d1c:	f000 f94c 	bl	8011fb8 <OutputDbgTrace>
 8011d20:	e004      	b.n	8011d2c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	4619      	mov	r1, r3
 8011d26:	2003      	movs	r0, #3
 8011d28:	f000 f946 	bl	8011fb8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8011d2c:	4b08      	ldr	r3, [pc, #32]	; (8011d50 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	687a      	ldr	r2, [r7, #4]
 8011d32:	4610      	mov	r0, r2
 8011d34:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8011d36:	4805      	ldr	r0, [pc, #20]	; (8011d4c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8011d38:	f000 f9cc 	bl	80120d4 <LST_is_empty>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d0dc      	beq.n	8011cfc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8011d42:	bf00      	nop
}
 8011d44:	3708      	adds	r7, #8
 8011d46:	46bd      	mov	sp, r7
 8011d48:	bd80      	pop	{r7, pc}
 8011d4a:	bf00      	nop
 8011d4c:	200300c8 	.word	0x200300c8
 8011d50:	20000858 	.word	0x20000858

08011d54 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8011d58:	4b02      	ldr	r3, [pc, #8]	; (8011d64 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	4798      	blx	r3

  return;
 8011d5e:	bf00      	nop
}
 8011d60:	bd80      	pop	{r7, pc}
 8011d62:	bf00      	nop
 8011d64:	2000085c 	.word	0x2000085c

08011d68 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b084      	sub	sp, #16
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8011d74:	480d      	ldr	r0, [pc, #52]	; (8011dac <TL_SYS_Init+0x44>)
 8011d76:	f000 f99d 	bl	80120b4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8011d7a:	4b0d      	ldr	r3, [pc, #52]	; (8011db0 <TL_SYS_Init+0x48>)
 8011d7c:	68db      	ldr	r3, [r3, #12]
 8011d7e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	689a      	ldr	r2, [r3, #8]
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8011d88:	68bb      	ldr	r3, [r7, #8]
 8011d8a:	4a08      	ldr	r2, [pc, #32]	; (8011dac <TL_SYS_Init+0x44>)
 8011d8c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8011d8e:	f000 fffd 	bl	8012d8c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	4a07      	ldr	r2, [pc, #28]	; (8011db4 <TL_SYS_Init+0x4c>)
 8011d98:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	685b      	ldr	r3, [r3, #4]
 8011d9e:	4a06      	ldr	r2, [pc, #24]	; (8011db8 <TL_SYS_Init+0x50>)
 8011da0:	6013      	str	r3, [r2, #0]

  return 0;
 8011da2:	2300      	movs	r3, #0
}
 8011da4:	4618      	mov	r0, r3
 8011da6:	3710      	adds	r7, #16
 8011da8:	46bd      	mov	sp, r7
 8011daa:	bd80      	pop	{r7, pc}
 8011dac:	200300d0 	.word	0x200300d0
 8011db0:	20030000 	.word	0x20030000
 8011db4:	20000860 	.word	0x20000860
 8011db8:	20000864 	.word	0x20000864

08011dbc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b082      	sub	sp, #8
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
 8011dc4:	460b      	mov	r3, r1
 8011dc6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8011dc8:	4b09      	ldr	r3, [pc, #36]	; (8011df0 <TL_SYS_SendCmd+0x34>)
 8011dca:	68db      	ldr	r3, [r3, #12]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	2210      	movs	r2, #16
 8011dd0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8011dd2:	4b07      	ldr	r3, [pc, #28]	; (8011df0 <TL_SYS_SendCmd+0x34>)
 8011dd4:	68db      	ldr	r3, [r3, #12]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	4619      	mov	r1, r3
 8011dda:	2004      	movs	r0, #4
 8011ddc:	f000 f8ec 	bl	8011fb8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8011de0:	f000 ffde 	bl	8012da0 <HW_IPCC_SYS_SendCmd>

  return 0;
 8011de4:	2300      	movs	r3, #0
}
 8011de6:	4618      	mov	r0, r3
 8011de8:	3708      	adds	r7, #8
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd80      	pop	{r7, pc}
 8011dee:	bf00      	nop
 8011df0:	20030000 	.word	0x20030000

08011df4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8011df8:	4b07      	ldr	r3, [pc, #28]	; (8011e18 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8011dfa:	68db      	ldr	r3, [r3, #12]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	4619      	mov	r1, r3
 8011e00:	2005      	movs	r0, #5
 8011e02:	f000 f8d9 	bl	8011fb8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8011e06:	4b05      	ldr	r3, [pc, #20]	; (8011e1c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	4a03      	ldr	r2, [pc, #12]	; (8011e18 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8011e0c:	68d2      	ldr	r2, [r2, #12]
 8011e0e:	6812      	ldr	r2, [r2, #0]
 8011e10:	4610      	mov	r0, r2
 8011e12:	4798      	blx	r3

  return;
 8011e14:	bf00      	nop
}
 8011e16:	bd80      	pop	{r7, pc}
 8011e18:	20030000 	.word	0x20030000
 8011e1c:	20000860 	.word	0x20000860

08011e20 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b082      	sub	sp, #8
 8011e24:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8011e26:	e00e      	b.n	8011e46 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8011e28:	1d3b      	adds	r3, r7, #4
 8011e2a:	4619      	mov	r1, r3
 8011e2c:	480b      	ldr	r0, [pc, #44]	; (8011e5c <HW_IPCC_SYS_EvtNot+0x3c>)
 8011e2e:	f000 f9e0 	bl	80121f2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	4619      	mov	r1, r3
 8011e36:	2006      	movs	r0, #6
 8011e38:	f000 f8be 	bl	8011fb8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8011e3c:	4b08      	ldr	r3, [pc, #32]	; (8011e60 <HW_IPCC_SYS_EvtNot+0x40>)
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	687a      	ldr	r2, [r7, #4]
 8011e42:	4610      	mov	r0, r2
 8011e44:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8011e46:	4805      	ldr	r0, [pc, #20]	; (8011e5c <HW_IPCC_SYS_EvtNot+0x3c>)
 8011e48:	f000 f944 	bl	80120d4 <LST_is_empty>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d0ea      	beq.n	8011e28 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8011e52:	bf00      	nop
}
 8011e54:	3708      	adds	r7, #8
 8011e56:	46bd      	mov	sp, r7
 8011e58:	bd80      	pop	{r7, pc}
 8011e5a:	bf00      	nop
 8011e5c:	200300d0 	.word	0x200300d0
 8011e60:	20000864 	.word	0x20000864

08011e64 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b082      	sub	sp, #8
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8011e6c:	4817      	ldr	r0, [pc, #92]	; (8011ecc <TL_MM_Init+0x68>)
 8011e6e:	f000 f921 	bl	80120b4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8011e72:	4817      	ldr	r0, [pc, #92]	; (8011ed0 <TL_MM_Init+0x6c>)
 8011e74:	f000 f91e 	bl	80120b4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8011e78:	4b16      	ldr	r3, [pc, #88]	; (8011ed4 <TL_MM_Init+0x70>)
 8011e7a:	691b      	ldr	r3, [r3, #16]
 8011e7c:	4a16      	ldr	r2, [pc, #88]	; (8011ed8 <TL_MM_Init+0x74>)
 8011e7e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8011e80:	4b15      	ldr	r3, [pc, #84]	; (8011ed8 <TL_MM_Init+0x74>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	687a      	ldr	r2, [r7, #4]
 8011e86:	6892      	ldr	r2, [r2, #8]
 8011e88:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8011e8a:	4b13      	ldr	r3, [pc, #76]	; (8011ed8 <TL_MM_Init+0x74>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	687a      	ldr	r2, [r7, #4]
 8011e90:	68d2      	ldr	r2, [r2, #12]
 8011e92:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8011e94:	4b10      	ldr	r3, [pc, #64]	; (8011ed8 <TL_MM_Init+0x74>)
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	4a0c      	ldr	r2, [pc, #48]	; (8011ecc <TL_MM_Init+0x68>)
 8011e9a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8011e9c:	4b0e      	ldr	r3, [pc, #56]	; (8011ed8 <TL_MM_Init+0x74>)
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	687a      	ldr	r2, [r7, #4]
 8011ea2:	6812      	ldr	r2, [r2, #0]
 8011ea4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8011ea6:	4b0c      	ldr	r3, [pc, #48]	; (8011ed8 <TL_MM_Init+0x74>)
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	687a      	ldr	r2, [r7, #4]
 8011eac:	6852      	ldr	r2, [r2, #4]
 8011eae:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8011eb0:	4b09      	ldr	r3, [pc, #36]	; (8011ed8 <TL_MM_Init+0x74>)
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	687a      	ldr	r2, [r7, #4]
 8011eb6:	6912      	ldr	r2, [r2, #16]
 8011eb8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8011eba:	4b07      	ldr	r3, [pc, #28]	; (8011ed8 <TL_MM_Init+0x74>)
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	687a      	ldr	r2, [r7, #4]
 8011ec0:	6952      	ldr	r2, [r2, #20]
 8011ec2:	619a      	str	r2, [r3, #24]

  return;
 8011ec4:	bf00      	nop
}
 8011ec6:	3708      	adds	r7, #8
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	bd80      	pop	{r7, pc}
 8011ecc:	200300b8 	.word	0x200300b8
 8011ed0:	20000850 	.word	0x20000850
 8011ed4:	20030000 	.word	0x20030000
 8011ed8:	20000868 	.word	0x20000868

08011edc <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b082      	sub	sp, #8
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8011ee4:	6879      	ldr	r1, [r7, #4]
 8011ee6:	4807      	ldr	r0, [pc, #28]	; (8011f04 <TL_MM_EvtDone+0x28>)
 8011ee8:	f000 f93c 	bl	8012164 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8011eec:	6879      	ldr	r1, [r7, #4]
 8011eee:	2000      	movs	r0, #0
 8011ef0:	f000 f862 	bl	8011fb8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8011ef4:	4804      	ldr	r0, [pc, #16]	; (8011f08 <TL_MM_EvtDone+0x2c>)
 8011ef6:	f000 ff79 	bl	8012dec <HW_IPCC_MM_SendFreeBuf>

  return;
 8011efa:	bf00      	nop
}
 8011efc:	3708      	adds	r7, #8
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}
 8011f02:	bf00      	nop
 8011f04:	20000850 	.word	0x20000850
 8011f08:	08011f0d 	.word	0x08011f0d

08011f0c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b082      	sub	sp, #8
 8011f10:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8011f12:	e00c      	b.n	8011f2e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8011f14:	1d3b      	adds	r3, r7, #4
 8011f16:	4619      	mov	r1, r3
 8011f18:	480a      	ldr	r0, [pc, #40]	; (8011f44 <SendFreeBuf+0x38>)
 8011f1a:	f000 f96a 	bl	80121f2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8011f1e:	4b0a      	ldr	r3, [pc, #40]	; (8011f48 <SendFreeBuf+0x3c>)
 8011f20:	691b      	ldr	r3, [r3, #16]
 8011f22:	691b      	ldr	r3, [r3, #16]
 8011f24:	687a      	ldr	r2, [r7, #4]
 8011f26:	4611      	mov	r1, r2
 8011f28:	4618      	mov	r0, r3
 8011f2a:	f000 f91b 	bl	8012164 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8011f2e:	4805      	ldr	r0, [pc, #20]	; (8011f44 <SendFreeBuf+0x38>)
 8011f30:	f000 f8d0 	bl	80120d4 <LST_is_empty>
 8011f34:	4603      	mov	r3, r0
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d0ec      	beq.n	8011f14 <SendFreeBuf+0x8>
  }

  return;
 8011f3a:	bf00      	nop
}
 8011f3c:	3708      	adds	r7, #8
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}
 8011f42:	bf00      	nop
 8011f44:	20000850 	.word	0x20000850
 8011f48:	20030000 	.word	0x20030000

08011f4c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8011f50:	4805      	ldr	r0, [pc, #20]	; (8011f68 <TL_TRACES_Init+0x1c>)
 8011f52:	f000 f8af 	bl	80120b4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8011f56:	4b05      	ldr	r3, [pc, #20]	; (8011f6c <TL_TRACES_Init+0x20>)
 8011f58:	695b      	ldr	r3, [r3, #20]
 8011f5a:	4a03      	ldr	r2, [pc, #12]	; (8011f68 <TL_TRACES_Init+0x1c>)
 8011f5c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8011f5e:	f000 ff7b 	bl	8012e58 <HW_IPCC_TRACES_Init>

  return;
 8011f62:	bf00      	nop
}
 8011f64:	bd80      	pop	{r7, pc}
 8011f66:	bf00      	nop
 8011f68:	200300c0 	.word	0x200300c0
 8011f6c:	20030000 	.word	0x20030000

08011f70 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b082      	sub	sp, #8
 8011f74:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8011f76:	e008      	b.n	8011f8a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8011f78:	1d3b      	adds	r3, r7, #4
 8011f7a:	4619      	mov	r1, r3
 8011f7c:	4808      	ldr	r0, [pc, #32]	; (8011fa0 <HW_IPCC_TRACES_EvtNot+0x30>)
 8011f7e:	f000 f938 	bl	80121f2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	4618      	mov	r0, r3
 8011f86:	f000 f80d 	bl	8011fa4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8011f8a:	4805      	ldr	r0, [pc, #20]	; (8011fa0 <HW_IPCC_TRACES_EvtNot+0x30>)
 8011f8c:	f000 f8a2 	bl	80120d4 <LST_is_empty>
 8011f90:	4603      	mov	r3, r0
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d0f0      	beq.n	8011f78 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8011f96:	bf00      	nop
}
 8011f98:	3708      	adds	r7, #8
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bd80      	pop	{r7, pc}
 8011f9e:	bf00      	nop
 8011fa0:	200300c0 	.word	0x200300c0

08011fa4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8011fa4:	b480      	push	{r7}
 8011fa6:	b083      	sub	sp, #12
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8011fac:	bf00      	nop
 8011fae:	370c      	adds	r7, #12
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb6:	4770      	bx	lr

08011fb8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8011fb8:	b480      	push	{r7}
 8011fba:	b085      	sub	sp, #20
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	6039      	str	r1, [r7, #0]
 8011fc2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8011fc4:	79fb      	ldrb	r3, [r7, #7]
 8011fc6:	2b06      	cmp	r3, #6
 8011fc8:	d845      	bhi.n	8012056 <OutputDbgTrace+0x9e>
 8011fca:	a201      	add	r2, pc, #4	; (adr r2, 8011fd0 <OutputDbgTrace+0x18>)
 8011fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fd0:	08011fed 	.word	0x08011fed
 8011fd4:	08012011 	.word	0x08012011
 8011fd8:	08012017 	.word	0x08012017
 8011fdc:	0801202b 	.word	0x0801202b
 8011fe0:	08012037 	.word	0x08012037
 8011fe4:	0801203d 	.word	0x0801203d
 8011fe8:	0801204b 	.word	0x0801204b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	7a5b      	ldrb	r3, [r3, #9]
 8011ff4:	2bff      	cmp	r3, #255	; 0xff
 8011ff6:	d005      	beq.n	8012004 <OutputDbgTrace+0x4c>
 8011ff8:	2bff      	cmp	r3, #255	; 0xff
 8011ffa:	dc05      	bgt.n	8012008 <OutputDbgTrace+0x50>
 8011ffc:	2b0e      	cmp	r3, #14
 8011ffe:	d005      	beq.n	801200c <OutputDbgTrace+0x54>
 8012000:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8012002:	e001      	b.n	8012008 <OutputDbgTrace+0x50>
          break;
 8012004:	bf00      	nop
 8012006:	e027      	b.n	8012058 <OutputDbgTrace+0xa0>
          break;
 8012008:	bf00      	nop
 801200a:	e025      	b.n	8012058 <OutputDbgTrace+0xa0>
          break;
 801200c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 801200e:	e023      	b.n	8012058 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8012010:	683b      	ldr	r3, [r7, #0]
 8012012:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8012014:	e020      	b.n	8012058 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	7a5b      	ldrb	r3, [r3, #9]
 801201e:	2b0e      	cmp	r3, #14
 8012020:	d001      	beq.n	8012026 <OutputDbgTrace+0x6e>
 8012022:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8012024:	e000      	b.n	8012028 <OutputDbgTrace+0x70>
          break;
 8012026:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8012028:	e016      	b.n	8012058 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801202a:	683b      	ldr	r3, [r7, #0]
 801202c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	7a5b      	ldrb	r3, [r3, #9]
 8012032:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8012034:	e010      	b.n	8012058 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8012036:	683b      	ldr	r3, [r7, #0]
 8012038:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 801203a:	e00d      	b.n	8012058 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801203c:	683b      	ldr	r3, [r7, #0]
 801203e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	7a5b      	ldrb	r3, [r3, #9]
 8012044:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8012046:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8012048:	e006      	b.n	8012058 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801204a:	683b      	ldr	r3, [r7, #0]
 801204c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	7a5b      	ldrb	r3, [r3, #9]
 8012052:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8012054:	e000      	b.n	8012058 <OutputDbgTrace+0xa0>

    default:
      break;
 8012056:	bf00      	nop
  }

  return;
 8012058:	bf00      	nop
}
 801205a:	3714      	adds	r7, #20
 801205c:	46bd      	mov	sp, r7
 801205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012062:	4770      	bx	lr

08012064 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8012064:	b480      	push	{r7}
 8012066:	b085      	sub	sp, #20
 8012068:	af00      	add	r7, sp, #0
 801206a:	4603      	mov	r3, r0
 801206c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 801206e:	4b0f      	ldr	r3, [pc, #60]	; (80120ac <OTP_Read+0x48>)
 8012070:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8012072:	e002      	b.n	801207a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	3b08      	subs	r3, #8
 8012078:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	3307      	adds	r3, #7
 801207e:	781b      	ldrb	r3, [r3, #0]
 8012080:	79fa      	ldrb	r2, [r7, #7]
 8012082:	429a      	cmp	r2, r3
 8012084:	d003      	beq.n	801208e <OTP_Read+0x2a>
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	4a09      	ldr	r2, [pc, #36]	; (80120b0 <OTP_Read+0x4c>)
 801208a:	4293      	cmp	r3, r2
 801208c:	d1f2      	bne.n	8012074 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	3307      	adds	r3, #7
 8012092:	781b      	ldrb	r3, [r3, #0]
 8012094:	79fa      	ldrb	r2, [r7, #7]
 8012096:	429a      	cmp	r2, r3
 8012098:	d001      	beq.n	801209e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 801209a:	2300      	movs	r3, #0
 801209c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 801209e:	68fb      	ldr	r3, [r7, #12]
}
 80120a0:	4618      	mov	r0, r3
 80120a2:	3714      	adds	r7, #20
 80120a4:	46bd      	mov	sp, r7
 80120a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120aa:	4770      	bx	lr
 80120ac:	1fff73f8 	.word	0x1fff73f8
 80120b0:	1fff7000 	.word	0x1fff7000

080120b4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80120b4:	b480      	push	{r7}
 80120b6:	b083      	sub	sp, #12
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	687a      	ldr	r2, [r7, #4]
 80120c0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	687a      	ldr	r2, [r7, #4]
 80120c6:	605a      	str	r2, [r3, #4]
}
 80120c8:	bf00      	nop
 80120ca:	370c      	adds	r7, #12
 80120cc:	46bd      	mov	sp, r7
 80120ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d2:	4770      	bx	lr

080120d4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80120d4:	b480      	push	{r7}
 80120d6:	b087      	sub	sp, #28
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120dc:	f3ef 8310 	mrs	r3, PRIMASK
 80120e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80120e2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80120e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80120e6:	b672      	cpsid	i
}
 80120e8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	687a      	ldr	r2, [r7, #4]
 80120f0:	429a      	cmp	r2, r3
 80120f2:	d102      	bne.n	80120fa <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80120f4:	2301      	movs	r3, #1
 80120f6:	75fb      	strb	r3, [r7, #23]
 80120f8:	e001      	b.n	80120fe <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80120fa:	2300      	movs	r3, #0
 80120fc:	75fb      	strb	r3, [r7, #23]
 80120fe:	693b      	ldr	r3, [r7, #16]
 8012100:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012102:	68bb      	ldr	r3, [r7, #8]
 8012104:	f383 8810 	msr	PRIMASK, r3
}
 8012108:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 801210a:	7dfb      	ldrb	r3, [r7, #23]
}
 801210c:	4618      	mov	r0, r3
 801210e:	371c      	adds	r7, #28
 8012110:	46bd      	mov	sp, r7
 8012112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012116:	4770      	bx	lr

08012118 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8012118:	b480      	push	{r7}
 801211a:	b087      	sub	sp, #28
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
 8012120:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012122:	f3ef 8310 	mrs	r3, PRIMASK
 8012126:	60fb      	str	r3, [r7, #12]
  return(result);
 8012128:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801212a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801212c:	b672      	cpsid	i
}
 801212e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	681a      	ldr	r2, [r3, #0]
 8012134:	683b      	ldr	r3, [r7, #0]
 8012136:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	687a      	ldr	r2, [r7, #4]
 801213c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	683a      	ldr	r2, [r7, #0]
 8012142:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8012144:	683b      	ldr	r3, [r7, #0]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	683a      	ldr	r2, [r7, #0]
 801214a:	605a      	str	r2, [r3, #4]
 801214c:	697b      	ldr	r3, [r7, #20]
 801214e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012150:	693b      	ldr	r3, [r7, #16]
 8012152:	f383 8810 	msr	PRIMASK, r3
}
 8012156:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012158:	bf00      	nop
 801215a:	371c      	adds	r7, #28
 801215c:	46bd      	mov	sp, r7
 801215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012162:	4770      	bx	lr

08012164 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8012164:	b480      	push	{r7}
 8012166:	b087      	sub	sp, #28
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
 801216c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801216e:	f3ef 8310 	mrs	r3, PRIMASK
 8012172:	60fb      	str	r3, [r7, #12]
  return(result);
 8012174:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012176:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012178:	b672      	cpsid	i
}
 801217a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 801217c:	683b      	ldr	r3, [r7, #0]
 801217e:	687a      	ldr	r2, [r7, #4]
 8012180:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	685a      	ldr	r2, [r3, #4]
 8012186:	683b      	ldr	r3, [r7, #0]
 8012188:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	683a      	ldr	r2, [r7, #0]
 801218e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8012190:	683b      	ldr	r3, [r7, #0]
 8012192:	685b      	ldr	r3, [r3, #4]
 8012194:	683a      	ldr	r2, [r7, #0]
 8012196:	601a      	str	r2, [r3, #0]
 8012198:	697b      	ldr	r3, [r7, #20]
 801219a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801219c:	693b      	ldr	r3, [r7, #16]
 801219e:	f383 8810 	msr	PRIMASK, r3
}
 80121a2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80121a4:	bf00      	nop
 80121a6:	371c      	adds	r7, #28
 80121a8:	46bd      	mov	sp, r7
 80121aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ae:	4770      	bx	lr

080121b0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80121b0:	b480      	push	{r7}
 80121b2:	b087      	sub	sp, #28
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80121b8:	f3ef 8310 	mrs	r3, PRIMASK
 80121bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80121be:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80121c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80121c2:	b672      	cpsid	i
}
 80121c4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	685b      	ldr	r3, [r3, #4]
 80121ca:	687a      	ldr	r2, [r7, #4]
 80121cc:	6812      	ldr	r2, [r2, #0]
 80121ce:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	687a      	ldr	r2, [r7, #4]
 80121d6:	6852      	ldr	r2, [r2, #4]
 80121d8:	605a      	str	r2, [r3, #4]
 80121da:	697b      	ldr	r3, [r7, #20]
 80121dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80121de:	693b      	ldr	r3, [r7, #16]
 80121e0:	f383 8810 	msr	PRIMASK, r3
}
 80121e4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80121e6:	bf00      	nop
 80121e8:	371c      	adds	r7, #28
 80121ea:	46bd      	mov	sp, r7
 80121ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f0:	4770      	bx	lr

080121f2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80121f2:	b580      	push	{r7, lr}
 80121f4:	b086      	sub	sp, #24
 80121f6:	af00      	add	r7, sp, #0
 80121f8:	6078      	str	r0, [r7, #4]
 80121fa:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80121fc:	f3ef 8310 	mrs	r3, PRIMASK
 8012200:	60fb      	str	r3, [r7, #12]
  return(result);
 8012202:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012204:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012206:	b672      	cpsid	i
}
 8012208:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	681a      	ldr	r2, [r3, #0]
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	4618      	mov	r0, r3
 8012218:	f7ff ffca 	bl	80121b0 <LST_remove_node>
 801221c:	697b      	ldr	r3, [r7, #20]
 801221e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012220:	693b      	ldr	r3, [r7, #16]
 8012222:	f383 8810 	msr	PRIMASK, r3
}
 8012226:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012228:	bf00      	nop
 801222a:	3718      	adds	r7, #24
 801222c:	46bd      	mov	sp, r7
 801222e:	bd80      	pop	{r7, pc}

08012230 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8012230:	b480      	push	{r7}
 8012232:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8012234:	4b03      	ldr	r3, [pc, #12]	; (8012244 <LL_FLASH_GetUDN+0x14>)
 8012236:	681b      	ldr	r3, [r3, #0]
}
 8012238:	4618      	mov	r0, r3
 801223a:	46bd      	mov	sp, r7
 801223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012240:	4770      	bx	lr
 8012242:	bf00      	nop
 8012244:	1fff7580 	.word	0x1fff7580

08012248 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8012248:	b480      	push	{r7}
 801224a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 801224c:	4b03      	ldr	r3, [pc, #12]	; (801225c <LL_FLASH_GetDeviceID+0x14>)
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	b2db      	uxtb	r3, r3
}
 8012252:	4618      	mov	r0, r3
 8012254:	46bd      	mov	sp, r7
 8012256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225a:	4770      	bx	lr
 801225c:	1fff7584 	.word	0x1fff7584

08012260 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8012260:	b480      	push	{r7}
 8012262:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8012264:	4b03      	ldr	r3, [pc, #12]	; (8012274 <LL_FLASH_GetSTCompanyID+0x14>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	0a1b      	lsrs	r3, r3, #8
}
 801226a:	4618      	mov	r0, r3
 801226c:	46bd      	mov	sp, r7
 801226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012272:	4770      	bx	lr
 8012274:	1fff7584 	.word	0x1fff7584

08012278 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8012278:	b5b0      	push	{r4, r5, r7, lr}
 801227a:	b090      	sub	sp, #64	; 0x40
 801227c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801227e:	2392      	movs	r3, #146	; 0x92
 8012280:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8012284:	4b25      	ldr	r3, [pc, #148]	; (801231c <APP_BLE_Init+0xa4>)
 8012286:	1d3c      	adds	r4, r7, #4
 8012288:	461d      	mov	r5, r3
 801228a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801228c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801228e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012296:	e895 0003 	ldmia.w	r5, {r0, r1}
 801229a:	e884 0003 	stmia.w	r4, {r0, r1}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 801229e:	f000 f905 	bl	80124ac <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80122a2:	2101      	movs	r1, #1
 80122a4:	2002      	movs	r0, #2
 80122a6:	f001 fb51 	bl	801394c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80122aa:	4a1d      	ldr	r2, [pc, #116]	; (8012320 <APP_BLE_Init+0xa8>)
 80122ac:	2100      	movs	r1, #0
 80122ae:	2002      	movs	r0, #2
 80122b0:	f001 fc78 	bl	8013ba4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80122b4:	1d3b      	adds	r3, r7, #4
 80122b6:	4618      	mov	r0, r3
 80122b8:	f7ff f8d0 	bl	801145c <SHCI_C2_BLE_Init>
 80122bc:	4603      	mov	r3, r0
 80122be:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 80122c2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d001      	beq.n	80122ce <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80122ca:	f7ef f9c1 	bl	8001650 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80122ce:	f000 f903 	bl	80124d8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80122d2:	f7ff f81d 	bl	8011310 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80122d6:	4b13      	ldr	r3, [pc, #76]	; (8012324 <APP_BLE_Init+0xac>)
 80122d8:	2200      	movs	r2, #0
 80122da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80122de:	4b11      	ldr	r3, [pc, #68]	; (8012324 <APP_BLE_Init+0xac>)
 80122e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80122e4:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80122e6:	4a10      	ldr	r2, [pc, #64]	; (8012328 <APP_BLE_Init+0xb0>)
 80122e8:	2100      	movs	r1, #0
 80122ea:	2001      	movs	r0, #1
 80122ec:	f001 fc5a 	bl	8013ba4 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80122f0:	2006      	movs	r0, #6
 80122f2:	f7fe fe81 	bl	8010ff8 <aci_hal_set_radio_activity_mask>
 80122f6:	4603      	mov	r3, r0
 80122f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80122fc:	f000 fa9b 	bl	8012836 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8012300:	4b08      	ldr	r3, [pc, #32]	; (8012324 <APP_BLE_Init+0xac>)
 8012302:	2200      	movs	r2, #0
 8012304:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8012306:	4b07      	ldr	r3, [pc, #28]	; (8012324 <APP_BLE_Init+0xac>)
 8012308:	2200      	movs	r2, #0
 801230a:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 801230c:	2001      	movs	r0, #1
 801230e:	f000 f997 	bl	8012640 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8012312:	bf00      	nop
}
 8012314:	3740      	adds	r7, #64	; 0x40
 8012316:	46bd      	mov	sp, r7
 8012318:	bdb0      	pop	{r4, r5, r7, pc}
 801231a:	bf00      	nop
 801231c:	08014cc4 	.word	0x08014cc4
 8012320:	08011679 	.word	0x08011679
 8012324:	200005ac 	.word	0x200005ac
 8012328:	08012729 	.word	0x08012729

0801232c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b08a      	sub	sp, #40	; 0x28
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8012334:	2392      	movs	r3, #146	; 0x92
 8012336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	3301      	adds	r3, #1
 801233e:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8012340:	6a3b      	ldr	r3, [r7, #32]
 8012342:	781b      	ldrb	r3, [r3, #0]
 8012344:	2bff      	cmp	r3, #255	; 0xff
 8012346:	d053      	beq.n	80123f0 <SVCCTL_App_Notification+0xc4>
 8012348:	2bff      	cmp	r3, #255	; 0xff
 801234a:	f300 80a1 	bgt.w	8012490 <SVCCTL_App_Notification+0x164>
 801234e:	2b05      	cmp	r3, #5
 8012350:	d002      	beq.n	8012358 <SVCCTL_App_Notification+0x2c>
 8012352:	2b3e      	cmp	r3, #62	; 0x3e
 8012354:	d020      	beq.n	8012398 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8012356:	e09b      	b.n	8012490 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8012358:	6a3b      	ldr	r3, [r7, #32]
 801235a:	3302      	adds	r3, #2
 801235c:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8012364:	b29a      	uxth	r2, r3
 8012366:	4b4e      	ldr	r3, [pc, #312]	; (80124a0 <SVCCTL_App_Notification+0x174>)
 8012368:	8adb      	ldrh	r3, [r3, #22]
 801236a:	429a      	cmp	r2, r3
 801236c:	d106      	bne.n	801237c <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 801236e:	4b4c      	ldr	r3, [pc, #304]	; (80124a0 <SVCCTL_App_Notification+0x174>)
 8012370:	2200      	movs	r2, #0
 8012372:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8012374:	4b4a      	ldr	r3, [pc, #296]	; (80124a0 <SVCCTL_App_Notification+0x174>)
 8012376:	2200      	movs	r2, #0
 8012378:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 801237c:	2001      	movs	r0, #1
 801237e:	f000 f95f 	bl	8012640 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8012382:	4b48      	ldr	r3, [pc, #288]	; (80124a4 <SVCCTL_App_Notification+0x178>)
 8012384:	2201      	movs	r2, #1
 8012386:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8012388:	4b45      	ldr	r3, [pc, #276]	; (80124a0 <SVCCTL_App_Notification+0x174>)
 801238a:	8ada      	ldrh	r2, [r3, #22]
 801238c:	4b45      	ldr	r3, [pc, #276]	; (80124a4 <SVCCTL_App_Notification+0x178>)
 801238e:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8012390:	4844      	ldr	r0, [pc, #272]	; (80124a4 <SVCCTL_App_Notification+0x178>)
 8012392:	f000 fa3c 	bl	801280e <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8012396:	e07e      	b.n	8012496 <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8012398:	6a3b      	ldr	r3, [r7, #32]
 801239a:	3302      	adds	r3, #2
 801239c:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 801239e:	697b      	ldr	r3, [r7, #20]
 80123a0:	781b      	ldrb	r3, [r3, #0]
 80123a2:	2b01      	cmp	r3, #1
 80123a4:	d001      	beq.n	80123aa <SVCCTL_App_Notification+0x7e>
 80123a6:	2b03      	cmp	r3, #3
          break;
 80123a8:	e021      	b.n	80123ee <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80123aa:	697b      	ldr	r3, [r7, #20]
 80123ac:	3301      	adds	r3, #1
 80123ae:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80123b0:	4b3b      	ldr	r3, [pc, #236]	; (80124a0 <SVCCTL_App_Notification+0x174>)
 80123b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80123b6:	2b04      	cmp	r3, #4
 80123b8:	d104      	bne.n	80123c4 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80123ba:	4b39      	ldr	r3, [pc, #228]	; (80124a0 <SVCCTL_App_Notification+0x174>)
 80123bc:	2206      	movs	r2, #6
 80123be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80123c2:	e003      	b.n	80123cc <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80123c4:	4b36      	ldr	r3, [pc, #216]	; (80124a0 <SVCCTL_App_Notification+0x174>)
 80123c6:	2205      	movs	r2, #5
 80123c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80123cc:	693b      	ldr	r3, [r7, #16]
 80123ce:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80123d2:	b29a      	uxth	r2, r3
 80123d4:	4b32      	ldr	r3, [pc, #200]	; (80124a0 <SVCCTL_App_Notification+0x174>)
 80123d6:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80123d8:	4b32      	ldr	r3, [pc, #200]	; (80124a4 <SVCCTL_App_Notification+0x178>)
 80123da:	2200      	movs	r2, #0
 80123dc:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80123de:	4b30      	ldr	r3, [pc, #192]	; (80124a0 <SVCCTL_App_Notification+0x174>)
 80123e0:	8ada      	ldrh	r2, [r3, #22]
 80123e2:	4b30      	ldr	r3, [pc, #192]	; (80124a4 <SVCCTL_App_Notification+0x178>)
 80123e4:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 80123e6:	482f      	ldr	r0, [pc, #188]	; (80124a4 <SVCCTL_App_Notification+0x178>)
 80123e8:	f000 fa11 	bl	801280e <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80123ec:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80123ee:	e052      	b.n	8012496 <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80123f0:	6a3b      	ldr	r3, [r7, #32]
 80123f2:	3302      	adds	r3, #2
 80123f4:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 80123f6:	69fb      	ldr	r3, [r7, #28]
 80123f8:	881b      	ldrh	r3, [r3, #0]
 80123fa:	b29b      	uxth	r3, r3
 80123fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012400:	d040      	beq.n	8012484 <SVCCTL_App_Notification+0x158>
 8012402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012406:	dc45      	bgt.n	8012494 <SVCCTL_App_Notification+0x168>
 8012408:	2b04      	cmp	r3, #4
 801240a:	d03d      	beq.n	8012488 <SVCCTL_App_Notification+0x15c>
 801240c:	2b04      	cmp	r3, #4
 801240e:	db41      	blt.n	8012494 <SVCCTL_App_Notification+0x168>
 8012410:	f240 420a 	movw	r2, #1034	; 0x40a
 8012414:	4293      	cmp	r3, r2
 8012416:	dc3d      	bgt.n	8012494 <SVCCTL_App_Notification+0x168>
 8012418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801241c:	dd3a      	ble.n	8012494 <SVCCTL_App_Notification+0x168>
 801241e:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8012422:	2b09      	cmp	r3, #9
 8012424:	d836      	bhi.n	8012494 <SVCCTL_App_Notification+0x168>
 8012426:	a201      	add	r2, pc, #4	; (adr r2, 801242c <SVCCTL_App_Notification+0x100>)
 8012428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801242c:	0801247d 	.word	0x0801247d
 8012430:	08012455 	.word	0x08012455
 8012434:	08012495 	.word	0x08012495
 8012438:	08012495 	.word	0x08012495
 801243c:	08012495 	.word	0x08012495
 8012440:	08012495 	.word	0x08012495
 8012444:	0801248d 	.word	0x0801248d
 8012448:	08012495 	.word	0x08012495
 801244c:	08012469 	.word	0x08012469
 8012450:	0801248d 	.word	0x0801248d
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8012454:	4b12      	ldr	r3, [pc, #72]	; (80124a0 <SVCCTL_App_Notification+0x174>)
 8012456:	8adb      	ldrh	r3, [r3, #22]
 8012458:	4913      	ldr	r1, [pc, #76]	; (80124a8 <SVCCTL_App_Notification+0x17c>)
 801245a:	4618      	mov	r0, r3
 801245c:	f7fe f823 	bl	80104a6 <aci_gap_pass_key_resp>
 8012460:	4603      	mov	r3, r0
 8012462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8012466:	e012      	b.n	801248e <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8012468:	4b0d      	ldr	r3, [pc, #52]	; (80124a0 <SVCCTL_App_Notification+0x174>)
 801246a:	8adb      	ldrh	r3, [r3, #22]
 801246c:	2101      	movs	r1, #1
 801246e:	4618      	mov	r0, r3
 8012470:	f7fe f9c3 	bl	80107fa <aci_gap_numeric_comparison_value_confirm_yesno>
 8012474:	4603      	mov	r3, r0
 8012476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 801247a:	e008      	b.n	801248e <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 801247c:	69fb      	ldr	r3, [r7, #28]
 801247e:	3302      	adds	r3, #2
 8012480:	61bb      	str	r3, [r7, #24]
          break;
 8012482:	e004      	b.n	801248e <SVCCTL_App_Notification+0x162>
          break;
 8012484:	bf00      	nop
 8012486:	e005      	b.n	8012494 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8012488:	bf00      	nop
 801248a:	e003      	b.n	8012494 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 801248c:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 801248e:	e001      	b.n	8012494 <SVCCTL_App_Notification+0x168>
      break;
 8012490:	bf00      	nop
 8012492:	e000      	b.n	8012496 <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8012494:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8012496:	2301      	movs	r3, #1
}
 8012498:	4618      	mov	r0, r3
 801249a:	3728      	adds	r7, #40	; 0x28
 801249c:	46bd      	mov	sp, r7
 801249e:	bd80      	pop	{r7, pc}
 80124a0:	200005ac 	.word	0x200005ac
 80124a4:	20000874 	.word	0x20000874
 80124a8:	0001b207 	.word	0x0001b207

080124ac <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b082      	sub	sp, #8
 80124b0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80124b2:	4b06      	ldr	r3, [pc, #24]	; (80124cc <Ble_Tl_Init+0x20>)
 80124b4:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80124b6:	4b06      	ldr	r3, [pc, #24]	; (80124d0 <Ble_Tl_Init+0x24>)
 80124b8:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80124ba:	463b      	mov	r3, r7
 80124bc:	4619      	mov	r1, r3
 80124be:	4805      	ldr	r0, [pc, #20]	; (80124d4 <Ble_Tl_Init+0x28>)
 80124c0:	f7ff f8be 	bl	8011640 <hci_init>

  return;
 80124c4:	bf00      	nop
}
 80124c6:	3708      	adds	r7, #8
 80124c8:	46bd      	mov	sp, r7
 80124ca:	bd80      	pop	{r7, pc}
 80124cc:	200300d8 	.word	0x200300d8
 80124d0:	080127d9 	.word	0x080127d9
 80124d4:	080127a1 	.word	0x080127a1

080124d8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80124d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124da:	b08d      	sub	sp, #52	; 0x34
 80124dc:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80124de:	2300      	movs	r3, #0
 80124e0:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80124e2:	2392      	movs	r3, #146	; 0x92
 80124e4:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80124e6:	f7fe fddb 	bl	80110a0 <hci_reset>
 80124ea:	4603      	mov	r3, r0
 80124ec:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 80124ee:	f000 f8d7 	bl	80126a0 <BleGetBdAddress>
 80124f2:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 80124f4:	693a      	ldr	r2, [r7, #16]
 80124f6:	2106      	movs	r1, #6
 80124f8:	2000      	movs	r0, #0
 80124fa:	f7fe fc91 	bl	8010e20 <aci_hal_write_config_data>
 80124fe:	4603      	mov	r3, r0
 8012500:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8012502:	4a4a      	ldr	r2, [pc, #296]	; (801262c <Ble_Hci_Gap_Gatt_Init+0x154>)
 8012504:	2110      	movs	r1, #16
 8012506:	2018      	movs	r0, #24
 8012508:	f7fe fc8a 	bl	8010e20 <aci_hal_write_config_data>
 801250c:	4603      	mov	r3, r0
 801250e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8012510:	4a47      	ldr	r2, [pc, #284]	; (8012630 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8012512:	2110      	movs	r1, #16
 8012514:	2008      	movs	r0, #8
 8012516:	f7fe fc83 	bl	8010e20 <aci_hal_write_config_data>
 801251a:	4603      	mov	r3, r0
 801251c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 801251e:	2118      	movs	r1, #24
 8012520:	2001      	movs	r0, #1
 8012522:	f7fe fd02 	bl	8010f2a <aci_hal_set_tx_power_level>
 8012526:	4603      	mov	r3, r0
 8012528:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 801252a:	f7fe f9cd 	bl	80108c8 <aci_gatt_init>
 801252e:	4603      	mov	r3, r0
 8012530:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8012532:	2300      	movs	r3, #0
 8012534:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8012536:	7bfb      	ldrb	r3, [r7, #15]
 8012538:	f043 0301 	orr.w	r3, r3, #1
 801253c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif /* BLE_CFG_CENTRAL == 1 */

  if (role > 0)
 801253e:	7bfb      	ldrb	r3, [r7, #15]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d01f      	beq.n	8012584 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8012544:	4b3b      	ldr	r3, [pc, #236]	; (8012634 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8012546:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8012548:	1dba      	adds	r2, r7, #6
 801254a:	7bf8      	ldrb	r0, [r7, #15]
 801254c:	1cbb      	adds	r3, r7, #2
 801254e:	9301      	str	r3, [sp, #4]
 8012550:	1d3b      	adds	r3, r7, #4
 8012552:	9300      	str	r3, [sp, #0]
 8012554:	4613      	mov	r3, r2
 8012556:	2208      	movs	r2, #8
 8012558:	2100      	movs	r1, #0
 801255a:	f7fe f80b 	bl	8010574 <aci_gap_init>
 801255e:	4603      	mov	r3, r0
 8012560:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8012562:	88fc      	ldrh	r4, [r7, #6]
 8012564:	88bd      	ldrh	r5, [r7, #4]
 8012566:	68b8      	ldr	r0, [r7, #8]
 8012568:	f7ed fe0a 	bl	8000180 <strlen>
 801256c:	4603      	mov	r3, r0
 801256e:	b2da      	uxtb	r2, r3
 8012570:	68bb      	ldr	r3, [r7, #8]
 8012572:	9300      	str	r3, [sp, #0]
 8012574:	4613      	mov	r3, r2
 8012576:	2200      	movs	r2, #0
 8012578:	4629      	mov	r1, r5
 801257a:	4620      	mov	r0, r4
 801257c:	f7fe fba7 	bl	8010cce <aci_gatt_update_char_value>
 8012580:	4603      	mov	r3, r0
 8012582:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8012584:	88f8      	ldrh	r0, [r7, #6]
 8012586:	8879      	ldrh	r1, [r7, #2]
 8012588:	463b      	mov	r3, r7
 801258a:	9300      	str	r3, [sp, #0]
 801258c:	2302      	movs	r3, #2
 801258e:	2200      	movs	r2, #0
 8012590:	f7fe fb9d 	bl	8010cce <aci_gatt_update_char_value>
 8012594:	4603      	mov	r3, r0
 8012596:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8012598:	2202      	movs	r2, #2
 801259a:	2102      	movs	r1, #2
 801259c:	2000      	movs	r0, #0
 801259e:	f7fe fda3 	bl	80110e8 <hci_le_set_default_phy>
 80125a2:	4603      	mov	r3, r0
 80125a4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80125a6:	4b24      	ldr	r3, [pc, #144]	; (8012638 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80125a8:	2201      	movs	r2, #1
 80125aa:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80125ac:	4b22      	ldr	r3, [pc, #136]	; (8012638 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80125ae:	781b      	ldrb	r3, [r3, #0]
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7fd fe60 	bl	8010276 <aci_gap_set_io_capability>
 80125b6:	4603      	mov	r3, r0
 80125b8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80125ba:	4b1f      	ldr	r3, [pc, #124]	; (8012638 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80125bc:	2201      	movs	r2, #1
 80125be:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80125c0:	4b1d      	ldr	r3, [pc, #116]	; (8012638 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80125c2:	2208      	movs	r2, #8
 80125c4:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80125c6:	4b1c      	ldr	r3, [pc, #112]	; (8012638 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80125c8:	2210      	movs	r2, #16
 80125ca:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80125cc:	4b1a      	ldr	r3, [pc, #104]	; (8012638 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80125ce:	2200      	movs	r2, #0
 80125d0:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80125d2:	4b19      	ldr	r3, [pc, #100]	; (8012638 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80125d4:	4a19      	ldr	r2, [pc, #100]	; (801263c <Ble_Hci_Gap_Gatt_Init+0x164>)
 80125d6:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80125d8:	4b17      	ldr	r3, [pc, #92]	; (8012638 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80125da:	2200      	movs	r2, #0
 80125dc:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80125de:	4b16      	ldr	r3, [pc, #88]	; (8012638 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80125e0:	789c      	ldrb	r4, [r3, #2]
 80125e2:	4b15      	ldr	r3, [pc, #84]	; (8012638 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80125e4:	785d      	ldrb	r5, [r3, #1]
 80125e6:	4b14      	ldr	r3, [pc, #80]	; (8012638 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80125e8:	791b      	ldrb	r3, [r3, #4]
 80125ea:	4a13      	ldr	r2, [pc, #76]	; (8012638 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80125ec:	7952      	ldrb	r2, [r2, #5]
 80125ee:	4912      	ldr	r1, [pc, #72]	; (8012638 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80125f0:	78c9      	ldrb	r1, [r1, #3]
 80125f2:	4811      	ldr	r0, [pc, #68]	; (8012638 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80125f4:	6880      	ldr	r0, [r0, #8]
 80125f6:	2600      	movs	r6, #0
 80125f8:	9604      	str	r6, [sp, #16]
 80125fa:	9003      	str	r0, [sp, #12]
 80125fc:	9102      	str	r1, [sp, #8]
 80125fe:	9201      	str	r2, [sp, #4]
 8012600:	9300      	str	r3, [sp, #0]
 8012602:	2300      	movs	r3, #0
 8012604:	2201      	movs	r2, #1
 8012606:	4629      	mov	r1, r5
 8012608:	4620      	mov	r0, r4
 801260a:	f7fd fe88 	bl	801031e <aci_gap_set_authentication_requirement>
 801260e:	4603      	mov	r3, r0
 8012610:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8012612:	4b09      	ldr	r3, [pc, #36]	; (8012638 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8012614:	789b      	ldrb	r3, [r3, #2]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d003      	beq.n	8012622 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 801261a:	f7fe f8ca 	bl	80107b2 <aci_gap_configure_whitelist>
 801261e:	4603      	mov	r3, r0
 8012620:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8012622:	bf00      	nop
 8012624:	371c      	adds	r7, #28
 8012626:	46bd      	mov	sp, r7
 8012628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801262a:	bf00      	nop
 801262c:	08014f58 	.word	0x08014f58
 8012630:	08014f68 	.word	0x08014f68
 8012634:	08014cfc 	.word	0x08014cfc
 8012638:	200005ac 	.word	0x200005ac
 801263c:	0001b207 	.word	0x0001b207

08012640 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b08c      	sub	sp, #48	; 0x30
 8012644:	af08      	add	r7, sp, #32
 8012646:	4603      	mov	r3, r0
 8012648:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801264a:	2392      	movs	r3, #146	; 0x92
 801264c:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 801264e:	4a12      	ldr	r2, [pc, #72]	; (8012698 <Adv_Request+0x58>)
 8012650:	79fb      	ldrb	r3, [r7, #7]
 8012652:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8012656:	2300      	movs	r3, #0
 8012658:	9306      	str	r3, [sp, #24]
 801265a:	2300      	movs	r3, #0
 801265c:	9305      	str	r3, [sp, #20]
 801265e:	2300      	movs	r3, #0
 8012660:	9304      	str	r3, [sp, #16]
 8012662:	2300      	movs	r3, #0
 8012664:	9303      	str	r3, [sp, #12]
 8012666:	2300      	movs	r3, #0
 8012668:	9302      	str	r3, [sp, #8]
 801266a:	2300      	movs	r3, #0
 801266c:	9301      	str	r3, [sp, #4]
 801266e:	2300      	movs	r3, #0
 8012670:	9300      	str	r3, [sp, #0]
 8012672:	2300      	movs	r3, #0
 8012674:	22a0      	movs	r2, #160	; 0xa0
 8012676:	2180      	movs	r1, #128	; 0x80
 8012678:	2000      	movs	r0, #0
 801267a:	f7fd fd02 	bl	8010082 <aci_gap_set_discoverable>
 801267e:	4603      	mov	r3, r0
 8012680:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8012682:	4906      	ldr	r1, [pc, #24]	; (801269c <Adv_Request+0x5c>)
 8012684:	2009      	movs	r0, #9
 8012686:	f7fe f822 	bl	80106ce <aci_gap_update_adv_data>
 801268a:	4603      	mov	r3, r0
 801268c:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 801268e:	bf00      	nop
}
 8012690:	3710      	adds	r7, #16
 8012692:	46bd      	mov	sp, r7
 8012694:	bd80      	pop	{r7, pc}
 8012696:	bf00      	nop
 8012698:	200005ac 	.word	0x200005ac
 801269c:	200003e0 	.word	0x200003e0

080126a0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b086      	sub	sp, #24
 80126a4:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80126a6:	f7ff fdc3 	bl	8012230 <LL_FLASH_GetUDN>
 80126aa:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80126ac:	693b      	ldr	r3, [r7, #16]
 80126ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126b2:	d023      	beq.n	80126fc <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80126b4:	f7ff fdd4 	bl	8012260 <LL_FLASH_GetSTCompanyID>
 80126b8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80126ba:	f7ff fdc5 	bl	8012248 <LL_FLASH_GetDeviceID>
 80126be:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80126c0:	693b      	ldr	r3, [r7, #16]
 80126c2:	b2da      	uxtb	r2, r3
 80126c4:	4b16      	ldr	r3, [pc, #88]	; (8012720 <BleGetBdAddress+0x80>)
 80126c6:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80126c8:	693b      	ldr	r3, [r7, #16]
 80126ca:	0a1b      	lsrs	r3, r3, #8
 80126cc:	b2da      	uxtb	r2, r3
 80126ce:	4b14      	ldr	r3, [pc, #80]	; (8012720 <BleGetBdAddress+0x80>)
 80126d0:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	b2da      	uxtb	r2, r3
 80126d6:	4b12      	ldr	r3, [pc, #72]	; (8012720 <BleGetBdAddress+0x80>)
 80126d8:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80126da:	68bb      	ldr	r3, [r7, #8]
 80126dc:	b2da      	uxtb	r2, r3
 80126de:	4b10      	ldr	r3, [pc, #64]	; (8012720 <BleGetBdAddress+0x80>)
 80126e0:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80126e2:	68bb      	ldr	r3, [r7, #8]
 80126e4:	0a1b      	lsrs	r3, r3, #8
 80126e6:	b2da      	uxtb	r2, r3
 80126e8:	4b0d      	ldr	r3, [pc, #52]	; (8012720 <BleGetBdAddress+0x80>)
 80126ea:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80126ec:	68bb      	ldr	r3, [r7, #8]
 80126ee:	0c1b      	lsrs	r3, r3, #16
 80126f0:	b2da      	uxtb	r2, r3
 80126f2:	4b0b      	ldr	r3, [pc, #44]	; (8012720 <BleGetBdAddress+0x80>)
 80126f4:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80126f6:	4b0a      	ldr	r3, [pc, #40]	; (8012720 <BleGetBdAddress+0x80>)
 80126f8:	617b      	str	r3, [r7, #20]
 80126fa:	e00b      	b.n	8012714 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80126fc:	2000      	movs	r0, #0
 80126fe:	f7ff fcb1 	bl	8012064 <OTP_Read>
 8012702:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d002      	beq.n	8012710 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	617b      	str	r3, [r7, #20]
 801270e:	e001      	b.n	8012714 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8012710:	4b04      	ldr	r3, [pc, #16]	; (8012724 <BleGetBdAddress+0x84>)
 8012712:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8012714:	697b      	ldr	r3, [r7, #20]
}
 8012716:	4618      	mov	r0, r3
 8012718:	3718      	adds	r7, #24
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}
 801271e:	bf00      	nop
 8012720:	2000086c 	.word	0x2000086c
 8012724:	08014f50 	.word	0x08014f50

08012728 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b082      	sub	sp, #8
 801272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 801272e:	4b0a      	ldr	r3, [pc, #40]	; (8012758 <Adv_Cancel+0x30>)
 8012730:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8012734:	2b05      	cmp	r3, #5
 8012736:	d00a      	beq.n	801274e <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8012738:	2392      	movs	r3, #146	; 0x92
 801273a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 801273c:	f7fd fc7d 	bl	801003a <aci_gap_set_non_discoverable>
 8012740:	4603      	mov	r3, r0
 8012742:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8012744:	4b04      	ldr	r3, [pc, #16]	; (8012758 <Adv_Cancel+0x30>)
 8012746:	2200      	movs	r2, #0
 8012748:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 801274c:	bf00      	nop
 801274e:	bf00      	nop
}
 8012750:	3708      	adds	r7, #8
 8012752:	46bd      	mov	sp, r7
 8012754:	bd80      	pop	{r7, pc}
 8012756:	bf00      	nop
 8012758:	200005ac 	.word	0x200005ac

0801275c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 801275c:	b580      	push	{r7, lr}
 801275e:	b082      	sub	sp, #8
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8012764:	2100      	movs	r1, #0
 8012766:	2002      	movs	r0, #2
 8012768:	f001 fa3e 	bl	8013be8 <UTIL_SEQ_SetTask>

  return;
 801276c:	bf00      	nop
}
 801276e:	3708      	adds	r7, #8
 8012770:	46bd      	mov	sp, r7
 8012772:	bd80      	pop	{r7, pc}

08012774 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b082      	sub	sp, #8
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 801277c:	2001      	movs	r0, #1
 801277e:	f001 fa9f 	bl	8013cc0 <UTIL_SEQ_SetEvt>

  return;
 8012782:	bf00      	nop
}
 8012784:	3708      	adds	r7, #8
 8012786:	46bd      	mov	sp, r7
 8012788:	bd80      	pop	{r7, pc}

0801278a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 801278a:	b580      	push	{r7, lr}
 801278c:	b082      	sub	sp, #8
 801278e:	af00      	add	r7, sp, #0
 8012790:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8012792:	2001      	movs	r0, #1
 8012794:	f001 fab4 	bl	8013d00 <UTIL_SEQ_WaitEvt>

  return;
 8012798:	bf00      	nop
}
 801279a:	3708      	adds	r7, #8
 801279c:	46bd      	mov	sp, r7
 801279e:	bd80      	pop	{r7, pc}

080127a0 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b084      	sub	sp, #16
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	685b      	ldr	r3, [r3, #4]
 80127b0:	3308      	adds	r3, #8
 80127b2:	4618      	mov	r0, r3
 80127b4:	f7fe fdfe 	bl	80113b4 <SVCCTL_UserEvtRx>
 80127b8:	4603      	mov	r3, r0
 80127ba:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80127bc:	7afb      	ldrb	r3, [r7, #11]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d003      	beq.n	80127ca <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	2201      	movs	r2, #1
 80127c6:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80127c8:	e003      	b.n	80127d2 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	2200      	movs	r2, #0
 80127ce:	701a      	strb	r2, [r3, #0]
  return;
 80127d0:	bf00      	nop
}
 80127d2:	3710      	adds	r7, #16
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}

080127d8 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b084      	sub	sp, #16
 80127dc:	af00      	add	r7, sp, #0
 80127de:	4603      	mov	r3, r0
 80127e0:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80127e2:	79fb      	ldrb	r3, [r7, #7]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d002      	beq.n	80127ee <BLE_StatusNot+0x16>
 80127e8:	2b01      	cmp	r3, #1
 80127ea:	d006      	beq.n	80127fa <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80127ec:	e00b      	b.n	8012806 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80127ee:	2303      	movs	r3, #3
 80127f0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80127f2:	68f8      	ldr	r0, [r7, #12]
 80127f4:	f001 fa24 	bl	8013c40 <UTIL_SEQ_PauseTask>
      break;
 80127f8:	e005      	b.n	8012806 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80127fa:	2303      	movs	r3, #3
 80127fc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80127fe:	68f8      	ldr	r0, [r7, #12]
 8012800:	f001 fa3e 	bl	8013c80 <UTIL_SEQ_ResumeTask>
      break;
 8012804:	bf00      	nop
  }

  return;
 8012806:	bf00      	nop
}
 8012808:	3710      	adds	r7, #16
 801280a:	46bd      	mov	sp, r7
 801280c:	bd80      	pop	{r7, pc}

0801280e <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 801280e:	b480      	push	{r7}
 8012810:	b083      	sub	sp, #12
 8012812:	af00      	add	r7, sp, #0
 8012814:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	781b      	ldrb	r3, [r3, #0]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d002      	beq.n	8012824 <Custom_APP_Notification+0x16>
 801281e:	2b01      	cmp	r3, #1
 8012820:	d002      	beq.n	8012828 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8012822:	e002      	b.n	801282a <Custom_APP_Notification+0x1c>
      break;
 8012824:	bf00      	nop
 8012826:	e000      	b.n	801282a <Custom_APP_Notification+0x1c>
      break;
 8012828:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 801282a:	bf00      	nop
}
 801282c:	370c      	adds	r7, #12
 801282e:	46bd      	mov	sp, r7
 8012830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012834:	4770      	bx	lr

08012836 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8012836:	b480      	push	{r7}
 8012838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 801283a:	bf00      	nop
}
 801283c:	46bd      	mov	sp, r7
 801283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012842:	4770      	bx	lr

08012844 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b08a      	sub	sp, #40	; 0x28
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 801284c:	2300      	movs	r3, #0
 801284e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	3301      	adds	r3, #1
 8012856:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 8012858:	6a3b      	ldr	r3, [r7, #32]
 801285a:	781b      	ldrb	r3, [r3, #0]
 801285c:	2bff      	cmp	r3, #255	; 0xff
 801285e:	d13f      	bne.n	80128e0 <Custom_STM_Event_Handler+0x9c>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8012860:	6a3b      	ldr	r3, [r7, #32]
 8012862:	3302      	adds	r3, #2
 8012864:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 8012866:	69fb      	ldr	r3, [r7, #28]
 8012868:	881b      	ldrh	r3, [r3, #0]
 801286a:	b29b      	uxth	r3, r3
 801286c:	f640 4214 	movw	r2, #3092	; 0xc14
 8012870:	4293      	cmp	r3, r2
 8012872:	d02f      	beq.n	80128d4 <Custom_STM_Event_Handler+0x90>
 8012874:	f640 4214 	movw	r2, #3092	; 0xc14
 8012878:	4293      	cmp	r3, r2
 801287a:	dc2d      	bgt.n	80128d8 <Custom_STM_Event_Handler+0x94>
 801287c:	f640 4201 	movw	r2, #3073	; 0xc01
 8012880:	4293      	cmp	r3, r2
 8012882:	d003      	beq.n	801288c <Custom_STM_Event_Handler+0x48>
 8012884:	f640 4213 	movw	r2, #3091	; 0xc13
 8012888:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 801288a:	e028      	b.n	80128de <Custom_STM_Event_Handler+0x9a>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 801288c:	69fb      	ldr	r3, [r7, #28]
 801288e:	3302      	adds	r3, #2
 8012890:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8012892:	69bb      	ldr	r3, [r7, #24]
 8012894:	885b      	ldrh	r3, [r3, #2]
 8012896:	b29b      	uxth	r3, r3
 8012898:	461a      	mov	r2, r3
 801289a:	4b15      	ldr	r3, [pc, #84]	; (80128f0 <Custom_STM_Event_Handler+0xac>)
 801289c:	885b      	ldrh	r3, [r3, #2]
 801289e:	3301      	adds	r3, #1
 80128a0:	429a      	cmp	r2, r3
 80128a2:	d11b      	bne.n	80128dc <Custom_STM_Event_Handler+0x98>
            return_value = SVCCTL_EvtAckFlowEnable;
 80128a4:	2301      	movs	r3, #1
 80128a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if(attribute_modified->Attr_Data[0]>=0x30 && attribute_modified->Attr_Data[0]<=0x39){
 80128aa:	69bb      	ldr	r3, [r7, #24]
 80128ac:	7a1b      	ldrb	r3, [r3, #8]
 80128ae:	2b2f      	cmp	r3, #47	; 0x2f
 80128b0:	d914      	bls.n	80128dc <Custom_STM_Event_Handler+0x98>
 80128b2:	69bb      	ldr	r3, [r7, #24]
 80128b4:	7a1b      	ldrb	r3, [r3, #8]
 80128b6:	2b39      	cmp	r3, #57	; 0x39
 80128b8:	d810      	bhi.n	80128dc <Custom_STM_Event_Handler+0x98>
            	sprintf(buf,"%d \n\r", attribute_modified->Attr_Data[0]-0x30);
 80128ba:	69bb      	ldr	r3, [r7, #24]
 80128bc:	7a1b      	ldrb	r3, [r3, #8]
 80128be:	3b30      	subs	r3, #48	; 0x30
 80128c0:	461a      	mov	r2, r3
 80128c2:	490c      	ldr	r1, [pc, #48]	; (80128f4 <Custom_STM_Event_Handler+0xb0>)
 80128c4:	480c      	ldr	r0, [pc, #48]	; (80128f8 <Custom_STM_Event_Handler+0xb4>)
 80128c6:	f001 fd75 	bl	80143b4 <siprintf>
            	CDC_Transmit_FS((uint8_t *)buf,sizeof(buf));
 80128ca:	2140      	movs	r1, #64	; 0x40
 80128cc:	480a      	ldr	r0, [pc, #40]	; (80128f8 <Custom_STM_Event_Handler+0xb4>)
 80128ce:	f000 fb97 	bl	8013000 <CDC_Transmit_FS>
          break;
 80128d2:	e003      	b.n	80128dc <Custom_STM_Event_Handler+0x98>
          break;
 80128d4:	bf00      	nop
 80128d6:	e004      	b.n	80128e2 <Custom_STM_Event_Handler+0x9e>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 80128d8:	bf00      	nop
 80128da:	e002      	b.n	80128e2 <Custom_STM_Event_Handler+0x9e>
          break;
 80128dc:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80128de:	e000      	b.n	80128e2 <Custom_STM_Event_Handler+0x9e>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 80128e0:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 80128e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 80128e6:	4618      	mov	r0, r3
 80128e8:	3728      	adds	r7, #40	; 0x28
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd80      	pop	{r7, pc}
 80128ee:	bf00      	nop
 80128f0:	20000594 	.word	0x20000594
 80128f4:	08014d08 	.word	0x08014d08
 80128f8:	20000878 	.word	0x20000878

080128fc <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b08c      	sub	sp, #48	; 0x30
 8012900:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8012902:	2392      	movs	r3, #146	; 0x92
 8012904:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8012906:	4834      	ldr	r0, [pc, #208]	; (80129d8 <SVCCTL_InitCustomSvc+0xdc>)
 8012908:	f7fe fd3a 	bl	8011380 <SVCCTL_RegisterSvcHandler>
   * service_max_attribute_record = 1 for mySVC +
   *                                2 for myCharWrite +
   *                              = 3
   */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 801290c:	238f      	movs	r3, #143	; 0x8f
 801290e:	713b      	strb	r3, [r7, #4]
 8012910:	23e5      	movs	r3, #229	; 0xe5
 8012912:	717b      	strb	r3, [r7, #5]
 8012914:	23b3      	movs	r3, #179	; 0xb3
 8012916:	71bb      	strb	r3, [r7, #6]
 8012918:	23d5      	movs	r3, #213	; 0xd5
 801291a:	71fb      	strb	r3, [r7, #7]
 801291c:	232e      	movs	r3, #46	; 0x2e
 801291e:	723b      	strb	r3, [r7, #8]
 8012920:	237f      	movs	r3, #127	; 0x7f
 8012922:	727b      	strb	r3, [r7, #9]
 8012924:	234a      	movs	r3, #74	; 0x4a
 8012926:	72bb      	strb	r3, [r7, #10]
 8012928:	2398      	movs	r3, #152	; 0x98
 801292a:	72fb      	strb	r3, [r7, #11]
 801292c:	232a      	movs	r3, #42	; 0x2a
 801292e:	733b      	strb	r3, [r7, #12]
 8012930:	2348      	movs	r3, #72	; 0x48
 8012932:	737b      	strb	r3, [r7, #13]
 8012934:	237a      	movs	r3, #122	; 0x7a
 8012936:	73bb      	strb	r3, [r7, #14]
 8012938:	23cc      	movs	r3, #204	; 0xcc
 801293a:	73fb      	strb	r3, [r7, #15]
 801293c:	2300      	movs	r3, #0
 801293e:	743b      	strb	r3, [r7, #16]
 8012940:	2300      	movs	r3, #0
 8012942:	747b      	strb	r3, [r7, #17]
 8012944:	2300      	movs	r3, #0
 8012946:	74bb      	strb	r3, [r7, #18]
 8012948:	2300      	movs	r3, #0
 801294a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 801294c:	1d39      	adds	r1, r7, #4
 801294e:	4b23      	ldr	r3, [pc, #140]	; (80129dc <SVCCTL_InitCustomSvc+0xe0>)
 8012950:	9300      	str	r3, [sp, #0]
 8012952:	2303      	movs	r3, #3
 8012954:	2201      	movs	r2, #1
 8012956:	2002      	movs	r0, #2
 8012958:	f7fd ffdb 	bl	8010912 <aci_gatt_add_service>
 801295c:	4603      	mov	r3, r0
 801295e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 8012960:	2319      	movs	r3, #25
 8012962:	713b      	strb	r3, [r7, #4]
 8012964:	23ed      	movs	r3, #237	; 0xed
 8012966:	717b      	strb	r3, [r7, #5]
 8012968:	2382      	movs	r3, #130	; 0x82
 801296a:	71bb      	strb	r3, [r7, #6]
 801296c:	23ae      	movs	r3, #174	; 0xae
 801296e:	71fb      	strb	r3, [r7, #7]
 8012970:	23ed      	movs	r3, #237	; 0xed
 8012972:	723b      	strb	r3, [r7, #8]
 8012974:	2321      	movs	r3, #33	; 0x21
 8012976:	727b      	strb	r3, [r7, #9]
 8012978:	234c      	movs	r3, #76	; 0x4c
 801297a:	72bb      	strb	r3, [r7, #10]
 801297c:	239d      	movs	r3, #157	; 0x9d
 801297e:	72fb      	strb	r3, [r7, #11]
 8012980:	2341      	movs	r3, #65	; 0x41
 8012982:	733b      	strb	r3, [r7, #12]
 8012984:	2345      	movs	r3, #69	; 0x45
 8012986:	737b      	strb	r3, [r7, #13]
 8012988:	2322      	movs	r3, #34	; 0x22
 801298a:	73bb      	strb	r3, [r7, #14]
 801298c:	238e      	movs	r3, #142	; 0x8e
 801298e:	73fb      	strb	r3, [r7, #15]
 8012990:	2300      	movs	r3, #0
 8012992:	743b      	strb	r3, [r7, #16]
 8012994:	2300      	movs	r3, #0
 8012996:	747b      	strb	r3, [r7, #17]
 8012998:	2300      	movs	r3, #0
 801299a:	74bb      	strb	r3, [r7, #18]
 801299c:	2300      	movs	r3, #0
 801299e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 80129a0:	4b0e      	ldr	r3, [pc, #56]	; (80129dc <SVCCTL_InitCustomSvc+0xe0>)
 80129a2:	8818      	ldrh	r0, [r3, #0]
 80129a4:	4b0e      	ldr	r3, [pc, #56]	; (80129e0 <SVCCTL_InitCustomSvc+0xe4>)
 80129a6:	781b      	ldrb	r3, [r3, #0]
 80129a8:	b29b      	uxth	r3, r3
 80129aa:	1d3a      	adds	r2, r7, #4
 80129ac:	490d      	ldr	r1, [pc, #52]	; (80129e4 <SVCCTL_InitCustomSvc+0xe8>)
 80129ae:	9105      	str	r1, [sp, #20]
 80129b0:	2100      	movs	r1, #0
 80129b2:	9104      	str	r1, [sp, #16]
 80129b4:	2110      	movs	r1, #16
 80129b6:	9103      	str	r1, [sp, #12]
 80129b8:	2101      	movs	r1, #1
 80129ba:	9102      	str	r1, [sp, #8]
 80129bc:	2100      	movs	r1, #0
 80129be:	9101      	str	r1, [sp, #4]
 80129c0:	2108      	movs	r1, #8
 80129c2:	9100      	str	r1, [sp, #0]
 80129c4:	2102      	movs	r1, #2
 80129c6:	f7fe f87a 	bl	8010abe <aci_gatt_add_char>
 80129ca:	4603      	mov	r3, r0
 80129cc:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 80129ce:	bf00      	nop
}
 80129d0:	3718      	adds	r7, #24
 80129d2:	46bd      	mov	sp, r7
 80129d4:	bd80      	pop	{r7, pc}
 80129d6:	bf00      	nop
 80129d8:	08012845 	.word	0x08012845
 80129dc:	20000594 	.word	0x20000594
 80129e0:	200003e9 	.word	0x200003e9
 80129e4:	20000596 	.word	0x20000596

080129e8 <LL_PWR_EnableBootC2>:
{
 80129e8:	b480      	push	{r7}
 80129ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80129ec:	4b05      	ldr	r3, [pc, #20]	; (8012a04 <LL_PWR_EnableBootC2+0x1c>)
 80129ee:	68db      	ldr	r3, [r3, #12]
 80129f0:	4a04      	ldr	r2, [pc, #16]	; (8012a04 <LL_PWR_EnableBootC2+0x1c>)
 80129f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80129f6:	60d3      	str	r3, [r2, #12]
}
 80129f8:	bf00      	nop
 80129fa:	46bd      	mov	sp, r7
 80129fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a00:	4770      	bx	lr
 8012a02:	bf00      	nop
 8012a04:	58000400 	.word	0x58000400

08012a08 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8012a08:	b480      	push	{r7}
 8012a0a:	b083      	sub	sp, #12
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8012a10:	4b06      	ldr	r3, [pc, #24]	; (8012a2c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8012a12:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8012a16:	4905      	ldr	r1, [pc, #20]	; (8012a2c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	4313      	orrs	r3, r2
 8012a1c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8012a20:	bf00      	nop
 8012a22:	370c      	adds	r7, #12
 8012a24:	46bd      	mov	sp, r7
 8012a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2a:	4770      	bx	lr
 8012a2c:	58000800 	.word	0x58000800

08012a30 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8012a30:	b480      	push	{r7}
 8012a32:	b083      	sub	sp, #12
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8012a38:	4b05      	ldr	r3, [pc, #20]	; (8012a50 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8012a3a:	6a1a      	ldr	r2, [r3, #32]
 8012a3c:	4904      	ldr	r1, [pc, #16]	; (8012a50 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	4313      	orrs	r3, r2
 8012a42:	620b      	str	r3, [r1, #32]
}
 8012a44:	bf00      	nop
 8012a46:	370c      	adds	r7, #12
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4e:	4770      	bx	lr
 8012a50:	58000800 	.word	0x58000800

08012a54 <LL_AHB3_GRP1_EnableClock>:
{
 8012a54:	b480      	push	{r7}
 8012a56:	b085      	sub	sp, #20
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8012a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012a60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012a62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	4313      	orrs	r3, r2
 8012a6a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8012a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012a70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	4013      	ands	r3, r2
 8012a76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012a78:	68fb      	ldr	r3, [r7, #12]
}
 8012a7a:	bf00      	nop
 8012a7c:	3714      	adds	r7, #20
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a84:	4770      	bx	lr

08012a86 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8012a86:	b480      	push	{r7}
 8012a88:	b085      	sub	sp, #20
 8012a8a:	af00      	add	r7, sp, #0
 8012a8c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8012a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012a92:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8012a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	4313      	orrs	r3, r2
 8012a9e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8012aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012aa6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	4013      	ands	r3, r2
 8012aae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012ab0:	68fb      	ldr	r3, [r7, #12]
}
 8012ab2:	bf00      	nop
 8012ab4:	3714      	adds	r7, #20
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012abc:	4770      	bx	lr

08012abe <LL_C1_IPCC_EnableIT_TXF>:
{
 8012abe:	b480      	push	{r7}
 8012ac0:	b083      	sub	sp, #12
 8012ac2:	af00      	add	r7, sp, #0
 8012ac4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	601a      	str	r2, [r3, #0]
}
 8012ad2:	bf00      	nop
 8012ad4:	370c      	adds	r7, #12
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012adc:	4770      	bx	lr

08012ade <LL_C1_IPCC_EnableIT_RXO>:
{
 8012ade:	b480      	push	{r7}
 8012ae0:	b083      	sub	sp, #12
 8012ae2:	af00      	add	r7, sp, #0
 8012ae4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	f043 0201 	orr.w	r2, r3, #1
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	601a      	str	r2, [r3, #0]
}
 8012af2:	bf00      	nop
 8012af4:	370c      	adds	r7, #12
 8012af6:	46bd      	mov	sp, r7
 8012af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afc:	4770      	bx	lr

08012afe <LL_C1_IPCC_EnableTransmitChannel>:
{
 8012afe:	b480      	push	{r7}
 8012b00:	b083      	sub	sp, #12
 8012b02:	af00      	add	r7, sp, #0
 8012b04:	6078      	str	r0, [r7, #4]
 8012b06:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	685a      	ldr	r2, [r3, #4]
 8012b0c:	683b      	ldr	r3, [r7, #0]
 8012b0e:	041b      	lsls	r3, r3, #16
 8012b10:	43db      	mvns	r3, r3
 8012b12:	401a      	ands	r2, r3
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	605a      	str	r2, [r3, #4]
}
 8012b18:	bf00      	nop
 8012b1a:	370c      	adds	r7, #12
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b22:	4770      	bx	lr

08012b24 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8012b24:	b480      	push	{r7}
 8012b26:	b083      	sub	sp, #12
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
 8012b2c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	685a      	ldr	r2, [r3, #4]
 8012b32:	683b      	ldr	r3, [r7, #0]
 8012b34:	041b      	lsls	r3, r3, #16
 8012b36:	431a      	orrs	r2, r3
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	605a      	str	r2, [r3, #4]
}
 8012b3c:	bf00      	nop
 8012b3e:	370c      	adds	r7, #12
 8012b40:	46bd      	mov	sp, r7
 8012b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b46:	4770      	bx	lr

08012b48 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8012b48:	b480      	push	{r7}
 8012b4a:	b083      	sub	sp, #12
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
 8012b50:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	685a      	ldr	r2, [r3, #4]
 8012b56:	683b      	ldr	r3, [r7, #0]
 8012b58:	43db      	mvns	r3, r3
 8012b5a:	401a      	ands	r2, r3
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	605a      	str	r2, [r3, #4]
}
 8012b60:	bf00      	nop
 8012b62:	370c      	adds	r7, #12
 8012b64:	46bd      	mov	sp, r7
 8012b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6a:	4770      	bx	lr

08012b6c <LL_C1_IPCC_ClearFlag_CHx>:
{
 8012b6c:	b480      	push	{r7}
 8012b6e:	b083      	sub	sp, #12
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
 8012b74:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	683a      	ldr	r2, [r7, #0]
 8012b7a:	609a      	str	r2, [r3, #8]
}
 8012b7c:	bf00      	nop
 8012b7e:	370c      	adds	r7, #12
 8012b80:	46bd      	mov	sp, r7
 8012b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b86:	4770      	bx	lr

08012b88 <LL_C1_IPCC_SetFlag_CHx>:
{
 8012b88:	b480      	push	{r7}
 8012b8a:	b083      	sub	sp, #12
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
 8012b90:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8012b92:	683b      	ldr	r3, [r7, #0]
 8012b94:	041a      	lsls	r2, r3, #16
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	609a      	str	r2, [r3, #8]
}
 8012b9a:	bf00      	nop
 8012b9c:	370c      	adds	r7, #12
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba4:	4770      	bx	lr

08012ba6 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8012ba6:	b480      	push	{r7}
 8012ba8:	b083      	sub	sp, #12
 8012baa:	af00      	add	r7, sp, #0
 8012bac:	6078      	str	r0, [r7, #4]
 8012bae:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	68da      	ldr	r2, [r3, #12]
 8012bb4:	683b      	ldr	r3, [r7, #0]
 8012bb6:	4013      	ands	r3, r2
 8012bb8:	683a      	ldr	r2, [r7, #0]
 8012bba:	429a      	cmp	r2, r3
 8012bbc:	d101      	bne.n	8012bc2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8012bbe:	2301      	movs	r3, #1
 8012bc0:	e000      	b.n	8012bc4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8012bc2:	2300      	movs	r3, #0
}
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	370c      	adds	r7, #12
 8012bc8:	46bd      	mov	sp, r7
 8012bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bce:	4770      	bx	lr

08012bd0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8012bd0:	b480      	push	{r7}
 8012bd2:	b083      	sub	sp, #12
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
 8012bd8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	69da      	ldr	r2, [r3, #28]
 8012bde:	683b      	ldr	r3, [r7, #0]
 8012be0:	4013      	ands	r3, r2
 8012be2:	683a      	ldr	r2, [r7, #0]
 8012be4:	429a      	cmp	r2, r3
 8012be6:	d101      	bne.n	8012bec <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8012be8:	2301      	movs	r3, #1
 8012bea:	e000      	b.n	8012bee <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8012bec:	2300      	movs	r3, #0
}
 8012bee:	4618      	mov	r0, r3
 8012bf0:	370c      	adds	r7, #12
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf8:	4770      	bx	lr
	...

08012bfc <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8012c00:	2102      	movs	r1, #2
 8012c02:	4819      	ldr	r0, [pc, #100]	; (8012c68 <HW_IPCC_Rx_Handler+0x6c>)
 8012c04:	f7ff ffe4 	bl	8012bd0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8012c08:	4603      	mov	r3, r0
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d009      	beq.n	8012c22 <HW_IPCC_Rx_Handler+0x26>
 8012c0e:	4b16      	ldr	r3, [pc, #88]	; (8012c68 <HW_IPCC_Rx_Handler+0x6c>)
 8012c10:	685b      	ldr	r3, [r3, #4]
 8012c12:	43db      	mvns	r3, r3
 8012c14:	f003 0302 	and.w	r3, r3, #2
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d002      	beq.n	8012c22 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8012c1c:	f000 f8da 	bl	8012dd4 <HW_IPCC_SYS_EvtHandler>
 8012c20:	e01f      	b.n	8012c62 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8012c22:	2101      	movs	r1, #1
 8012c24:	4810      	ldr	r0, [pc, #64]	; (8012c68 <HW_IPCC_Rx_Handler+0x6c>)
 8012c26:	f7ff ffd3 	bl	8012bd0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d008      	beq.n	8012c42 <HW_IPCC_Rx_Handler+0x46>
 8012c30:	4b0d      	ldr	r3, [pc, #52]	; (8012c68 <HW_IPCC_Rx_Handler+0x6c>)
 8012c32:	685b      	ldr	r3, [r3, #4]
 8012c34:	f003 0301 	and.w	r3, r3, #1
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d102      	bne.n	8012c42 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8012c3c:	f000 f88e 	bl	8012d5c <HW_IPCC_BLE_EvtHandler>
 8012c40:	e00f      	b.n	8012c62 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8012c42:	2108      	movs	r1, #8
 8012c44:	4808      	ldr	r0, [pc, #32]	; (8012c68 <HW_IPCC_Rx_Handler+0x6c>)
 8012c46:	f7ff ffc3 	bl	8012bd0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d009      	beq.n	8012c64 <HW_IPCC_Rx_Handler+0x68>
 8012c50:	4b05      	ldr	r3, [pc, #20]	; (8012c68 <HW_IPCC_Rx_Handler+0x6c>)
 8012c52:	685b      	ldr	r3, [r3, #4]
 8012c54:	43db      	mvns	r3, r3
 8012c56:	f003 0308 	and.w	r3, r3, #8
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d002      	beq.n	8012c64 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8012c5e:	f000 f905 	bl	8012e6c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8012c62:	bf00      	nop
 8012c64:	bf00      	nop
}
 8012c66:	bd80      	pop	{r7, pc}
 8012c68:	58000c00 	.word	0x58000c00

08012c6c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8012c70:	2102      	movs	r1, #2
 8012c72:	481a      	ldr	r0, [pc, #104]	; (8012cdc <HW_IPCC_Tx_Handler+0x70>)
 8012c74:	f7ff ff97 	bl	8012ba6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012c78:	4603      	mov	r3, r0
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d109      	bne.n	8012c92 <HW_IPCC_Tx_Handler+0x26>
 8012c7e:	4b17      	ldr	r3, [pc, #92]	; (8012cdc <HW_IPCC_Tx_Handler+0x70>)
 8012c80:	685b      	ldr	r3, [r3, #4]
 8012c82:	43db      	mvns	r3, r3
 8012c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d002      	beq.n	8012c92 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8012c8c:	f000 f896 	bl	8012dbc <HW_IPCC_SYS_CmdEvtHandler>
 8012c90:	e020      	b.n	8012cd4 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8012c92:	2108      	movs	r1, #8
 8012c94:	4811      	ldr	r0, [pc, #68]	; (8012cdc <HW_IPCC_Tx_Handler+0x70>)
 8012c96:	f7ff ff86 	bl	8012ba6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d109      	bne.n	8012cb4 <HW_IPCC_Tx_Handler+0x48>
 8012ca0:	4b0e      	ldr	r3, [pc, #56]	; (8012cdc <HW_IPCC_Tx_Handler+0x70>)
 8012ca2:	685b      	ldr	r3, [r3, #4]
 8012ca4:	43db      	mvns	r3, r3
 8012ca6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d002      	beq.n	8012cb4 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8012cae:	f000 f8bf 	bl	8012e30 <HW_IPCC_MM_FreeBufHandler>
 8012cb2:	e00f      	b.n	8012cd4 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8012cb4:	2120      	movs	r1, #32
 8012cb6:	4809      	ldr	r0, [pc, #36]	; (8012cdc <HW_IPCC_Tx_Handler+0x70>)
 8012cb8:	f7ff ff75 	bl	8012ba6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d109      	bne.n	8012cd6 <HW_IPCC_Tx_Handler+0x6a>
 8012cc2:	4b06      	ldr	r3, [pc, #24]	; (8012cdc <HW_IPCC_Tx_Handler+0x70>)
 8012cc4:	685b      	ldr	r3, [r3, #4]
 8012cc6:	43db      	mvns	r3, r3
 8012cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d002      	beq.n	8012cd6 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8012cd0:	f000 f850 	bl	8012d74 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8012cd4:	bf00      	nop
 8012cd6:	bf00      	nop
}
 8012cd8:	bd80      	pop	{r7, pc}
 8012cda:	bf00      	nop
 8012cdc:	58000c00 	.word	0x58000c00

08012ce0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8012ce4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8012ce8:	f7ff fecd 	bl	8012a86 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8012cec:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012cf0:	f7ff fe9e 	bl	8012a30 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8012cf4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012cf8:	f7ff fe86 	bl	8012a08 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8012cfc:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8012cfe:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8012d00:	f7ff fe72 	bl	80129e8 <LL_PWR_EnableBootC2>

  return;
 8012d04:	bf00      	nop
}
 8012d06:	bd80      	pop	{r7, pc}

08012d08 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8012d0c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8012d10:	f7ff fea0 	bl	8012a54 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8012d14:	4806      	ldr	r0, [pc, #24]	; (8012d30 <HW_IPCC_Init+0x28>)
 8012d16:	f7ff fee2 	bl	8012ade <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8012d1a:	4805      	ldr	r0, [pc, #20]	; (8012d30 <HW_IPCC_Init+0x28>)
 8012d1c:	f7ff fecf 	bl	8012abe <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8012d20:	202c      	movs	r0, #44	; 0x2c
 8012d22:	f7ef f8c6 	bl	8001eb2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8012d26:	202d      	movs	r0, #45	; 0x2d
 8012d28:	f7ef f8c3 	bl	8001eb2 <HAL_NVIC_EnableIRQ>

  return;
 8012d2c:	bf00      	nop
}
 8012d2e:	bd80      	pop	{r7, pc}
 8012d30:	58000c00 	.word	0x58000c00

08012d34 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8012d38:	2101      	movs	r1, #1
 8012d3a:	4802      	ldr	r0, [pc, #8]	; (8012d44 <HW_IPCC_BLE_Init+0x10>)
 8012d3c:	f7ff ff04 	bl	8012b48 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012d40:	bf00      	nop
}
 8012d42:	bd80      	pop	{r7, pc}
 8012d44:	58000c00 	.word	0x58000c00

08012d48 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8012d4c:	2101      	movs	r1, #1
 8012d4e:	4802      	ldr	r0, [pc, #8]	; (8012d58 <HW_IPCC_BLE_SendCmd+0x10>)
 8012d50:	f7ff ff1a 	bl	8012b88 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8012d54:	bf00      	nop
}
 8012d56:	bd80      	pop	{r7, pc}
 8012d58:	58000c00 	.word	0x58000c00

08012d5c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8012d60:	f7fe ffc8 	bl	8011cf4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8012d64:	2101      	movs	r1, #1
 8012d66:	4802      	ldr	r0, [pc, #8]	; (8012d70 <HW_IPCC_BLE_EvtHandler+0x14>)
 8012d68:	f7ff ff00 	bl	8012b6c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012d6c:	bf00      	nop
}
 8012d6e:	bd80      	pop	{r7, pc}
 8012d70:	58000c00 	.word	0x58000c00

08012d74 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8012d74:	b580      	push	{r7, lr}
 8012d76:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8012d78:	2120      	movs	r1, #32
 8012d7a:	4803      	ldr	r0, [pc, #12]	; (8012d88 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8012d7c:	f7ff fed2 	bl	8012b24 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8012d80:	f7fe ffe8 	bl	8011d54 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8012d84:	bf00      	nop
}
 8012d86:	bd80      	pop	{r7, pc}
 8012d88:	58000c00 	.word	0x58000c00

08012d8c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8012d90:	2102      	movs	r1, #2
 8012d92:	4802      	ldr	r0, [pc, #8]	; (8012d9c <HW_IPCC_SYS_Init+0x10>)
 8012d94:	f7ff fed8 	bl	8012b48 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012d98:	bf00      	nop
}
 8012d9a:	bd80      	pop	{r7, pc}
 8012d9c:	58000c00 	.word	0x58000c00

08012da0 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012da4:	2102      	movs	r1, #2
 8012da6:	4804      	ldr	r0, [pc, #16]	; (8012db8 <HW_IPCC_SYS_SendCmd+0x18>)
 8012da8:	f7ff feee 	bl	8012b88 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012dac:	2102      	movs	r1, #2
 8012dae:	4802      	ldr	r0, [pc, #8]	; (8012db8 <HW_IPCC_SYS_SendCmd+0x18>)
 8012db0:	f7ff fea5 	bl	8012afe <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8012db4:	bf00      	nop
}
 8012db6:	bd80      	pop	{r7, pc}
 8012db8:	58000c00 	.word	0x58000c00

08012dbc <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012dc0:	2102      	movs	r1, #2
 8012dc2:	4803      	ldr	r0, [pc, #12]	; (8012dd0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8012dc4:	f7ff feae 	bl	8012b24 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8012dc8:	f7ff f814 	bl	8011df4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8012dcc:	bf00      	nop
}
 8012dce:	bd80      	pop	{r7, pc}
 8012dd0:	58000c00 	.word	0x58000c00

08012dd4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8012dd8:	f7ff f822 	bl	8011e20 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8012ddc:	2102      	movs	r1, #2
 8012dde:	4802      	ldr	r0, [pc, #8]	; (8012de8 <HW_IPCC_SYS_EvtHandler+0x14>)
 8012de0:	f7ff fec4 	bl	8012b6c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012de4:	bf00      	nop
}
 8012de6:	bd80      	pop	{r7, pc}
 8012de8:	58000c00 	.word	0x58000c00

08012dec <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	b082      	sub	sp, #8
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8012df4:	2108      	movs	r1, #8
 8012df6:	480c      	ldr	r0, [pc, #48]	; (8012e28 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8012df8:	f7ff fed5 	bl	8012ba6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d007      	beq.n	8012e12 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8012e02:	4a0a      	ldr	r2, [pc, #40]	; (8012e2c <HW_IPCC_MM_SendFreeBuf+0x40>)
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012e08:	2108      	movs	r1, #8
 8012e0a:	4807      	ldr	r0, [pc, #28]	; (8012e28 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8012e0c:	f7ff fe77 	bl	8012afe <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8012e10:	e006      	b.n	8012e20 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012e16:	2108      	movs	r1, #8
 8012e18:	4803      	ldr	r0, [pc, #12]	; (8012e28 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8012e1a:	f7ff feb5 	bl	8012b88 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8012e1e:	bf00      	nop
}
 8012e20:	3708      	adds	r7, #8
 8012e22:	46bd      	mov	sp, r7
 8012e24:	bd80      	pop	{r7, pc}
 8012e26:	bf00      	nop
 8012e28:	58000c00 	.word	0x58000c00
 8012e2c:	200008b8 	.word	0x200008b8

08012e30 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8012e30:	b580      	push	{r7, lr}
 8012e32:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012e34:	2108      	movs	r1, #8
 8012e36:	4806      	ldr	r0, [pc, #24]	; (8012e50 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8012e38:	f7ff fe74 	bl	8012b24 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8012e3c:	4b05      	ldr	r3, [pc, #20]	; (8012e54 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012e42:	2108      	movs	r1, #8
 8012e44:	4802      	ldr	r0, [pc, #8]	; (8012e50 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8012e46:	f7ff fe9f 	bl	8012b88 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8012e4a:	bf00      	nop
}
 8012e4c:	bd80      	pop	{r7, pc}
 8012e4e:	bf00      	nop
 8012e50:	58000c00 	.word	0x58000c00
 8012e54:	200008b8 	.word	0x200008b8

08012e58 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8012e5c:	2108      	movs	r1, #8
 8012e5e:	4802      	ldr	r0, [pc, #8]	; (8012e68 <HW_IPCC_TRACES_Init+0x10>)
 8012e60:	f7ff fe72 	bl	8012b48 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012e64:	bf00      	nop
}
 8012e66:	bd80      	pop	{r7, pc}
 8012e68:	58000c00 	.word	0x58000c00

08012e6c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8012e70:	f7ff f87e 	bl	8011f70 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8012e74:	2108      	movs	r1, #8
 8012e76:	4802      	ldr	r0, [pc, #8]	; (8012e80 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8012e78:	f7ff fe78 	bl	8012b6c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012e7c:	bf00      	nop
}
 8012e7e:	bd80      	pop	{r7, pc}
 8012e80:	58000c00 	.word	0x58000c00

08012e84 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8012e84:	b580      	push	{r7, lr}
 8012e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8012e88:	2200      	movs	r2, #0
 8012e8a:	4912      	ldr	r1, [pc, #72]	; (8012ed4 <MX_USB_Device_Init+0x50>)
 8012e8c:	4812      	ldr	r0, [pc, #72]	; (8012ed8 <MX_USB_Device_Init+0x54>)
 8012e8e:	f7fb ffb5 	bl	800edfc <USBD_Init>
 8012e92:	4603      	mov	r3, r0
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d001      	beq.n	8012e9c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8012e98:	f7ee fbda 	bl	8001650 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8012e9c:	490f      	ldr	r1, [pc, #60]	; (8012edc <MX_USB_Device_Init+0x58>)
 8012e9e:	480e      	ldr	r0, [pc, #56]	; (8012ed8 <MX_USB_Device_Init+0x54>)
 8012ea0:	f7fb ffdc 	bl	800ee5c <USBD_RegisterClass>
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d001      	beq.n	8012eae <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8012eaa:	f7ee fbd1 	bl	8001650 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8012eae:	490c      	ldr	r1, [pc, #48]	; (8012ee0 <MX_USB_Device_Init+0x5c>)
 8012eb0:	4809      	ldr	r0, [pc, #36]	; (8012ed8 <MX_USB_Device_Init+0x54>)
 8012eb2:	f7fb fefd 	bl	800ecb0 <USBD_CDC_RegisterInterface>
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d001      	beq.n	8012ec0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8012ebc:	f7ee fbc8 	bl	8001650 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8012ec0:	4805      	ldr	r0, [pc, #20]	; (8012ed8 <MX_USB_Device_Init+0x54>)
 8012ec2:	f7fb fff2 	bl	800eeaa <USBD_Start>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d001      	beq.n	8012ed0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8012ecc:	f7ee fbc0 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8012ed0:	bf00      	nop
 8012ed2:	bd80      	pop	{r7, pc}
 8012ed4:	20000400 	.word	0x20000400
 8012ed8:	200008bc 	.word	0x200008bc
 8012edc:	200002dc 	.word	0x200002dc
 8012ee0:	200003ec 	.word	0x200003ec

08012ee4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012ee8:	2200      	movs	r2, #0
 8012eea:	4905      	ldr	r1, [pc, #20]	; (8012f00 <CDC_Init_FS+0x1c>)
 8012eec:	4805      	ldr	r0, [pc, #20]	; (8012f04 <CDC_Init_FS+0x20>)
 8012eee:	f7fb fef4 	bl	800ecda <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012ef2:	4905      	ldr	r1, [pc, #20]	; (8012f08 <CDC_Init_FS+0x24>)
 8012ef4:	4803      	ldr	r0, [pc, #12]	; (8012f04 <CDC_Init_FS+0x20>)
 8012ef6:	f7fb ff0e 	bl	800ed16 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012efa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012efc:	4618      	mov	r0, r3
 8012efe:	bd80      	pop	{r7, pc}
 8012f00:	2000138c 	.word	0x2000138c
 8012f04:	200008bc 	.word	0x200008bc
 8012f08:	20000b8c 	.word	0x20000b8c

08012f0c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012f0c:	b480      	push	{r7}
 8012f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012f10:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012f12:	4618      	mov	r0, r3
 8012f14:	46bd      	mov	sp, r7
 8012f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f1a:	4770      	bx	lr

08012f1c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012f1c:	b480      	push	{r7}
 8012f1e:	b083      	sub	sp, #12
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	4603      	mov	r3, r0
 8012f24:	6039      	str	r1, [r7, #0]
 8012f26:	71fb      	strb	r3, [r7, #7]
 8012f28:	4613      	mov	r3, r2
 8012f2a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012f2c:	79fb      	ldrb	r3, [r7, #7]
 8012f2e:	2b23      	cmp	r3, #35	; 0x23
 8012f30:	d84a      	bhi.n	8012fc8 <CDC_Control_FS+0xac>
 8012f32:	a201      	add	r2, pc, #4	; (adr r2, 8012f38 <CDC_Control_FS+0x1c>)
 8012f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f38:	08012fc9 	.word	0x08012fc9
 8012f3c:	08012fc9 	.word	0x08012fc9
 8012f40:	08012fc9 	.word	0x08012fc9
 8012f44:	08012fc9 	.word	0x08012fc9
 8012f48:	08012fc9 	.word	0x08012fc9
 8012f4c:	08012fc9 	.word	0x08012fc9
 8012f50:	08012fc9 	.word	0x08012fc9
 8012f54:	08012fc9 	.word	0x08012fc9
 8012f58:	08012fc9 	.word	0x08012fc9
 8012f5c:	08012fc9 	.word	0x08012fc9
 8012f60:	08012fc9 	.word	0x08012fc9
 8012f64:	08012fc9 	.word	0x08012fc9
 8012f68:	08012fc9 	.word	0x08012fc9
 8012f6c:	08012fc9 	.word	0x08012fc9
 8012f70:	08012fc9 	.word	0x08012fc9
 8012f74:	08012fc9 	.word	0x08012fc9
 8012f78:	08012fc9 	.word	0x08012fc9
 8012f7c:	08012fc9 	.word	0x08012fc9
 8012f80:	08012fc9 	.word	0x08012fc9
 8012f84:	08012fc9 	.word	0x08012fc9
 8012f88:	08012fc9 	.word	0x08012fc9
 8012f8c:	08012fc9 	.word	0x08012fc9
 8012f90:	08012fc9 	.word	0x08012fc9
 8012f94:	08012fc9 	.word	0x08012fc9
 8012f98:	08012fc9 	.word	0x08012fc9
 8012f9c:	08012fc9 	.word	0x08012fc9
 8012fa0:	08012fc9 	.word	0x08012fc9
 8012fa4:	08012fc9 	.word	0x08012fc9
 8012fa8:	08012fc9 	.word	0x08012fc9
 8012fac:	08012fc9 	.word	0x08012fc9
 8012fb0:	08012fc9 	.word	0x08012fc9
 8012fb4:	08012fc9 	.word	0x08012fc9
 8012fb8:	08012fc9 	.word	0x08012fc9
 8012fbc:	08012fc9 	.word	0x08012fc9
 8012fc0:	08012fc9 	.word	0x08012fc9
 8012fc4:	08012fc9 	.word	0x08012fc9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012fc8:	bf00      	nop
  }

  return (USBD_OK);
 8012fca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012fcc:	4618      	mov	r0, r3
 8012fce:	370c      	adds	r7, #12
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd6:	4770      	bx	lr

08012fd8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b082      	sub	sp, #8
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
 8012fe0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012fe2:	6879      	ldr	r1, [r7, #4]
 8012fe4:	4805      	ldr	r0, [pc, #20]	; (8012ffc <CDC_Receive_FS+0x24>)
 8012fe6:	f7fb fe96 	bl	800ed16 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012fea:	4804      	ldr	r0, [pc, #16]	; (8012ffc <CDC_Receive_FS+0x24>)
 8012fec:	f7fb fedc 	bl	800eda8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012ff0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	3708      	adds	r7, #8
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	bd80      	pop	{r7, pc}
 8012ffa:	bf00      	nop
 8012ffc:	200008bc 	.word	0x200008bc

08013000 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b084      	sub	sp, #16
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
 8013008:	460b      	mov	r3, r1
 801300a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801300c:	2300      	movs	r3, #0
 801300e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8013010:	4b0d      	ldr	r3, [pc, #52]	; (8013048 <CDC_Transmit_FS+0x48>)
 8013012:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013016:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8013018:	68bb      	ldr	r3, [r7, #8]
 801301a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801301e:	2b00      	cmp	r3, #0
 8013020:	d001      	beq.n	8013026 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8013022:	2301      	movs	r3, #1
 8013024:	e00b      	b.n	801303e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8013026:	887b      	ldrh	r3, [r7, #2]
 8013028:	461a      	mov	r2, r3
 801302a:	6879      	ldr	r1, [r7, #4]
 801302c:	4806      	ldr	r0, [pc, #24]	; (8013048 <CDC_Transmit_FS+0x48>)
 801302e:	f7fb fe54 	bl	800ecda <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8013032:	4805      	ldr	r0, [pc, #20]	; (8013048 <CDC_Transmit_FS+0x48>)
 8013034:	f7fb fe88 	bl	800ed48 <USBD_CDC_TransmitPacket>
 8013038:	4603      	mov	r3, r0
 801303a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801303c:	7bfb      	ldrb	r3, [r7, #15]
}
 801303e:	4618      	mov	r0, r3
 8013040:	3710      	adds	r7, #16
 8013042:	46bd      	mov	sp, r7
 8013044:	bd80      	pop	{r7, pc}
 8013046:	bf00      	nop
 8013048:	200008bc 	.word	0x200008bc

0801304c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801304c:	b480      	push	{r7}
 801304e:	b087      	sub	sp, #28
 8013050:	af00      	add	r7, sp, #0
 8013052:	60f8      	str	r0, [r7, #12]
 8013054:	60b9      	str	r1, [r7, #8]
 8013056:	4613      	mov	r3, r2
 8013058:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801305a:	2300      	movs	r3, #0
 801305c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801305e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013062:	4618      	mov	r0, r3
 8013064:	371c      	adds	r7, #28
 8013066:	46bd      	mov	sp, r7
 8013068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306c:	4770      	bx	lr
	...

08013070 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013070:	b480      	push	{r7}
 8013072:	b083      	sub	sp, #12
 8013074:	af00      	add	r7, sp, #0
 8013076:	4603      	mov	r3, r0
 8013078:	6039      	str	r1, [r7, #0]
 801307a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 801307c:	683b      	ldr	r3, [r7, #0]
 801307e:	2212      	movs	r2, #18
 8013080:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8013082:	4b03      	ldr	r3, [pc, #12]	; (8013090 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8013084:	4618      	mov	r0, r3
 8013086:	370c      	adds	r7, #12
 8013088:	46bd      	mov	sp, r7
 801308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801308e:	4770      	bx	lr
 8013090:	20000420 	.word	0x20000420

08013094 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013094:	b480      	push	{r7}
 8013096:	b083      	sub	sp, #12
 8013098:	af00      	add	r7, sp, #0
 801309a:	4603      	mov	r3, r0
 801309c:	6039      	str	r1, [r7, #0]
 801309e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80130a0:	683b      	ldr	r3, [r7, #0]
 80130a2:	2204      	movs	r2, #4
 80130a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80130a6:	4b03      	ldr	r3, [pc, #12]	; (80130b4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80130a8:	4618      	mov	r0, r3
 80130aa:	370c      	adds	r7, #12
 80130ac:	46bd      	mov	sp, r7
 80130ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b2:	4770      	bx	lr
 80130b4:	20000434 	.word	0x20000434

080130b8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b082      	sub	sp, #8
 80130bc:	af00      	add	r7, sp, #0
 80130be:	4603      	mov	r3, r0
 80130c0:	6039      	str	r1, [r7, #0]
 80130c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80130c4:	79fb      	ldrb	r3, [r7, #7]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d105      	bne.n	80130d6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80130ca:	683a      	ldr	r2, [r7, #0]
 80130cc:	4907      	ldr	r1, [pc, #28]	; (80130ec <USBD_CDC_ProductStrDescriptor+0x34>)
 80130ce:	4808      	ldr	r0, [pc, #32]	; (80130f0 <USBD_CDC_ProductStrDescriptor+0x38>)
 80130d0:	f7fc fed3 	bl	800fe7a <USBD_GetString>
 80130d4:	e004      	b.n	80130e0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80130d6:	683a      	ldr	r2, [r7, #0]
 80130d8:	4904      	ldr	r1, [pc, #16]	; (80130ec <USBD_CDC_ProductStrDescriptor+0x34>)
 80130da:	4805      	ldr	r0, [pc, #20]	; (80130f0 <USBD_CDC_ProductStrDescriptor+0x38>)
 80130dc:	f7fc fecd 	bl	800fe7a <USBD_GetString>
  }
  return USBD_StrDesc;
 80130e0:	4b02      	ldr	r3, [pc, #8]	; (80130ec <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80130e2:	4618      	mov	r0, r3
 80130e4:	3708      	adds	r7, #8
 80130e6:	46bd      	mov	sp, r7
 80130e8:	bd80      	pop	{r7, pc}
 80130ea:	bf00      	nop
 80130ec:	20001b8c 	.word	0x20001b8c
 80130f0:	08014d10 	.word	0x08014d10

080130f4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b082      	sub	sp, #8
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	4603      	mov	r3, r0
 80130fc:	6039      	str	r1, [r7, #0]
 80130fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013100:	683a      	ldr	r2, [r7, #0]
 8013102:	4904      	ldr	r1, [pc, #16]	; (8013114 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8013104:	4804      	ldr	r0, [pc, #16]	; (8013118 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8013106:	f7fc feb8 	bl	800fe7a <USBD_GetString>
  return USBD_StrDesc;
 801310a:	4b02      	ldr	r3, [pc, #8]	; (8013114 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 801310c:	4618      	mov	r0, r3
 801310e:	3708      	adds	r7, #8
 8013110:	46bd      	mov	sp, r7
 8013112:	bd80      	pop	{r7, pc}
 8013114:	20001b8c 	.word	0x20001b8c
 8013118:	08014d28 	.word	0x08014d28

0801311c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b082      	sub	sp, #8
 8013120:	af00      	add	r7, sp, #0
 8013122:	4603      	mov	r3, r0
 8013124:	6039      	str	r1, [r7, #0]
 8013126:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013128:	683b      	ldr	r3, [r7, #0]
 801312a:	221a      	movs	r2, #26
 801312c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801312e:	f000 f843 	bl	80131b8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8013132:	4b02      	ldr	r3, [pc, #8]	; (801313c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8013134:	4618      	mov	r0, r3
 8013136:	3708      	adds	r7, #8
 8013138:	46bd      	mov	sp, r7
 801313a:	bd80      	pop	{r7, pc}
 801313c:	20000438 	.word	0x20000438

08013140 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013140:	b580      	push	{r7, lr}
 8013142:	b082      	sub	sp, #8
 8013144:	af00      	add	r7, sp, #0
 8013146:	4603      	mov	r3, r0
 8013148:	6039      	str	r1, [r7, #0]
 801314a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801314c:	79fb      	ldrb	r3, [r7, #7]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d105      	bne.n	801315e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8013152:	683a      	ldr	r2, [r7, #0]
 8013154:	4907      	ldr	r1, [pc, #28]	; (8013174 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8013156:	4808      	ldr	r0, [pc, #32]	; (8013178 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8013158:	f7fc fe8f 	bl	800fe7a <USBD_GetString>
 801315c:	e004      	b.n	8013168 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801315e:	683a      	ldr	r2, [r7, #0]
 8013160:	4904      	ldr	r1, [pc, #16]	; (8013174 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8013162:	4805      	ldr	r0, [pc, #20]	; (8013178 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8013164:	f7fc fe89 	bl	800fe7a <USBD_GetString>
  }
  return USBD_StrDesc;
 8013168:	4b02      	ldr	r3, [pc, #8]	; (8013174 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801316a:	4618      	mov	r0, r3
 801316c:	3708      	adds	r7, #8
 801316e:	46bd      	mov	sp, r7
 8013170:	bd80      	pop	{r7, pc}
 8013172:	bf00      	nop
 8013174:	20001b8c 	.word	0x20001b8c
 8013178:	08014d3c 	.word	0x08014d3c

0801317c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	b082      	sub	sp, #8
 8013180:	af00      	add	r7, sp, #0
 8013182:	4603      	mov	r3, r0
 8013184:	6039      	str	r1, [r7, #0]
 8013186:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013188:	79fb      	ldrb	r3, [r7, #7]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d105      	bne.n	801319a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801318e:	683a      	ldr	r2, [r7, #0]
 8013190:	4907      	ldr	r1, [pc, #28]	; (80131b0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8013192:	4808      	ldr	r0, [pc, #32]	; (80131b4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8013194:	f7fc fe71 	bl	800fe7a <USBD_GetString>
 8013198:	e004      	b.n	80131a4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801319a:	683a      	ldr	r2, [r7, #0]
 801319c:	4904      	ldr	r1, [pc, #16]	; (80131b0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801319e:	4805      	ldr	r0, [pc, #20]	; (80131b4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80131a0:	f7fc fe6b 	bl	800fe7a <USBD_GetString>
  }
  return USBD_StrDesc;
 80131a4:	4b02      	ldr	r3, [pc, #8]	; (80131b0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80131a6:	4618      	mov	r0, r3
 80131a8:	3708      	adds	r7, #8
 80131aa:	46bd      	mov	sp, r7
 80131ac:	bd80      	pop	{r7, pc}
 80131ae:	bf00      	nop
 80131b0:	20001b8c 	.word	0x20001b8c
 80131b4:	08014d48 	.word	0x08014d48

080131b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b084      	sub	sp, #16
 80131bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80131be:	4b0f      	ldr	r3, [pc, #60]	; (80131fc <Get_SerialNum+0x44>)
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80131c4:	4b0e      	ldr	r3, [pc, #56]	; (8013200 <Get_SerialNum+0x48>)
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80131ca:	4b0e      	ldr	r3, [pc, #56]	; (8013204 <Get_SerialNum+0x4c>)
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80131d0:	68fa      	ldr	r2, [r7, #12]
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	4413      	add	r3, r2
 80131d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d009      	beq.n	80131f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80131de:	2208      	movs	r2, #8
 80131e0:	4909      	ldr	r1, [pc, #36]	; (8013208 <Get_SerialNum+0x50>)
 80131e2:	68f8      	ldr	r0, [r7, #12]
 80131e4:	f000 f814 	bl	8013210 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80131e8:	2204      	movs	r2, #4
 80131ea:	4908      	ldr	r1, [pc, #32]	; (801320c <Get_SerialNum+0x54>)
 80131ec:	68b8      	ldr	r0, [r7, #8]
 80131ee:	f000 f80f 	bl	8013210 <IntToUnicode>
  }
}
 80131f2:	bf00      	nop
 80131f4:	3710      	adds	r7, #16
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bd80      	pop	{r7, pc}
 80131fa:	bf00      	nop
 80131fc:	1fff7590 	.word	0x1fff7590
 8013200:	1fff7594 	.word	0x1fff7594
 8013204:	1fff7598 	.word	0x1fff7598
 8013208:	2000043a 	.word	0x2000043a
 801320c:	2000044a 	.word	0x2000044a

08013210 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013210:	b480      	push	{r7}
 8013212:	b087      	sub	sp, #28
 8013214:	af00      	add	r7, sp, #0
 8013216:	60f8      	str	r0, [r7, #12]
 8013218:	60b9      	str	r1, [r7, #8]
 801321a:	4613      	mov	r3, r2
 801321c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801321e:	2300      	movs	r3, #0
 8013220:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013222:	2300      	movs	r3, #0
 8013224:	75fb      	strb	r3, [r7, #23]
 8013226:	e027      	b.n	8013278 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	0f1b      	lsrs	r3, r3, #28
 801322c:	2b09      	cmp	r3, #9
 801322e:	d80b      	bhi.n	8013248 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	0f1b      	lsrs	r3, r3, #28
 8013234:	b2da      	uxtb	r2, r3
 8013236:	7dfb      	ldrb	r3, [r7, #23]
 8013238:	005b      	lsls	r3, r3, #1
 801323a:	4619      	mov	r1, r3
 801323c:	68bb      	ldr	r3, [r7, #8]
 801323e:	440b      	add	r3, r1
 8013240:	3230      	adds	r2, #48	; 0x30
 8013242:	b2d2      	uxtb	r2, r2
 8013244:	701a      	strb	r2, [r3, #0]
 8013246:	e00a      	b.n	801325e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	0f1b      	lsrs	r3, r3, #28
 801324c:	b2da      	uxtb	r2, r3
 801324e:	7dfb      	ldrb	r3, [r7, #23]
 8013250:	005b      	lsls	r3, r3, #1
 8013252:	4619      	mov	r1, r3
 8013254:	68bb      	ldr	r3, [r7, #8]
 8013256:	440b      	add	r3, r1
 8013258:	3237      	adds	r2, #55	; 0x37
 801325a:	b2d2      	uxtb	r2, r2
 801325c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	011b      	lsls	r3, r3, #4
 8013262:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013264:	7dfb      	ldrb	r3, [r7, #23]
 8013266:	005b      	lsls	r3, r3, #1
 8013268:	3301      	adds	r3, #1
 801326a:	68ba      	ldr	r2, [r7, #8]
 801326c:	4413      	add	r3, r2
 801326e:	2200      	movs	r2, #0
 8013270:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8013272:	7dfb      	ldrb	r3, [r7, #23]
 8013274:	3301      	adds	r3, #1
 8013276:	75fb      	strb	r3, [r7, #23]
 8013278:	7dfa      	ldrb	r2, [r7, #23]
 801327a:	79fb      	ldrb	r3, [r7, #7]
 801327c:	429a      	cmp	r2, r3
 801327e:	d3d3      	bcc.n	8013228 <IntToUnicode+0x18>
  }
}
 8013280:	bf00      	nop
 8013282:	bf00      	nop
 8013284:	371c      	adds	r7, #28
 8013286:	46bd      	mov	sp, r7
 8013288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801328c:	4770      	bx	lr

0801328e <LL_AHB2_GRP1_EnableClock>:
{
 801328e:	b480      	push	{r7}
 8013290:	b085      	sub	sp, #20
 8013292:	af00      	add	r7, sp, #0
 8013294:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8013296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801329a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801329c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	4313      	orrs	r3, r2
 80132a4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80132a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80132aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	4013      	ands	r3, r2
 80132b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80132b2:	68fb      	ldr	r3, [r7, #12]
}
 80132b4:	bf00      	nop
 80132b6:	3714      	adds	r7, #20
 80132b8:	46bd      	mov	sp, r7
 80132ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132be:	4770      	bx	lr

080132c0 <LL_APB1_GRP1_EnableClock>:
{
 80132c0:	b480      	push	{r7}
 80132c2:	b085      	sub	sp, #20
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80132c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80132cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80132ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	4313      	orrs	r3, r2
 80132d6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80132d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80132dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	4013      	ands	r3, r2
 80132e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80132e4:	68fb      	ldr	r3, [r7, #12]
}
 80132e6:	bf00      	nop
 80132e8:	3714      	adds	r7, #20
 80132ea:	46bd      	mov	sp, r7
 80132ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f0:	4770      	bx	lr
	...

080132f4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132f4:	b580      	push	{r7, lr}
 80132f6:	b09c      	sub	sp, #112	; 0x70
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80132fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013300:	2200      	movs	r2, #0
 8013302:	601a      	str	r2, [r3, #0]
 8013304:	605a      	str	r2, [r3, #4]
 8013306:	609a      	str	r2, [r3, #8]
 8013308:	60da      	str	r2, [r3, #12]
 801330a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801330c:	f107 030c 	add.w	r3, r7, #12
 8013310:	2250      	movs	r2, #80	; 0x50
 8013312:	2100      	movs	r1, #0
 8013314:	4618      	mov	r0, r3
 8013316:	f000 fdc1 	bl	8013e9c <memset>
  if(pcdHandle->Instance==USB)
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	4a1b      	ldr	r2, [pc, #108]	; (801338c <HAL_PCD_MspInit+0x98>)
 8013320:	4293      	cmp	r3, r2
 8013322:	d12f      	bne.n	8013384 <HAL_PCD_MspInit+0x90>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8013324:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013328:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801332a:	2300      	movs	r3, #0
 801332c:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801332e:	f107 030c 	add.w	r3, r7, #12
 8013332:	4618      	mov	r0, r3
 8013334:	f7f2 fe55 	bl	8005fe2 <HAL_RCCEx_PeriphCLKConfig>
 8013338:	4603      	mov	r3, r0
 801333a:	2b00      	cmp	r3, #0
 801333c:	d001      	beq.n	8013342 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 801333e:	f7ee f987 	bl	8001650 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013342:	2001      	movs	r0, #1
 8013344:	f7ff ffa3 	bl	801328e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013348:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801334c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801334e:	2302      	movs	r3, #2
 8013350:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013352:	2300      	movs	r3, #0
 8013354:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013356:	2300      	movs	r3, #0
 8013358:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 801335a:	230a      	movs	r3, #10
 801335c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801335e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013362:	4619      	mov	r1, r3
 8013364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8013368:	f7ee fdda 	bl	8001f20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801336c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8013370:	f7ff ffa6 	bl	80132c0 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8013374:	2200      	movs	r2, #0
 8013376:	2100      	movs	r1, #0
 8013378:	2014      	movs	r0, #20
 801337a:	f7ee fd80 	bl	8001e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801337e:	2014      	movs	r0, #20
 8013380:	f7ee fd97 	bl	8001eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8013384:	bf00      	nop
 8013386:	3770      	adds	r7, #112	; 0x70
 8013388:	46bd      	mov	sp, r7
 801338a:	bd80      	pop	{r7, pc}
 801338c:	40006800 	.word	0x40006800

08013390 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b082      	sub	sp, #8
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80133a4:	4619      	mov	r1, r3
 80133a6:	4610      	mov	r0, r2
 80133a8:	f7fb fdca 	bl	800ef40 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80133ac:	bf00      	nop
 80133ae:	3708      	adds	r7, #8
 80133b0:	46bd      	mov	sp, r7
 80133b2:	bd80      	pop	{r7, pc}

080133b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b082      	sub	sp, #8
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
 80133bc:	460b      	mov	r3, r1
 80133be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 80133c6:	78fa      	ldrb	r2, [r7, #3]
 80133c8:	6879      	ldr	r1, [r7, #4]
 80133ca:	4613      	mov	r3, r2
 80133cc:	009b      	lsls	r3, r3, #2
 80133ce:	4413      	add	r3, r2
 80133d0:	00db      	lsls	r3, r3, #3
 80133d2:	440b      	add	r3, r1
 80133d4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80133d8:	681a      	ldr	r2, [r3, #0]
 80133da:	78fb      	ldrb	r3, [r7, #3]
 80133dc:	4619      	mov	r1, r3
 80133de:	f7fb fe04 	bl	800efea <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80133e2:	bf00      	nop
 80133e4:	3708      	adds	r7, #8
 80133e6:	46bd      	mov	sp, r7
 80133e8:	bd80      	pop	{r7, pc}

080133ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80133ea:	b580      	push	{r7, lr}
 80133ec:	b082      	sub	sp, #8
 80133ee:	af00      	add	r7, sp, #0
 80133f0:	6078      	str	r0, [r7, #4]
 80133f2:	460b      	mov	r3, r1
 80133f4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 80133fc:	78fa      	ldrb	r2, [r7, #3]
 80133fe:	6879      	ldr	r1, [r7, #4]
 8013400:	4613      	mov	r3, r2
 8013402:	009b      	lsls	r3, r3, #2
 8013404:	4413      	add	r3, r2
 8013406:	00db      	lsls	r3, r3, #3
 8013408:	440b      	add	r3, r1
 801340a:	3340      	adds	r3, #64	; 0x40
 801340c:	681a      	ldr	r2, [r3, #0]
 801340e:	78fb      	ldrb	r3, [r7, #3]
 8013410:	4619      	mov	r1, r3
 8013412:	f7fb fe4d 	bl	800f0b0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8013416:	bf00      	nop
 8013418:	3708      	adds	r7, #8
 801341a:	46bd      	mov	sp, r7
 801341c:	bd80      	pop	{r7, pc}

0801341e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801341e:	b580      	push	{r7, lr}
 8013420:	b082      	sub	sp, #8
 8013422:	af00      	add	r7, sp, #0
 8013424:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 801342c:	4618      	mov	r0, r3
 801342e:	f7fb ff61 	bl	800f2f4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8013432:	bf00      	nop
 8013434:	3708      	adds	r7, #8
 8013436:	46bd      	mov	sp, r7
 8013438:	bd80      	pop	{r7, pc}

0801343a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801343a:	b580      	push	{r7, lr}
 801343c:	b084      	sub	sp, #16
 801343e:	af00      	add	r7, sp, #0
 8013440:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013442:	2301      	movs	r3, #1
 8013444:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	689b      	ldr	r3, [r3, #8]
 801344a:	2b02      	cmp	r3, #2
 801344c:	d001      	beq.n	8013452 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801344e:	f7ee f8ff 	bl	8001650 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8013458:	7bfa      	ldrb	r2, [r7, #15]
 801345a:	4611      	mov	r1, r2
 801345c:	4618      	mov	r0, r3
 801345e:	f7fb ff0b 	bl	800f278 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8013468:	4618      	mov	r0, r3
 801346a:	f7fb feb7 	bl	800f1dc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801346e:	bf00      	nop
 8013470:	3710      	adds	r7, #16
 8013472:	46bd      	mov	sp, r7
 8013474:	bd80      	pop	{r7, pc}
	...

08013478 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b082      	sub	sp, #8
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8013486:	4618      	mov	r0, r3
 8013488:	f7fb ff06 	bl	800f298 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	699b      	ldr	r3, [r3, #24]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d005      	beq.n	80134a0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013494:	4b04      	ldr	r3, [pc, #16]	; (80134a8 <HAL_PCD_SuspendCallback+0x30>)
 8013496:	691b      	ldr	r3, [r3, #16]
 8013498:	4a03      	ldr	r2, [pc, #12]	; (80134a8 <HAL_PCD_SuspendCallback+0x30>)
 801349a:	f043 0306 	orr.w	r3, r3, #6
 801349e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80134a0:	bf00      	nop
 80134a2:	3708      	adds	r7, #8
 80134a4:	46bd      	mov	sp, r7
 80134a6:	bd80      	pop	{r7, pc}
 80134a8:	e000ed00 	.word	0xe000ed00

080134ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80134ac:	b580      	push	{r7, lr}
 80134ae:	b082      	sub	sp, #8
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	699b      	ldr	r3, [r3, #24]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d007      	beq.n	80134cc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80134bc:	4b08      	ldr	r3, [pc, #32]	; (80134e0 <HAL_PCD_ResumeCallback+0x34>)
 80134be:	691b      	ldr	r3, [r3, #16]
 80134c0:	4a07      	ldr	r2, [pc, #28]	; (80134e0 <HAL_PCD_ResumeCallback+0x34>)
 80134c2:	f023 0306 	bic.w	r3, r3, #6
 80134c6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80134c8:	f000 f9fc 	bl	80138c4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80134d2:	4618      	mov	r0, r3
 80134d4:	f7fb fef6 	bl	800f2c4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80134d8:	bf00      	nop
 80134da:	3708      	adds	r7, #8
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd80      	pop	{r7, pc}
 80134e0:	e000ed00 	.word	0xe000ed00

080134e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b082      	sub	sp, #8
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80134ec:	4a2c      	ldr	r2, [pc, #176]	; (80135a0 <USBD_LL_Init+0xbc>)
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	4a2a      	ldr	r2, [pc, #168]	; (80135a0 <USBD_LL_Init+0xbc>)
 80134f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80134fc:	f7f1 fa3a 	bl	8004974 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8013500:	4b27      	ldr	r3, [pc, #156]	; (80135a0 <USBD_LL_Init+0xbc>)
 8013502:	4a28      	ldr	r2, [pc, #160]	; (80135a4 <USBD_LL_Init+0xc0>)
 8013504:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8013506:	4b26      	ldr	r3, [pc, #152]	; (80135a0 <USBD_LL_Init+0xbc>)
 8013508:	2208      	movs	r2, #8
 801350a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801350c:	4b24      	ldr	r3, [pc, #144]	; (80135a0 <USBD_LL_Init+0xbc>)
 801350e:	2202      	movs	r2, #2
 8013510:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013512:	4b23      	ldr	r3, [pc, #140]	; (80135a0 <USBD_LL_Init+0xbc>)
 8013514:	2202      	movs	r2, #2
 8013516:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8013518:	4b21      	ldr	r3, [pc, #132]	; (80135a0 <USBD_LL_Init+0xbc>)
 801351a:	2200      	movs	r2, #0
 801351c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801351e:	4b20      	ldr	r3, [pc, #128]	; (80135a0 <USBD_LL_Init+0xbc>)
 8013520:	2200      	movs	r2, #0
 8013522:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8013524:	4b1e      	ldr	r3, [pc, #120]	; (80135a0 <USBD_LL_Init+0xbc>)
 8013526:	2200      	movs	r2, #0
 8013528:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801352a:	4b1d      	ldr	r3, [pc, #116]	; (80135a0 <USBD_LL_Init+0xbc>)
 801352c:	2200      	movs	r2, #0
 801352e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8013530:	481b      	ldr	r0, [pc, #108]	; (80135a0 <USBD_LL_Init+0xbc>)
 8013532:	f7ef fcaf 	bl	8002e94 <HAL_PCD_Init>
 8013536:	4603      	mov	r3, r0
 8013538:	2b00      	cmp	r3, #0
 801353a:	d001      	beq.n	8013540 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 801353c:	f7ee f888 	bl	8001650 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013546:	2318      	movs	r3, #24
 8013548:	2200      	movs	r2, #0
 801354a:	2100      	movs	r1, #0
 801354c:	f7f1 f985 	bl	800485a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013556:	2358      	movs	r3, #88	; 0x58
 8013558:	2200      	movs	r2, #0
 801355a:	2180      	movs	r1, #128	; 0x80
 801355c:	f7f1 f97d 	bl	800485a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013566:	23c0      	movs	r3, #192	; 0xc0
 8013568:	2200      	movs	r2, #0
 801356a:	2181      	movs	r1, #129	; 0x81
 801356c:	f7f1 f975 	bl	800485a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013576:	f44f 7388 	mov.w	r3, #272	; 0x110
 801357a:	2200      	movs	r2, #0
 801357c:	2101      	movs	r1, #1
 801357e:	f7f1 f96c 	bl	800485a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013588:	f44f 7380 	mov.w	r3, #256	; 0x100
 801358c:	2200      	movs	r2, #0
 801358e:	2182      	movs	r1, #130	; 0x82
 8013590:	f7f1 f963 	bl	800485a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8013594:	2300      	movs	r3, #0
}
 8013596:	4618      	mov	r0, r3
 8013598:	3708      	adds	r7, #8
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}
 801359e:	bf00      	nop
 80135a0:	20001d8c 	.word	0x20001d8c
 80135a4:	40006800 	.word	0x40006800

080135a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b084      	sub	sp, #16
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80135b0:	2300      	movs	r3, #0
 80135b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80135b4:	2300      	movs	r3, #0
 80135b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80135be:	4618      	mov	r0, r3
 80135c0:	f7ef fd53 	bl	800306a <HAL_PCD_Start>
 80135c4:	4603      	mov	r3, r0
 80135c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80135c8:	7bfb      	ldrb	r3, [r7, #15]
 80135ca:	4618      	mov	r0, r3
 80135cc:	f000 f980 	bl	80138d0 <USBD_Get_USB_Status>
 80135d0:	4603      	mov	r3, r0
 80135d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80135d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80135d6:	4618      	mov	r0, r3
 80135d8:	3710      	adds	r7, #16
 80135da:	46bd      	mov	sp, r7
 80135dc:	bd80      	pop	{r7, pc}

080135de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80135de:	b580      	push	{r7, lr}
 80135e0:	b084      	sub	sp, #16
 80135e2:	af00      	add	r7, sp, #0
 80135e4:	6078      	str	r0, [r7, #4]
 80135e6:	4608      	mov	r0, r1
 80135e8:	4611      	mov	r1, r2
 80135ea:	461a      	mov	r2, r3
 80135ec:	4603      	mov	r3, r0
 80135ee:	70fb      	strb	r3, [r7, #3]
 80135f0:	460b      	mov	r3, r1
 80135f2:	70bb      	strb	r3, [r7, #2]
 80135f4:	4613      	mov	r3, r2
 80135f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80135f8:	2300      	movs	r3, #0
 80135fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80135fc:	2300      	movs	r3, #0
 80135fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013606:	78bb      	ldrb	r3, [r7, #2]
 8013608:	883a      	ldrh	r2, [r7, #0]
 801360a:	78f9      	ldrb	r1, [r7, #3]
 801360c:	f7ef fe9b 	bl	8003346 <HAL_PCD_EP_Open>
 8013610:	4603      	mov	r3, r0
 8013612:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013614:	7bfb      	ldrb	r3, [r7, #15]
 8013616:	4618      	mov	r0, r3
 8013618:	f000 f95a 	bl	80138d0 <USBD_Get_USB_Status>
 801361c:	4603      	mov	r3, r0
 801361e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013620:	7bbb      	ldrb	r3, [r7, #14]
}
 8013622:	4618      	mov	r0, r3
 8013624:	3710      	adds	r7, #16
 8013626:	46bd      	mov	sp, r7
 8013628:	bd80      	pop	{r7, pc}

0801362a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801362a:	b580      	push	{r7, lr}
 801362c:	b084      	sub	sp, #16
 801362e:	af00      	add	r7, sp, #0
 8013630:	6078      	str	r0, [r7, #4]
 8013632:	460b      	mov	r3, r1
 8013634:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013636:	2300      	movs	r3, #0
 8013638:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801363a:	2300      	movs	r3, #0
 801363c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013644:	78fa      	ldrb	r2, [r7, #3]
 8013646:	4611      	mov	r1, r2
 8013648:	4618      	mov	r0, r3
 801364a:	f7ef fee4 	bl	8003416 <HAL_PCD_EP_Close>
 801364e:	4603      	mov	r3, r0
 8013650:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013652:	7bfb      	ldrb	r3, [r7, #15]
 8013654:	4618      	mov	r0, r3
 8013656:	f000 f93b 	bl	80138d0 <USBD_Get_USB_Status>
 801365a:	4603      	mov	r3, r0
 801365c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801365e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013660:	4618      	mov	r0, r3
 8013662:	3710      	adds	r7, #16
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}

08013668 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b084      	sub	sp, #16
 801366c:	af00      	add	r7, sp, #0
 801366e:	6078      	str	r0, [r7, #4]
 8013670:	460b      	mov	r3, r1
 8013672:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013674:	2300      	movs	r3, #0
 8013676:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013678:	2300      	movs	r3, #0
 801367a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013682:	78fa      	ldrb	r2, [r7, #3]
 8013684:	4611      	mov	r1, r2
 8013686:	4618      	mov	r0, r3
 8013688:	f7ef ffa9 	bl	80035de <HAL_PCD_EP_SetStall>
 801368c:	4603      	mov	r3, r0
 801368e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013690:	7bfb      	ldrb	r3, [r7, #15]
 8013692:	4618      	mov	r0, r3
 8013694:	f000 f91c 	bl	80138d0 <USBD_Get_USB_Status>
 8013698:	4603      	mov	r3, r0
 801369a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801369c:	7bbb      	ldrb	r3, [r7, #14]
}
 801369e:	4618      	mov	r0, r3
 80136a0:	3710      	adds	r7, #16
 80136a2:	46bd      	mov	sp, r7
 80136a4:	bd80      	pop	{r7, pc}

080136a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80136a6:	b580      	push	{r7, lr}
 80136a8:	b084      	sub	sp, #16
 80136aa:	af00      	add	r7, sp, #0
 80136ac:	6078      	str	r0, [r7, #4]
 80136ae:	460b      	mov	r3, r1
 80136b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80136b2:	2300      	movs	r3, #0
 80136b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80136b6:	2300      	movs	r3, #0
 80136b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80136c0:	78fa      	ldrb	r2, [r7, #3]
 80136c2:	4611      	mov	r1, r2
 80136c4:	4618      	mov	r0, r3
 80136c6:	f7ef ffde 	bl	8003686 <HAL_PCD_EP_ClrStall>
 80136ca:	4603      	mov	r3, r0
 80136cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80136ce:	7bfb      	ldrb	r3, [r7, #15]
 80136d0:	4618      	mov	r0, r3
 80136d2:	f000 f8fd 	bl	80138d0 <USBD_Get_USB_Status>
 80136d6:	4603      	mov	r3, r0
 80136d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80136da:	7bbb      	ldrb	r3, [r7, #14]
}
 80136dc:	4618      	mov	r0, r3
 80136de:	3710      	adds	r7, #16
 80136e0:	46bd      	mov	sp, r7
 80136e2:	bd80      	pop	{r7, pc}

080136e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80136e4:	b480      	push	{r7}
 80136e6:	b085      	sub	sp, #20
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
 80136ec:	460b      	mov	r3, r1
 80136ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80136f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80136f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	da0c      	bge.n	801371a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013700:	78fb      	ldrb	r3, [r7, #3]
 8013702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013706:	68f9      	ldr	r1, [r7, #12]
 8013708:	1c5a      	adds	r2, r3, #1
 801370a:	4613      	mov	r3, r2
 801370c:	009b      	lsls	r3, r3, #2
 801370e:	4413      	add	r3, r2
 8013710:	00db      	lsls	r3, r3, #3
 8013712:	440b      	add	r3, r1
 8013714:	3306      	adds	r3, #6
 8013716:	781b      	ldrb	r3, [r3, #0]
 8013718:	e00b      	b.n	8013732 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801371a:	78fb      	ldrb	r3, [r7, #3]
 801371c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013720:	68f9      	ldr	r1, [r7, #12]
 8013722:	4613      	mov	r3, r2
 8013724:	009b      	lsls	r3, r3, #2
 8013726:	4413      	add	r3, r2
 8013728:	00db      	lsls	r3, r3, #3
 801372a:	440b      	add	r3, r1
 801372c:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 8013730:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013732:	4618      	mov	r0, r3
 8013734:	3714      	adds	r7, #20
 8013736:	46bd      	mov	sp, r7
 8013738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801373c:	4770      	bx	lr

0801373e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801373e:	b580      	push	{r7, lr}
 8013740:	b084      	sub	sp, #16
 8013742:	af00      	add	r7, sp, #0
 8013744:	6078      	str	r0, [r7, #4]
 8013746:	460b      	mov	r3, r1
 8013748:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801374a:	2300      	movs	r3, #0
 801374c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801374e:	2300      	movs	r3, #0
 8013750:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013758:	78fa      	ldrb	r2, [r7, #3]
 801375a:	4611      	mov	r1, r2
 801375c:	4618      	mov	r0, r3
 801375e:	f7ef fdcd 	bl	80032fc <HAL_PCD_SetAddress>
 8013762:	4603      	mov	r3, r0
 8013764:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013766:	7bfb      	ldrb	r3, [r7, #15]
 8013768:	4618      	mov	r0, r3
 801376a:	f000 f8b1 	bl	80138d0 <USBD_Get_USB_Status>
 801376e:	4603      	mov	r3, r0
 8013770:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013772:	7bbb      	ldrb	r3, [r7, #14]
}
 8013774:	4618      	mov	r0, r3
 8013776:	3710      	adds	r7, #16
 8013778:	46bd      	mov	sp, r7
 801377a:	bd80      	pop	{r7, pc}

0801377c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801377c:	b580      	push	{r7, lr}
 801377e:	b086      	sub	sp, #24
 8013780:	af00      	add	r7, sp, #0
 8013782:	60f8      	str	r0, [r7, #12]
 8013784:	607a      	str	r2, [r7, #4]
 8013786:	603b      	str	r3, [r7, #0]
 8013788:	460b      	mov	r3, r1
 801378a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801378c:	2300      	movs	r3, #0
 801378e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013790:	2300      	movs	r3, #0
 8013792:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801379a:	7af9      	ldrb	r1, [r7, #11]
 801379c:	683b      	ldr	r3, [r7, #0]
 801379e:	687a      	ldr	r2, [r7, #4]
 80137a0:	f7ef fed9 	bl	8003556 <HAL_PCD_EP_Transmit>
 80137a4:	4603      	mov	r3, r0
 80137a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80137a8:	7dfb      	ldrb	r3, [r7, #23]
 80137aa:	4618      	mov	r0, r3
 80137ac:	f000 f890 	bl	80138d0 <USBD_Get_USB_Status>
 80137b0:	4603      	mov	r3, r0
 80137b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80137b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80137b6:	4618      	mov	r0, r3
 80137b8:	3718      	adds	r7, #24
 80137ba:	46bd      	mov	sp, r7
 80137bc:	bd80      	pop	{r7, pc}

080137be <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80137be:	b580      	push	{r7, lr}
 80137c0:	b086      	sub	sp, #24
 80137c2:	af00      	add	r7, sp, #0
 80137c4:	60f8      	str	r0, [r7, #12]
 80137c6:	607a      	str	r2, [r7, #4]
 80137c8:	603b      	str	r3, [r7, #0]
 80137ca:	460b      	mov	r3, r1
 80137cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80137ce:	2300      	movs	r3, #0
 80137d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80137d2:	2300      	movs	r3, #0
 80137d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80137dc:	7af9      	ldrb	r1, [r7, #11]
 80137de:	683b      	ldr	r3, [r7, #0]
 80137e0:	687a      	ldr	r2, [r7, #4]
 80137e2:	f7ef fe62 	bl	80034aa <HAL_PCD_EP_Receive>
 80137e6:	4603      	mov	r3, r0
 80137e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80137ea:	7dfb      	ldrb	r3, [r7, #23]
 80137ec:	4618      	mov	r0, r3
 80137ee:	f000 f86f 	bl	80138d0 <USBD_Get_USB_Status>
 80137f2:	4603      	mov	r3, r0
 80137f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80137f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80137f8:	4618      	mov	r0, r3
 80137fa:	3718      	adds	r7, #24
 80137fc:	46bd      	mov	sp, r7
 80137fe:	bd80      	pop	{r7, pc}

08013800 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013800:	b580      	push	{r7, lr}
 8013802:	b082      	sub	sp, #8
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
 8013808:	460b      	mov	r3, r1
 801380a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013812:	78fa      	ldrb	r2, [r7, #3]
 8013814:	4611      	mov	r1, r2
 8013816:	4618      	mov	r0, r3
 8013818:	f7ef fe85 	bl	8003526 <HAL_PCD_EP_GetRxCount>
 801381c:	4603      	mov	r3, r0
}
 801381e:	4618      	mov	r0, r3
 8013820:	3708      	adds	r7, #8
 8013822:	46bd      	mov	sp, r7
 8013824:	bd80      	pop	{r7, pc}
	...

08013828 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013828:	b580      	push	{r7, lr}
 801382a:	b082      	sub	sp, #8
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
 8013830:	460b      	mov	r3, r1
 8013832:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8013834:	78fb      	ldrb	r3, [r7, #3]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d002      	beq.n	8013840 <HAL_PCDEx_LPM_Callback+0x18>
 801383a:	2b01      	cmp	r3, #1
 801383c:	d013      	beq.n	8013866 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801383e:	e023      	b.n	8013888 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	699b      	ldr	r3, [r3, #24]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d007      	beq.n	8013858 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013848:	f000 f83c 	bl	80138c4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801384c:	4b10      	ldr	r3, [pc, #64]	; (8013890 <HAL_PCDEx_LPM_Callback+0x68>)
 801384e:	691b      	ldr	r3, [r3, #16]
 8013850:	4a0f      	ldr	r2, [pc, #60]	; (8013890 <HAL_PCDEx_LPM_Callback+0x68>)
 8013852:	f023 0306 	bic.w	r3, r3, #6
 8013856:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 801385e:	4618      	mov	r0, r3
 8013860:	f7fb fd30 	bl	800f2c4 <USBD_LL_Resume>
    break;
 8013864:	e010      	b.n	8013888 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 801386c:	4618      	mov	r0, r3
 801386e:	f7fb fd13 	bl	800f298 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	699b      	ldr	r3, [r3, #24]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d005      	beq.n	8013886 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801387a:	4b05      	ldr	r3, [pc, #20]	; (8013890 <HAL_PCDEx_LPM_Callback+0x68>)
 801387c:	691b      	ldr	r3, [r3, #16]
 801387e:	4a04      	ldr	r2, [pc, #16]	; (8013890 <HAL_PCDEx_LPM_Callback+0x68>)
 8013880:	f043 0306 	orr.w	r3, r3, #6
 8013884:	6113      	str	r3, [r2, #16]
    break;
 8013886:	bf00      	nop
}
 8013888:	bf00      	nop
 801388a:	3708      	adds	r7, #8
 801388c:	46bd      	mov	sp, r7
 801388e:	bd80      	pop	{r7, pc}
 8013890:	e000ed00 	.word	0xe000ed00

08013894 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013894:	b480      	push	{r7}
 8013896:	b083      	sub	sp, #12
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801389c:	4b03      	ldr	r3, [pc, #12]	; (80138ac <USBD_static_malloc+0x18>)
}
 801389e:	4618      	mov	r0, r3
 80138a0:	370c      	adds	r7, #12
 80138a2:	46bd      	mov	sp, r7
 80138a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a8:	4770      	bx	lr
 80138aa:	bf00      	nop
 80138ac:	20002084 	.word	0x20002084

080138b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80138b0:	b480      	push	{r7}
 80138b2:	b083      	sub	sp, #12
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	6078      	str	r0, [r7, #4]

}
 80138b8:	bf00      	nop
 80138ba:	370c      	adds	r7, #12
 80138bc:	46bd      	mov	sp, r7
 80138be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c2:	4770      	bx	lr

080138c4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80138c8:	f7ed fcfa 	bl	80012c0 <SystemClock_Config>
}
 80138cc:	bf00      	nop
 80138ce:	bd80      	pop	{r7, pc}

080138d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80138d0:	b480      	push	{r7}
 80138d2:	b085      	sub	sp, #20
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	4603      	mov	r3, r0
 80138d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80138da:	2300      	movs	r3, #0
 80138dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80138de:	79fb      	ldrb	r3, [r7, #7]
 80138e0:	2b03      	cmp	r3, #3
 80138e2:	d817      	bhi.n	8013914 <USBD_Get_USB_Status+0x44>
 80138e4:	a201      	add	r2, pc, #4	; (adr r2, 80138ec <USBD_Get_USB_Status+0x1c>)
 80138e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138ea:	bf00      	nop
 80138ec:	080138fd 	.word	0x080138fd
 80138f0:	08013903 	.word	0x08013903
 80138f4:	08013909 	.word	0x08013909
 80138f8:	0801390f 	.word	0x0801390f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80138fc:	2300      	movs	r3, #0
 80138fe:	73fb      	strb	r3, [r7, #15]
    break;
 8013900:	e00b      	b.n	801391a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013902:	2303      	movs	r3, #3
 8013904:	73fb      	strb	r3, [r7, #15]
    break;
 8013906:	e008      	b.n	801391a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013908:	2301      	movs	r3, #1
 801390a:	73fb      	strb	r3, [r7, #15]
    break;
 801390c:	e005      	b.n	801391a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801390e:	2303      	movs	r3, #3
 8013910:	73fb      	strb	r3, [r7, #15]
    break;
 8013912:	e002      	b.n	801391a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013914:	2303      	movs	r3, #3
 8013916:	73fb      	strb	r3, [r7, #15]
    break;
 8013918:	bf00      	nop
  }
  return usb_status;
 801391a:	7bfb      	ldrb	r3, [r7, #15]
}
 801391c:	4618      	mov	r0, r3
 801391e:	3714      	adds	r7, #20
 8013920:	46bd      	mov	sp, r7
 8013922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013926:	4770      	bx	lr

08013928 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8013928:	b480      	push	{r7}
 801392a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801392c:	4b05      	ldr	r3, [pc, #20]	; (8013944 <UTIL_LPM_Init+0x1c>)
 801392e:	2200      	movs	r2, #0
 8013930:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8013932:	4b05      	ldr	r3, [pc, #20]	; (8013948 <UTIL_LPM_Init+0x20>)
 8013934:	2200      	movs	r2, #0
 8013936:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8013938:	bf00      	nop
 801393a:	46bd      	mov	sp, r7
 801393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013940:	4770      	bx	lr
 8013942:	bf00      	nop
 8013944:	200022a4 	.word	0x200022a4
 8013948:	200022a8 	.word	0x200022a8

0801394c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801394c:	b480      	push	{r7}
 801394e:	b087      	sub	sp, #28
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
 8013954:	460b      	mov	r3, r1
 8013956:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013958:	f3ef 8310 	mrs	r3, PRIMASK
 801395c:	613b      	str	r3, [r7, #16]
  return(result);
 801395e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8013960:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013962:	b672      	cpsid	i
}
 8013964:	bf00      	nop
  
  switch(state)
 8013966:	78fb      	ldrb	r3, [r7, #3]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d008      	beq.n	801397e <UTIL_LPM_SetOffMode+0x32>
 801396c:	2b01      	cmp	r3, #1
 801396e:	d10e      	bne.n	801398e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8013970:	4b0d      	ldr	r3, [pc, #52]	; (80139a8 <UTIL_LPM_SetOffMode+0x5c>)
 8013972:	681a      	ldr	r2, [r3, #0]
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	4313      	orrs	r3, r2
 8013978:	4a0b      	ldr	r2, [pc, #44]	; (80139a8 <UTIL_LPM_SetOffMode+0x5c>)
 801397a:	6013      	str	r3, [r2, #0]
      break;
 801397c:	e008      	b.n	8013990 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	43da      	mvns	r2, r3
 8013982:	4b09      	ldr	r3, [pc, #36]	; (80139a8 <UTIL_LPM_SetOffMode+0x5c>)
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	4013      	ands	r3, r2
 8013988:	4a07      	ldr	r2, [pc, #28]	; (80139a8 <UTIL_LPM_SetOffMode+0x5c>)
 801398a:	6013      	str	r3, [r2, #0]
      break;
 801398c:	e000      	b.n	8013990 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801398e:	bf00      	nop
 8013990:	697b      	ldr	r3, [r7, #20]
 8013992:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	f383 8810 	msr	PRIMASK, r3
}
 801399a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801399c:	bf00      	nop
 801399e:	371c      	adds	r7, #28
 80139a0:	46bd      	mov	sp, r7
 80139a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a6:	4770      	bx	lr
 80139a8:	200022a8 	.word	0x200022a8

080139ac <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b090      	sub	sp, #64	; 0x40
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80139b4:	4b73      	ldr	r3, [pc, #460]	; (8013b84 <UTIL_SEQ_Run+0x1d8>)
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80139ba:	4b72      	ldr	r3, [pc, #456]	; (8013b84 <UTIL_SEQ_Run+0x1d8>)
 80139bc:	681a      	ldr	r2, [r3, #0]
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	4013      	ands	r3, r2
 80139c2:	4a70      	ldr	r2, [pc, #448]	; (8013b84 <UTIL_SEQ_Run+0x1d8>)
 80139c4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80139c6:	4b70      	ldr	r3, [pc, #448]	; (8013b88 <UTIL_SEQ_Run+0x1dc>)
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80139cc:	4b6f      	ldr	r3, [pc, #444]	; (8013b8c <UTIL_SEQ_Run+0x1e0>)
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80139d2:	4b6f      	ldr	r3, [pc, #444]	; (8013b90 <UTIL_SEQ_Run+0x1e4>)
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 80139d8:	4b6e      	ldr	r3, [pc, #440]	; (8013b94 <UTIL_SEQ_Run+0x1e8>)
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80139de:	e08d      	b.n	8013afc <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80139e0:	2300      	movs	r3, #0
 80139e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80139e4:	e002      	b.n	80139ec <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80139e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139e8:	3301      	adds	r3, #1
 80139ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80139ec:	4a6a      	ldr	r2, [pc, #424]	; (8013b98 <UTIL_SEQ_Run+0x1ec>)
 80139ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139f0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80139f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139f6:	401a      	ands	r2, r3
 80139f8:	4b62      	ldr	r3, [pc, #392]	; (8013b84 <UTIL_SEQ_Run+0x1d8>)
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	4013      	ands	r3, r2
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d0f1      	beq.n	80139e6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8013a02:	4a65      	ldr	r2, [pc, #404]	; (8013b98 <UTIL_SEQ_Run+0x1ec>)
 8013a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a06:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a0c:	401a      	ands	r2, r3
 8013a0e:	4b5d      	ldr	r3, [pc, #372]	; (8013b84 <UTIL_SEQ_Run+0x1d8>)
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	4013      	ands	r3, r2
 8013a14:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8013a16:	4a60      	ldr	r2, [pc, #384]	; (8013b98 <UTIL_SEQ_Run+0x1ec>)
 8013a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a1a:	00db      	lsls	r3, r3, #3
 8013a1c:	4413      	add	r3, r2
 8013a1e:	685a      	ldr	r2, [r3, #4]
 8013a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a22:	4013      	ands	r3, r2
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d106      	bne.n	8013a36 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8013a28:	4a5b      	ldr	r2, [pc, #364]	; (8013b98 <UTIL_SEQ_Run+0x1ec>)
 8013a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a2c:	00db      	lsls	r3, r3, #3
 8013a2e:	4413      	add	r3, r2
 8013a30:	f04f 32ff 	mov.w	r2, #4294967295
 8013a34:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8013a36:	4a58      	ldr	r2, [pc, #352]	; (8013b98 <UTIL_SEQ_Run+0x1ec>)
 8013a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a3a:	00db      	lsls	r3, r3, #3
 8013a3c:	4413      	add	r3, r2
 8013a3e:	685a      	ldr	r2, [r3, #4]
 8013a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a42:	4013      	ands	r3, r2
 8013a44:	4618      	mov	r0, r3
 8013a46:	f000 f9b3 	bl	8013db0 <SEQ_BitPosition>
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	461a      	mov	r2, r3
 8013a4e:	4b53      	ldr	r3, [pc, #332]	; (8013b9c <UTIL_SEQ_Run+0x1f0>)
 8013a50:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8013a52:	4a51      	ldr	r2, [pc, #324]	; (8013b98 <UTIL_SEQ_Run+0x1ec>)
 8013a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a56:	00db      	lsls	r3, r3, #3
 8013a58:	4413      	add	r3, r2
 8013a5a:	685a      	ldr	r2, [r3, #4]
 8013a5c:	4b4f      	ldr	r3, [pc, #316]	; (8013b9c <UTIL_SEQ_Run+0x1f0>)
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	2101      	movs	r1, #1
 8013a62:	fa01 f303 	lsl.w	r3, r1, r3
 8013a66:	43db      	mvns	r3, r3
 8013a68:	401a      	ands	r2, r3
 8013a6a:	494b      	ldr	r1, [pc, #300]	; (8013b98 <UTIL_SEQ_Run+0x1ec>)
 8013a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a6e:	00db      	lsls	r3, r3, #3
 8013a70:	440b      	add	r3, r1
 8013a72:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013a74:	f3ef 8310 	mrs	r3, PRIMASK
 8013a78:	61bb      	str	r3, [r7, #24]
  return(result);
 8013a7a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013a7c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8013a7e:	b672      	cpsid	i
}
 8013a80:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8013a82:	4b46      	ldr	r3, [pc, #280]	; (8013b9c <UTIL_SEQ_Run+0x1f0>)
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	2201      	movs	r2, #1
 8013a88:	fa02 f303 	lsl.w	r3, r2, r3
 8013a8c:	43da      	mvns	r2, r3
 8013a8e:	4b3e      	ldr	r3, [pc, #248]	; (8013b88 <UTIL_SEQ_Run+0x1dc>)
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	4013      	ands	r3, r2
 8013a94:	4a3c      	ldr	r2, [pc, #240]	; (8013b88 <UTIL_SEQ_Run+0x1dc>)
 8013a96:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8013a98:	2302      	movs	r3, #2
 8013a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013a9c:	e013      	b.n	8013ac6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8013a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013aa0:	3b01      	subs	r3, #1
 8013aa2:	4a3d      	ldr	r2, [pc, #244]	; (8013b98 <UTIL_SEQ_Run+0x1ec>)
 8013aa4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8013aa8:	4b3c      	ldr	r3, [pc, #240]	; (8013b9c <UTIL_SEQ_Run+0x1f0>)
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	2201      	movs	r2, #1
 8013aae:	fa02 f303 	lsl.w	r3, r2, r3
 8013ab2:	43da      	mvns	r2, r3
 8013ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ab6:	3b01      	subs	r3, #1
 8013ab8:	400a      	ands	r2, r1
 8013aba:	4937      	ldr	r1, [pc, #220]	; (8013b98 <UTIL_SEQ_Run+0x1ec>)
 8013abc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8013ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ac2:	3b01      	subs	r3, #1
 8013ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d1e8      	bne.n	8013a9e <UTIL_SEQ_Run+0xf2>
 8013acc:	6a3b      	ldr	r3, [r7, #32]
 8013ace:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ad0:	697b      	ldr	r3, [r7, #20]
 8013ad2:	f383 8810 	msr	PRIMASK, r3
}
 8013ad6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8013ad8:	4b30      	ldr	r3, [pc, #192]	; (8013b9c <UTIL_SEQ_Run+0x1f0>)
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	4a30      	ldr	r2, [pc, #192]	; (8013ba0 <UTIL_SEQ_Run+0x1f4>)
 8013ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ae2:	4798      	blx	r3

    local_taskset = TaskSet;
 8013ae4:	4b28      	ldr	r3, [pc, #160]	; (8013b88 <UTIL_SEQ_Run+0x1dc>)
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8013aea:	4b28      	ldr	r3, [pc, #160]	; (8013b8c <UTIL_SEQ_Run+0x1e0>)
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8013af0:	4b27      	ldr	r3, [pc, #156]	; (8013b90 <UTIL_SEQ_Run+0x1e4>)
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8013af6:	4b27      	ldr	r3, [pc, #156]	; (8013b94 <UTIL_SEQ_Run+0x1e8>)
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8013afc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b00:	401a      	ands	r2, r3
 8013b02:	4b20      	ldr	r3, [pc, #128]	; (8013b84 <UTIL_SEQ_Run+0x1d8>)
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	4013      	ands	r3, r2
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d005      	beq.n	8013b18 <UTIL_SEQ_Run+0x16c>
 8013b0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b10:	4013      	ands	r3, r2
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	f43f af64 	beq.w	80139e0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8013b18:	4b20      	ldr	r3, [pc, #128]	; (8013b9c <UTIL_SEQ_Run+0x1f0>)
 8013b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8013b1e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8013b20:	f000 f938 	bl	8013d94 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013b24:	f3ef 8310 	mrs	r3, PRIMASK
 8013b28:	613b      	str	r3, [r7, #16]
  return(result);
 8013b2a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8013b2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8013b2e:	b672      	cpsid	i
}
 8013b30:	bf00      	nop
  local_taskset = TaskSet;
 8013b32:	4b15      	ldr	r3, [pc, #84]	; (8013b88 <UTIL_SEQ_Run+0x1dc>)
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8013b38:	4b14      	ldr	r3, [pc, #80]	; (8013b8c <UTIL_SEQ_Run+0x1e0>)
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8013b3e:	4b14      	ldr	r3, [pc, #80]	; (8013b90 <UTIL_SEQ_Run+0x1e4>)
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8013b44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b48:	401a      	ands	r2, r3
 8013b4a:	4b0e      	ldr	r3, [pc, #56]	; (8013b84 <UTIL_SEQ_Run+0x1d8>)
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	4013      	ands	r3, r2
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d107      	bne.n	8013b64 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8013b54:	4b0f      	ldr	r3, [pc, #60]	; (8013b94 <UTIL_SEQ_Run+0x1e8>)
 8013b56:	681a      	ldr	r2, [r3, #0]
 8013b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b5a:	4013      	ands	r3, r2
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d101      	bne.n	8013b64 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8013b60:	f7ed f80c 	bl	8000b7c <UTIL_SEQ_Idle>
 8013b64:	69fb      	ldr	r3, [r7, #28]
 8013b66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	f383 8810 	msr	PRIMASK, r3
}
 8013b6e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8013b70:	f000 f917 	bl	8013da2 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8013b74:	4a03      	ldr	r2, [pc, #12]	; (8013b84 <UTIL_SEQ_Run+0x1d8>)
 8013b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b78:	6013      	str	r3, [r2, #0]

  return;
 8013b7a:	bf00      	nop
}
 8013b7c:	3740      	adds	r7, #64	; 0x40
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	bd80      	pop	{r7, pc}
 8013b82:	bf00      	nop
 8013b84:	20000458 	.word	0x20000458
 8013b88:	200022ac 	.word	0x200022ac
 8013b8c:	200022b0 	.word	0x200022b0
 8013b90:	20000454 	.word	0x20000454
 8013b94:	200022b4 	.word	0x200022b4
 8013b98:	2000233c 	.word	0x2000233c
 8013b9c:	200022b8 	.word	0x200022b8
 8013ba0:	200022bc 	.word	0x200022bc

08013ba4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b088      	sub	sp, #32
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	60f8      	str	r0, [r7, #12]
 8013bac:	60b9      	str	r1, [r7, #8]
 8013bae:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8013bb4:	617b      	str	r3, [r7, #20]
  return(result);
 8013bb6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8013bb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8013bba:	b672      	cpsid	i
}
 8013bbc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8013bbe:	68f8      	ldr	r0, [r7, #12]
 8013bc0:	f000 f8f6 	bl	8013db0 <SEQ_BitPosition>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	4619      	mov	r1, r3
 8013bc8:	4a06      	ldr	r2, [pc, #24]	; (8013be4 <UTIL_SEQ_RegTask+0x40>)
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8013bd0:	69fb      	ldr	r3, [r7, #28]
 8013bd2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013bd4:	69bb      	ldr	r3, [r7, #24]
 8013bd6:	f383 8810 	msr	PRIMASK, r3
}
 8013bda:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8013bdc:	bf00      	nop
}
 8013bde:	3720      	adds	r7, #32
 8013be0:	46bd      	mov	sp, r7
 8013be2:	bd80      	pop	{r7, pc}
 8013be4:	200022bc 	.word	0x200022bc

08013be8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8013be8:	b480      	push	{r7}
 8013bea:	b087      	sub	sp, #28
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
 8013bf0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8013bf6:	60fb      	str	r3, [r7, #12]
  return(result);
 8013bf8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013bfa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013bfc:	b672      	cpsid	i
}
 8013bfe:	bf00      	nop

  TaskSet |= TaskId_bm;
 8013c00:	4b0d      	ldr	r3, [pc, #52]	; (8013c38 <UTIL_SEQ_SetTask+0x50>)
 8013c02:	681a      	ldr	r2, [r3, #0]
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	4313      	orrs	r3, r2
 8013c08:	4a0b      	ldr	r2, [pc, #44]	; (8013c38 <UTIL_SEQ_SetTask+0x50>)
 8013c0a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8013c0c:	4a0b      	ldr	r2, [pc, #44]	; (8013c3c <UTIL_SEQ_SetTask+0x54>)
 8013c0e:	683b      	ldr	r3, [r7, #0]
 8013c10:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	431a      	orrs	r2, r3
 8013c18:	4908      	ldr	r1, [pc, #32]	; (8013c3c <UTIL_SEQ_SetTask+0x54>)
 8013c1a:	683b      	ldr	r3, [r7, #0]
 8013c1c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8013c20:	697b      	ldr	r3, [r7, #20]
 8013c22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c24:	693b      	ldr	r3, [r7, #16]
 8013c26:	f383 8810 	msr	PRIMASK, r3
}
 8013c2a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013c2c:	bf00      	nop
}
 8013c2e:	371c      	adds	r7, #28
 8013c30:	46bd      	mov	sp, r7
 8013c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c36:	4770      	bx	lr
 8013c38:	200022ac 	.word	0x200022ac
 8013c3c:	2000233c 	.word	0x2000233c

08013c40 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8013c40:	b480      	push	{r7}
 8013c42:	b087      	sub	sp, #28
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013c48:	f3ef 8310 	mrs	r3, PRIMASK
 8013c4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8013c4e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013c50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013c52:	b672      	cpsid	i
}
 8013c54:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	43da      	mvns	r2, r3
 8013c5a:	4b08      	ldr	r3, [pc, #32]	; (8013c7c <UTIL_SEQ_PauseTask+0x3c>)
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	4013      	ands	r3, r2
 8013c60:	4a06      	ldr	r2, [pc, #24]	; (8013c7c <UTIL_SEQ_PauseTask+0x3c>)
 8013c62:	6013      	str	r3, [r2, #0]
 8013c64:	697b      	ldr	r3, [r7, #20]
 8013c66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c68:	693b      	ldr	r3, [r7, #16]
 8013c6a:	f383 8810 	msr	PRIMASK, r3
}
 8013c6e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013c70:	bf00      	nop
}
 8013c72:	371c      	adds	r7, #28
 8013c74:	46bd      	mov	sp, r7
 8013c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7a:	4770      	bx	lr
 8013c7c:	20000454 	.word	0x20000454

08013c80 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8013c80:	b480      	push	{r7}
 8013c82:	b087      	sub	sp, #28
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013c88:	f3ef 8310 	mrs	r3, PRIMASK
 8013c8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8013c8e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013c90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013c92:	b672      	cpsid	i
}
 8013c94:	bf00      	nop

  TaskMask |= TaskId_bm;
 8013c96:	4b09      	ldr	r3, [pc, #36]	; (8013cbc <UTIL_SEQ_ResumeTask+0x3c>)
 8013c98:	681a      	ldr	r2, [r3, #0]
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	4313      	orrs	r3, r2
 8013c9e:	4a07      	ldr	r2, [pc, #28]	; (8013cbc <UTIL_SEQ_ResumeTask+0x3c>)
 8013ca0:	6013      	str	r3, [r2, #0]
 8013ca2:	697b      	ldr	r3, [r7, #20]
 8013ca4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ca6:	693b      	ldr	r3, [r7, #16]
 8013ca8:	f383 8810 	msr	PRIMASK, r3
}
 8013cac:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013cae:	bf00      	nop
}
 8013cb0:	371c      	adds	r7, #28
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb8:	4770      	bx	lr
 8013cba:	bf00      	nop
 8013cbc:	20000454 	.word	0x20000454

08013cc0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8013cc0:	b480      	push	{r7}
 8013cc2:	b087      	sub	sp, #28
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8013ccc:	60fb      	str	r3, [r7, #12]
  return(result);
 8013cce:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013cd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013cd2:	b672      	cpsid	i
}
 8013cd4:	bf00      	nop

  EvtSet |= EvtId_bm;
 8013cd6:	4b09      	ldr	r3, [pc, #36]	; (8013cfc <UTIL_SEQ_SetEvt+0x3c>)
 8013cd8:	681a      	ldr	r2, [r3, #0]
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	4313      	orrs	r3, r2
 8013cde:	4a07      	ldr	r2, [pc, #28]	; (8013cfc <UTIL_SEQ_SetEvt+0x3c>)
 8013ce0:	6013      	str	r3, [r2, #0]
 8013ce2:	697b      	ldr	r3, [r7, #20]
 8013ce4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ce6:	693b      	ldr	r3, [r7, #16]
 8013ce8:	f383 8810 	msr	PRIMASK, r3
}
 8013cec:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013cee:	bf00      	nop
}
 8013cf0:	371c      	adds	r7, #28
 8013cf2:	46bd      	mov	sp, r7
 8013cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf8:	4770      	bx	lr
 8013cfa:	bf00      	nop
 8013cfc:	200022b0 	.word	0x200022b0

08013d00 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b088      	sub	sp, #32
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8013d08:	4b1f      	ldr	r3, [pc, #124]	; (8013d88 <UTIL_SEQ_WaitEvt+0x88>)
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8013d0e:	4b1e      	ldr	r3, [pc, #120]	; (8013d88 <UTIL_SEQ_WaitEvt+0x88>)
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d16:	d102      	bne.n	8013d1e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8013d18:	2300      	movs	r3, #0
 8013d1a:	61fb      	str	r3, [r7, #28]
 8013d1c:	e005      	b.n	8013d2a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8013d1e:	4b1a      	ldr	r3, [pc, #104]	; (8013d88 <UTIL_SEQ_WaitEvt+0x88>)
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	2201      	movs	r2, #1
 8013d24:	fa02 f303 	lsl.w	r3, r2, r3
 8013d28:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8013d2a:	4b18      	ldr	r3, [pc, #96]	; (8013d8c <UTIL_SEQ_WaitEvt+0x8c>)
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8013d30:	4a16      	ldr	r2, [pc, #88]	; (8013d8c <UTIL_SEQ_WaitEvt+0x8c>)
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8013d36:	e003      	b.n	8013d40 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8013d38:	6879      	ldr	r1, [r7, #4]
 8013d3a:	69f8      	ldr	r0, [r7, #28]
 8013d3c:	f7ec ff25 	bl	8000b8a <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8013d40:	4b13      	ldr	r3, [pc, #76]	; (8013d90 <UTIL_SEQ_WaitEvt+0x90>)
 8013d42:	681a      	ldr	r2, [r3, #0]
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	4013      	ands	r3, r2
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d0f5      	beq.n	8013d38 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8013d4c:	4a0e      	ldr	r2, [pc, #56]	; (8013d88 <UTIL_SEQ_WaitEvt+0x88>)
 8013d4e:	69bb      	ldr	r3, [r7, #24]
 8013d50:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013d52:	f3ef 8310 	mrs	r3, PRIMASK
 8013d56:	60bb      	str	r3, [r7, #8]
  return(result);
 8013d58:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013d5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8013d5c:	b672      	cpsid	i
}
 8013d5e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	43da      	mvns	r2, r3
 8013d64:	4b0a      	ldr	r3, [pc, #40]	; (8013d90 <UTIL_SEQ_WaitEvt+0x90>)
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	4013      	ands	r3, r2
 8013d6a:	4a09      	ldr	r2, [pc, #36]	; (8013d90 <UTIL_SEQ_WaitEvt+0x90>)
 8013d6c:	6013      	str	r3, [r2, #0]
 8013d6e:	693b      	ldr	r3, [r7, #16]
 8013d70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	f383 8810 	msr	PRIMASK, r3
}
 8013d78:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8013d7a:	4a04      	ldr	r2, [pc, #16]	; (8013d8c <UTIL_SEQ_WaitEvt+0x8c>)
 8013d7c:	697b      	ldr	r3, [r7, #20]
 8013d7e:	6013      	str	r3, [r2, #0]
  return;
 8013d80:	bf00      	nop
}
 8013d82:	3720      	adds	r7, #32
 8013d84:	46bd      	mov	sp, r7
 8013d86:	bd80      	pop	{r7, pc}
 8013d88:	200022b8 	.word	0x200022b8
 8013d8c:	200022b4 	.word	0x200022b4
 8013d90:	200022b0 	.word	0x200022b0

08013d94 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8013d94:	b480      	push	{r7}
 8013d96:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8013d98:	bf00      	nop
}
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da0:	4770      	bx	lr

08013da2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8013da2:	b480      	push	{r7}
 8013da4:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8013da6:	bf00      	nop
}
 8013da8:	46bd      	mov	sp, r7
 8013daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dae:	4770      	bx	lr

08013db0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8013db0:	b480      	push	{r7}
 8013db2:	b085      	sub	sp, #20
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8013db8:	2300      	movs	r3, #0
 8013dba:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8013dc0:	68bb      	ldr	r3, [r7, #8]
 8013dc2:	0c1b      	lsrs	r3, r3, #16
 8013dc4:	041b      	lsls	r3, r3, #16
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d104      	bne.n	8013dd4 <SEQ_BitPosition+0x24>
 8013dca:	2310      	movs	r3, #16
 8013dcc:	73fb      	strb	r3, [r7, #15]
 8013dce:	68bb      	ldr	r3, [r7, #8]
 8013dd0:	041b      	lsls	r3, r3, #16
 8013dd2:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8013dd4:	68bb      	ldr	r3, [r7, #8]
 8013dd6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d105      	bne.n	8013dea <SEQ_BitPosition+0x3a>
 8013dde:	7bfb      	ldrb	r3, [r7, #15]
 8013de0:	3308      	adds	r3, #8
 8013de2:	73fb      	strb	r3, [r7, #15]
 8013de4:	68bb      	ldr	r3, [r7, #8]
 8013de6:	021b      	lsls	r3, r3, #8
 8013de8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8013dea:	68bb      	ldr	r3, [r7, #8]
 8013dec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d105      	bne.n	8013e00 <SEQ_BitPosition+0x50>
 8013df4:	7bfb      	ldrb	r3, [r7, #15]
 8013df6:	3304      	adds	r3, #4
 8013df8:	73fb      	strb	r3, [r7, #15]
 8013dfa:	68bb      	ldr	r3, [r7, #8]
 8013dfc:	011b      	lsls	r3, r3, #4
 8013dfe:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8013e00:	68bb      	ldr	r3, [r7, #8]
 8013e02:	0f1b      	lsrs	r3, r3, #28
 8013e04:	4a07      	ldr	r2, [pc, #28]	; (8013e24 <SEQ_BitPosition+0x74>)
 8013e06:	5cd2      	ldrb	r2, [r2, r3]
 8013e08:	7bfb      	ldrb	r3, [r7, #15]
 8013e0a:	4413      	add	r3, r2
 8013e0c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8013e0e:	7bfb      	ldrb	r3, [r7, #15]
 8013e10:	f1c3 031f 	rsb	r3, r3, #31
 8013e14:	b2db      	uxtb	r3, r3
}
 8013e16:	4618      	mov	r0, r3
 8013e18:	3714      	adds	r7, #20
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e20:	4770      	bx	lr
 8013e22:	bf00      	nop
 8013e24:	08014f78 	.word	0x08014f78

08013e28 <__errno>:
 8013e28:	4b01      	ldr	r3, [pc, #4]	; (8013e30 <__errno+0x8>)
 8013e2a:	6818      	ldr	r0, [r3, #0]
 8013e2c:	4770      	bx	lr
 8013e2e:	bf00      	nop
 8013e30:	2000045c 	.word	0x2000045c

08013e34 <__libc_init_array>:
 8013e34:	b570      	push	{r4, r5, r6, lr}
 8013e36:	4d0d      	ldr	r5, [pc, #52]	; (8013e6c <__libc_init_array+0x38>)
 8013e38:	4c0d      	ldr	r4, [pc, #52]	; (8013e70 <__libc_init_array+0x3c>)
 8013e3a:	1b64      	subs	r4, r4, r5
 8013e3c:	10a4      	asrs	r4, r4, #2
 8013e3e:	2600      	movs	r6, #0
 8013e40:	42a6      	cmp	r6, r4
 8013e42:	d109      	bne.n	8013e58 <__libc_init_array+0x24>
 8013e44:	4d0b      	ldr	r5, [pc, #44]	; (8013e74 <__libc_init_array+0x40>)
 8013e46:	4c0c      	ldr	r4, [pc, #48]	; (8013e78 <__libc_init_array+0x44>)
 8013e48:	f000 fc94 	bl	8014774 <_init>
 8013e4c:	1b64      	subs	r4, r4, r5
 8013e4e:	10a4      	asrs	r4, r4, #2
 8013e50:	2600      	movs	r6, #0
 8013e52:	42a6      	cmp	r6, r4
 8013e54:	d105      	bne.n	8013e62 <__libc_init_array+0x2e>
 8013e56:	bd70      	pop	{r4, r5, r6, pc}
 8013e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8013e5c:	4798      	blx	r3
 8013e5e:	3601      	adds	r6, #1
 8013e60:	e7ee      	b.n	8013e40 <__libc_init_array+0xc>
 8013e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8013e66:	4798      	blx	r3
 8013e68:	3601      	adds	r6, #1
 8013e6a:	e7f2      	b.n	8013e52 <__libc_init_array+0x1e>
 8013e6c:	08015024 	.word	0x08015024
 8013e70:	08015024 	.word	0x08015024
 8013e74:	08015024 	.word	0x08015024
 8013e78:	08015028 	.word	0x08015028

08013e7c <__retarget_lock_acquire_recursive>:
 8013e7c:	4770      	bx	lr

08013e7e <__retarget_lock_release_recursive>:
 8013e7e:	4770      	bx	lr

08013e80 <memcpy>:
 8013e80:	440a      	add	r2, r1
 8013e82:	4291      	cmp	r1, r2
 8013e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8013e88:	d100      	bne.n	8013e8c <memcpy+0xc>
 8013e8a:	4770      	bx	lr
 8013e8c:	b510      	push	{r4, lr}
 8013e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013e96:	4291      	cmp	r1, r2
 8013e98:	d1f9      	bne.n	8013e8e <memcpy+0xe>
 8013e9a:	bd10      	pop	{r4, pc}

08013e9c <memset>:
 8013e9c:	4402      	add	r2, r0
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	4293      	cmp	r3, r2
 8013ea2:	d100      	bne.n	8013ea6 <memset+0xa>
 8013ea4:	4770      	bx	lr
 8013ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8013eaa:	e7f9      	b.n	8013ea0 <memset+0x4>

08013eac <_free_r>:
 8013eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013eae:	2900      	cmp	r1, #0
 8013eb0:	d044      	beq.n	8013f3c <_free_r+0x90>
 8013eb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013eb6:	9001      	str	r0, [sp, #4]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	f1a1 0404 	sub.w	r4, r1, #4
 8013ebe:	bfb8      	it	lt
 8013ec0:	18e4      	addlt	r4, r4, r3
 8013ec2:	f000 fab9 	bl	8014438 <__malloc_lock>
 8013ec6:	4a1e      	ldr	r2, [pc, #120]	; (8013f40 <_free_r+0x94>)
 8013ec8:	9801      	ldr	r0, [sp, #4]
 8013eca:	6813      	ldr	r3, [r2, #0]
 8013ecc:	b933      	cbnz	r3, 8013edc <_free_r+0x30>
 8013ece:	6063      	str	r3, [r4, #4]
 8013ed0:	6014      	str	r4, [r2, #0]
 8013ed2:	b003      	add	sp, #12
 8013ed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013ed8:	f000 bab4 	b.w	8014444 <__malloc_unlock>
 8013edc:	42a3      	cmp	r3, r4
 8013ede:	d908      	bls.n	8013ef2 <_free_r+0x46>
 8013ee0:	6825      	ldr	r5, [r4, #0]
 8013ee2:	1961      	adds	r1, r4, r5
 8013ee4:	428b      	cmp	r3, r1
 8013ee6:	bf01      	itttt	eq
 8013ee8:	6819      	ldreq	r1, [r3, #0]
 8013eea:	685b      	ldreq	r3, [r3, #4]
 8013eec:	1949      	addeq	r1, r1, r5
 8013eee:	6021      	streq	r1, [r4, #0]
 8013ef0:	e7ed      	b.n	8013ece <_free_r+0x22>
 8013ef2:	461a      	mov	r2, r3
 8013ef4:	685b      	ldr	r3, [r3, #4]
 8013ef6:	b10b      	cbz	r3, 8013efc <_free_r+0x50>
 8013ef8:	42a3      	cmp	r3, r4
 8013efa:	d9fa      	bls.n	8013ef2 <_free_r+0x46>
 8013efc:	6811      	ldr	r1, [r2, #0]
 8013efe:	1855      	adds	r5, r2, r1
 8013f00:	42a5      	cmp	r5, r4
 8013f02:	d10b      	bne.n	8013f1c <_free_r+0x70>
 8013f04:	6824      	ldr	r4, [r4, #0]
 8013f06:	4421      	add	r1, r4
 8013f08:	1854      	adds	r4, r2, r1
 8013f0a:	42a3      	cmp	r3, r4
 8013f0c:	6011      	str	r1, [r2, #0]
 8013f0e:	d1e0      	bne.n	8013ed2 <_free_r+0x26>
 8013f10:	681c      	ldr	r4, [r3, #0]
 8013f12:	685b      	ldr	r3, [r3, #4]
 8013f14:	6053      	str	r3, [r2, #4]
 8013f16:	4421      	add	r1, r4
 8013f18:	6011      	str	r1, [r2, #0]
 8013f1a:	e7da      	b.n	8013ed2 <_free_r+0x26>
 8013f1c:	d902      	bls.n	8013f24 <_free_r+0x78>
 8013f1e:	230c      	movs	r3, #12
 8013f20:	6003      	str	r3, [r0, #0]
 8013f22:	e7d6      	b.n	8013ed2 <_free_r+0x26>
 8013f24:	6825      	ldr	r5, [r4, #0]
 8013f26:	1961      	adds	r1, r4, r5
 8013f28:	428b      	cmp	r3, r1
 8013f2a:	bf04      	itt	eq
 8013f2c:	6819      	ldreq	r1, [r3, #0]
 8013f2e:	685b      	ldreq	r3, [r3, #4]
 8013f30:	6063      	str	r3, [r4, #4]
 8013f32:	bf04      	itt	eq
 8013f34:	1949      	addeq	r1, r1, r5
 8013f36:	6021      	streq	r1, [r4, #0]
 8013f38:	6054      	str	r4, [r2, #4]
 8013f3a:	e7ca      	b.n	8013ed2 <_free_r+0x26>
 8013f3c:	b003      	add	sp, #12
 8013f3e:	bd30      	pop	{r4, r5, pc}
 8013f40:	20002350 	.word	0x20002350

08013f44 <sbrk_aligned>:
 8013f44:	b570      	push	{r4, r5, r6, lr}
 8013f46:	4e0e      	ldr	r6, [pc, #56]	; (8013f80 <sbrk_aligned+0x3c>)
 8013f48:	460c      	mov	r4, r1
 8013f4a:	6831      	ldr	r1, [r6, #0]
 8013f4c:	4605      	mov	r5, r0
 8013f4e:	b911      	cbnz	r1, 8013f56 <sbrk_aligned+0x12>
 8013f50:	f000 fa20 	bl	8014394 <_sbrk_r>
 8013f54:	6030      	str	r0, [r6, #0]
 8013f56:	4621      	mov	r1, r4
 8013f58:	4628      	mov	r0, r5
 8013f5a:	f000 fa1b 	bl	8014394 <_sbrk_r>
 8013f5e:	1c43      	adds	r3, r0, #1
 8013f60:	d00a      	beq.n	8013f78 <sbrk_aligned+0x34>
 8013f62:	1cc4      	adds	r4, r0, #3
 8013f64:	f024 0403 	bic.w	r4, r4, #3
 8013f68:	42a0      	cmp	r0, r4
 8013f6a:	d007      	beq.n	8013f7c <sbrk_aligned+0x38>
 8013f6c:	1a21      	subs	r1, r4, r0
 8013f6e:	4628      	mov	r0, r5
 8013f70:	f000 fa10 	bl	8014394 <_sbrk_r>
 8013f74:	3001      	adds	r0, #1
 8013f76:	d101      	bne.n	8013f7c <sbrk_aligned+0x38>
 8013f78:	f04f 34ff 	mov.w	r4, #4294967295
 8013f7c:	4620      	mov	r0, r4
 8013f7e:	bd70      	pop	{r4, r5, r6, pc}
 8013f80:	20002354 	.word	0x20002354

08013f84 <_malloc_r>:
 8013f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f88:	1ccd      	adds	r5, r1, #3
 8013f8a:	f025 0503 	bic.w	r5, r5, #3
 8013f8e:	3508      	adds	r5, #8
 8013f90:	2d0c      	cmp	r5, #12
 8013f92:	bf38      	it	cc
 8013f94:	250c      	movcc	r5, #12
 8013f96:	2d00      	cmp	r5, #0
 8013f98:	4607      	mov	r7, r0
 8013f9a:	db01      	blt.n	8013fa0 <_malloc_r+0x1c>
 8013f9c:	42a9      	cmp	r1, r5
 8013f9e:	d905      	bls.n	8013fac <_malloc_r+0x28>
 8013fa0:	230c      	movs	r3, #12
 8013fa2:	603b      	str	r3, [r7, #0]
 8013fa4:	2600      	movs	r6, #0
 8013fa6:	4630      	mov	r0, r6
 8013fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fac:	4e2e      	ldr	r6, [pc, #184]	; (8014068 <_malloc_r+0xe4>)
 8013fae:	f000 fa43 	bl	8014438 <__malloc_lock>
 8013fb2:	6833      	ldr	r3, [r6, #0]
 8013fb4:	461c      	mov	r4, r3
 8013fb6:	bb34      	cbnz	r4, 8014006 <_malloc_r+0x82>
 8013fb8:	4629      	mov	r1, r5
 8013fba:	4638      	mov	r0, r7
 8013fbc:	f7ff ffc2 	bl	8013f44 <sbrk_aligned>
 8013fc0:	1c43      	adds	r3, r0, #1
 8013fc2:	4604      	mov	r4, r0
 8013fc4:	d14d      	bne.n	8014062 <_malloc_r+0xde>
 8013fc6:	6834      	ldr	r4, [r6, #0]
 8013fc8:	4626      	mov	r6, r4
 8013fca:	2e00      	cmp	r6, #0
 8013fcc:	d140      	bne.n	8014050 <_malloc_r+0xcc>
 8013fce:	6823      	ldr	r3, [r4, #0]
 8013fd0:	4631      	mov	r1, r6
 8013fd2:	4638      	mov	r0, r7
 8013fd4:	eb04 0803 	add.w	r8, r4, r3
 8013fd8:	f000 f9dc 	bl	8014394 <_sbrk_r>
 8013fdc:	4580      	cmp	r8, r0
 8013fde:	d13a      	bne.n	8014056 <_malloc_r+0xd2>
 8013fe0:	6821      	ldr	r1, [r4, #0]
 8013fe2:	3503      	adds	r5, #3
 8013fe4:	1a6d      	subs	r5, r5, r1
 8013fe6:	f025 0503 	bic.w	r5, r5, #3
 8013fea:	3508      	adds	r5, #8
 8013fec:	2d0c      	cmp	r5, #12
 8013fee:	bf38      	it	cc
 8013ff0:	250c      	movcc	r5, #12
 8013ff2:	4629      	mov	r1, r5
 8013ff4:	4638      	mov	r0, r7
 8013ff6:	f7ff ffa5 	bl	8013f44 <sbrk_aligned>
 8013ffa:	3001      	adds	r0, #1
 8013ffc:	d02b      	beq.n	8014056 <_malloc_r+0xd2>
 8013ffe:	6823      	ldr	r3, [r4, #0]
 8014000:	442b      	add	r3, r5
 8014002:	6023      	str	r3, [r4, #0]
 8014004:	e00e      	b.n	8014024 <_malloc_r+0xa0>
 8014006:	6822      	ldr	r2, [r4, #0]
 8014008:	1b52      	subs	r2, r2, r5
 801400a:	d41e      	bmi.n	801404a <_malloc_r+0xc6>
 801400c:	2a0b      	cmp	r2, #11
 801400e:	d916      	bls.n	801403e <_malloc_r+0xba>
 8014010:	1961      	adds	r1, r4, r5
 8014012:	42a3      	cmp	r3, r4
 8014014:	6025      	str	r5, [r4, #0]
 8014016:	bf18      	it	ne
 8014018:	6059      	strne	r1, [r3, #4]
 801401a:	6863      	ldr	r3, [r4, #4]
 801401c:	bf08      	it	eq
 801401e:	6031      	streq	r1, [r6, #0]
 8014020:	5162      	str	r2, [r4, r5]
 8014022:	604b      	str	r3, [r1, #4]
 8014024:	4638      	mov	r0, r7
 8014026:	f104 060b 	add.w	r6, r4, #11
 801402a:	f000 fa0b 	bl	8014444 <__malloc_unlock>
 801402e:	f026 0607 	bic.w	r6, r6, #7
 8014032:	1d23      	adds	r3, r4, #4
 8014034:	1af2      	subs	r2, r6, r3
 8014036:	d0b6      	beq.n	8013fa6 <_malloc_r+0x22>
 8014038:	1b9b      	subs	r3, r3, r6
 801403a:	50a3      	str	r3, [r4, r2]
 801403c:	e7b3      	b.n	8013fa6 <_malloc_r+0x22>
 801403e:	6862      	ldr	r2, [r4, #4]
 8014040:	42a3      	cmp	r3, r4
 8014042:	bf0c      	ite	eq
 8014044:	6032      	streq	r2, [r6, #0]
 8014046:	605a      	strne	r2, [r3, #4]
 8014048:	e7ec      	b.n	8014024 <_malloc_r+0xa0>
 801404a:	4623      	mov	r3, r4
 801404c:	6864      	ldr	r4, [r4, #4]
 801404e:	e7b2      	b.n	8013fb6 <_malloc_r+0x32>
 8014050:	4634      	mov	r4, r6
 8014052:	6876      	ldr	r6, [r6, #4]
 8014054:	e7b9      	b.n	8013fca <_malloc_r+0x46>
 8014056:	230c      	movs	r3, #12
 8014058:	603b      	str	r3, [r7, #0]
 801405a:	4638      	mov	r0, r7
 801405c:	f000 f9f2 	bl	8014444 <__malloc_unlock>
 8014060:	e7a1      	b.n	8013fa6 <_malloc_r+0x22>
 8014062:	6025      	str	r5, [r4, #0]
 8014064:	e7de      	b.n	8014024 <_malloc_r+0xa0>
 8014066:	bf00      	nop
 8014068:	20002350 	.word	0x20002350

0801406c <_printf_common>:
 801406c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014070:	4616      	mov	r6, r2
 8014072:	4699      	mov	r9, r3
 8014074:	688a      	ldr	r2, [r1, #8]
 8014076:	690b      	ldr	r3, [r1, #16]
 8014078:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801407c:	4293      	cmp	r3, r2
 801407e:	bfb8      	it	lt
 8014080:	4613      	movlt	r3, r2
 8014082:	6033      	str	r3, [r6, #0]
 8014084:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014088:	4607      	mov	r7, r0
 801408a:	460c      	mov	r4, r1
 801408c:	b10a      	cbz	r2, 8014092 <_printf_common+0x26>
 801408e:	3301      	adds	r3, #1
 8014090:	6033      	str	r3, [r6, #0]
 8014092:	6823      	ldr	r3, [r4, #0]
 8014094:	0699      	lsls	r1, r3, #26
 8014096:	bf42      	ittt	mi
 8014098:	6833      	ldrmi	r3, [r6, #0]
 801409a:	3302      	addmi	r3, #2
 801409c:	6033      	strmi	r3, [r6, #0]
 801409e:	6825      	ldr	r5, [r4, #0]
 80140a0:	f015 0506 	ands.w	r5, r5, #6
 80140a4:	d106      	bne.n	80140b4 <_printf_common+0x48>
 80140a6:	f104 0a19 	add.w	sl, r4, #25
 80140aa:	68e3      	ldr	r3, [r4, #12]
 80140ac:	6832      	ldr	r2, [r6, #0]
 80140ae:	1a9b      	subs	r3, r3, r2
 80140b0:	42ab      	cmp	r3, r5
 80140b2:	dc26      	bgt.n	8014102 <_printf_common+0x96>
 80140b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80140b8:	1e13      	subs	r3, r2, #0
 80140ba:	6822      	ldr	r2, [r4, #0]
 80140bc:	bf18      	it	ne
 80140be:	2301      	movne	r3, #1
 80140c0:	0692      	lsls	r2, r2, #26
 80140c2:	d42b      	bmi.n	801411c <_printf_common+0xb0>
 80140c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80140c8:	4649      	mov	r1, r9
 80140ca:	4638      	mov	r0, r7
 80140cc:	47c0      	blx	r8
 80140ce:	3001      	adds	r0, #1
 80140d0:	d01e      	beq.n	8014110 <_printf_common+0xa4>
 80140d2:	6823      	ldr	r3, [r4, #0]
 80140d4:	68e5      	ldr	r5, [r4, #12]
 80140d6:	6832      	ldr	r2, [r6, #0]
 80140d8:	f003 0306 	and.w	r3, r3, #6
 80140dc:	2b04      	cmp	r3, #4
 80140de:	bf08      	it	eq
 80140e0:	1aad      	subeq	r5, r5, r2
 80140e2:	68a3      	ldr	r3, [r4, #8]
 80140e4:	6922      	ldr	r2, [r4, #16]
 80140e6:	bf0c      	ite	eq
 80140e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80140ec:	2500      	movne	r5, #0
 80140ee:	4293      	cmp	r3, r2
 80140f0:	bfc4      	itt	gt
 80140f2:	1a9b      	subgt	r3, r3, r2
 80140f4:	18ed      	addgt	r5, r5, r3
 80140f6:	2600      	movs	r6, #0
 80140f8:	341a      	adds	r4, #26
 80140fa:	42b5      	cmp	r5, r6
 80140fc:	d11a      	bne.n	8014134 <_printf_common+0xc8>
 80140fe:	2000      	movs	r0, #0
 8014100:	e008      	b.n	8014114 <_printf_common+0xa8>
 8014102:	2301      	movs	r3, #1
 8014104:	4652      	mov	r2, sl
 8014106:	4649      	mov	r1, r9
 8014108:	4638      	mov	r0, r7
 801410a:	47c0      	blx	r8
 801410c:	3001      	adds	r0, #1
 801410e:	d103      	bne.n	8014118 <_printf_common+0xac>
 8014110:	f04f 30ff 	mov.w	r0, #4294967295
 8014114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014118:	3501      	adds	r5, #1
 801411a:	e7c6      	b.n	80140aa <_printf_common+0x3e>
 801411c:	18e1      	adds	r1, r4, r3
 801411e:	1c5a      	adds	r2, r3, #1
 8014120:	2030      	movs	r0, #48	; 0x30
 8014122:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014126:	4422      	add	r2, r4
 8014128:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801412c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014130:	3302      	adds	r3, #2
 8014132:	e7c7      	b.n	80140c4 <_printf_common+0x58>
 8014134:	2301      	movs	r3, #1
 8014136:	4622      	mov	r2, r4
 8014138:	4649      	mov	r1, r9
 801413a:	4638      	mov	r0, r7
 801413c:	47c0      	blx	r8
 801413e:	3001      	adds	r0, #1
 8014140:	d0e6      	beq.n	8014110 <_printf_common+0xa4>
 8014142:	3601      	adds	r6, #1
 8014144:	e7d9      	b.n	80140fa <_printf_common+0x8e>
	...

08014148 <_printf_i>:
 8014148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801414c:	7e0f      	ldrb	r7, [r1, #24]
 801414e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014150:	2f78      	cmp	r7, #120	; 0x78
 8014152:	4691      	mov	r9, r2
 8014154:	4680      	mov	r8, r0
 8014156:	460c      	mov	r4, r1
 8014158:	469a      	mov	sl, r3
 801415a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801415e:	d807      	bhi.n	8014170 <_printf_i+0x28>
 8014160:	2f62      	cmp	r7, #98	; 0x62
 8014162:	d80a      	bhi.n	801417a <_printf_i+0x32>
 8014164:	2f00      	cmp	r7, #0
 8014166:	f000 80d8 	beq.w	801431a <_printf_i+0x1d2>
 801416a:	2f58      	cmp	r7, #88	; 0x58
 801416c:	f000 80a3 	beq.w	80142b6 <_printf_i+0x16e>
 8014170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014174:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014178:	e03a      	b.n	80141f0 <_printf_i+0xa8>
 801417a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801417e:	2b15      	cmp	r3, #21
 8014180:	d8f6      	bhi.n	8014170 <_printf_i+0x28>
 8014182:	a101      	add	r1, pc, #4	; (adr r1, 8014188 <_printf_i+0x40>)
 8014184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014188:	080141e1 	.word	0x080141e1
 801418c:	080141f5 	.word	0x080141f5
 8014190:	08014171 	.word	0x08014171
 8014194:	08014171 	.word	0x08014171
 8014198:	08014171 	.word	0x08014171
 801419c:	08014171 	.word	0x08014171
 80141a0:	080141f5 	.word	0x080141f5
 80141a4:	08014171 	.word	0x08014171
 80141a8:	08014171 	.word	0x08014171
 80141ac:	08014171 	.word	0x08014171
 80141b0:	08014171 	.word	0x08014171
 80141b4:	08014301 	.word	0x08014301
 80141b8:	08014225 	.word	0x08014225
 80141bc:	080142e3 	.word	0x080142e3
 80141c0:	08014171 	.word	0x08014171
 80141c4:	08014171 	.word	0x08014171
 80141c8:	08014323 	.word	0x08014323
 80141cc:	08014171 	.word	0x08014171
 80141d0:	08014225 	.word	0x08014225
 80141d4:	08014171 	.word	0x08014171
 80141d8:	08014171 	.word	0x08014171
 80141dc:	080142eb 	.word	0x080142eb
 80141e0:	682b      	ldr	r3, [r5, #0]
 80141e2:	1d1a      	adds	r2, r3, #4
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	602a      	str	r2, [r5, #0]
 80141e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80141ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80141f0:	2301      	movs	r3, #1
 80141f2:	e0a3      	b.n	801433c <_printf_i+0x1f4>
 80141f4:	6820      	ldr	r0, [r4, #0]
 80141f6:	6829      	ldr	r1, [r5, #0]
 80141f8:	0606      	lsls	r6, r0, #24
 80141fa:	f101 0304 	add.w	r3, r1, #4
 80141fe:	d50a      	bpl.n	8014216 <_printf_i+0xce>
 8014200:	680e      	ldr	r6, [r1, #0]
 8014202:	602b      	str	r3, [r5, #0]
 8014204:	2e00      	cmp	r6, #0
 8014206:	da03      	bge.n	8014210 <_printf_i+0xc8>
 8014208:	232d      	movs	r3, #45	; 0x2d
 801420a:	4276      	negs	r6, r6
 801420c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014210:	485e      	ldr	r0, [pc, #376]	; (801438c <_printf_i+0x244>)
 8014212:	230a      	movs	r3, #10
 8014214:	e019      	b.n	801424a <_printf_i+0x102>
 8014216:	680e      	ldr	r6, [r1, #0]
 8014218:	602b      	str	r3, [r5, #0]
 801421a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801421e:	bf18      	it	ne
 8014220:	b236      	sxthne	r6, r6
 8014222:	e7ef      	b.n	8014204 <_printf_i+0xbc>
 8014224:	682b      	ldr	r3, [r5, #0]
 8014226:	6820      	ldr	r0, [r4, #0]
 8014228:	1d19      	adds	r1, r3, #4
 801422a:	6029      	str	r1, [r5, #0]
 801422c:	0601      	lsls	r1, r0, #24
 801422e:	d501      	bpl.n	8014234 <_printf_i+0xec>
 8014230:	681e      	ldr	r6, [r3, #0]
 8014232:	e002      	b.n	801423a <_printf_i+0xf2>
 8014234:	0646      	lsls	r6, r0, #25
 8014236:	d5fb      	bpl.n	8014230 <_printf_i+0xe8>
 8014238:	881e      	ldrh	r6, [r3, #0]
 801423a:	4854      	ldr	r0, [pc, #336]	; (801438c <_printf_i+0x244>)
 801423c:	2f6f      	cmp	r7, #111	; 0x6f
 801423e:	bf0c      	ite	eq
 8014240:	2308      	moveq	r3, #8
 8014242:	230a      	movne	r3, #10
 8014244:	2100      	movs	r1, #0
 8014246:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801424a:	6865      	ldr	r5, [r4, #4]
 801424c:	60a5      	str	r5, [r4, #8]
 801424e:	2d00      	cmp	r5, #0
 8014250:	bfa2      	ittt	ge
 8014252:	6821      	ldrge	r1, [r4, #0]
 8014254:	f021 0104 	bicge.w	r1, r1, #4
 8014258:	6021      	strge	r1, [r4, #0]
 801425a:	b90e      	cbnz	r6, 8014260 <_printf_i+0x118>
 801425c:	2d00      	cmp	r5, #0
 801425e:	d04d      	beq.n	80142fc <_printf_i+0x1b4>
 8014260:	4615      	mov	r5, r2
 8014262:	fbb6 f1f3 	udiv	r1, r6, r3
 8014266:	fb03 6711 	mls	r7, r3, r1, r6
 801426a:	5dc7      	ldrb	r7, [r0, r7]
 801426c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014270:	4637      	mov	r7, r6
 8014272:	42bb      	cmp	r3, r7
 8014274:	460e      	mov	r6, r1
 8014276:	d9f4      	bls.n	8014262 <_printf_i+0x11a>
 8014278:	2b08      	cmp	r3, #8
 801427a:	d10b      	bne.n	8014294 <_printf_i+0x14c>
 801427c:	6823      	ldr	r3, [r4, #0]
 801427e:	07de      	lsls	r6, r3, #31
 8014280:	d508      	bpl.n	8014294 <_printf_i+0x14c>
 8014282:	6923      	ldr	r3, [r4, #16]
 8014284:	6861      	ldr	r1, [r4, #4]
 8014286:	4299      	cmp	r1, r3
 8014288:	bfde      	ittt	le
 801428a:	2330      	movle	r3, #48	; 0x30
 801428c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014290:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014294:	1b52      	subs	r2, r2, r5
 8014296:	6122      	str	r2, [r4, #16]
 8014298:	f8cd a000 	str.w	sl, [sp]
 801429c:	464b      	mov	r3, r9
 801429e:	aa03      	add	r2, sp, #12
 80142a0:	4621      	mov	r1, r4
 80142a2:	4640      	mov	r0, r8
 80142a4:	f7ff fee2 	bl	801406c <_printf_common>
 80142a8:	3001      	adds	r0, #1
 80142aa:	d14c      	bne.n	8014346 <_printf_i+0x1fe>
 80142ac:	f04f 30ff 	mov.w	r0, #4294967295
 80142b0:	b004      	add	sp, #16
 80142b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142b6:	4835      	ldr	r0, [pc, #212]	; (801438c <_printf_i+0x244>)
 80142b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80142bc:	6829      	ldr	r1, [r5, #0]
 80142be:	6823      	ldr	r3, [r4, #0]
 80142c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80142c4:	6029      	str	r1, [r5, #0]
 80142c6:	061d      	lsls	r5, r3, #24
 80142c8:	d514      	bpl.n	80142f4 <_printf_i+0x1ac>
 80142ca:	07df      	lsls	r7, r3, #31
 80142cc:	bf44      	itt	mi
 80142ce:	f043 0320 	orrmi.w	r3, r3, #32
 80142d2:	6023      	strmi	r3, [r4, #0]
 80142d4:	b91e      	cbnz	r6, 80142de <_printf_i+0x196>
 80142d6:	6823      	ldr	r3, [r4, #0]
 80142d8:	f023 0320 	bic.w	r3, r3, #32
 80142dc:	6023      	str	r3, [r4, #0]
 80142de:	2310      	movs	r3, #16
 80142e0:	e7b0      	b.n	8014244 <_printf_i+0xfc>
 80142e2:	6823      	ldr	r3, [r4, #0]
 80142e4:	f043 0320 	orr.w	r3, r3, #32
 80142e8:	6023      	str	r3, [r4, #0]
 80142ea:	2378      	movs	r3, #120	; 0x78
 80142ec:	4828      	ldr	r0, [pc, #160]	; (8014390 <_printf_i+0x248>)
 80142ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80142f2:	e7e3      	b.n	80142bc <_printf_i+0x174>
 80142f4:	0659      	lsls	r1, r3, #25
 80142f6:	bf48      	it	mi
 80142f8:	b2b6      	uxthmi	r6, r6
 80142fa:	e7e6      	b.n	80142ca <_printf_i+0x182>
 80142fc:	4615      	mov	r5, r2
 80142fe:	e7bb      	b.n	8014278 <_printf_i+0x130>
 8014300:	682b      	ldr	r3, [r5, #0]
 8014302:	6826      	ldr	r6, [r4, #0]
 8014304:	6961      	ldr	r1, [r4, #20]
 8014306:	1d18      	adds	r0, r3, #4
 8014308:	6028      	str	r0, [r5, #0]
 801430a:	0635      	lsls	r5, r6, #24
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	d501      	bpl.n	8014314 <_printf_i+0x1cc>
 8014310:	6019      	str	r1, [r3, #0]
 8014312:	e002      	b.n	801431a <_printf_i+0x1d2>
 8014314:	0670      	lsls	r0, r6, #25
 8014316:	d5fb      	bpl.n	8014310 <_printf_i+0x1c8>
 8014318:	8019      	strh	r1, [r3, #0]
 801431a:	2300      	movs	r3, #0
 801431c:	6123      	str	r3, [r4, #16]
 801431e:	4615      	mov	r5, r2
 8014320:	e7ba      	b.n	8014298 <_printf_i+0x150>
 8014322:	682b      	ldr	r3, [r5, #0]
 8014324:	1d1a      	adds	r2, r3, #4
 8014326:	602a      	str	r2, [r5, #0]
 8014328:	681d      	ldr	r5, [r3, #0]
 801432a:	6862      	ldr	r2, [r4, #4]
 801432c:	2100      	movs	r1, #0
 801432e:	4628      	mov	r0, r5
 8014330:	f7eb ff2e 	bl	8000190 <memchr>
 8014334:	b108      	cbz	r0, 801433a <_printf_i+0x1f2>
 8014336:	1b40      	subs	r0, r0, r5
 8014338:	6060      	str	r0, [r4, #4]
 801433a:	6863      	ldr	r3, [r4, #4]
 801433c:	6123      	str	r3, [r4, #16]
 801433e:	2300      	movs	r3, #0
 8014340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014344:	e7a8      	b.n	8014298 <_printf_i+0x150>
 8014346:	6923      	ldr	r3, [r4, #16]
 8014348:	462a      	mov	r2, r5
 801434a:	4649      	mov	r1, r9
 801434c:	4640      	mov	r0, r8
 801434e:	47d0      	blx	sl
 8014350:	3001      	adds	r0, #1
 8014352:	d0ab      	beq.n	80142ac <_printf_i+0x164>
 8014354:	6823      	ldr	r3, [r4, #0]
 8014356:	079b      	lsls	r3, r3, #30
 8014358:	d413      	bmi.n	8014382 <_printf_i+0x23a>
 801435a:	68e0      	ldr	r0, [r4, #12]
 801435c:	9b03      	ldr	r3, [sp, #12]
 801435e:	4298      	cmp	r0, r3
 8014360:	bfb8      	it	lt
 8014362:	4618      	movlt	r0, r3
 8014364:	e7a4      	b.n	80142b0 <_printf_i+0x168>
 8014366:	2301      	movs	r3, #1
 8014368:	4632      	mov	r2, r6
 801436a:	4649      	mov	r1, r9
 801436c:	4640      	mov	r0, r8
 801436e:	47d0      	blx	sl
 8014370:	3001      	adds	r0, #1
 8014372:	d09b      	beq.n	80142ac <_printf_i+0x164>
 8014374:	3501      	adds	r5, #1
 8014376:	68e3      	ldr	r3, [r4, #12]
 8014378:	9903      	ldr	r1, [sp, #12]
 801437a:	1a5b      	subs	r3, r3, r1
 801437c:	42ab      	cmp	r3, r5
 801437e:	dcf2      	bgt.n	8014366 <_printf_i+0x21e>
 8014380:	e7eb      	b.n	801435a <_printf_i+0x212>
 8014382:	2500      	movs	r5, #0
 8014384:	f104 0619 	add.w	r6, r4, #25
 8014388:	e7f5      	b.n	8014376 <_printf_i+0x22e>
 801438a:	bf00      	nop
 801438c:	08014fe8 	.word	0x08014fe8
 8014390:	08014ff9 	.word	0x08014ff9

08014394 <_sbrk_r>:
 8014394:	b538      	push	{r3, r4, r5, lr}
 8014396:	4d06      	ldr	r5, [pc, #24]	; (80143b0 <_sbrk_r+0x1c>)
 8014398:	2300      	movs	r3, #0
 801439a:	4604      	mov	r4, r0
 801439c:	4608      	mov	r0, r1
 801439e:	602b      	str	r3, [r5, #0]
 80143a0:	f7ed fb04 	bl	80019ac <_sbrk>
 80143a4:	1c43      	adds	r3, r0, #1
 80143a6:	d102      	bne.n	80143ae <_sbrk_r+0x1a>
 80143a8:	682b      	ldr	r3, [r5, #0]
 80143aa:	b103      	cbz	r3, 80143ae <_sbrk_r+0x1a>
 80143ac:	6023      	str	r3, [r4, #0]
 80143ae:	bd38      	pop	{r3, r4, r5, pc}
 80143b0:	20002358 	.word	0x20002358

080143b4 <siprintf>:
 80143b4:	b40e      	push	{r1, r2, r3}
 80143b6:	b500      	push	{lr}
 80143b8:	b09c      	sub	sp, #112	; 0x70
 80143ba:	ab1d      	add	r3, sp, #116	; 0x74
 80143bc:	9002      	str	r0, [sp, #8]
 80143be:	9006      	str	r0, [sp, #24]
 80143c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80143c4:	4809      	ldr	r0, [pc, #36]	; (80143ec <siprintf+0x38>)
 80143c6:	9107      	str	r1, [sp, #28]
 80143c8:	9104      	str	r1, [sp, #16]
 80143ca:	4909      	ldr	r1, [pc, #36]	; (80143f0 <siprintf+0x3c>)
 80143cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80143d0:	9105      	str	r1, [sp, #20]
 80143d2:	6800      	ldr	r0, [r0, #0]
 80143d4:	9301      	str	r3, [sp, #4]
 80143d6:	a902      	add	r1, sp, #8
 80143d8:	f000 f8c4 	bl	8014564 <_svfiprintf_r>
 80143dc:	9b02      	ldr	r3, [sp, #8]
 80143de:	2200      	movs	r2, #0
 80143e0:	701a      	strb	r2, [r3, #0]
 80143e2:	b01c      	add	sp, #112	; 0x70
 80143e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80143e8:	b003      	add	sp, #12
 80143ea:	4770      	bx	lr
 80143ec:	2000045c 	.word	0x2000045c
 80143f0:	ffff0208 	.word	0xffff0208

080143f4 <strcpy>:
 80143f4:	4603      	mov	r3, r0
 80143f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80143fa:	f803 2b01 	strb.w	r2, [r3], #1
 80143fe:	2a00      	cmp	r2, #0
 8014400:	d1f9      	bne.n	80143f6 <strcpy+0x2>
 8014402:	4770      	bx	lr

08014404 <memmove>:
 8014404:	4288      	cmp	r0, r1
 8014406:	b510      	push	{r4, lr}
 8014408:	eb01 0402 	add.w	r4, r1, r2
 801440c:	d902      	bls.n	8014414 <memmove+0x10>
 801440e:	4284      	cmp	r4, r0
 8014410:	4623      	mov	r3, r4
 8014412:	d807      	bhi.n	8014424 <memmove+0x20>
 8014414:	1e43      	subs	r3, r0, #1
 8014416:	42a1      	cmp	r1, r4
 8014418:	d008      	beq.n	801442c <memmove+0x28>
 801441a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801441e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014422:	e7f8      	b.n	8014416 <memmove+0x12>
 8014424:	4402      	add	r2, r0
 8014426:	4601      	mov	r1, r0
 8014428:	428a      	cmp	r2, r1
 801442a:	d100      	bne.n	801442e <memmove+0x2a>
 801442c:	bd10      	pop	{r4, pc}
 801442e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014432:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014436:	e7f7      	b.n	8014428 <memmove+0x24>

08014438 <__malloc_lock>:
 8014438:	4801      	ldr	r0, [pc, #4]	; (8014440 <__malloc_lock+0x8>)
 801443a:	f7ff bd1f 	b.w	8013e7c <__retarget_lock_acquire_recursive>
 801443e:	bf00      	nop
 8014440:	2000234c 	.word	0x2000234c

08014444 <__malloc_unlock>:
 8014444:	4801      	ldr	r0, [pc, #4]	; (801444c <__malloc_unlock+0x8>)
 8014446:	f7ff bd1a 	b.w	8013e7e <__retarget_lock_release_recursive>
 801444a:	bf00      	nop
 801444c:	2000234c 	.word	0x2000234c

08014450 <_realloc_r>:
 8014450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014454:	4680      	mov	r8, r0
 8014456:	4614      	mov	r4, r2
 8014458:	460e      	mov	r6, r1
 801445a:	b921      	cbnz	r1, 8014466 <_realloc_r+0x16>
 801445c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014460:	4611      	mov	r1, r2
 8014462:	f7ff bd8f 	b.w	8013f84 <_malloc_r>
 8014466:	b92a      	cbnz	r2, 8014474 <_realloc_r+0x24>
 8014468:	f7ff fd20 	bl	8013eac <_free_r>
 801446c:	4625      	mov	r5, r4
 801446e:	4628      	mov	r0, r5
 8014470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014474:	f000 f976 	bl	8014764 <_malloc_usable_size_r>
 8014478:	4284      	cmp	r4, r0
 801447a:	4607      	mov	r7, r0
 801447c:	d802      	bhi.n	8014484 <_realloc_r+0x34>
 801447e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014482:	d812      	bhi.n	80144aa <_realloc_r+0x5a>
 8014484:	4621      	mov	r1, r4
 8014486:	4640      	mov	r0, r8
 8014488:	f7ff fd7c 	bl	8013f84 <_malloc_r>
 801448c:	4605      	mov	r5, r0
 801448e:	2800      	cmp	r0, #0
 8014490:	d0ed      	beq.n	801446e <_realloc_r+0x1e>
 8014492:	42bc      	cmp	r4, r7
 8014494:	4622      	mov	r2, r4
 8014496:	4631      	mov	r1, r6
 8014498:	bf28      	it	cs
 801449a:	463a      	movcs	r2, r7
 801449c:	f7ff fcf0 	bl	8013e80 <memcpy>
 80144a0:	4631      	mov	r1, r6
 80144a2:	4640      	mov	r0, r8
 80144a4:	f7ff fd02 	bl	8013eac <_free_r>
 80144a8:	e7e1      	b.n	801446e <_realloc_r+0x1e>
 80144aa:	4635      	mov	r5, r6
 80144ac:	e7df      	b.n	801446e <_realloc_r+0x1e>

080144ae <__ssputs_r>:
 80144ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144b2:	688e      	ldr	r6, [r1, #8]
 80144b4:	429e      	cmp	r6, r3
 80144b6:	4682      	mov	sl, r0
 80144b8:	460c      	mov	r4, r1
 80144ba:	4690      	mov	r8, r2
 80144bc:	461f      	mov	r7, r3
 80144be:	d838      	bhi.n	8014532 <__ssputs_r+0x84>
 80144c0:	898a      	ldrh	r2, [r1, #12]
 80144c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80144c6:	d032      	beq.n	801452e <__ssputs_r+0x80>
 80144c8:	6825      	ldr	r5, [r4, #0]
 80144ca:	6909      	ldr	r1, [r1, #16]
 80144cc:	eba5 0901 	sub.w	r9, r5, r1
 80144d0:	6965      	ldr	r5, [r4, #20]
 80144d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80144d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80144da:	3301      	adds	r3, #1
 80144dc:	444b      	add	r3, r9
 80144de:	106d      	asrs	r5, r5, #1
 80144e0:	429d      	cmp	r5, r3
 80144e2:	bf38      	it	cc
 80144e4:	461d      	movcc	r5, r3
 80144e6:	0553      	lsls	r3, r2, #21
 80144e8:	d531      	bpl.n	801454e <__ssputs_r+0xa0>
 80144ea:	4629      	mov	r1, r5
 80144ec:	f7ff fd4a 	bl	8013f84 <_malloc_r>
 80144f0:	4606      	mov	r6, r0
 80144f2:	b950      	cbnz	r0, 801450a <__ssputs_r+0x5c>
 80144f4:	230c      	movs	r3, #12
 80144f6:	f8ca 3000 	str.w	r3, [sl]
 80144fa:	89a3      	ldrh	r3, [r4, #12]
 80144fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014500:	81a3      	strh	r3, [r4, #12]
 8014502:	f04f 30ff 	mov.w	r0, #4294967295
 8014506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801450a:	6921      	ldr	r1, [r4, #16]
 801450c:	464a      	mov	r2, r9
 801450e:	f7ff fcb7 	bl	8013e80 <memcpy>
 8014512:	89a3      	ldrh	r3, [r4, #12]
 8014514:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801451c:	81a3      	strh	r3, [r4, #12]
 801451e:	6126      	str	r6, [r4, #16]
 8014520:	6165      	str	r5, [r4, #20]
 8014522:	444e      	add	r6, r9
 8014524:	eba5 0509 	sub.w	r5, r5, r9
 8014528:	6026      	str	r6, [r4, #0]
 801452a:	60a5      	str	r5, [r4, #8]
 801452c:	463e      	mov	r6, r7
 801452e:	42be      	cmp	r6, r7
 8014530:	d900      	bls.n	8014534 <__ssputs_r+0x86>
 8014532:	463e      	mov	r6, r7
 8014534:	6820      	ldr	r0, [r4, #0]
 8014536:	4632      	mov	r2, r6
 8014538:	4641      	mov	r1, r8
 801453a:	f7ff ff63 	bl	8014404 <memmove>
 801453e:	68a3      	ldr	r3, [r4, #8]
 8014540:	1b9b      	subs	r3, r3, r6
 8014542:	60a3      	str	r3, [r4, #8]
 8014544:	6823      	ldr	r3, [r4, #0]
 8014546:	4433      	add	r3, r6
 8014548:	6023      	str	r3, [r4, #0]
 801454a:	2000      	movs	r0, #0
 801454c:	e7db      	b.n	8014506 <__ssputs_r+0x58>
 801454e:	462a      	mov	r2, r5
 8014550:	f7ff ff7e 	bl	8014450 <_realloc_r>
 8014554:	4606      	mov	r6, r0
 8014556:	2800      	cmp	r0, #0
 8014558:	d1e1      	bne.n	801451e <__ssputs_r+0x70>
 801455a:	6921      	ldr	r1, [r4, #16]
 801455c:	4650      	mov	r0, sl
 801455e:	f7ff fca5 	bl	8013eac <_free_r>
 8014562:	e7c7      	b.n	80144f4 <__ssputs_r+0x46>

08014564 <_svfiprintf_r>:
 8014564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014568:	4698      	mov	r8, r3
 801456a:	898b      	ldrh	r3, [r1, #12]
 801456c:	061b      	lsls	r3, r3, #24
 801456e:	b09d      	sub	sp, #116	; 0x74
 8014570:	4607      	mov	r7, r0
 8014572:	460d      	mov	r5, r1
 8014574:	4614      	mov	r4, r2
 8014576:	d50e      	bpl.n	8014596 <_svfiprintf_r+0x32>
 8014578:	690b      	ldr	r3, [r1, #16]
 801457a:	b963      	cbnz	r3, 8014596 <_svfiprintf_r+0x32>
 801457c:	2140      	movs	r1, #64	; 0x40
 801457e:	f7ff fd01 	bl	8013f84 <_malloc_r>
 8014582:	6028      	str	r0, [r5, #0]
 8014584:	6128      	str	r0, [r5, #16]
 8014586:	b920      	cbnz	r0, 8014592 <_svfiprintf_r+0x2e>
 8014588:	230c      	movs	r3, #12
 801458a:	603b      	str	r3, [r7, #0]
 801458c:	f04f 30ff 	mov.w	r0, #4294967295
 8014590:	e0d1      	b.n	8014736 <_svfiprintf_r+0x1d2>
 8014592:	2340      	movs	r3, #64	; 0x40
 8014594:	616b      	str	r3, [r5, #20]
 8014596:	2300      	movs	r3, #0
 8014598:	9309      	str	r3, [sp, #36]	; 0x24
 801459a:	2320      	movs	r3, #32
 801459c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80145a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80145a4:	2330      	movs	r3, #48	; 0x30
 80145a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014750 <_svfiprintf_r+0x1ec>
 80145aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80145ae:	f04f 0901 	mov.w	r9, #1
 80145b2:	4623      	mov	r3, r4
 80145b4:	469a      	mov	sl, r3
 80145b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80145ba:	b10a      	cbz	r2, 80145c0 <_svfiprintf_r+0x5c>
 80145bc:	2a25      	cmp	r2, #37	; 0x25
 80145be:	d1f9      	bne.n	80145b4 <_svfiprintf_r+0x50>
 80145c0:	ebba 0b04 	subs.w	fp, sl, r4
 80145c4:	d00b      	beq.n	80145de <_svfiprintf_r+0x7a>
 80145c6:	465b      	mov	r3, fp
 80145c8:	4622      	mov	r2, r4
 80145ca:	4629      	mov	r1, r5
 80145cc:	4638      	mov	r0, r7
 80145ce:	f7ff ff6e 	bl	80144ae <__ssputs_r>
 80145d2:	3001      	adds	r0, #1
 80145d4:	f000 80aa 	beq.w	801472c <_svfiprintf_r+0x1c8>
 80145d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80145da:	445a      	add	r2, fp
 80145dc:	9209      	str	r2, [sp, #36]	; 0x24
 80145de:	f89a 3000 	ldrb.w	r3, [sl]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	f000 80a2 	beq.w	801472c <_svfiprintf_r+0x1c8>
 80145e8:	2300      	movs	r3, #0
 80145ea:	f04f 32ff 	mov.w	r2, #4294967295
 80145ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80145f2:	f10a 0a01 	add.w	sl, sl, #1
 80145f6:	9304      	str	r3, [sp, #16]
 80145f8:	9307      	str	r3, [sp, #28]
 80145fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80145fe:	931a      	str	r3, [sp, #104]	; 0x68
 8014600:	4654      	mov	r4, sl
 8014602:	2205      	movs	r2, #5
 8014604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014608:	4851      	ldr	r0, [pc, #324]	; (8014750 <_svfiprintf_r+0x1ec>)
 801460a:	f7eb fdc1 	bl	8000190 <memchr>
 801460e:	9a04      	ldr	r2, [sp, #16]
 8014610:	b9d8      	cbnz	r0, 801464a <_svfiprintf_r+0xe6>
 8014612:	06d0      	lsls	r0, r2, #27
 8014614:	bf44      	itt	mi
 8014616:	2320      	movmi	r3, #32
 8014618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801461c:	0711      	lsls	r1, r2, #28
 801461e:	bf44      	itt	mi
 8014620:	232b      	movmi	r3, #43	; 0x2b
 8014622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014626:	f89a 3000 	ldrb.w	r3, [sl]
 801462a:	2b2a      	cmp	r3, #42	; 0x2a
 801462c:	d015      	beq.n	801465a <_svfiprintf_r+0xf6>
 801462e:	9a07      	ldr	r2, [sp, #28]
 8014630:	4654      	mov	r4, sl
 8014632:	2000      	movs	r0, #0
 8014634:	f04f 0c0a 	mov.w	ip, #10
 8014638:	4621      	mov	r1, r4
 801463a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801463e:	3b30      	subs	r3, #48	; 0x30
 8014640:	2b09      	cmp	r3, #9
 8014642:	d94e      	bls.n	80146e2 <_svfiprintf_r+0x17e>
 8014644:	b1b0      	cbz	r0, 8014674 <_svfiprintf_r+0x110>
 8014646:	9207      	str	r2, [sp, #28]
 8014648:	e014      	b.n	8014674 <_svfiprintf_r+0x110>
 801464a:	eba0 0308 	sub.w	r3, r0, r8
 801464e:	fa09 f303 	lsl.w	r3, r9, r3
 8014652:	4313      	orrs	r3, r2
 8014654:	9304      	str	r3, [sp, #16]
 8014656:	46a2      	mov	sl, r4
 8014658:	e7d2      	b.n	8014600 <_svfiprintf_r+0x9c>
 801465a:	9b03      	ldr	r3, [sp, #12]
 801465c:	1d19      	adds	r1, r3, #4
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	9103      	str	r1, [sp, #12]
 8014662:	2b00      	cmp	r3, #0
 8014664:	bfbb      	ittet	lt
 8014666:	425b      	neglt	r3, r3
 8014668:	f042 0202 	orrlt.w	r2, r2, #2
 801466c:	9307      	strge	r3, [sp, #28]
 801466e:	9307      	strlt	r3, [sp, #28]
 8014670:	bfb8      	it	lt
 8014672:	9204      	strlt	r2, [sp, #16]
 8014674:	7823      	ldrb	r3, [r4, #0]
 8014676:	2b2e      	cmp	r3, #46	; 0x2e
 8014678:	d10c      	bne.n	8014694 <_svfiprintf_r+0x130>
 801467a:	7863      	ldrb	r3, [r4, #1]
 801467c:	2b2a      	cmp	r3, #42	; 0x2a
 801467e:	d135      	bne.n	80146ec <_svfiprintf_r+0x188>
 8014680:	9b03      	ldr	r3, [sp, #12]
 8014682:	1d1a      	adds	r2, r3, #4
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	9203      	str	r2, [sp, #12]
 8014688:	2b00      	cmp	r3, #0
 801468a:	bfb8      	it	lt
 801468c:	f04f 33ff 	movlt.w	r3, #4294967295
 8014690:	3402      	adds	r4, #2
 8014692:	9305      	str	r3, [sp, #20]
 8014694:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014760 <_svfiprintf_r+0x1fc>
 8014698:	7821      	ldrb	r1, [r4, #0]
 801469a:	2203      	movs	r2, #3
 801469c:	4650      	mov	r0, sl
 801469e:	f7eb fd77 	bl	8000190 <memchr>
 80146a2:	b140      	cbz	r0, 80146b6 <_svfiprintf_r+0x152>
 80146a4:	2340      	movs	r3, #64	; 0x40
 80146a6:	eba0 000a 	sub.w	r0, r0, sl
 80146aa:	fa03 f000 	lsl.w	r0, r3, r0
 80146ae:	9b04      	ldr	r3, [sp, #16]
 80146b0:	4303      	orrs	r3, r0
 80146b2:	3401      	adds	r4, #1
 80146b4:	9304      	str	r3, [sp, #16]
 80146b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146ba:	4826      	ldr	r0, [pc, #152]	; (8014754 <_svfiprintf_r+0x1f0>)
 80146bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80146c0:	2206      	movs	r2, #6
 80146c2:	f7eb fd65 	bl	8000190 <memchr>
 80146c6:	2800      	cmp	r0, #0
 80146c8:	d038      	beq.n	801473c <_svfiprintf_r+0x1d8>
 80146ca:	4b23      	ldr	r3, [pc, #140]	; (8014758 <_svfiprintf_r+0x1f4>)
 80146cc:	bb1b      	cbnz	r3, 8014716 <_svfiprintf_r+0x1b2>
 80146ce:	9b03      	ldr	r3, [sp, #12]
 80146d0:	3307      	adds	r3, #7
 80146d2:	f023 0307 	bic.w	r3, r3, #7
 80146d6:	3308      	adds	r3, #8
 80146d8:	9303      	str	r3, [sp, #12]
 80146da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146dc:	4433      	add	r3, r6
 80146de:	9309      	str	r3, [sp, #36]	; 0x24
 80146e0:	e767      	b.n	80145b2 <_svfiprintf_r+0x4e>
 80146e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80146e6:	460c      	mov	r4, r1
 80146e8:	2001      	movs	r0, #1
 80146ea:	e7a5      	b.n	8014638 <_svfiprintf_r+0xd4>
 80146ec:	2300      	movs	r3, #0
 80146ee:	3401      	adds	r4, #1
 80146f0:	9305      	str	r3, [sp, #20]
 80146f2:	4619      	mov	r1, r3
 80146f4:	f04f 0c0a 	mov.w	ip, #10
 80146f8:	4620      	mov	r0, r4
 80146fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80146fe:	3a30      	subs	r2, #48	; 0x30
 8014700:	2a09      	cmp	r2, #9
 8014702:	d903      	bls.n	801470c <_svfiprintf_r+0x1a8>
 8014704:	2b00      	cmp	r3, #0
 8014706:	d0c5      	beq.n	8014694 <_svfiprintf_r+0x130>
 8014708:	9105      	str	r1, [sp, #20]
 801470a:	e7c3      	b.n	8014694 <_svfiprintf_r+0x130>
 801470c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014710:	4604      	mov	r4, r0
 8014712:	2301      	movs	r3, #1
 8014714:	e7f0      	b.n	80146f8 <_svfiprintf_r+0x194>
 8014716:	ab03      	add	r3, sp, #12
 8014718:	9300      	str	r3, [sp, #0]
 801471a:	462a      	mov	r2, r5
 801471c:	4b0f      	ldr	r3, [pc, #60]	; (801475c <_svfiprintf_r+0x1f8>)
 801471e:	a904      	add	r1, sp, #16
 8014720:	4638      	mov	r0, r7
 8014722:	f3af 8000 	nop.w
 8014726:	1c42      	adds	r2, r0, #1
 8014728:	4606      	mov	r6, r0
 801472a:	d1d6      	bne.n	80146da <_svfiprintf_r+0x176>
 801472c:	89ab      	ldrh	r3, [r5, #12]
 801472e:	065b      	lsls	r3, r3, #25
 8014730:	f53f af2c 	bmi.w	801458c <_svfiprintf_r+0x28>
 8014734:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014736:	b01d      	add	sp, #116	; 0x74
 8014738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801473c:	ab03      	add	r3, sp, #12
 801473e:	9300      	str	r3, [sp, #0]
 8014740:	462a      	mov	r2, r5
 8014742:	4b06      	ldr	r3, [pc, #24]	; (801475c <_svfiprintf_r+0x1f8>)
 8014744:	a904      	add	r1, sp, #16
 8014746:	4638      	mov	r0, r7
 8014748:	f7ff fcfe 	bl	8014148 <_printf_i>
 801474c:	e7eb      	b.n	8014726 <_svfiprintf_r+0x1c2>
 801474e:	bf00      	nop
 8014750:	0801500a 	.word	0x0801500a
 8014754:	08015014 	.word	0x08015014
 8014758:	00000000 	.word	0x00000000
 801475c:	080144af 	.word	0x080144af
 8014760:	08015010 	.word	0x08015010

08014764 <_malloc_usable_size_r>:
 8014764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014768:	1f18      	subs	r0, r3, #4
 801476a:	2b00      	cmp	r3, #0
 801476c:	bfbc      	itt	lt
 801476e:	580b      	ldrlt	r3, [r1, r0]
 8014770:	18c0      	addlt	r0, r0, r3
 8014772:	4770      	bx	lr

08014774 <_init>:
 8014774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014776:	bf00      	nop
 8014778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801477a:	bc08      	pop	{r3}
 801477c:	469e      	mov	lr, r3
 801477e:	4770      	bx	lr

08014780 <_fini>:
 8014780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014782:	bf00      	nop
 8014784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014786:	bc08      	pop	{r3}
 8014788:	469e      	mov	lr, r3
 801478a:	4770      	bx	lr
